/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.3
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CFight swig_types[0]
#define SWIGTYPE_p_CScene swig_types[1]
#define SWIGTYPE_p_CUser swig_types[2]
#define SWIGTYPE_p_IntArr swig_types[3]
#define SWIGTYPE_p_SItemInstance swig_types[4]
#define SWIGTYPE_p_SItemTemplate swig_types[5]
#define SWIGTYPE_p_SMonsterTmpl swig_types[6]
#define SWIGTYPE_p_SNpcPos swig_types[7]
#define SWIGTYPE_p_SPet swig_types[8]
#define SWIGTYPE_p_SResInfo swig_types[9]
#define SWIGTYPE_p_STongJiInfo swig_types[10]
#define SWIGTYPE_p_SUserAward swig_types[11]
#define SWIGTYPE_p_SharePetPtr swig_types[12]
#define SWIGTYPE_p_char swig_types[13]
#define SWIGTYPE_p_int swig_types[14]
#define SWIGTYPE_p_listT_uint32_t swig_types[15]
#define SWIGTYPE_p_std__string swig_types[16]
#define SWIGTYPE_p_time_t swig_types[17]
#define SWIGTYPE_p_uint16 swig_types[18]
#define SWIGTYPE_p_uint32 swig_types[19]
#define SWIGTYPE_p_uint8 swig_types[20]
static swig_type_info *swig_types[22];
static swig_module_info swig_module = {swig_types, 21, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "j"
#define SWIG_init      luaopen_j
#define SWIG_init_user luaopen_j_user

#define SWIG_LUACODE   luaopen_j_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "script_call.h"
#include "scene_manager.h"
#include "user.h"
#include "item.h"
#include "monster.h"
#include "fight.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


	#include <string>


typedef int IntArr;

SWIGINTERN IntArr *new_IntArr(int nelements){
  return new int[nelements];
}
SWIGINTERN void delete_IntArr(IntArr *self){
  delete [] self;
}
SWIGINTERN int IntArr_getitem(IntArr *self,int index){
  return self[index];
}
SWIGINTERN void IntArr_setitem(IntArr *self,int index,int value){
  self[index] = value;
}
SWIGINTERN int *IntArr_cast(IntArr *self){
  return self;
}
SWIGINTERN IntArr *IntArr_frompointer(int *t){
  return (IntArr *) t;
}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_SNpcPos_sceneId_set(lua_State* L) {
  int SWIG_arg = 0;
  SNpcPos *arg1 = (SNpcPos *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sceneId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sceneId",1,"SNpcPos *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sceneId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SNpcPos,0))){
    SWIG_fail_ptr("SNpcPos_sceneId_set",1,SWIGTYPE_p_SNpcPos);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sceneId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SNpcPos_sceneId_get(lua_State* L) {
  int SWIG_arg = 0;
  SNpcPos *arg1 = (SNpcPos *) 0 ;
  int result;
  
  SWIG_check_num_args("sceneId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sceneId",1,"SNpcPos *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SNpcPos,0))){
    SWIG_fail_ptr("SNpcPos_sceneId_get",1,SWIGTYPE_p_SNpcPos);
  }
  
  result = (int) ((arg1)->sceneId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SNpcPos_x_set(lua_State* L) {
  int SWIG_arg = 0;
  SNpcPos *arg1 = (SNpcPos *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"SNpcPos *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SNpcPos,0))){
    SWIG_fail_ptr("SNpcPos_x_set",1,SWIGTYPE_p_SNpcPos);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SNpcPos_x_get(lua_State* L) {
  int SWIG_arg = 0;
  SNpcPos *arg1 = (SNpcPos *) 0 ;
  int result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"SNpcPos *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SNpcPos,0))){
    SWIG_fail_ptr("SNpcPos_x_get",1,SWIGTYPE_p_SNpcPos);
  }
  
  result = (int) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SNpcPos_y_set(lua_State* L) {
  int SWIG_arg = 0;
  SNpcPos *arg1 = (SNpcPos *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"SNpcPos *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SNpcPos,0))){
    SWIG_fail_ptr("SNpcPos_y_set",1,SWIGTYPE_p_SNpcPos);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SNpcPos_y_get(lua_State* L) {
  int SWIG_arg = 0;
  SNpcPos *arg1 = (SNpcPos *) 0 ;
  int result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"SNpcPos *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SNpcPos,0))){
    SWIG_fail_ptr("SNpcPos_y_get",1,SWIGTYPE_p_SNpcPos);
  }
  
  result = (int) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SNpcPos(lua_State* L) {
  int SWIG_arg = 0;
  SNpcPos *result = 0 ;
  
  SWIG_check_num_args("SNpcPos::SNpcPos",0,0)
  result = (SNpcPos *)new SNpcPos();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SNpcPos,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SNpcPos(void *obj) {
SNpcPos *arg1 = (SNpcPos *) obj;
delete arg1;
}
static swig_lua_method swig_SNpcPos_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SNpcPos_attributes[] = {
    { "sceneId", _wrap_SNpcPos_sceneId_get, _wrap_SNpcPos_sceneId_set},
    { "x", _wrap_SNpcPos_x_get, _wrap_SNpcPos_x_set},
    { "y", _wrap_SNpcPos_y_get, _wrap_SNpcPos_y_set},
    {0,0,0}
};
static swig_lua_class *swig_SNpcPos_bases[] = {0};
static const char *swig_SNpcPos_base_names[] = {0};
static swig_lua_class _wrap_class_SNpcPos = { "SNpcPos", &SWIGTYPE_p_SNpcPos,_wrap_new_SNpcPos, swig_delete_SNpcPos, swig_SNpcPos_methods, swig_SNpcPos_attributes, swig_SNpcPos_bases, swig_SNpcPos_base_names };

static int _wrap_Dialog(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Dialog",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dialog",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Dialog",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Dialog",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("Dialog",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)Dialog(arg1,(char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DialogT(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("DialogT",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DialogT",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("DialogT",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("DialogT",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DialogT",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)DialogT(arg1,(char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Option(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Option",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Option",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Option",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Option",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Option",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("Option",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)Option(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SysInfo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SysInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SysInfo",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SysInfo",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SysInfo",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SysInfo(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SysInfo1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SysInfo1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SysInfo1",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SysInfo1",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SysInfo1",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SysInfo1(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMessage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMessage",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SMessage",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SMessage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SMessage(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SelectItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SelectItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SelectItem",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SelectItem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SelectItem",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SelectItem",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SelectItem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SelectPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("SelectPet",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SelectPet",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SelectPet",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SelectPet",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SelectPet",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SelectPet",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  SelectPet(arg1,arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SellItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("SellItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SellItem",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SellItem",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SellItem",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SellItem",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  SellItem(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloseInteract(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("CloseInteract",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CloseInteract",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CloseInteract",1,SWIGTYPE_p_CUser);
  }
  
  CloseInteract(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportUser(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  SWIG_check_num_args("TransportUser",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransportUser",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TransportUser",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("TransportUser",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  {
    arg4 = (uint8) lua_tonumber(L,4);
  }
  {
    arg5 = (uint8) lua_tonumber(L,5);
  }
  TransportUser(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserJumpTo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  SWIG_check_num_args("UserJumpTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UserJumpTo",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("UserJumpTo",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  {
    arg4 = (uint8) lua_tonumber(L,4);
  }
  {
    arg5 = (uint8) lua_tonumber(L,5);
  }
  UserJumpTo(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterBangPaiScene(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("EnterBangPaiScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterBangPaiScene",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnterBangPaiScene",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterBangPaiScene",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)EnterBangPaiScene(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddItemTmpl(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  
  SWIG_check_num_args("AddItemTmpl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddItemTmpl",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("AddItemTmpl",1,SWIGTYPE_p_SItemTemplate);
  }
  
  AddItemTmpl(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMonsterName(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMonsterName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetMonsterName",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (char *)GetMonsterName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetSceneName(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetSceneName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetSceneName",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (char *)GetSceneName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItem(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SItemTemplate *result = 0 ;
  
  SWIG_check_num_args("GetItem",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetItem",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (SItemTemplate *)GetItem(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SItemTemplate,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddHumanNpc(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  
  SWIG_check_num_args("AddHumanNpc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddHumanNpc",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddHumanNpc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddHumanNpc",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddHumanNpc",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddHumanNpc",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("AddHumanNpc",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("AddHumanNpc",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddHumanNpc",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (int)AddHumanNpc(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetUserNpcName(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetUserNpcName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetUserNpcName",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetUserNpcName",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetUserNpcName",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)GetUserNpcName(arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddNpc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  
  SWIG_check_num_args("AddNpc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddNpc",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddNpc",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AddNpc",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddNpc",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddNpc",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("AddNpc",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("AddNpc",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddNpc",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (int)AddNpc(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddNpc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("AddNpc",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddNpc",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddNpc",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AddNpc",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddNpc",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddNpc",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("AddNpc",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddNpc",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)AddNpc(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddNpc(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AddNpc__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AddNpc__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AddNpc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddNpc(CUser *,int,char const *,int,int,int,int)\n"
    "    AddNpc(CUser *,int,char const *,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_AddDefaultNpc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("AddDefaultNpc",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddDefaultNpc",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddDefaultNpc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddDefaultNpc",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddDefaultNpc",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddDefaultNpc",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("AddDefaultNpc",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddDefaultNpc",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)AddDefaultNpc(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddDefaultNpc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("AddDefaultNpc",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddDefaultNpc",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddDefaultNpc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddDefaultNpc",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddDefaultNpc",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddDefaultNpc",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddDefaultNpc",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)AddDefaultNpc(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddDefaultNpc(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AddDefaultNpc__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AddDefaultNpc__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AddDefaultNpc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddDefaultNpc(CUser *,int,int,int,int,int)\n"
    "    AddDefaultNpc(CUser *,int,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DelNpc(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DelNpc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelNpc",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelNpc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DelNpc",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  DelNpc(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("BeginFight",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BeginFight",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BeginFight",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BeginFight",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("BeginFight",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  BeginFight(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HumanNpcFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("HumanNpcFight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HumanNpcFight",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("HumanNpcFight",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("HumanNpcFight",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  HumanNpcFight(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZhaoTao1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ZhaoTao1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZhaoTao1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ZhaoTao1",1,SWIGTYPE_p_CUser);
  }
  
  ZhaoTao1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZhaoTao2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ZhaoTao2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZhaoTao2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ZhaoTao2",1,SWIGTYPE_p_CUser);
  }
  
  ZhaoTao2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZhaoTao3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ZhaoTao3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ZhaoTao3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ZhaoTao3",1,SWIGTYPE_p_CUser);
  }
  
  ZhaoTao3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreeKuLou(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ThreeKuLou",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreeKuLou",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ThreeKuLou",1,SWIGTYPE_p_CUser);
  }
  
  ThreeKuLou(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiMenFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiMenFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiMenFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiMenFight",1,SWIGTYPE_p_CUser);
  }
  
  ShiMenFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle1",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle2",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle3",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle4(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle4",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle4",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle4(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle5(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle5",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle5",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle5(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle6(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle6",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle6",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle6(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle7(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle7",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle7",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle7",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle7(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle8",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle8(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle9(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle9",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle9",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle9(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle10(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle10",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle10",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle10(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle11(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle11",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle11",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle11",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle11(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle12(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle12",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle12",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle12",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle12(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle13(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle13",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle13",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle13",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle13(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle14(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle14",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle14",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle14",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle14(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle15(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle15",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle15",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle15",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle15(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle16(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle16",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle16",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle16(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle17(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle17",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle17",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle17",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle17(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle18(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle18",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle18",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle18",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle18(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle19(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle19",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle19",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle19",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle19(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle20(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle20",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle20",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle20",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle20(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpisodeBattle21(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EpisodeBattle21",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EpisodeBattle21",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EpisodeBattle21",1,SWIGTYPE_p_CUser);
  }
  
  EpisodeBattle21(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WenTianBattle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("WenTianBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WenTianBattle",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WenTianBattle",1,SWIGTYPE_p_CUser);
  }
  
  WenTianBattle(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPackBattle1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("OpenPackBattle1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OpenPackBattle1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("OpenPackBattle1",1,SWIGTYPE_p_CUser);
  }
  
  OpenPackBattle1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPackBattle2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("OpenPackBattle2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OpenPackBattle2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("OpenPackBattle2",1,SWIGTYPE_p_CUser);
  }
  
  OpenPackBattle2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanRuoBattle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LanRuoBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LanRuoBattle",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LanRuoBattle",1,SWIGTYPE_p_CUser);
  }
  
  LanRuoBattle(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanRuoBattle3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LanRuoBattle3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LanRuoBattle3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LanRuoBattle3",1,SWIGTYPE_p_CUser);
  }
  
  LanRuoBattle3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanRuoBattle4(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LanRuoBattle4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LanRuoBattle4",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LanRuoBattle4",1,SWIGTYPE_p_CUser);
  }
  
  LanRuoBattle4(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LanRuoBattle5(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LanRuoBattle5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LanRuoBattle5",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LanRuoBattle5",1,SWIGTYPE_p_CUser);
  }
  
  LanRuoBattle5(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTeamMemNum(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetTeamMemNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTeamMemNum",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetTeamMemNum",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetTeamMemNum(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTeamMember1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  CUser *result = 0 ;
  
  SWIG_check_num_args("GetTeamMember1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTeamMember1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetTeamMember1",1,SWIGTYPE_p_CUser);
  }
  
  result = (CUser *)GetTeamMember1(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CUser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTeamMember2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  CUser *result = 0 ;
  
  SWIG_check_num_args("GetTeamMember2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTeamMember2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetTeamMember2",1,SWIGTYPE_p_CUser);
  }
  
  result = (CUser *)GetTeamMember2(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CUser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNpcSceneId(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("GetNpcSceneId",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetNpcSceneId",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)GetNpcSceneId(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNpcScenePos(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SNpcPos result;
  
  SWIG_check_num_args("GetNpcScenePos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetNpcScenePos",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = GetNpcScenePos(arg1);
  {
    SNpcPos * resultptr = new SNpcPos((const SNpcPos &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SNpcPos,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNpcName(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetNpcName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetNpcName",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (char *)GetNpcName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPackage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("OpenPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OpenPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OpenPackage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("OpenPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  OpenPackage(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StudySkill(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("StudySkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StudySkill",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("StudySkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("StudySkill",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  StudySkill(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListStudySkill(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ListStudySkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ListStudySkill",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ListStudySkill",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ListStudySkill",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ListStudySkill(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LearnSkill(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("LearnSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LearnSkill",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LearnSkill",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LearnSkill",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)LearnSkill(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserRest(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("UserRest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UserRest",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("UserRest",1,SWIGTYPE_p_CUser);
  }
  
  UserRest(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterLanRuoDiGong(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EnterLanRuoDiGong",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterLanRuoDiGong",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterLanRuoDiGong",1,SWIGTYPE_p_CUser);
  }
  
  EnterLanRuoDiGong(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddLouLuo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("AddLouLuo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLouLuo",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddLouLuo",1,SWIGTYPE_p_CUser);
  }
  
  AddLouLuo(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelFaceNpc(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("DelFaceNpc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelFaceNpc",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DelFaceNpc",1,SWIGTYPE_p_CUser);
  }
  
  DelFaceNpc(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddWuNian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("AddWuNian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddWuNian",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddWuNian",1,SWIGTYPE_p_CUser);
  }
  
  AddWuNian(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddWuXin(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("AddWuXin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddWuXin",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddWuXin",1,SWIGTYPE_p_CUser);
  }
  
  AddWuXin(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LouLuoFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LouLuoFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LouLuoFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LouLuoFight",1,SWIGTYPE_p_CUser);
  }
  
  LouLuoFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WuNianFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("WuNianFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WuNianFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WuNianFight",1,SWIGTYPE_p_CUser);
  }
  
  WuNianFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WuXinFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("WuXinFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WuXinFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WuXinFight",1,SWIGTYPE_p_CUser);
  }
  
  WuXinFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DengLongGuiFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("DengLongGuiFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DengLongGuiFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DengLongGuiFight",1,SWIGTYPE_p_CUser);
  }
  
  DengLongGuiFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaiYueFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("BaiYueFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaiYueFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("BaiYueFight",1,SWIGTYPE_p_CUser);
  }
  
  BaiYueFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShuiGuiFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShuiGuiFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShuiGuiFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShuiGuiFight",1,SWIGTYPE_p_CUser);
  }
  
  ShuiGuiFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChuShiFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ChuShiFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChuShiFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ChuShiFight",1,SWIGTYPE_p_CUser);
  }
  
  ChuShiFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiLinFightYao(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiLinFightYao",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiLinFightYao",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiLinFightYao",1,SWIGTYPE_p_CUser);
  }
  
  QiLinFightYao(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiLinFightXian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiLinFightXian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiLinFightXian",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiLinFightXian",1,SWIGTYPE_p_CUser);
  }
  
  QiLinFightXian(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateNpcState(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("UpdateNpcState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpdateNpcState",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UpdateNpcState",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UpdateNpcState",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("UpdateNpcState",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  UpdateNpcState(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateBangPai(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("CreateBangPai",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CreateBangPai",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CreateBangPai",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CreateBangPai",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CreateBangPai",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)CreateBangPai(arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputStr(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("InputStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputStr",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("InputStr",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("InputStr",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  InputStr(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BankMoney(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("BankMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BankMoney",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BankMoney",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("BankMoney",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  BankMoney(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddBankMoney(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("AddBankMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddBankMoney",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddBankMoney",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddBankMoney",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)AddBankMoney(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendBankItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("SendBankItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SendBankItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SendBankItem",1,SWIGTYPE_p_CUser);
  }
  
  SendBankItem(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddbankItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  bool result;
  
  SWIG_check_num_args("AddbankItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddbankItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddbankItem",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (bool)AddbankItem(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBankItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  bool result;
  
  SWIG_check_num_args("GetBankItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBankItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBankItem",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (bool)GetBankItem(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiPinJianDing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ShiPinJianDing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiPinJianDing",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ShiPinJianDing",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiPinJianDing",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ShiPinJianDing(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNpcPos(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  SNpcPos result;
  
  SWIG_check_num_args("GetNpcPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetNpcPos",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetNpcPos",1,SWIGTYPE_p_CUser);
  }
  
  result = GetNpcPos(arg1);
  {
    SNpcPos * resultptr = new SNpcPos((const SNpcPos &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SNpcPos,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMonster(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SMonsterTmpl *result = 0 ;
  
  SWIG_check_num_args("GetMonster",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetMonster",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (SMonsterTmpl *)GetMonster(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SMonsterTmpl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiBaiChengFa(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiBaiChengFa",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiBaiChengFa",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiBaiChengFa",1,SWIGTYPE_p_CUser);
  }
  
  ShiBaiChengFa(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddBattleRes(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("AddBattleRes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddBattleRes",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddBattleRes",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddBattleRes",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddBattleRes",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  AddBattleRes(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RemoveBattleRes(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("RemoveBattleRes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RemoveBattleRes",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveBattleRes",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RemoveBattleRes",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("RemoveBattleRes",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  RemoveBattleRes(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundOrnament(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("CompoundOrnament",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CompoundOrnament",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CompoundOrnament",1,SWIGTYPE_p_CUser);
  }
  
  CompoundOrnament(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DoItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoItem",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DoItem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DoItem",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  DoItem(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CompoundItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CompoundItem",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CompoundItem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CompoundItem",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  CompoundItem(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundMaterial(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CompoundMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CompoundMaterial",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CompoundMaterial",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CompoundMaterial",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  CompoundMaterial(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetHuoDong(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("SetHuoDong",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("SetHuoDong",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  SetHuoDong(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetHuoDongBeiLv(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("SetHuoDongBeiLv",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetHuoDongBeiLv",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  SetHuoDongBeiLv(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InHuoDong(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("InHuoDong",0,0)
  result = (bool)InHuoDong();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetHuoDongBeiLv(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetHuoDongBeiLv",0,0)
  result = (int)GetHuoDongBeiLv();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RankLevel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("RankLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RankLevel",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RankLevel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("RankLevel",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  RankLevel(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RankLevel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("RankLevel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RankLevel",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RankLevel",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("RankLevel",3,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("RankLevel",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  RankLevel(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RankLevel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RankLevel__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_RankLevel__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'RankLevel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RankLevel(CUser *,int)\n"
    "    RankLevel(CUser *,int,char *)\n");
  lua_error(L);return 0;
}


static int _wrap_SUserAward_id_set(lua_State* L) {
  int SWIG_arg = 0;
  SUserAward *arg1 = (SUserAward *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"SUserAward *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("id",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SUserAward,0))){
    SWIG_fail_ptr("SUserAward_id_set",1,SWIGTYPE_p_SUserAward);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUserAward_id_get(lua_State* L) {
  int SWIG_arg = 0;
  SUserAward *arg1 = (SUserAward *) 0 ;
  int result;
  
  SWIG_check_num_args("id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"SUserAward *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SUserAward,0))){
    SWIG_fail_ptr("SUserAward_id_get",1,SWIGTYPE_p_SUserAward);
  }
  
  result = (int) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUserAward_num_set(lua_State* L) {
  int SWIG_arg = 0;
  SUserAward *arg1 = (SUserAward *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("num",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("num",1,"SUserAward *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("num",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SUserAward,0))){
    SWIG_fail_ptr("SUserAward_num_set",1,SWIGTYPE_p_SUserAward);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->num = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUserAward_num_get(lua_State* L) {
  int SWIG_arg = 0;
  SUserAward *arg1 = (SUserAward *) 0 ;
  int result;
  
  SWIG_check_num_args("num",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("num",1,"SUserAward *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SUserAward,0))){
    SWIG_fail_ptr("SUserAward_num_get",1,SWIGTYPE_p_SUserAward);
  }
  
  result = (int) ((arg1)->num);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SUserAward(lua_State* L) {
  int SWIG_arg = 0;
  SUserAward *result = 0 ;
  
  SWIG_check_num_args("SUserAward::SUserAward",0,0)
  result = (SUserAward *)new SUserAward();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SUserAward,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SUserAward(void *obj) {
SUserAward *arg1 = (SUserAward *) obj;
delete arg1;
}
static swig_lua_method swig_SUserAward_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SUserAward_attributes[] = {
    { "id", _wrap_SUserAward_id_get, _wrap_SUserAward_id_set},
    { "num", _wrap_SUserAward_num_get, _wrap_SUserAward_num_set},
    {0,0,0}
};
static swig_lua_class *swig_SUserAward_bases[] = {0};
static const char *swig_SUserAward_base_names[] = {0};
static swig_lua_class _wrap_class_SUserAward = { "SUserAward", &SWIGTYPE_p_SUserAward,_wrap_new_SUserAward, swig_delete_SUserAward, swig_SUserAward_methods, swig_SUserAward_attributes, swig_SUserAward_bases, swig_SUserAward_base_names };

static int _wrap_GetAward(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  SUserAward result;
  
  SWIG_check_num_args("GetAward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetAward",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetAward",1,SWIGTYPE_p_CUser);
  }
  
  result = GetAward(arg1);
  {
    SUserAward * resultptr = new SUserAward((const SUserAward &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SUserAward,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetGetAword(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("SetGetAword",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetGetAword",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SetGetAword",1,SWIGTYPE_p_CUser);
  }
  
  SetGetAword(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetHour(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetHour",0,0)
  result = (int)GetHour();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SysInfoToAllUser(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("SysInfoToAllUser",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SysInfoToAllUser",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  SysInfoToAllUser((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SaveDate(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SaveDate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SaveDate",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SaveDate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SaveDate",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SaveDate",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SaveDate(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetScriptVal(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("GetScriptVal",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetScriptVal",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)GetScriptVal(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScriptVal(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("SetScriptVal",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetScriptVal",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetScriptVal",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  SetScriptVal(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_upgrade_master(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("upgrade_master",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("upgrade_master",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("upgrade_master",1,SWIGTYPE_p_CUser);
  }
  
  upgrade_master(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_disciple(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("get_disciple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get_disciple",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("get_disciple",1,SWIGTYPE_p_CUser);
  }
  
  result = (char *)get_disciple(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_master(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("get_master",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get_master",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("get_master",1,SWIGTYPE_p_CUser);
  }
  
  result = (char *)get_master(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_have_master(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("have_master",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("have_master",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("have_master",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)have_master(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_have_disciple(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("have_disciple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("have_disciple",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("have_disciple",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)have_disciple(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cancel_master(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("cancel_master",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cancel_master",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("cancel_master",1,SWIGTYPE_p_CUser);
  }
  
  cancel_master(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cancel_disciple(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("cancel_disciple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cancel_disciple",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cancel_disciple",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("cancel_disciple",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  cancel_disciple(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_is_master(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("is_master",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("is_master",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("is_master",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)is_master(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_do_master(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("do_master",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("do_master",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("do_master",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)do_master(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_master_level(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("master_level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("master_level",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("master_level",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)master_level(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChuShi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ChuShi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChuShi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ChuShi",1,SWIGTYPE_p_CUser);
  }
  
  ChuShi(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDiscipleAward(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("GetDiscipleAward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDiscipleAward",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDiscipleAward",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetDiscipleAward",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)GetDiscipleAward(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelDiscipleAward(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DelDiscipleAward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelDiscipleAward",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelDiscipleAward",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DelDiscipleAward",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  DelDiscipleAward(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMasterAward(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetMasterAward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMasterAward",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetMasterAward",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMasterAward",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetMasterAward(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelMasterAward(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DelMasterAward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelMasterAward",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelMasterAward",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DelMasterAward",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  DelMasterAward(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMaster(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetMaster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMaster",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMaster",1,SWIGTYPE_p_CUser);
  }
  
  result = GetMaster(arg1);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTeamLeader(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  CUser *result = 0 ;
  
  SWIG_check_num_args("GetTeamLeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTeamLeader",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetTeamLeader",1,SWIGTYPE_p_CUser);
  }
  
  result = (CUser *)GetTeamLeader(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CUser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterGuiYu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("EnterGuiYu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterGuiYu",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnterGuiYu",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterGuiYu",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  EnterGuiYu(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindYaoNieBattle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("FindYaoNieBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FindYaoNieBattle",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("FindYaoNieBattle",1,SWIGTYPE_p_CUser);
  }
  
  FindYaoNieBattle(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JiBaiKSBattle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("JiBaiKSBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JiBaiKSBattle",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("JiBaiKSBattle",1,SWIGTYPE_p_CUser);
  }
  
  JiBaiKSBattle(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XunBaoFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("XunBaoFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("XunBaoFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("XunBaoFight",1,SWIGTYPE_p_CUser);
  }
  
  XunBaoFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCanWalkPos(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SNpcPos result;
  
  SWIG_check_num_args("GetCanWalkPos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetCanWalkPos",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = GetCanWalkPos(arg1);
  {
    SNpcPos * resultptr = new SNpcPos((const SNpcPos &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SNpcPos,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChaiFen(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  int result;
  
  SWIG_check_num_args("ChaiFen",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChaiFen",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ChaiFen",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  {
    arg4 = (uint8) lua_tonumber(L,4);
  }
  result = (int)ChaiFen(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RongHe(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int result;
  
  SWIG_check_num_args("RongHe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RongHe",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("RongHe",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (int)RongHe(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SelectAttr(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("SelectAttr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SelectAttr",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SelectAttr",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  SelectAttr(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetPaiMing(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetPaiMing",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetPaiMing",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (char *)GetPaiMing(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWeekDay(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetWeekDay",0,0)
  result = (int)GetWeekDay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ListBang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ListBang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ListBang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ListBang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ListBang(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeclareWar(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DeclareWar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeclareWar",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DeclareWar",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DeclareWar",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)DeclareWar(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBangPros(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetBangPros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangPros",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetBangPros",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBangPros",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetBangPros(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterBangZhan__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("EnterBangZhan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterBangZhan",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnterBangZhan",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterBangZhan",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)EnterBangZhan(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterBangZhan__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("EnterBangZhan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterBangZhan",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterBangZhan",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)EnterBangZhan(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterBangZhan(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EnterBangZhan__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EnterBangZhan__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EnterBangZhan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    EnterBangZhan(CUser *,int)\n"
    "    EnterBangZhan(CUser *)\n");
  lua_error(L);return 0;
}


static int _wrap_FightDiaoXiang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("FightDiaoXiang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FightDiaoXiang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FightDiaoXiang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("FightDiaoXiang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)FightDiaoXiang(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMeScore(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMeScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMeScore",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMeScore",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetMeScore(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetEnemyScore(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetEnemyScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetEnemyScore",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetEnemyScore",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetEnemyScore(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetOwnScore(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetOwnScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetOwnScore",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetOwnScore",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetOwnScore(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShangjiaoKuang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("ShangjiaoKuang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShangjiaoKuang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShangjiaoKuang",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)ShangjiaoKuang(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBangKuang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetBangKuang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangKuang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBangKuang",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetBangKuang(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMeiYingTime(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMeiYingTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMeiYingTime",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMeiYingTime",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetMeiYingTime(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartMeiYing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("StartMeiYing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartMeiYing",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("StartMeiYing",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)StartMeiYing(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBZPosition(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetBZPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBZPosition",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBZPosition",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetBZPosition(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDiaoXiangState(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetDiaoXiangState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDiaoXiangState",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDiaoXiangState",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetDiaoXiangState",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetDiaoXiangState(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDiaoXiangTime(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetDiaoXiangTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDiaoXiangTime",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDiaoXiangTime",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetDiaoXiangTime",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetDiaoXiangTime(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InWaZhongHuoDong(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("InWaZhongHuoDong",0,0)
  result = (bool)InWaZhongHuoDong();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetHuoDongDi(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetHuoDongDi",0,0)
  result = (char *)GetHuoDongDi();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelHuoDongDi(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("DelHuoDongDi",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DelHuoDongDi",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelHuoDongDi",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  DelHuoDongDi(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWaZhongScene(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetWaZhongScene",0,0)
  result = (int)GetWaZhongScene();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListWarBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ListWarBang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ListWarBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ListWarBang",1,SWIGTYPE_p_CUser);
  }
  
  ListWarBang(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBangName(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetBangName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetBangName",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (char *)GetBangName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateUserInfo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("UpdateUserInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpdateUserInfo",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("UpdateUserInfo",1,SWIGTYPE_p_CUser);
  }
  
  UpdateUserInfo(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlantResource(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("PlantResource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PlantResource",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PlantResource",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("PlantResource",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)PlantResource(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GainResource(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GainResource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GainResource",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GainResource",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GainResource",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GainResource(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListResource(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ListResource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ListResource",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ListResource",1,SWIGTYPE_p_CUser);
  }
  
  ListResource(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoFarm(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("DoFarm",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoFarm",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DoFarm",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DoFarm",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DoFarm",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  DoFarm(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_itemId_set(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("itemId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("itemId",1,"SResInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("itemId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_itemId_set",1,SWIGTYPE_p_SResInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->itemId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_itemId_get(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("itemId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("itemId",1,"SResInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_itemId_get",1,SWIGTYPE_p_SResInfo);
  }
  
  result = (int) ((arg1)->itemId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_state_set(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("state",1,"SResInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_state_set",1,SWIGTYPE_p_SResInfo);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_state_get(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("state",1,"SResInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_state_get",1,SWIGTYPE_p_SResInfo);
  }
  
  result =  ((arg1)->state);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_stateTime_set(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("stateTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stateTime",1,"SResInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stateTime",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_stateTime_set",1,SWIGTYPE_p_SResInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->stateTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_stateTime_get(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("stateTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stateTime",1,"SResInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_stateTime_get",1,SWIGTYPE_p_SResInfo);
  }
  
  result = (int) ((arg1)->stateTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_leftTime_set(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("leftTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("leftTime",1,"SResInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("leftTime",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_leftTime_set",1,SWIGTYPE_p_SResInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->leftTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SResInfo_leftTime_get(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *arg1 = (SResInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("leftTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("leftTime",1,"SResInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SResInfo,0))){
    SWIG_fail_ptr("SResInfo_leftTime_get",1,SWIGTYPE_p_SResInfo);
  }
  
  result = (int) ((arg1)->leftTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SResInfo(lua_State* L) {
  int SWIG_arg = 0;
  SResInfo *result = 0 ;
  
  SWIG_check_num_args("SResInfo::SResInfo",0,0)
  result = (SResInfo *)new SResInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SResInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SResInfo(void *obj) {
SResInfo *arg1 = (SResInfo *) obj;
delete arg1;
}
static swig_lua_method swig_SResInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SResInfo_attributes[] = {
    { "itemId", _wrap_SResInfo_itemId_get, _wrap_SResInfo_itemId_set},
    { "state", _wrap_SResInfo_state_get, _wrap_SResInfo_state_set},
    { "stateTime", _wrap_SResInfo_stateTime_get, _wrap_SResInfo_stateTime_set},
    { "leftTime", _wrap_SResInfo_leftTime_get, _wrap_SResInfo_leftTime_set},
    {0,0,0}
};
static swig_lua_class *swig_SResInfo_bases[] = {0};
static const char *swig_SResInfo_base_names[] = {0};
static swig_lua_class _wrap_class_SResInfo = { "SResInfo", &SWIGTYPE_p_SResInfo,_wrap_new_SResInfo, swig_delete_SResInfo, swig_SResInfo_methods, swig_SResInfo_attributes, swig_SResInfo_bases, swig_SResInfo_base_names };

static int _wrap_GetResourceInfo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  SResInfo result;
  
  SWIG_check_num_args("GetResourceInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetResourceInfo",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetResourceInfo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetResourceInfo",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = GetResourceInfo(arg1,arg2);
  {
    SResInfo * resultptr = new SResInfo((const SResInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SResInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBangResource(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetBangResource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangResource",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetBangResource",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBangResource",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetBangResource(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpgradeBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("UpgradeBang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpgradeBang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UpgradeBang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("UpgradeBang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)UpgradeBang(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetSceneBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetSceneBang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetSceneBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetSceneBang",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetSceneBang(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBangLevel(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetBangLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangLevel",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetBangLevel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBangLevel",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetBangLevel(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBangMoney(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetBangMoney",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangMoney",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBangMoney",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetBangMoney(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddBangMoney(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddBangMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddBangMoney",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddBangMoney",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddBangMoney",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  AddBangMoney(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DuiHuanBG(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("DuiHuanBG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DuiHuanBG",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("DuiHuanBG",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DuiHuanBG",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  DuiHuanBG(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetAward2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetAward2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetAward2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetAward2",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetAward2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetAword2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetAword2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetAword2",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetAword2",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SetAword2",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SetAword2(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("AddPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPet",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddPet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddPet",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)AddPet(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DonateBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("DonateBang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DonateBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DonateBang",1,SWIGTYPE_p_CUser);
  }
  
  DonateBang(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBangHistory(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("GetBangHistory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangHistory",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBangHistory",1,SWIGTYPE_p_CUser);
  }
  
  GetBangHistory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetQuestion(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetQuestion",0,0)
  result = (char *)GetQuestion();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetQuestion1(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetQuestion1",0,0)
  result = (char *)GetQuestion1();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetQuestion2(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetQuestion2",0,0)
  result = (char *)GetQuestion2();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IdentifyBook(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("IdentifyBook",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IdentifyBook",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("IdentifyBook",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (char *)IdentifyBook(arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubmitScore(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SubmitScore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubmitScore",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SubmitScore",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SubmitScore",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SubmitScore",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SubmitScore(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDaTiPaiMing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetDaTiPaiMing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDaTiPaiMing",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDaTiPaiMing",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetDaTiPaiMing",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetDaTiPaiMing(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle1",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle2",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle3",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle4(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle4",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle4",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle4(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle5(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle5",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle5",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle5(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle6(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle6",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle6",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle6(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle7(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle7",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle7",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle7",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle7(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle8",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle8(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle9(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle9",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle9",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle9(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle10(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle10",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle10",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle10(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle11(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle11",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle11",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle11",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle11(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle12(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle12",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle12",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle12",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle12(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle13(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle13",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle13",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle13",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle13(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QiChongBattle14(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QiChongBattle14",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QiChongBattle14",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QiChongBattle14",1,SWIGTYPE_p_CUser);
  }
  
  QiChongBattle14(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle1",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle2",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle3",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle4(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle4",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle4",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle4(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle5(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle5",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle5",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle5(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle6(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle6",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle6",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle6(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle7(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle7",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle7",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle7",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle7(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle8",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle8(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle9(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle9",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle9",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle9(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle10(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle10",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle10",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle10(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LangBattle12(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("LangBattle12",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LangBattle12",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("LangBattle12",1,SWIGTYPE_p_CUser);
  }
  
  LangBattle12(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW1",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW2",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW3",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW4(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW4",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW4",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW4(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW5(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW5",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW5",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW5(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW6(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW6",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW6",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW6(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW7(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW7",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW7",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW7",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW7(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW8",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW8(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW9(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW9",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW9",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW9(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYW10(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYW10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYW10",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYW10",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYW10(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX1",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX2",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX3",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX4(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX4",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX4",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX4(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX5(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX5",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX5",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX5(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX6(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX6",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX6",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX6(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX7(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX7",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX7",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX7",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX7(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX8",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX8(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX9(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX9",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX9",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX9(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoYX10(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoYX10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoYX10",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoYX10",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoYX10(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT1",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT2",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT3(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT3",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT3",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT3(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT4(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT4",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT4",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT4(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT5(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT5",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT5",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT5(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT6(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT6",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT6",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT6(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT7(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT7",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT7",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT7",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT7(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT8",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT8(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT9(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT9",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT9",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT9(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShiYaoPT10(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ShiYaoPT10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShiYaoPT10",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ShiYaoPT10",1,SWIGTYPE_p_CUser);
  }
  
  ShiYaoPT10(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NuYanQiLing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("NuYanQiLing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NuYanQiLing",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("NuYanQiLing",1,SWIGTYPE_p_CUser);
  }
  
  NuYanQiLing(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XianBing1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("XianBing1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("XianBing1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("XianBing1",1,SWIGTYPE_p_CUser);
  }
  
  XianBing1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XianBing2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("XianBing2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("XianBing2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("XianBing2",1,SWIGTYPE_p_CUser);
  }
  
  XianBing2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_YaoBing1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("YaoBing1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("YaoBing1",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("YaoBing1",1,SWIGTYPE_p_CUser);
  }
  
  YaoBing1(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_YaoBing2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("YaoBing2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("YaoBing2",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("YaoBing2",1,SWIGTYPE_p_CUser);
  }
  
  YaoBing2(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenPaiChuanSong(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("MenPaiChuanSong",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MenPaiChuanSong",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("MenPaiChuanSong",1,SWIGTYPE_p_CUser);
  }
  
  MenPaiChuanSong(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QingLongBaoBao(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("QingLongBaoBao",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QingLongBaoBao",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("QingLongBaoBao",1,SWIGTYPE_p_CUser);
  }
  
  QingLongBaoBao(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KuLouDaWang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("KuLouDaWang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KuLouDaWang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("KuLouDaWang",1,SWIGTYPE_p_CUser);
  }
  
  KuLouDaWang(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JuQingXianRen(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("JuQingXianRen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JuQingXianRen",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("JuQingXianRen",1,SWIGTYPE_p_CUser);
  }
  
  JuQingXianRen(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JuQingQiLing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("JuQingQiLing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JuQingQiLing",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("JuQingQiLing",1,SWIGTYPE_p_CUser);
  }
  
  JuQingQiLing(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JuQingMingYao(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("JuQingMingYao",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JuQingMingYao",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("JuQingMingYao",1,SWIGTYPE_p_CUser);
  }
  
  JuQingMingYao(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetChongZhi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetChongZhi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetChongZhi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetChongZhi",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetChongZhi(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckMarry(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("CheckMarry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CheckMarry",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CheckMarry",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)CheckMarry(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoDivorce(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("DoDivorce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoDivorce",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DoDivorce",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)DoDivorce(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWedding(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("GetWedding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetWedding",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetWedding",1,SWIGTYPE_p_CUser);
  }
  
  GetWedding(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterWedding(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("EnterWedding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterWedding",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnterWedding",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterWedding",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)EnterWedding(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoMarry(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DoMarry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoMarry",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DoMarry",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DoMarry",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)DoMarry(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMarried(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMarried",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMarried",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMarried",1,SWIGTYPE_p_CUser);
  }
  
  result = (char *)GetMarried(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMarriedId(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMarriedId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMarriedId",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMarriedId",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetMarriedId(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_YanQing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("YanQing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("YanQing",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("YanQing",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("YanQing",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("YanQing",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)YanQing(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GiveHongBao(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GiveHongBao",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GiveHongBao",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GiveHongBao",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GiveHongBao",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GiveHongBao(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DuiHuanTB(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("DuiHuanTB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DuiHuanTB",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DuiHuanTB",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)DuiHuanTB(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputNumber(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("InputNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputNumber",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InputNumber",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("InputNumber",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  InputNumber(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsBrideGroom(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsBrideGroom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsBrideGroom",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("IsBrideGroom",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)IsBrideGroom(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChaiFenSX(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int result;
  
  SWIG_check_num_args("ChaiFenSX",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChaiFenSX",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ChaiFenSX",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (int)ChaiFenSX(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddPetXiuWei(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("AddPetXiuWei",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPetXiuWei",1,"CUser *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddPetXiuWei",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AddPetXiuWei",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  arg3 = (int)lua_tonumber(L, 3);
  AddPetXiuWei(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMarryLeftTime(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMarryLeftTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMarryLeftTime",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMarryLeftTime",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetMarryLeftTime(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChangeCharName(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ChangeCharName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChangeCharName",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ChangeCharName",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ChangeCharName",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)ChangeCharName(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CanChangeName(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("CanChangeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CanChangeName",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CanChangeName",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)CanChangeName(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MLSChengJi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("MLSChengJi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MLSChengJi",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MLSChengJi",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("MLSChengJi",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  MLSChengJi(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MLSGetPaiMing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("MLSGetPaiMing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MLSGetPaiMing",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("MLSGetPaiMing",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)MLSGetPaiMing(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MLSGetJiangLi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("MLSGetJiangLi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MLSGetJiangLi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("MLSGetJiangLi",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)MLSGetJiangLi(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MLSLingJiang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("MLSLingJiang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MLSLingJiang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("MLSLingJiang",1,SWIGTYPE_p_CUser);
  }
  
  MLSLingJiang(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPostTongji(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("IPostTongji",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IPostTongji",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("IPostTongji",1,SWIGTYPE_p_CUser);
  }
  
  IPostTongji(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITongjiBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ITongjiBang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ITongjiBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ITongjiBang",1,SWIGTYPE_p_CUser);
  }
  
  ITongjiBang(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMyTongji(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("IMyTongji",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMyTongji",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("IMyTongji",1,SWIGTYPE_p_CUser);
  }
  
  IMyTongji(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostTongji(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("PostTongji",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PostTongji",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PostTongji",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("PostTongji",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PostTongji",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("PostTongji",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("PostTongji",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)PostTongji(arg1,arg2,(char const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChangeTongji(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("ChangeTongji",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChangeTongji",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChangeTongji",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ChangeTongji",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ChangeTongji",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)ChangeTongji(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CancelTongji(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("CancelTongji",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CancelTongji",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CancelTongji",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CancelTongji",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)CancelTongji(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TakeTongji(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("TakeTongji",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TakeTongji",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TakeTongji",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("TakeTongji",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)TakeTongji(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_id_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"STongJiInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("id",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_id_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_id_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_id_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result = (int) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_owner_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("owner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("owner",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_owner_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  {
    arg2 = (uint32) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->owner = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_owner_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("owner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("owner",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_owner_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result =  ((arg1)->owner);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_roleId_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("roleId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("roleId",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_roleId_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  {
    arg2 = (uint32) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->roleId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_roleId_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("roleId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("roleId",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_roleId_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result =  ((arg1)->roleId);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_money_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("money",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("money",1,"STongJiInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("money",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_money_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->money = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_money_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("money",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("money",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_money_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result = (int) ((arg1)->money);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_t_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  SWIG_check_num_args("t",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("t",1,"STongJiInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("t",2,"time_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_t_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_time_t,0))){
    SWIG_fail_ptr("STongJiInfo_t_set",2,SWIGTYPE_p_time_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->t = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_t_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  time_t result;
  
  SWIG_check_num_args("t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("t",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_t_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result =  ((arg1)->t);
  {
    time_t * resultptr = new time_t((const time_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_time_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_name_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"STongJiInfo *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("name",2,"char [MAX_NAME_LEN]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_name_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, MAX_NAME_LEN-1);
      arg1->name[MAX_NAME_LEN-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_name_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_name_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result = (char *)(char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_level_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_level_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_level_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_level_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result =  ((arg1)->level);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_state_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("state",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_state_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_state_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("state",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_state_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result =  ((arg1)->state);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_userList_set(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  list< uint32 > arg2 ;
  list< uint32 > *argp2 ;
  
  SWIG_check_num_args("userList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("userList",1,"STongJiInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("userList",2,"list< uint32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_userList_set",1,SWIGTYPE_p_STongJiInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_listT_uint32_t,0))){
    SWIG_fail_ptr("STongJiInfo_userList_set",2,SWIGTYPE_p_listT_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->userList = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STongJiInfo_userList_get(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *arg1 = (STongJiInfo *) 0 ;
  list< uint32 > result;
  
  SWIG_check_num_args("userList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("userList",1,"STongJiInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("STongJiInfo_userList_get",1,SWIGTYPE_p_STongJiInfo);
  }
  
  result =  ((arg1)->userList);
  {
    list< uint32 > * resultptr = new list< uint32 >((const list< uint32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_listT_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STongJiInfo(lua_State* L) {
  int SWIG_arg = 0;
  STongJiInfo *result = 0 ;
  
  SWIG_check_num_args("STongJiInfo::STongJiInfo",0,0)
  result = (STongJiInfo *)new STongJiInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_STongJiInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_STongJiInfo(void *obj) {
STongJiInfo *arg1 = (STongJiInfo *) obj;
delete arg1;
}
static swig_lua_method swig_STongJiInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_STongJiInfo_attributes[] = {
    { "id", _wrap_STongJiInfo_id_get, _wrap_STongJiInfo_id_set},
    { "owner", _wrap_STongJiInfo_owner_get, _wrap_STongJiInfo_owner_set},
    { "roleId", _wrap_STongJiInfo_roleId_get, _wrap_STongJiInfo_roleId_set},
    { "money", _wrap_STongJiInfo_money_get, _wrap_STongJiInfo_money_set},
    { "t", _wrap_STongJiInfo_t_get, _wrap_STongJiInfo_t_set},
    { "name", _wrap_STongJiInfo_name_get, _wrap_STongJiInfo_name_set},
    { "level", _wrap_STongJiInfo_level_get, _wrap_STongJiInfo_level_set},
    { "state", _wrap_STongJiInfo_state_get, _wrap_STongJiInfo_state_set},
    { "userList", _wrap_STongJiInfo_userList_get, _wrap_STongJiInfo_userList_set},
    {0,0,0}
};
static swig_lua_class *swig_STongJiInfo_bases[] = {0};
static const char *swig_STongJiInfo_base_names[] = {0};
static swig_lua_class _wrap_class_STongJiInfo = { "STongJiInfo", &SWIGTYPE_p_STongJiInfo,_wrap_new_STongJiInfo, swig_delete_STongJiInfo, swig_STongJiInfo_methods, swig_STongJiInfo_attributes, swig_STongJiInfo_bases, swig_STongJiInfo_base_names };

static int _wrap_GetTongJiInfo(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  STongJiInfo *arg2 = (STongJiInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("GetTongJiInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetTongJiInfo",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GetTongJiInfo",2,"STongJiInfo *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_STongJiInfo,0))){
    SWIG_fail_ptr("GetTongJiInfo",2,SWIGTYPE_p_STongJiInfo);
  }
  
  result = (bool)GetTongJiInfo(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelTongJiMiss(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DelTongJiMiss",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelTongJiMiss",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelTongJiMiss",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DelTongJiMiss",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  DelTongJiMiss(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetAllyBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetAllyBang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetAllyBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetAllyBang",1,SWIGTYPE_p_CUser);
  }
  
  result = (char *)GetAllyBang(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllyBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AllyBang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AllyBang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AllyBang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AllyBang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  AllyBang(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnallyBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("UnallyBang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnallyBang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UnallyBang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("UnallyBang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  UnallyBang(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InviteAlly(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("InviteAlly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InviteAlly",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InviteAlly",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("InviteAlly",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)InviteAlly(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckAlly(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("CheckAlly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CheckAlly",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CheckAlly",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CheckAlly",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)CheckAlly(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IWWDuihuan(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("IWWDuihuan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IWWDuihuan",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("IWWDuihuan",1,SWIGTYPE_p_CUser);
  }
  
  IWWDuihuan(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWTijiaoKuang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("WWTijiaoKuang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WWTijiaoKuang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WWTijiaoKuang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WWTijiaoKuang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  WWTijiaoKuang(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWGetKuang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("WWGetKuang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WWGetKuang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WWGetKuang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WWGetKuang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)WWGetKuang(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWSetKuang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("WWSetKuang",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WWSetKuang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WWSetKuang",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("WWSetKuang",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WWSetKuang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  WWSetKuang(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FightCoupleTrial(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("FightCoupleTrial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FightCoupleTrial",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("FightCoupleTrial",1,SWIGTYPE_p_CUser);
  }
  
  FightCoupleTrial(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWGetWinBang(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("WWGetWinBang",0,0)
  result = (int)WWGetWinBang();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWGetTotalKuang(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("WWGetTotalKuang",0,0)
  result = (int)WWGetTotalKuang();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWGetLostKuang(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("WWGetLostKuang",0,0)
  result = (int)WWGetLostKuang();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InWorldWar(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("InWorldWar",0,0)
  result = (bool)InWorldWar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CanWaKuang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("CanWaKuang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CanWaKuang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CanWaKuang",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)CanWaKuang(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWGetJifen(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("WWGetJifen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WWGetJifen",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WWGetJifen",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)WWGetJifen(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWGetTotalJifen(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("WWGetTotalJifen",0,0)
  result = (int)WWGetTotalJifen();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WWDuihuanJifen(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("WWDuihuanJifen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WWDuihuanJifen",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("WWDuihuanJifen",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)WWDuihuanJifen(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddTolJiFen(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("AddTolJiFen",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AddTolJiFen",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  AddTolJiFen(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgreeWWFangShou(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("AgreeWWFangShou",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AgreeWWFangShou",1,"CUser *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AgreeWWFangShou",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("AgreeWWFangShou",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)AgreeWWFangShou(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsFangShou(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("IsFangShou",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("IsFangShou",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)IsFangShou(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UseItemToNpc(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("UseItemToNpc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UseItemToNpc",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UseItemToNpc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UseItemToNpc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("UseItemToNpc",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)UseItemToNpc(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Xiazhu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("Xiazhu",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Xiazhu",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Xiazhu",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Xiazhu",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Xiazhu",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("Xiazhu",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)Xiazhu(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNormalZhu(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("GetNormalZhu",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetNormalZhu",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)GetNormalZhu(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetExpertZhu(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetExpertZhu",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetExpertZhu",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetExpertZhu",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetExpertZhu(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMyZhu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("GetMyZhu",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMyZhu",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetMyZhu",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GetMyZhu",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetMyZhu",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)GetMyZhu(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InSaiPao(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("InSaiPao",0,0)
  result = (bool)InSaiPao();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetJingcaiAward(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetJingcaiAward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetJingcaiAward",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetJingcaiAward",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)GetJingcaiAward(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMingCi(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMingCi",0,0)
  result = (char *)GetMingCi();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterFuBenWJ(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("EnterFuBenWJ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterFuBenWJ",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterFuBenWJ",1,SWIGTYPE_p_CUser);
  }
  
  EnterFuBenWJ(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnterFuBenShiYao(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("EnterFuBenShiYao",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EnterFuBenShiYao",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EnterFuBenShiYao",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("EnterFuBenShiYao",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  EnterFuBenShiYao(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuBenKaiJia(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  bool result;
  
  SWIG_check_num_args("FuBenKaiJia",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FuBenKaiJia",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("FuBenKaiJia",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (bool)FuBenKaiJia(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TeXiao(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("TeXiao",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TeXiao",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TeXiao",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  TeXiao(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendSysChannelMsg(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("SendSysChannelMsg",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SendSysChannelMsg",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  SendSysChannelMsg((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SaiPaoFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("SaiPaoFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SaiPaoFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SaiPaoFight",1,SWIGTYPE_p_CUser);
  }
  
  SaiPaoFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiaoYuFight(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("DiaoYuFight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiaoYuFight",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DiaoYuFight",1,SWIGTYPE_p_CUser);
  }
  
  DiaoYuFight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindJiHuoMa(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("FindJiHuoMa",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("FindJiHuoMa",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)FindJiHuoMa(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenXinShi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("OpenXinShi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OpenXinShi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("OpenXinShi",1,SWIGTYPE_p_CUser);
  }
  
  OpenXinShi(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListXinShi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("ListXinShi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ListXinShi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("ListXinShi",1,SWIGTYPE_p_CUser);
  }
  
  ListXinShi(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetLeiTaiJiFen(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetLeiTaiJiFen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLeiTaiJiFen",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetLeiTaiJiFen",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetLeiTaiJiFen",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)GetLeiTaiJiFen(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiJiaoYiJian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("TiJiaoYiJian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiJiaoYiJian",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiJiaoYiJian",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("TiJiaoYiJian",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  TiJiaoYiJian(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendBankPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("SendBankPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SendBankPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SendBankPet",1,SWIGTYPE_p_CUser);
  }
  
  SendBankPet(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SaveBankPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  bool result;
  
  SWIG_check_num_args("SaveBankPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SaveBankPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SaveBankPet",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (bool)SaveBankPet(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBankPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  bool result;
  
  SWIG_check_num_args("GetBankPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBankPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetBankPet",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (bool)GetBankPet(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendMissionInfo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("SendMissionInfo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SendMissionInfo",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SendMissionInfo",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("SendMissionInfo",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  arg3 = (char *)lua_tostring(L, 3);
  SendMissionInfo(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JieBai(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("JieBai",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JieBai",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("JieBai",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("JieBai",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("JieBai",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)JieBai(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JieSanJieBai(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("JieSanJieBai",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JieSanJieBai",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("JieSanJieBai",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)JieSanJieBai(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetJieBaiUser(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetJieBaiUser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetJieBaiUser",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("GetJieBaiUser",1,SWIGTYPE_p_CUser);
  }
  
  result = (char *)GetJieBaiUser(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CanJieBai(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("CanJieBai",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CanJieBai",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CanJieBai",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)CanJieBai(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelRole(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DelRole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelRole",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelRole",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("DelRole",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  DelRole(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetUserId(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetUserId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetUserId",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetUserId",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetUserId();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetRoleId(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetRoleId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetRoleId",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetRoleId",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetRoleId();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetFace(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetFace",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetFace",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetFace();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetScene(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  CScene *result = 0 ;
  
  SWIG_check_num_args("GetScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetScene",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetScene",1,SWIGTYPE_p_CUser);
  }
  
  result = (CScene *)(arg1)->GetScene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CScene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetFightId(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetFightId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetFightId",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetFightId",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetFightId();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetFightPos(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetFightPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetFightPos",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetFightPos",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetFightPos();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetName",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetName",1,SWIGTYPE_p_CUser);
  }
  
  result = (char *)(arg1)->GetName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetSex(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetSex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetSex",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetSex",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetSex();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetHead(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetHead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetHead",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetHead",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetHead();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetXiang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetXiang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetXiang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetXiang",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetXiang();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetX(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetX",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetX",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetX();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetY(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetY",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetY",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetY();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLevel",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetLevel",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetLevel();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetExp(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetExp",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetExp",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetExp();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetTiZhi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetTiZhi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTiZhi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetTiZhi",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetTiZhi();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetLiLiang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetLiLiang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLiLiang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetLiLiang",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetLiLiang();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMinJie(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetMinJie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMinJie",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMinJie",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetMinJie();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetLingLi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetLingLi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLingLi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetLingLi",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetLingLi();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetNaiLi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetNaiLi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetNaiLi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetNaiLi",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetNaiLi();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetShuXinDian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetShuXinDian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetShuXinDian",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetShuXinDian",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetShuXinDian();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetJin(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetJin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetJin",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetJin",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetJin();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetMu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMu",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMu",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetMu();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetShui(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetShui",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetShui",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetShui",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetShui();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetHuo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetHuo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetHuo",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetHuo",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetHuo();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetTu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetTu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTu",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetTu",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetTu();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetXiangXinDian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetXiangXinDian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetXiangXinDian",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetXiangXinDian",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetXiangXinDian();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetHp(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetHp",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetHp",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMp(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMp",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMp",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetMp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMaxHp(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMaxHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMaxHp",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMaxHp",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetMaxHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMaxMp(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMaxMp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMaxMp",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMaxMp",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetMaxMp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetName(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetName",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetName",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLevel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("AddLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLevel",1,"CUser *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("AddLevel",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddLevel",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->AddLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLevel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("AddLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLevel",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddLevel",1,SWIGTYPE_p_CUser);
  }
  
  (arg1)->AddLevel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLevel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CUser_AddLevel__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_CUser_AddLevel__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CUser_AddLevel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddLevel(CUser *,bool)\n"
    "    AddLevel(CUser *)\n");
  lua_error(L);return 0;
}


static int _wrap_CUser_AddExp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("AddExp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddExp",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddExp",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("AddExp",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddExp",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->AddExp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddExp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddExp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddExp",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddExp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddExp",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddExp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddExp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CUser_AddExp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CUser_AddExp__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CUser_AddExp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddExp(CUser *,int,bool)\n"
    "    AddExp(CUser *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CUser_AddTiZhi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddTiZhi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddTiZhi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddTiZhi",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddTiZhi(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLiLiang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddLiLiang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLiLiang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddLiLiang",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddLiLiang(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddMinJie(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddMinJie",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddMinJie",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddMinJie",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddMinJie(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLingLi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddLingLi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLingLi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddLingLi",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddLingLi(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddNaiLi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddNaiLi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddNaiLi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddNaiLi",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddNaiLi(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddShuXinDian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddShuXinDian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddShuXinDian",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddShuXinDian",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddShuXinDian",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddShuXinDian(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddJin(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddJin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddJin",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddJin",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddJin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddMu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddMu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddMu",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddMu",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddMu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddShui(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddShui",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddShui",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddShui",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddShui(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddHuo(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddHuo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddHuo",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddHuo",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddHuo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddTu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddTu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddTu",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddTu",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddTu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddXiangXinDian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("AddXiangXinDian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddXiangXinDian",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddXiangXinDian",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->AddXiangXinDian(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddHp(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddHp",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddHp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddHp",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddHp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddMp(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddMp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddMp",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddMp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddMp",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddMp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetDamage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetDamage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDamage",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetDamage",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetDamage();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetRecovery(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetRecovery",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetRecovery",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetRecovery",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetRecovery();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetSpeed(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetSpeed",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetSpeed",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddDamage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddDamage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddDamage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddDamage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddDamage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddDamage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddSkillDamage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddSkillDamage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddSkillDamage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddSkillDamage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddSkillDamage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddSkillDamage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddRecovery(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddRecovery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddRecovery",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddRecovery",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddRecovery",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddRecovery(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddSpeed(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddSpeed",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddSpeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddSpeed",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddPackage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  SItemInstance *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AddPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPackage",1,"CUser *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddPackage",2,"SItemInstance &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddPackage",1,SWIGTYPE_p_CUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("CUser_AddPackage",2,SWIGTYPE_p_SItemInstance);
  }
  
  result = (bool)(arg1)->AddPackage(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddPackage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("AddPackage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddPackage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddPackage",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->AddPackage(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddPackage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("AddPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddPackage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->AddPackage(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddPackage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SItemInstance, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CUser_AddPackage__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CUser_AddPackage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CUser_AddPackage__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CUser_AddPackage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddPackage(CUser *,SItemInstance &)\n"
    "    AddPackage(CUser *,int,int)\n"
    "    AddPackage(CUser *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CUser_DelPackage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("DelPackage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelPackage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DelPackage",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_DelPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->DelPackage(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_DelPackage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("DelPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelPackage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_DelPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->DelPackage(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_DelPackage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CUser_DelPackage__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CUser_DelPackage__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CUser_DelPackage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DelPackage(CUser *,int,int)\n"
    "    DelPackage(CUser *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CUser_GetMoney(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetMoney",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMoney",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMoney",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetMoney();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetTili(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetTili",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTili",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetTili",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetTili();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetMoney(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("SetMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetMoney",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetMoney",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint32) lua_tonumber(L,2);
  }
  (arg1)->SetMoney(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetTili(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetTili",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTili",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTili",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetTili",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTili(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddMoney(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddMoney",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddMoney",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddMoney",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddMoney(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddTili(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddTili",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddTili",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddTili",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddTili",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddTili(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItemfangYu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetItemfangYu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemfangYu",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItemfangYu",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetItemfangYu();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItemGongji(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetItemGongji",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemGongji",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItemGongji",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetItemGongji();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItemFaLi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetItemFaLi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemFaLi",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItemFaLi",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetItemFaLi();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItemQiXue(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetItemQiXue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemQiXue",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItemQiXue",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetItemQiXue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItemSudu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetItemSudu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemSudu",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItemSudu",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetItemSudu();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetTeam(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetTeam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTeam",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetTeam",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetTeam();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  SharePetPtr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AddPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPet",1,"CUser *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddPet",2,"SharePetPtr &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddPet",1,SWIGTYPE_p_CUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SharePetPtr,0))){
    SWIG_fail_ptr("CUser_AddPet",2,SWIGTYPE_p_SharePetPtr);
  }
  
  result = (bool)(arg1)->AddPet(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AssignPetAttr(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  SWIG_check_num_args("AssignPetAttr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssignPetAttr",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AssignPetAttr",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  (arg1)->AssignPetAttr(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AssignPetKangXing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  SWIG_check_num_args("AssignPetKangXing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssignPetKangXing",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AssignPetKangXing",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  (arg1)->AssignPetKangXing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetGuanKanPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("SetGuanKanPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetGuanKanPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetGuanKanPet",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->SetGuanKanPet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetChuZhanPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("SetChuZhanPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetChuZhanPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetChuZhanPet",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->SetChuZhanPet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetPetIdle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("SetPetIdle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetPetIdle",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetPetIdle",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->SetPetIdle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_XunYangPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("XunYangPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("XunYangPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_XunYangPet",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->XunYangPet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_DelPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("DelPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_DelPet",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->DelPet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetPkVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("SetPkVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetPkVal",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetPkVal",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->SetPkVal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetPkVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetPkVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetPkVal",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetPkVal",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetPkVal();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddPkVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddPkVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPkVal",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddPkVal",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddPkVal",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddPkVal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetCall(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("SetCall",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetCall",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetCall",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetCall",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetCall",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->SetCall(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetChuZhanPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("GetChuZhanPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetChuZhanPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetChuZhanPet",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetChuZhanPet();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMission(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMission",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMission",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetMission",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMission",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->GetMission(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddMission(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("AddMission",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddMission",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddMission",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("AddMission",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddMission",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->AddMission(arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_UpdateMission(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("UpdateMission",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpdateMission",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UpdateMission",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UpdateMission",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_UpdateMission",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->UpdateMission(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_DelMission(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DelMission",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelMission",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelMission",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_DelMission",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->DelMission(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetPetByPos(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  SPet result;
  
  SWIG_check_num_args("GetPetByPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetPetByPos",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetPetByPos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetPetByPos",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->GetPetByPos(arg2);
  {
    SPet * resultptr = new SPet((const SPet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SPet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_UpdatePetToBaby(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("UpdatePetToBaby",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpdatePetToBaby",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_UpdatePetToBaby",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->UpdatePetToBaby(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SetVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetVal",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetVal",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetVal",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetVal",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetVal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetVal",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetVal",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetVal",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->GetVal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetSaveVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SetSaveVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetSaveVal",1,"CUser *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetSaveVal",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetSaveVal",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetSaveVal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetSaveVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int result;
  
  SWIG_check_num_args("GetSaveVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetSaveVal",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetSaveVal",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (int)(arg1)->GetSaveVal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetBitSet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetBitSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetBitSet",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetBitSet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetBitSet",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetBitSet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_ClearBitSet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClearBitSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClearBitSet",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClearBitSet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_ClearBitSet",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->ClearBitSet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_HaveBitSet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("HaveBitSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HaveBitSet",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("HaveBitSet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_HaveBitSet",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->HaveBitSet(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  SItemInstance *result = 0 ;
  
  SWIG_check_num_args("GetItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItem",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (SItemInstance *)(arg1)->GetItem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SItemInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_LianHuaPackage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  int result;
  
  SWIG_check_num_args("LianHuaPackage",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LianHuaPackage",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_LianHuaPackage",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  {
    arg4 = (uint8) lua_tonumber(L,4);
  }
  {
    arg5 = (uint8) lua_tonumber(L,5);
  }
  result = (int)(arg1)->LianHuaPackage(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_TianHuanPackage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int result;
  
  SWIG_check_num_args("TianHuanPackage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TianHuanPackage",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_TianHuanPackage",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (int)(arg1)->TianHuanPackage(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_RepairItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int result;
  
  SWIG_check_num_args("RepairItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RepairItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_RepairItem",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (int)(arg1)->RepairItem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetRepairFee(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetRepairFee",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetRepairFee",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetRepairFee",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetRepairFee();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_RepairTotel(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("RepairTotel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RepairTotel",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_RepairTotel",1,SWIGTYPE_p_CUser);
  }
  
  (arg1)->RepairTotel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_DelPackageById(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("DelPackageById",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelPackageById",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelPackageById",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DelPackageById",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_DelPackageById",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->DelPackageById(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMenPai(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMenPai",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMenPai",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMenPai",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetMenPai();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetMenPai(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetMenPai",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetMenPai",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMenPai",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetMenPai",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetMenPai(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetDaoHang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetDaoHang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDaoHang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetDaoHang",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetDaoHang();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddDaoHang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("AddDaoHang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddDaoHang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddDaoHang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddDaoHang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->AddDaoHang(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddQianNeng(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddQianNeng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddQianNeng",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddQianNeng",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddQianNeng",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddQianNeng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetCallScript(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetCallScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetCallScript",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetCallScript",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetCallScript",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetCallScript(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetCallFun(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SetCallFun",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetCallFun",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetCallFun",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetCallFun",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetCallFun((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetMPGongXian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetMPGongXian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetMPGongXian",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMPGongXian",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetMPGongXian",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetMPGongXian(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetMPGongXian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetMPGongXian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMPGongXian",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetMPGongXian",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetMPGongXian();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetSkill(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SetSkill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetSkill",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetSkill",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetSkill",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetSkill",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetSkill(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetSkillLevel(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetSkillLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetSkillLevel",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetSkillLevel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetSkillLevel",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->GetSkillLevel(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetPetZhongCheng(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SetPetZhongCheng",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetPetZhongCheng",1,"CUser *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetPetZhongCheng",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetPetZhongCheng",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetPetZhongCheng(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_PetRestore(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("PetRestore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PetRestore",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_PetRestore",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->PetRestore(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_JianDingItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int result;
  
  SWIG_check_num_args("JianDingItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JianDingItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_JianDingItem",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (int)(arg1)->JianDingItem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetQianNeng(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetQianNeng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetQianNeng",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetQianNeng",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetQianNeng",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetQianNeng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetQianNeng(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetQianNeng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetQianNeng",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetQianNeng",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetQianNeng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_HaveItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("HaveItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HaveItem",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("HaveItem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_HaveItem",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->HaveItem(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddTimer(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("AddTimer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddTimer",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddTimer",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddTimer",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddTimer",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->AddTimer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_DelTimer(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DelTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DelTimer",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DelTimer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_DelTimer",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->DelTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_CompoundStone(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  bool result;
  
  SWIG_check_num_args("CompoundStone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CompoundStone",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_CompoundStone",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (bool)(arg1)->CompoundStone(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_CompoundItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  int result;
  
  SWIG_check_num_args("CompoundItem",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CompoundItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_CompoundItem",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  {
    arg4 = (uint8) lua_tonumber(L,4);
  }
  result = (int)(arg1)->CompoundItem(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_CompoundItem1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("CompoundItem1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CompoundItem1",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CompoundItem1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_CompoundItem1",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->CompoundItem1(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_JianDingShiPin(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  bool result;
  
  SWIG_check_num_args("JianDingShiPin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("JianDingShiPin",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_JianDingShiPin",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (bool)(arg1)->JianDingShiPin(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_XiangQian(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  bool result;
  
  SWIG_check_num_args("XiangQian",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("XiangQian",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_XiangQian",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (bool)(arg1)->XiangQian(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_HavePet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("HavePet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HavePet",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("HavePet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_HavePet",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->HavePet(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_HaveBaobaoPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("HaveBaobaoPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HaveBaobaoPet",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("HaveBaobaoPet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_HaveBaobaoPet",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->HaveBaobaoPet(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetCZPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  SPet result;
  
  SWIG_check_num_args("GetCZPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetCZPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetCZPet",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetCZPet();
  {
    SPet * resultptr = new SPet((const SPet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SPet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetCZPetWuXue(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetCZPetWuXue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetCZPetWuXue",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetCZPetWuXue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetCZPetWuXue",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetCZPetWuXue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_MissionFull(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("MissionFull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MissionFull",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_MissionFull",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)(arg1)->MissionFull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetBangPai(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("GetBangPai",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangPai",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetBangPai",1,SWIGTYPE_p_CUser);
  }
  
  result = (arg1)->GetBangPai();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetBangState(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetBangState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangState",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetBangState",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetBangState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetBangRank(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetBangRank",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBangRank",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetBangRank",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetBangRank();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_DismissBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("DismissBang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DismissBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_DismissBang",1,SWIGTYPE_p_CUser);
  }
  
  (arg1)->DismissBang();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_UndismissBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("UndismissBang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UndismissBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_UndismissBang",1,SWIGTYPE_p_CUser);
  }
  
  (arg1)->UndismissBang();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItemNum(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetItemNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemNum",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetItemNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItemNum",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->GetItemNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetEquip(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  SItemInstance *result = 0 ;
  
  SWIG_check_num_args("GetEquip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetEquip",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetEquip",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (SItemInstance *)(arg1)->GetEquip(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SItemInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddBangDingPackage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("AddBangDingPackage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddBangDingPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddBangDingPackage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddBangDingPackage",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddBangDingPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->AddBangDingPackage(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddBangDingPackage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("AddBangDingPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddBangDingPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddBangDingPackage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddBangDingPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->AddBangDingPackage(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddBangDingPackage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CUser_AddBangDingPackage__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CUser_AddBangDingPackage__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CUser_AddBangDingPackage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddBangDingPackage(CUser *,int,int)\n"
    "    AddBangDingPackage(CUser *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CUser_AddBlueCrystal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("AddBlueCrystal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddBlueCrystal",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddBlueCrystal",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddBlueCrystal",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddBlueCrystal",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->AddBlueCrystal(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLianHuaStone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("AddLianHuaStone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLianHuaStone",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddLianHuaStone",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddLianHuaStone",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddLianHuaStone",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->AddLianHuaStone(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLianHuaStone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("AddLianHuaStone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLianHuaStone",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddLianHuaStone",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddLianHuaStone",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->AddLianHuaStone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddLianHuaStone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CUser_AddLianHuaStone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CUser_AddLianHuaStone__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CUser_AddLianHuaStone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddLianHuaStone(CUser *,int,int)\n"
    "    AddLianHuaStone(CUser *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CUser_AddLevelPackage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("AddLevelPackage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddLevelPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddLevelPackage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddLevelPackage",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddLevelPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->AddLevelPackage(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddAttrPackage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("AddAttrPackage",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddAttrPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddAttrPackage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddAttrPackage",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddAttrPackage",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddAttrPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)(arg1)->AddAttrPackage(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_EmptyPackage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("EmptyPackage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EmptyPackage",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_EmptyPackage",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->EmptyPackage();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddTongBao(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddTongBao",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddTongBao",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddTongBao",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddTongBao",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddTongBao(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SaveSellItem(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  SWIG_check_num_args("SaveSellItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SaveSellItem",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SaveSellItem",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  (arg1)->SaveSellItem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_PetJieBang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int result;
  
  SWIG_check_num_args("PetJieBang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PetJieBang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_PetJieBang",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (int)(arg1)->PetJieBang(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetLeftDoubleTime(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetLeftDoubleTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLeftDoubleTime",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetLeftDoubleTime",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetLeftDoubleTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetDouble(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetDouble",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetDouble",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetDouble",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetDouble(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_OpenPackage(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("OpenPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OpenPackage",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OpenPackage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_OpenPackage",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->OpenPackage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetShengWang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetShengWang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetShengWang",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetShengWang",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetShengWang();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetJiFen(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetJiFen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetJiFen",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetJiFen",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetJiFen();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetDieTimes(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetDieTimes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDieTimes",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetDieTimes",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetDieTimes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetShiFu(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  
  SWIG_check_num_args("SetShiFu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetShiFu",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetShiFu",1,SWIGTYPE_p_CUser);
  }
  
  (arg1)->SetShiFu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetChuShiNum(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int result;
  
  SWIG_check_num_args("GetChuShiNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetChuShiNum",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetChuShiNum",1,SWIGTYPE_p_CUser);
  }
  
  result = (int)(arg1)->GetChuShiNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetData8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  SWIG_check_num_args("SetData8",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetData8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetData8",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  (arg1)->SetData8(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetData8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 result;
  
  SWIG_check_num_args("GetData8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetData8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetData8",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (arg1)->GetData8(arg2);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetShengWang(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetShengWang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetShengWang",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetShengWang",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetShengWang",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetShengWang(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetData32(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  SWIG_check_num_args("SetData32",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetData32",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetData32",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint32) lua_tonumber(L,3);
  }
  (arg1)->SetData32(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetData32(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  SWIG_check_num_args("GetData32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetData32",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetData32",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (arg1)->GetData32(arg2);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetData16(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  
  SWIG_check_num_args("SetData16",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetData16",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetData16",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint16) lua_tonumber(L,3);
  }
  (arg1)->SetData16(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetData16(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint16 result;
  
  SWIG_check_num_args("GetData16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetData16",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetData16",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (arg1)->GetData16(arg2);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetTitle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("SetTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTitle",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetTitle",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  (arg1)->SetTitle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetHeChengVal(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int result;
  
  SWIG_check_num_args("GetHeChengVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetHeChengVal",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetHeChengVal",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (int)(arg1)->GetHeChengVal(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_HeChengLanShuiJing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  bool result;
  
  SWIG_check_num_args("HeChengLanShuiJing",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HeChengLanShuiJing",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_HeChengLanShuiJing",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  {
    arg4 = (uint8) lua_tonumber(L,4);
  }
  result = (bool)(arg1)->HeChengLanShuiJing(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_HeChengKaiJia(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  uint8 arg3 ;
  int result;
  
  SWIG_check_num_args("HeChengKaiJia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HeChengKaiJia",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("HeChengKaiJia",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_HeChengKaiJia",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  result = (int)(arg1)->HeChengKaiJia(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetPetById(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetPetById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetPetById",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetPetById",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetPetById",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->GetPetById(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetItemById(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  int arg2 ;
  SItemInstance *result = 0 ;
  
  SWIG_check_num_args("GetItemById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemById",1,"CUser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetItemById",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetItemById",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (SItemInstance *)(arg1)->GetItemById(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SItemInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddPetQinMi(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("AddPetQinMi",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddPetQinMi",1,"CUser *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddPetQinMi",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddPetQinMi",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->AddPetQinMi(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetPetType(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  SWIG_check_num_args("SetPetType",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetPetType",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetPetType",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  (arg1)->SetPetType(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_XiShouPet(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("XiShouPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("XiShouPet",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_XiShouPet",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  (arg1)->XiShouPet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddQiLing(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  bool result;
  
  SWIG_check_num_args("AddQiLing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddQiLing",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddQiLing",1,SWIGTYPE_p_CUser);
  }
  
  result = (bool)(arg1)->AddQiLing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_AddTextTitle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("AddTextTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddTextTitle",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("AddTextTitle",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_AddTextTitle",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->AddTextTitle((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_UseTextTitle(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("UseTextTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UseTextTitle",1,"CUser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UseTextTitle",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_UseTextTitle",1,SWIGTYPE_p_CUser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->UseTextTitle((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetExtData8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  uint8 result;
  
  SWIG_check_num_args("GetExtData8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetExtData8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetExtData8",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  result = (arg1)->GetExtData8(arg2);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetExtData8(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  
  SWIG_check_num_args("SetExtData8",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetExtData8",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetExtData8",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  (arg1)->SetExtData8(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetExtData16(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  uint16 result;
  
  SWIG_check_num_args("GetExtData16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetExtData16",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetExtData16",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  result = (arg1)->GetExtData16(arg2);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetExtData16(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  
  SWIG_check_num_args("SetExtData16",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetExtData16",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetExtData16",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  {
    arg3 = (uint16) lua_tonumber(L,3);
  }
  (arg1)->SetExtData16(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_GetExtData32(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  uint32 result;
  
  SWIG_check_num_args("GetExtData32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetExtData32",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_GetExtData32",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  result = (arg1)->GetExtData32(arg2);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CUser_SetExtData32(lua_State* L) {
  int SWIG_arg = 0;
  CUser *arg1 = (CUser *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  
  SWIG_check_num_args("SetExtData32",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetExtData32",1,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CUser_SetExtData32",1,SWIGTYPE_p_CUser);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  {
    arg3 = (uint32) lua_tonumber(L,3);
  }
  (arg1)->SetExtData32(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CUser(lua_State* L) {
  int SWIG_arg = 0;
  CUser *result = 0 ;
  
  SWIG_check_num_args("CUser::CUser",0,0)
  result = (CUser *)new CUser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CUser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CUser(void *obj) {
CUser *arg1 = (CUser *) obj;
delete arg1;
}
static swig_lua_method swig_CUser_methods[] = {
    {"GetUserId", _wrap_CUser_GetUserId}, 
    {"GetRoleId", _wrap_CUser_GetRoleId}, 
    {"GetFace", _wrap_CUser_GetFace}, 
    {"GetScene", _wrap_CUser_GetScene}, 
    {"GetFightId", _wrap_CUser_GetFightId}, 
    {"GetFightPos", _wrap_CUser_GetFightPos}, 
    {"GetName", _wrap_CUser_GetName}, 
    {"GetSex", _wrap_CUser_GetSex}, 
    {"GetHead", _wrap_CUser_GetHead}, 
    {"GetXiang", _wrap_CUser_GetXiang}, 
    {"GetX", _wrap_CUser_GetX}, 
    {"GetY", _wrap_CUser_GetY}, 
    {"GetLevel", _wrap_CUser_GetLevel}, 
    {"GetExp", _wrap_CUser_GetExp}, 
    {"GetTiZhi", _wrap_CUser_GetTiZhi}, 
    {"GetLiLiang", _wrap_CUser_GetLiLiang}, 
    {"GetMinJie", _wrap_CUser_GetMinJie}, 
    {"GetLingLi", _wrap_CUser_GetLingLi}, 
    {"GetNaiLi", _wrap_CUser_GetNaiLi}, 
    {"GetShuXinDian", _wrap_CUser_GetShuXinDian}, 
    {"GetJin", _wrap_CUser_GetJin}, 
    {"GetMu", _wrap_CUser_GetMu}, 
    {"GetShui", _wrap_CUser_GetShui}, 
    {"GetHuo", _wrap_CUser_GetHuo}, 
    {"GetTu", _wrap_CUser_GetTu}, 
    {"GetXiangXinDian", _wrap_CUser_GetXiangXinDian}, 
    {"GetHp", _wrap_CUser_GetHp}, 
    {"GetMp", _wrap_CUser_GetMp}, 
    {"GetMaxHp", _wrap_CUser_GetMaxHp}, 
    {"GetMaxMp", _wrap_CUser_GetMaxMp}, 
    {"SetName", _wrap_CUser_SetName}, 
    {"AddLevel", _wrap_CUser_AddLevel}, 
    {"AddExp", _wrap_CUser_AddExp}, 
    {"AddTiZhi", _wrap_CUser_AddTiZhi}, 
    {"AddLiLiang", _wrap_CUser_AddLiLiang}, 
    {"AddMinJie", _wrap_CUser_AddMinJie}, 
    {"AddLingLi", _wrap_CUser_AddLingLi}, 
    {"AddNaiLi", _wrap_CUser_AddNaiLi}, 
    {"AddShuXinDian", _wrap_CUser_AddShuXinDian}, 
    {"AddJin", _wrap_CUser_AddJin}, 
    {"AddMu", _wrap_CUser_AddMu}, 
    {"AddShui", _wrap_CUser_AddShui}, 
    {"AddHuo", _wrap_CUser_AddHuo}, 
    {"AddTu", _wrap_CUser_AddTu}, 
    {"AddXiangXinDian", _wrap_CUser_AddXiangXinDian}, 
    {"AddHp", _wrap_CUser_AddHp}, 
    {"AddMp", _wrap_CUser_AddMp}, 
    {"GetDamage", _wrap_CUser_GetDamage}, 
    {"GetRecovery", _wrap_CUser_GetRecovery}, 
    {"GetSpeed", _wrap_CUser_GetSpeed}, 
    {"AddDamage", _wrap_CUser_AddDamage}, 
    {"AddSkillDamage", _wrap_CUser_AddSkillDamage}, 
    {"AddRecovery", _wrap_CUser_AddRecovery}, 
    {"AddSpeed", _wrap_CUser_AddSpeed}, 
    {"AddPackage", _wrap_CUser_AddPackage}, 
    {"DelPackage", _wrap_CUser_DelPackage}, 
    {"GetMoney", _wrap_CUser_GetMoney}, 
    {"GetTili", _wrap_CUser_GetTili}, 
    {"SetMoney", _wrap_CUser_SetMoney}, 
    {"SetTili", _wrap_CUser_SetTili}, 
    {"AddMoney", _wrap_CUser_AddMoney}, 
    {"AddTili", _wrap_CUser_AddTili}, 
    {"GetItemfangYu", _wrap_CUser_GetItemfangYu}, 
    {"GetItemGongji", _wrap_CUser_GetItemGongji}, 
    {"GetItemFaLi", _wrap_CUser_GetItemFaLi}, 
    {"GetItemQiXue", _wrap_CUser_GetItemQiXue}, 
    {"GetItemSudu", _wrap_CUser_GetItemSudu}, 
    {"GetTeam", _wrap_CUser_GetTeam}, 
    {"AddPet", _wrap_CUser_AddPet}, 
    {"AssignPetAttr", _wrap_CUser_AssignPetAttr}, 
    {"AssignPetKangXing", _wrap_CUser_AssignPetKangXing}, 
    {"SetGuanKanPet", _wrap_CUser_SetGuanKanPet}, 
    {"SetChuZhanPet", _wrap_CUser_SetChuZhanPet}, 
    {"SetPetIdle", _wrap_CUser_SetPetIdle}, 
    {"XunYangPet", _wrap_CUser_XunYangPet}, 
    {"DelPet", _wrap_CUser_DelPet}, 
    {"SetPkVal", _wrap_CUser_SetPkVal}, 
    {"GetPkVal", _wrap_CUser_GetPkVal}, 
    {"AddPkVal", _wrap_CUser_AddPkVal}, 
    {"SetCall", _wrap_CUser_SetCall}, 
    {"GetChuZhanPet", _wrap_CUser_GetChuZhanPet}, 
    {"GetMission", _wrap_CUser_GetMission}, 
    {"AddMission", _wrap_CUser_AddMission}, 
    {"UpdateMission", _wrap_CUser_UpdateMission}, 
    {"DelMission", _wrap_CUser_DelMission}, 
    {"GetPetByPos", _wrap_CUser_GetPetByPos}, 
    {"UpdatePetToBaby", _wrap_CUser_UpdatePetToBaby}, 
    {"SetVal", _wrap_CUser_SetVal}, 
    {"GetVal", _wrap_CUser_GetVal}, 
    {"SetSaveVal", _wrap_CUser_SetSaveVal}, 
    {"GetSaveVal", _wrap_CUser_GetSaveVal}, 
    {"SetBitSet", _wrap_CUser_SetBitSet}, 
    {"ClearBitSet", _wrap_CUser_ClearBitSet}, 
    {"HaveBitSet", _wrap_CUser_HaveBitSet}, 
    {"GetItem", _wrap_CUser_GetItem}, 
    {"LianHuaPackage", _wrap_CUser_LianHuaPackage}, 
    {"TianHuanPackage", _wrap_CUser_TianHuanPackage}, 
    {"RepairItem", _wrap_CUser_RepairItem}, 
    {"GetRepairFee", _wrap_CUser_GetRepairFee}, 
    {"RepairTotel", _wrap_CUser_RepairTotel}, 
    {"DelPackageById", _wrap_CUser_DelPackageById}, 
    {"GetMenPai", _wrap_CUser_GetMenPai}, 
    {"SetMenPai", _wrap_CUser_SetMenPai}, 
    {"GetDaoHang", _wrap_CUser_GetDaoHang}, 
    {"AddDaoHang", _wrap_CUser_AddDaoHang}, 
    {"AddQianNeng", _wrap_CUser_AddQianNeng}, 
    {"SetCallScript", _wrap_CUser_SetCallScript}, 
    {"SetCallFun", _wrap_CUser_SetCallFun}, 
    {"SetMPGongXian", _wrap_CUser_SetMPGongXian}, 
    {"GetMPGongXian", _wrap_CUser_GetMPGongXian}, 
    {"SetSkill", _wrap_CUser_SetSkill}, 
    {"GetSkillLevel", _wrap_CUser_GetSkillLevel}, 
    {"SetPetZhongCheng", _wrap_CUser_SetPetZhongCheng}, 
    {"PetRestore", _wrap_CUser_PetRestore}, 
    {"JianDingItem", _wrap_CUser_JianDingItem}, 
    {"SetQianNeng", _wrap_CUser_SetQianNeng}, 
    {"GetQianNeng", _wrap_CUser_GetQianNeng}, 
    {"HaveItem", _wrap_CUser_HaveItem}, 
    {"AddTimer", _wrap_CUser_AddTimer}, 
    {"DelTimer", _wrap_CUser_DelTimer}, 
    {"CompoundStone", _wrap_CUser_CompoundStone}, 
    {"CompoundItem", _wrap_CUser_CompoundItem}, 
    {"CompoundItem1", _wrap_CUser_CompoundItem1}, 
    {"JianDingShiPin", _wrap_CUser_JianDingShiPin}, 
    {"XiangQian", _wrap_CUser_XiangQian}, 
    {"HavePet", _wrap_CUser_HavePet}, 
    {"HaveBaobaoPet", _wrap_CUser_HaveBaobaoPet}, 
    {"GetCZPet", _wrap_CUser_GetCZPet}, 
    {"SetCZPetWuXue", _wrap_CUser_SetCZPetWuXue}, 
    {"MissionFull", _wrap_CUser_MissionFull}, 
    {"GetBangPai", _wrap_CUser_GetBangPai}, 
    {"GetBangState", _wrap_CUser_GetBangState}, 
    {"GetBangRank", _wrap_CUser_GetBangRank}, 
    {"DismissBang", _wrap_CUser_DismissBang}, 
    {"UndismissBang", _wrap_CUser_UndismissBang}, 
    {"GetItemNum", _wrap_CUser_GetItemNum}, 
    {"GetEquip", _wrap_CUser_GetEquip}, 
    {"AddBangDingPackage", _wrap_CUser_AddBangDingPackage}, 
    {"AddBlueCrystal", _wrap_CUser_AddBlueCrystal}, 
    {"AddLianHuaStone", _wrap_CUser_AddLianHuaStone}, 
    {"AddLevelPackage", _wrap_CUser_AddLevelPackage}, 
    {"AddAttrPackage", _wrap_CUser_AddAttrPackage}, 
    {"EmptyPackage", _wrap_CUser_EmptyPackage}, 
    {"AddTongBao", _wrap_CUser_AddTongBao}, 
    {"SaveSellItem", _wrap_CUser_SaveSellItem}, 
    {"PetJieBang", _wrap_CUser_PetJieBang}, 
    {"GetLeftDoubleTime", _wrap_CUser_GetLeftDoubleTime}, 
    {"SetDouble", _wrap_CUser_SetDouble}, 
    {"OpenPackage", _wrap_CUser_OpenPackage}, 
    {"GetShengWang", _wrap_CUser_GetShengWang}, 
    {"GetJiFen", _wrap_CUser_GetJiFen}, 
    {"GetDieTimes", _wrap_CUser_GetDieTimes}, 
    {"SetShiFu", _wrap_CUser_SetShiFu}, 
    {"GetChuShiNum", _wrap_CUser_GetChuShiNum}, 
    {"SetData8", _wrap_CUser_SetData8}, 
    {"GetData8", _wrap_CUser_GetData8}, 
    {"SetShengWang", _wrap_CUser_SetShengWang}, 
    {"SetData32", _wrap_CUser_SetData32}, 
    {"GetData32", _wrap_CUser_GetData32}, 
    {"SetData16", _wrap_CUser_SetData16}, 
    {"GetData16", _wrap_CUser_GetData16}, 
    {"SetTitle", _wrap_CUser_SetTitle}, 
    {"GetHeChengVal", _wrap_CUser_GetHeChengVal}, 
    {"HeChengLanShuiJing", _wrap_CUser_HeChengLanShuiJing}, 
    {"HeChengKaiJia", _wrap_CUser_HeChengKaiJia}, 
    {"GetPetById", _wrap_CUser_GetPetById}, 
    {"GetItemById", _wrap_CUser_GetItemById}, 
    {"AddPetQinMi", _wrap_CUser_AddPetQinMi}, 
    {"SetPetType", _wrap_CUser_SetPetType}, 
    {"XiShouPet", _wrap_CUser_XiShouPet}, 
    {"AddQiLing", _wrap_CUser_AddQiLing}, 
    {"AddTextTitle", _wrap_CUser_AddTextTitle}, 
    {"UseTextTitle", _wrap_CUser_UseTextTitle}, 
    {"GetExtData8", _wrap_CUser_GetExtData8}, 
    {"SetExtData8", _wrap_CUser_SetExtData8}, 
    {"GetExtData16", _wrap_CUser_GetExtData16}, 
    {"SetExtData16", _wrap_CUser_SetExtData16}, 
    {"GetExtData32", _wrap_CUser_GetExtData32}, 
    {"SetExtData32", _wrap_CUser_SetExtData32}, 
    {0,0}
};
static swig_lua_attribute swig_CUser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CUser_bases[] = {0};
static const char *swig_CUser_base_names[] = {0};
static swig_lua_class _wrap_class_CUser = { "CUser", &SWIGTYPE_p_CUser,_wrap_new_CUser, swig_delete_CUser, swig_CUser_methods, swig_CUser_attributes, swig_CUser_bases, swig_CUser_base_names };

static int _wrap_new_CScene(lua_State* L) {
  int SWIG_arg = 0;
  uint16 arg1 ;
  uint16 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  CScene *result = 0 ;
  
  SWIG_check_num_args("CScene",4,4)
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CScene",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("CScene",4,"char *");
  {
    arg1 = (uint16) lua_tonumber(L,1);
  }
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (CScene *)new CScene(arg1,arg2,(char const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CScene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_Exit(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  CUser *arg2 = (CUser *) 0 ;
  
  SWIG_check_num_args("Exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Exit",1,"CScene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Exit",2,"CUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_Exit",1,SWIGTYPE_p_CScene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CUser,0))){
    SWIG_fail_ptr("CScene_Exit",2,SWIGTYPE_p_CUser);
  }
  
  (arg1)->Exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_GetId(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetId",1,"CScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_GetId",1,SWIGTYPE_p_CScene);
  }
  
  result = (arg1)->GetId();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_GetMapId(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("GetMapId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMapId",1,"CScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_GetMapId",1,SWIGTYPE_p_CScene);
  }
  
  result = (arg1)->GetMapId();
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetName",1,"CScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_GetName",1,SWIGTYPE_p_CScene);
  }
  
  result = (char *)(arg1)->GetName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_AddJumpPoint(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint16 arg6 ;
  
  SWIG_check_num_args("AddJumpPoint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddJumpPoint",1,"CScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_AddJumpPoint",1,SWIGTYPE_p_CScene);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  {
    arg3 = (uint8) lua_tonumber(L,3);
  }
  {
    arg4 = (uint8) lua_tonumber(L,4);
  }
  {
    arg5 = (uint8) lua_tonumber(L,5);
  }
  {
    arg6 = (uint16) lua_tonumber(L,6);
  }
  (arg1)->AddJumpPoint(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_GetState(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  int result;
  
  SWIG_check_num_args("GetState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetState",1,"CScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_GetState",1,SWIGTYPE_p_CScene);
  }
  
  result = (int)(arg1)->GetState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_SetState(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetState",1,"CScene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetState",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_SetState",1,SWIGTYPE_p_CScene);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScene_Clear(lua_State* L) {
  int SWIG_arg = 0;
  CScene *arg1 = (CScene *) 0 ;
  
  SWIG_check_num_args("Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Clear",1,"CScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScene,0))){
    SWIG_fail_ptr("CScene_Clear",1,SWIGTYPE_p_CScene);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CScene(void *obj) {
CScene *arg1 = (CScene *) obj;
delete arg1;
}
static swig_lua_method swig_CScene_methods[] = {
    {"Exit", _wrap_CScene_Exit}, 
    {"GetId", _wrap_CScene_GetId}, 
    {"GetMapId", _wrap_CScene_GetMapId}, 
    {"GetName", _wrap_CScene_GetName}, 
    {"AddJumpPoint", _wrap_CScene_AddJumpPoint}, 
    {"GetState", _wrap_CScene_GetState}, 
    {"SetState", _wrap_CScene_SetState}, 
    {"Clear", _wrap_CScene_Clear}, 
    {0,0}
};
static swig_lua_attribute swig_CScene_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CScene_bases[] = {0};
static const char *swig_CScene_base_names[] = {0};
static swig_lua_class _wrap_class_CScene = { "CScene", &SWIGTYPE_p_CScene,_wrap_new_CScene, swig_delete_CScene, swig_CScene_methods, swig_CScene_attributes, swig_CScene_bases, swig_CScene_base_names };

static int _wrap_new_SItemTemplate(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *result = 0 ;
  
  SWIG_check_num_args("SItemTemplate",0,0)
  result = (SItemTemplate *)new SItemTemplate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SItemTemplate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_type_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("type",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_type_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_type_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("type",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_type_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->type);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_level_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_level_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_level_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_level_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->level);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mod",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_mod_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->mod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mod",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_mod_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->mod);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_sex_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("sex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sex",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_sex_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->sex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_sex_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("sex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sex",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_sex_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->sex);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_fangYu_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("fangYu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fangYu",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_fangYu_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->fangYu = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_fangYu_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("fangYu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fangYu",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_fangYu_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->fangYu);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_id_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_id_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_id_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_id_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->id);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_gongji_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("gongji",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gongji",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_gongji_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->gongji = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_gongji_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("gongji",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gongji",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_gongji_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->gongji);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_naijiu_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("naijiu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("naijiu",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_naijiu_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->naijiu = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_naijiu_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("naijiu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("naijiu",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_naijiu_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->naijiu);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addFaLi_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("addFaLi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addFaLi",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addFaLi_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->addFaLi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addFaLi_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("addFaLi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addFaLi",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addFaLi_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->addFaLi);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addQiXue_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("addQiXue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addQiXue",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addQiXue_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->addQiXue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addQiXue_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("addQiXue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addQiXue",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addQiXue_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->addQiXue);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addSudu_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("addSudu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addSudu",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addSudu_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->addSudu = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addSudu_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("addSudu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addSudu",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addSudu_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->addSudu);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_pic_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("pic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pic",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_pic_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->pic = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_pic_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("pic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pic",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_pic_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result =  ((arg1)->pic);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addXue_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("addXue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addXue",1,"SItemTemplate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("addXue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addXue_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->addXue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_addXue_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  int result;
  
  SWIG_check_num_args("addXue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addXue",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_addXue_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result = (int) ((arg1)->addXue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_jiage_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("jiage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jiage",1,"SItemTemplate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jiage",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_jiage_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->jiage = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_jiage_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  int result;
  
  SWIG_check_num_args("jiage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jiage",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_jiage_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result = (int) ((arg1)->jiage);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_name_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  string *arg2 = (string *) 0 ;
  
  SWIG_check_num_args("name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"SItemTemplate *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("name",2,"string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_name_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SItemTemplate_name_set",2,SWIGTYPE_p_std__string);
  }
  
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_name_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  string *result = 0 ;
  
  SWIG_check_num_args("name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_name_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result = (string *)& ((arg1)->name);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_describe_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  string *arg2 = (string *) 0 ;
  
  SWIG_check_num_args("describe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("describe",1,"SItemTemplate *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("describe",2,"string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_describe_set",1,SWIGTYPE_p_SItemTemplate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SItemTemplate_describe_set",2,SWIGTYPE_p_std__string);
  }
  
  if (arg1) (arg1)->describe = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemTemplate_describe_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemTemplate *arg1 = (SItemTemplate *) 0 ;
  string *result = 0 ;
  
  SWIG_check_num_args("describe",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("describe",1,"SItemTemplate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemTemplate,0))){
    SWIG_fail_ptr("SItemTemplate_describe_get",1,SWIGTYPE_p_SItemTemplate);
  }
  
  result = (string *)& ((arg1)->describe);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SItemTemplate(void *obj) {
SItemTemplate *arg1 = (SItemTemplate *) obj;
delete arg1;
}
static swig_lua_method swig_SItemTemplate_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SItemTemplate_attributes[] = {
    { "type", _wrap_SItemTemplate_type_get, _wrap_SItemTemplate_type_set},
    { "level", _wrap_SItemTemplate_level_get, _wrap_SItemTemplate_level_set},
    { "mod", _wrap_SItemTemplate_mod_get, _wrap_SItemTemplate_mod_set},
    { "sex", _wrap_SItemTemplate_sex_get, _wrap_SItemTemplate_sex_set},
    { "fangYu", _wrap_SItemTemplate_fangYu_get, _wrap_SItemTemplate_fangYu_set},
    { "id", _wrap_SItemTemplate_id_get, _wrap_SItemTemplate_id_set},
    { "gongji", _wrap_SItemTemplate_gongji_get, _wrap_SItemTemplate_gongji_set},
    { "naijiu", _wrap_SItemTemplate_naijiu_get, _wrap_SItemTemplate_naijiu_set},
    { "addFaLi", _wrap_SItemTemplate_addFaLi_get, _wrap_SItemTemplate_addFaLi_set},
    { "addQiXue", _wrap_SItemTemplate_addQiXue_get, _wrap_SItemTemplate_addQiXue_set},
    { "addSudu", _wrap_SItemTemplate_addSudu_get, _wrap_SItemTemplate_addSudu_set},
    { "pic", _wrap_SItemTemplate_pic_get, _wrap_SItemTemplate_pic_set},
    { "addXue", _wrap_SItemTemplate_addXue_get, _wrap_SItemTemplate_addXue_set},
    { "jiage", _wrap_SItemTemplate_jiage_get, _wrap_SItemTemplate_jiage_set},
    { "name", _wrap_SItemTemplate_name_get, _wrap_SItemTemplate_name_set},
    { "describe", _wrap_SItemTemplate_describe_get, _wrap_SItemTemplate_describe_set},
    {0,0,0}
};
static swig_lua_class *swig_SItemTemplate_bases[] = {0};
static const char *swig_SItemTemplate_base_names[] = {0};
static swig_lua_class _wrap_class_SItemTemplate = { "SItemTemplate", &SWIGTYPE_p_SItemTemplate,_wrap_new_SItemTemplate, swig_delete_SItemTemplate, swig_SItemTemplate_methods, swig_SItemTemplate_attributes, swig_SItemTemplate_bases, swig_SItemTemplate_base_names };

static int _wrap_SItemInstance_level_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_level_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_level_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_level_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->level);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_strengthenLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("strengthenLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("strengthenLevel",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_strengthenLevel_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->strengthenLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_strengthenLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("strengthenLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("strengthenLevel",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_strengthenLevel_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->strengthenLevel);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_quality_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("quality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("quality",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_quality_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->quality = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_quality_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("quality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("quality",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_quality_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->quality);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_addAttrNum_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("addAttrNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttrNum",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_addAttrNum_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->addAttrNum = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_addAttrNum_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("addAttrNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttrNum",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_addAttrNum_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->addAttrNum);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_num_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("num",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("num",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_num_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->num = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_num_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("num",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("num",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_num_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->num);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_addAttrType_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 *arg2 ;
  
  SWIG_check_num_args("addAttrType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttrType",1,"SItemInstance *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addAttrType",2,"uint8 [9]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_addAttrType_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint8,0))){
    SWIG_fail_ptr("SItemInstance_addAttrType_set",2,SWIGTYPE_p_uint8);
  }
  
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->addAttrType;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_addAttrType_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 *result = 0 ;
  
  SWIG_check_num_args("addAttrType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttrType",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_addAttrType_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result = (uint8 *)(uint8 *) ((arg1)->addAttrType);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_reqAttrType_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("reqAttrType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reqAttrType",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_reqAttrType_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->reqAttrType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_reqAttrType_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("reqAttrType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reqAttrType",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_reqAttrType_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->reqAttrType);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_reqAttrVal_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("reqAttrVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reqAttrVal",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_reqAttrVal_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->reqAttrVal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_reqAttrVal_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("reqAttrVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reqAttrVal",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_reqAttrVal_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->reqAttrVal);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_addAttrVal_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 *arg2 ;
  
  SWIG_check_num_args("addAttrVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttrVal",1,"SItemInstance *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addAttrVal",2,"uint16 [9]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_addAttrVal_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint16,0))){
    SWIG_fail_ptr("SItemInstance_addAttrVal_set",2,SWIGTYPE_p_uint16);
  }
  
  {
    size_t ii;
    uint16 *b = (uint16 *) arg1->addAttrVal;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((uint16 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_addAttrVal_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 *result = 0 ;
  
  SWIG_check_num_args("addAttrVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttrVal",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_addAttrVal_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result = (uint16 *)(uint16 *) ((arg1)->addAttrVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint16,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_naijiu_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("naijiu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("naijiu",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_naijiu_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->naijiu = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_naijiu_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("naijiu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("naijiu",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_naijiu_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->naijiu);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_tmplId_set(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("tmplId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tmplId",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_tmplId_set",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->tmplId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_tmplId_get(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("tmplId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tmplId",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_tmplId_get",1,SWIGTYPE_p_SItemInstance);
  }
  
  result =  ((arg1)->tmplId);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_GetItemValue(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  int result;
  
  SWIG_check_num_args("GetItemValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetItemValue",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_GetItemValue",1,SWIGTYPE_p_SItemInstance);
  }
  
  result = (int)(arg1)->GetItemValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_GetAddAttrType(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  int result;
  
  SWIG_check_num_args("GetAddAttrType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetAddAttrType",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_GetAddAttrType",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (int)(arg1)->GetAddAttrType(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SItemInstance_GetAddAttrVal(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *arg1 = (SItemInstance *) 0 ;
  uint8 arg2 ;
  int result;
  
  SWIG_check_num_args("GetAddAttrVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetAddAttrVal",1,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SItemInstance_GetAddAttrVal",1,SWIGTYPE_p_SItemInstance);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  result = (int)(arg1)->GetAddAttrVal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SItemInstance(lua_State* L) {
  int SWIG_arg = 0;
  SItemInstance *result = 0 ;
  
  SWIG_check_num_args("SItemInstance::SItemInstance",0,0)
  result = (SItemInstance *)new SItemInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SItemInstance,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SItemInstance(void *obj) {
SItemInstance *arg1 = (SItemInstance *) obj;
delete arg1;
}
static swig_lua_method swig_SItemInstance_methods[] = {
    {"GetItemValue", _wrap_SItemInstance_GetItemValue}, 
    {"GetAddAttrType", _wrap_SItemInstance_GetAddAttrType}, 
    {"GetAddAttrVal", _wrap_SItemInstance_GetAddAttrVal}, 
    {0,0}
};
static swig_lua_attribute swig_SItemInstance_attributes[] = {
    { "level", _wrap_SItemInstance_level_get, _wrap_SItemInstance_level_set},
    { "strengthenLevel", _wrap_SItemInstance_strengthenLevel_get, _wrap_SItemInstance_strengthenLevel_set},
    { "quality", _wrap_SItemInstance_quality_get, _wrap_SItemInstance_quality_set},
    { "addAttrNum", _wrap_SItemInstance_addAttrNum_get, _wrap_SItemInstance_addAttrNum_set},
    { "num", _wrap_SItemInstance_num_get, _wrap_SItemInstance_num_set},
    { "addAttrType", _wrap_SItemInstance_addAttrType_get, _wrap_SItemInstance_addAttrType_set},
    { "reqAttrType", _wrap_SItemInstance_reqAttrType_get, _wrap_SItemInstance_reqAttrType_set},
    { "reqAttrVal", _wrap_SItemInstance_reqAttrVal_get, _wrap_SItemInstance_reqAttrVal_set},
    { "addAttrVal", _wrap_SItemInstance_addAttrVal_get, _wrap_SItemInstance_addAttrVal_set},
    { "naijiu", _wrap_SItemInstance_naijiu_get, _wrap_SItemInstance_naijiu_set},
    { "tmplId", _wrap_SItemInstance_tmplId_get, _wrap_SItemInstance_tmplId_set},
    {0,0,0}
};
static swig_lua_class *swig_SItemInstance_bases[] = {0};
static const char *swig_SItemInstance_base_names[] = {0};
static swig_lua_class _wrap_class_SItemInstance = { "SItemInstance", &SWIGTYPE_p_SItemInstance,_wrap_new_SItemInstance, swig_delete_SItemInstance, swig_SItemInstance_methods, swig_SItemInstance_attributes, swig_SItemInstance_bases, swig_SItemInstance_base_names };

static int _wrap_SMonsterTmpl_id_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_id_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  {
    arg2 = (uint32) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_id_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("id",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_id_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result =  ((arg1)->id);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_name_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  string *arg2 = (string *) 0 ;
  
  SWIG_check_num_args("name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"SMonsterTmpl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("name",2,"string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_name_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SMonsterTmpl_name_set",2,SWIGTYPE_p_std__string);
  }
  
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_name_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  string *result = 0 ;
  
  SWIG_check_num_args("name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_name_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (string *)& ((arg1)->name);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("minLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minLevel",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minLevel_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->minLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("minLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minLevel",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minLevel_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result =  ((arg1)->minLevel);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("maxLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxLevel",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxLevel_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->maxLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("maxLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxLevel",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxLevel_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result =  ((arg1)->maxLevel);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minHp_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("minHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minHp",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("minHp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minHp_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minHp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minHp_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("minHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minHp",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minHp_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->minHp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxHp_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("maxHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxHp",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("maxHp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxHp_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxHp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxHp_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("maxHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxHp",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxHp_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->maxHp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minMp_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("minMp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minMp",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("minMp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minMp_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minMp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minMp_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("minMp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minMp",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minMp_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->minMp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxMp_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("maxMp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxMp",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("maxMp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxMp_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxMp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxMp_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("maxMp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxMp",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxMp_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->maxMp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minSpeed_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("minSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minSpeed",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("minSpeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minSpeed_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minSpeed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minSpeed_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("minSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minSpeed",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minSpeed_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->minSpeed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxSpeed_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("maxSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxSpeed",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("maxSpeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxSpeed_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxSpeed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxSpeed_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("maxSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxSpeed",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxSpeed_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->maxSpeed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minAttack_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("minAttack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minAttack",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("minAttack",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minAttack_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minAttack = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minAttack_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("minAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minAttack",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minAttack_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->minAttack);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxAttack_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("maxAttack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxAttack",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("maxAttack",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxAttack_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxAttack = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxAttack_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("maxAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxAttack",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxAttack_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->maxAttack);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minSkillAttack_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("minSkillAttack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minSkillAttack",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("minSkillAttack",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minSkillAttack_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minSkillAttack = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_minSkillAttack_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("minSkillAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minSkillAttack",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_minSkillAttack_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->minSkillAttack);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxSkillAttack_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("maxSkillAttack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxSkillAttack",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("maxSkillAttack",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxSkillAttack_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxSkillAttack = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_maxSkillAttack_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("maxSkillAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxSkillAttack",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_maxSkillAttack_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->maxSkillAttack);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_xiang_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("xiang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("xiang",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_xiang_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->xiang = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_xiang_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("xiang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("xiang",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_xiang_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result =  ((arg1)->xiang);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_exp_set(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("exp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exp",1,"SMonsterTmpl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("exp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_exp_set",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->exp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMonsterTmpl_exp_get(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *arg1 = (SMonsterTmpl *) 0 ;
  int result;
  
  SWIG_check_num_args("exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exp",1,"SMonsterTmpl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SMonsterTmpl,0))){
    SWIG_fail_ptr("SMonsterTmpl_exp_get",1,SWIGTYPE_p_SMonsterTmpl);
  }
  
  result = (int) ((arg1)->exp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SMonsterTmpl(lua_State* L) {
  int SWIG_arg = 0;
  SMonsterTmpl *result = 0 ;
  
  SWIG_check_num_args("SMonsterTmpl::SMonsterTmpl",0,0)
  result = (SMonsterTmpl *)new SMonsterTmpl();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SMonsterTmpl,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SMonsterTmpl(void *obj) {
SMonsterTmpl *arg1 = (SMonsterTmpl *) obj;
delete arg1;
}
static swig_lua_method swig_SMonsterTmpl_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SMonsterTmpl_attributes[] = {
    { "id", _wrap_SMonsterTmpl_id_get, _wrap_SMonsterTmpl_id_set},
    { "name", _wrap_SMonsterTmpl_name_get, _wrap_SMonsterTmpl_name_set},
    { "minLevel", _wrap_SMonsterTmpl_minLevel_get, _wrap_SMonsterTmpl_minLevel_set},
    { "maxLevel", _wrap_SMonsterTmpl_maxLevel_get, _wrap_SMonsterTmpl_maxLevel_set},
    { "minHp", _wrap_SMonsterTmpl_minHp_get, _wrap_SMonsterTmpl_minHp_set},
    { "maxHp", _wrap_SMonsterTmpl_maxHp_get, _wrap_SMonsterTmpl_maxHp_set},
    { "minMp", _wrap_SMonsterTmpl_minMp_get, _wrap_SMonsterTmpl_minMp_set},
    { "maxMp", _wrap_SMonsterTmpl_maxMp_get, _wrap_SMonsterTmpl_maxMp_set},
    { "minSpeed", _wrap_SMonsterTmpl_minSpeed_get, _wrap_SMonsterTmpl_minSpeed_set},
    { "maxSpeed", _wrap_SMonsterTmpl_maxSpeed_get, _wrap_SMonsterTmpl_maxSpeed_set},
    { "minAttack", _wrap_SMonsterTmpl_minAttack_get, _wrap_SMonsterTmpl_minAttack_set},
    { "maxAttack", _wrap_SMonsterTmpl_maxAttack_get, _wrap_SMonsterTmpl_maxAttack_set},
    { "minSkillAttack", _wrap_SMonsterTmpl_minSkillAttack_get, _wrap_SMonsterTmpl_minSkillAttack_set},
    { "maxSkillAttack", _wrap_SMonsterTmpl_maxSkillAttack_get, _wrap_SMonsterTmpl_maxSkillAttack_set},
    { "xiang", _wrap_SMonsterTmpl_xiang_get, _wrap_SMonsterTmpl_xiang_set},
    { "exp", _wrap_SMonsterTmpl_exp_get, _wrap_SMonsterTmpl_exp_set},
    {0,0,0}
};
static swig_lua_class *swig_SMonsterTmpl_bases[] = {0};
static const char *swig_SMonsterTmpl_base_names[] = {0};
static swig_lua_class _wrap_class_SMonsterTmpl = { "SMonsterTmpl", &SWIGTYPE_p_SMonsterTmpl,_wrap_new_SMonsterTmpl, swig_delete_SMonsterTmpl, swig_SMonsterTmpl_methods, swig_SMonsterTmpl_attributes, swig_SMonsterTmpl_bases, swig_SMonsterTmpl_base_names };

static int _wrap_SPet_level_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_level_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_level_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_level_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->level);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_type_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("type",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_type_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_type_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("type",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_type_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->type);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_bangDing_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("bangDing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bangDing",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_bangDing_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->bangDing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_bangDing_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("bangDing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bangDing",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_bangDing_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->bangDing);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_xiang_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("xiang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("xiang",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_xiang_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->xiang = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_xiang_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("xiang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("xiang",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_xiang_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->xiang);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_qiCheng_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("qiCheng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("qiCheng",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_qiCheng_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->qiCheng = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_qiCheng_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("qiCheng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("qiCheng",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_qiCheng_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->qiCheng);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_zhongcheng_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("zhongcheng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("zhongcheng",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_zhongcheng_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->zhongcheng = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_zhongcheng_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("zhongcheng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("zhongcheng",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_zhongcheng_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->zhongcheng);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_quality_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("quality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("quality",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_quality_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint8) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->quality = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_quality_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("quality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("quality",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_quality_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->quality);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_name_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"SPet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("name",2,"char [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_name_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 16-1);
      arg1->name[16-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_name_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_name_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (char *)(char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_tizhi_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("tizhi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tizhi",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_tizhi_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->tizhi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_tizhi_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("tizhi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tizhi",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_tizhi_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->tizhi);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_liliang_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("liliang",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("liliang",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_liliang_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->liliang = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_liliang_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("liliang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("liliang",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_liliang_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->liliang);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_minjie_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("minjie",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minjie",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_minjie_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->minjie = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_minjie_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("minjie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("minjie",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_minjie_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->minjie);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_lingxing_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("lingxing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lingxing",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_lingxing_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->lingxing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_lingxing_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("lingxing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lingxing",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_lingxing_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->lingxing);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_naili_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("naili",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("naili",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_naili_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->naili = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_naili_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("naili",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("naili",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_naili_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->naili);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_shuxingdian_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("shuxingdian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shuxingdian",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_shuxingdian_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->shuxingdian = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_shuxingdian_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("shuxingdian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shuxingdian",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_shuxingdian_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->shuxingdian);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_shouming_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("shouming",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shouming",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_shouming_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->shouming = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_shouming_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("shouming",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shouming",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_shouming_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->shouming);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_hpCZ_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("hpCZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hpCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_hpCZ_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->hpCZ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_hpCZ_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("hpCZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hpCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_hpCZ_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->hpCZ);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_mpCZ_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("mpCZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mpCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_mpCZ_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->mpCZ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_mpCZ_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("mpCZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mpCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_mpCZ_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->mpCZ);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_speedCZ_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("speedCZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("speedCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_speedCZ_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->speedCZ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_speedCZ_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("speedCZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("speedCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_speedCZ_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->speedCZ);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_attackCZ_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("attackCZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attackCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_attackCZ_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->attackCZ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_attackCZ_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("attackCZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attackCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_attackCZ_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->attackCZ);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_skillAttackCZ_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 arg2 ;
  
  SWIG_check_num_args("skillAttackCZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skillAttackCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_skillAttackCZ_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint16) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->skillAttackCZ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_skillAttackCZ_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint16 result;
  
  SWIG_check_num_args("skillAttackCZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skillAttackCZ",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_skillAttackCZ_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->skillAttackCZ);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_qinmi_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("qinmi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("qinmi",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("qinmi",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_qinmi_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->qinmi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_qinmi_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("qinmi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("qinmi",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_qinmi_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->qinmi);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_maxHp_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("maxHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxHp",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("maxHp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_maxHp_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxHp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_maxHp_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("maxHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxHp",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_maxHp_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->maxHp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_maxMp_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("maxMp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxMp",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("maxMp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_maxMp_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxMp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_maxMp_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("maxMp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxMp",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_maxMp_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->maxMp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_hp_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("hp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hp",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_hp_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->hp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_hp_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("hp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hp",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_hp_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->hp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_mp_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mp",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_mp_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_mp_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("mp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mp",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_mp_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->mp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_speed_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("speed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("speed",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("speed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_speed_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->speed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_speed_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("speed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("speed",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_speed_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->speed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_xiuWei_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("xiuWei",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("xiuWei",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("xiuWei",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_xiuWei_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->xiuWei = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_xiuWei_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("xiuWei",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("xiuWei",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_xiuWei_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->xiuWei);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_wuxue_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("wuxue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("wuxue",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("wuxue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_wuxue_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->wuxue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_wuxue_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("wuxue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("wuxue",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_wuxue_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->wuxue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_shouMingTime_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  SWIG_check_num_args("shouMingTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shouMingTime",1,"SPet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("shouMingTime",2,"time_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_shouMingTime_set",1,SWIGTYPE_p_SPet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_time_t,0))){
    SWIG_fail_ptr("SPet_shouMingTime_set",2,SWIGTYPE_p_time_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->shouMingTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_shouMingTime_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  time_t result;
  
  SWIG_check_num_args("shouMingTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shouMingTime",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_shouMingTime_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->shouMingTime);
  {
    time_t * resultptr = new time_t((const time_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_time_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_exp_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("exp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exp",1,"SPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("exp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_exp_set",1,SWIGTYPE_p_SPet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->exp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_exp_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  int result;
  
  SWIG_check_num_args("exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exp",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_exp_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (int) ((arg1)->exp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_tmplId_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("tmplId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tmplId",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_tmplId_set",1,SWIGTYPE_p_SPet);
  }
  
  {
    arg2 = (uint32) lua_tonumber(L,2);
  }
  if (arg1) (arg1)->tmplId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_tmplId_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("tmplId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tmplId",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_tmplId_get",1,SWIGTYPE_p_SPet);
  }
  
  result =  ((arg1)->tmplId);
  {
    lua_pushinteger(L, result);SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_kaiJia_set(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  SItemInstance *arg2 = (SItemInstance *) 0 ;
  
  SWIG_check_num_args("kaiJia",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kaiJia",1,"SPet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kaiJia",2,"SItemInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_kaiJia_set",1,SWIGTYPE_p_SPet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SItemInstance,0))){
    SWIG_fail_ptr("SPet_kaiJia_set",2,SWIGTYPE_p_SItemInstance);
  }
  
  if (arg1) (arg1)->kaiJia = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPet_kaiJia_get(lua_State* L) {
  int SWIG_arg = 0;
  SPet *arg1 = (SPet *) 0 ;
  SItemInstance *result = 0 ;
  
  SWIG_check_num_args("kaiJia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kaiJia",1,"SPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SPet,0))){
    SWIG_fail_ptr("SPet_kaiJia_get",1,SWIGTYPE_p_SPet);
  }
  
  result = (SItemInstance *)& ((arg1)->kaiJia);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SItemInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SPet(lua_State* L) {
  int SWIG_arg = 0;
  SPet *result = 0 ;
  
  SWIG_check_num_args("SPet::SPet",0,0)
  result = (SPet *)new SPet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SPet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SPet(void *obj) {
SPet *arg1 = (SPet *) obj;
delete arg1;
}
static swig_lua_method swig_SPet_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SPet_attributes[] = {
    { "level", _wrap_SPet_level_get, _wrap_SPet_level_set},
    { "type", _wrap_SPet_type_get, _wrap_SPet_type_set},
    { "bangDing", _wrap_SPet_bangDing_get, _wrap_SPet_bangDing_set},
    { "xiang", _wrap_SPet_xiang_get, _wrap_SPet_xiang_set},
    { "qiCheng", _wrap_SPet_qiCheng_get, _wrap_SPet_qiCheng_set},
    { "zhongcheng", _wrap_SPet_zhongcheng_get, _wrap_SPet_zhongcheng_set},
    { "quality", _wrap_SPet_quality_get, _wrap_SPet_quality_set},
    { "name", _wrap_SPet_name_get, _wrap_SPet_name_set},
    { "tizhi", _wrap_SPet_tizhi_get, _wrap_SPet_tizhi_set},
    { "liliang", _wrap_SPet_liliang_get, _wrap_SPet_liliang_set},
    { "minjie", _wrap_SPet_minjie_get, _wrap_SPet_minjie_set},
    { "lingxing", _wrap_SPet_lingxing_get, _wrap_SPet_lingxing_set},
    { "naili", _wrap_SPet_naili_get, _wrap_SPet_naili_set},
    { "shuxingdian", _wrap_SPet_shuxingdian_get, _wrap_SPet_shuxingdian_set},
    { "shouming", _wrap_SPet_shouming_get, _wrap_SPet_shouming_set},
    { "hpCZ", _wrap_SPet_hpCZ_get, _wrap_SPet_hpCZ_set},
    { "mpCZ", _wrap_SPet_mpCZ_get, _wrap_SPet_mpCZ_set},
    { "speedCZ", _wrap_SPet_speedCZ_get, _wrap_SPet_speedCZ_set},
    { "attackCZ", _wrap_SPet_attackCZ_get, _wrap_SPet_attackCZ_set},
    { "skillAttackCZ", _wrap_SPet_skillAttackCZ_get, _wrap_SPet_skillAttackCZ_set},
    { "qinmi", _wrap_SPet_qinmi_get, _wrap_SPet_qinmi_set},
    { "maxHp", _wrap_SPet_maxHp_get, _wrap_SPet_maxHp_set},
    { "maxMp", _wrap_SPet_maxMp_get, _wrap_SPet_maxMp_set},
    { "hp", _wrap_SPet_hp_get, _wrap_SPet_hp_set},
    { "mp", _wrap_SPet_mp_get, _wrap_SPet_mp_set},
    { "speed", _wrap_SPet_speed_get, _wrap_SPet_speed_set},
    { "xiuWei", _wrap_SPet_xiuWei_get, _wrap_SPet_xiuWei_set},
    { "wuxue", _wrap_SPet_wuxue_get, _wrap_SPet_wuxue_set},
    { "shouMingTime", _wrap_SPet_shouMingTime_get, _wrap_SPet_shouMingTime_set},
    { "exp", _wrap_SPet_exp_get, _wrap_SPet_exp_set},
    { "tmplId", _wrap_SPet_tmplId_get, _wrap_SPet_tmplId_set},
    { "kaiJia", _wrap_SPet_kaiJia_get, _wrap_SPet_kaiJia_set},
    {0,0,0}
};
static swig_lua_class *swig_SPet_bases[] = {0};
static const char *swig_SPet_base_names[] = {0};
static swig_lua_class _wrap_class_SPet = { "SPet", &SWIGTYPE_p_SPet,_wrap_new_SPet, swig_delete_SPet, swig_SPet_methods, swig_SPet_attributes, swig_SPet_bases, swig_SPet_base_names };

static int _wrap_CFight_GetMonsterNum(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetMonsterNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMonsterNum",1,"CFight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetMonsterNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_GetMonsterNum",1,SWIGTYPE_p_CFight);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->GetMonsterNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CFight_monsterId1_set(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("monsterId1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("monsterId1",1,"CFight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("monsterId1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_monsterId1_set",1,SWIGTYPE_p_CFight);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->monsterId1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CFight_monsterId1_get(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int result;
  
  SWIG_check_num_args("monsterId1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("monsterId1",1,"CFight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_monsterId1_get",1,SWIGTYPE_p_CFight);
  }
  
  result = (int) ((arg1)->monsterId1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CFight_monsterId2_set(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("monsterId2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("monsterId2",1,"CFight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("monsterId2",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_monsterId2_set",1,SWIGTYPE_p_CFight);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->monsterId2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CFight_monsterId2_get(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int result;
  
  SWIG_check_num_args("monsterId2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("monsterId2",1,"CFight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_monsterId2_get",1,SWIGTYPE_p_CFight);
  }
  
  result = (int) ((arg1)->monsterId2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CFight_GetDaoQian5(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("GetDaoQian5",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDaoQian5",1,"CFight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDaoQian5",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GetDaoQian5",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_GetDaoQian5",1,SWIGTYPE_p_CFight);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->GetDaoQian5(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CFight_GetDaoQian6(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("GetDaoQian6",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDaoQian6",1,"CFight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDaoQian6",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GetDaoQian6",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_GetDaoQian6",1,SWIGTYPE_p_CFight);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->GetDaoQian6(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CFight_GetUseTime(lua_State* L) {
  int SWIG_arg = 0;
  CFight *arg1 = (CFight *) 0 ;
  int result;
  
  SWIG_check_num_args("GetUseTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetUseTime",1,"CFight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CFight,0))){
    SWIG_fail_ptr("CFight_GetUseTime",1,SWIGTYPE_p_CFight);
  }
  
  result = (int)(arg1)->GetUseTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CFight(lua_State* L) {
  int SWIG_arg = 0;
  CFight *result = 0 ;
  
  SWIG_check_num_args("CFight::CFight",0,0)
  result = (CFight *)new CFight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CFight,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CFight(void *obj) {
CFight *arg1 = (CFight *) obj;
delete arg1;
}
static swig_lua_method swig_CFight_methods[] = {
    {"GetMonsterNum", _wrap_CFight_GetMonsterNum}, 
    {"GetDaoQian5", _wrap_CFight_GetDaoQian5}, 
    {"GetDaoQian6", _wrap_CFight_GetDaoQian6}, 
    {"GetUseTime", _wrap_CFight_GetUseTime}, 
    {0,0}
};
static swig_lua_attribute swig_CFight_attributes[] = {
    { "monsterId1", _wrap_CFight_monsterId1_get, _wrap_CFight_monsterId1_set},
    { "monsterId2", _wrap_CFight_monsterId2_get, _wrap_CFight_monsterId2_set},
    {0,0,0}
};
static swig_lua_class *swig_CFight_bases[] = {0};
static const char *swig_CFight_base_names[] = {0};
static swig_lua_class _wrap_class_CFight = { "CFight", &SWIGTYPE_p_CFight,_wrap_new_CFight, swig_delete_CFight, swig_CFight_methods, swig_CFight_attributes, swig_CFight_bases, swig_CFight_base_names };

static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string()\n"
    "    std::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_IntArr(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  IntArr *result = 0 ;
  
  SWIG_check_num_args("IntArr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("IntArr",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (IntArr *)new_IntArr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IntArr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntArr___getitem(lua_State* L) {
  int SWIG_arg = 0;
  IntArr *arg1 = (IntArr *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getitem",1,"IntArr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IntArr,0))){
    SWIG_fail_ptr("IntArr___getitem",1,SWIGTYPE_p_IntArr);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)IntArr_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntArr___setitem(lua_State* L) {
  int SWIG_arg = 0;
  IntArr *arg1 = (IntArr *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setitem",1,"IntArr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setitem",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IntArr,0))){
    SWIG_fail_ptr("IntArr___setitem",1,SWIGTYPE_p_IntArr);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  IntArr_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntArr_cast(lua_State* L) {
  int SWIG_arg = 0;
  IntArr *arg1 = (IntArr *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cast",1,"IntArr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IntArr,0))){
    SWIG_fail_ptr("IntArr_cast",1,SWIGTYPE_p_IntArr);
  }
  
  result = (int *)IntArr_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntArr_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  IntArr *result = 0 ;
  
  SWIG_check_num_args("IntArr_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IntArr_frompointer",1,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IntArr_frompointer",1,SWIGTYPE_p_int);
  }
  
  result = (IntArr *)IntArr_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IntArr,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IntArr(void *obj) {
IntArr *arg1 = (IntArr *) obj;
delete_IntArr(arg1);
}
static swig_lua_method swig_IntArr_methods[] = {
    {"__getitem", _wrap_IntArr___getitem}, 
    {"__setitem", _wrap_IntArr___setitem}, 
    {"cast", _wrap_IntArr_cast}, 
    {0,0}
};
static swig_lua_attribute swig_IntArr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IntArr_bases[] = {0};
static const char *swig_IntArr_base_names[] = {0};
static swig_lua_class _wrap_class_IntArr = { "IntArr", &SWIGTYPE_p_IntArr,_wrap_new_IntArr, swig_delete_IntArr, swig_IntArr_methods, swig_IntArr_attributes, swig_IntArr_bases, swig_IntArr_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "Dialog", _wrap_Dialog},
    { "DialogT", _wrap_DialogT},
    { "Option", _wrap_Option},
    { "SysInfo", _wrap_SysInfo},
    { "SysInfo1", _wrap_SysInfo1},
    { "SMessage", _wrap_SMessage},
    { "SelectItem", _wrap_SelectItem},
    { "SelectPet", _wrap_SelectPet},
    { "SellItem", _wrap_SellItem},
    { "CloseInteract", _wrap_CloseInteract},
    { "TransportUser", _wrap_TransportUser},
    { "UserJumpTo", _wrap_UserJumpTo},
    { "EnterBangPaiScene", _wrap_EnterBangPaiScene},
    { "AddItemTmpl", _wrap_AddItemTmpl},
    { "GetMonsterName", _wrap_GetMonsterName},
    { "GetSceneName", _wrap_GetSceneName},
    { "GetItem", _wrap_GetItem},
    { "AddHumanNpc", _wrap_AddHumanNpc},
    { "GetUserNpcName", _wrap_GetUserNpcName},
    { "AddNpc",_wrap_AddNpc},
    { "AddDefaultNpc",_wrap_AddDefaultNpc},
    { "DelNpc", _wrap_DelNpc},
    { "BeginFight", _wrap_BeginFight},
    { "HumanNpcFight", _wrap_HumanNpcFight},
    { "ZhaoTao1", _wrap_ZhaoTao1},
    { "ZhaoTao2", _wrap_ZhaoTao2},
    { "ZhaoTao3", _wrap_ZhaoTao3},
    { "ThreeKuLou", _wrap_ThreeKuLou},
    { "ShiMenFight", _wrap_ShiMenFight},
    { "EpisodeBattle1", _wrap_EpisodeBattle1},
    { "EpisodeBattle2", _wrap_EpisodeBattle2},
    { "EpisodeBattle3", _wrap_EpisodeBattle3},
    { "EpisodeBattle4", _wrap_EpisodeBattle4},
    { "EpisodeBattle5", _wrap_EpisodeBattle5},
    { "EpisodeBattle6", _wrap_EpisodeBattle6},
    { "EpisodeBattle7", _wrap_EpisodeBattle7},
    { "EpisodeBattle8", _wrap_EpisodeBattle8},
    { "EpisodeBattle9", _wrap_EpisodeBattle9},
    { "EpisodeBattle10", _wrap_EpisodeBattle10},
    { "EpisodeBattle11", _wrap_EpisodeBattle11},
    { "EpisodeBattle12", _wrap_EpisodeBattle12},
    { "EpisodeBattle13", _wrap_EpisodeBattle13},
    { "EpisodeBattle14", _wrap_EpisodeBattle14},
    { "EpisodeBattle15", _wrap_EpisodeBattle15},
    { "EpisodeBattle16", _wrap_EpisodeBattle16},
    { "EpisodeBattle17", _wrap_EpisodeBattle17},
    { "EpisodeBattle18", _wrap_EpisodeBattle18},
    { "EpisodeBattle19", _wrap_EpisodeBattle19},
    { "EpisodeBattle20", _wrap_EpisodeBattle20},
    { "EpisodeBattle21", _wrap_EpisodeBattle21},
    { "WenTianBattle", _wrap_WenTianBattle},
    { "OpenPackBattle1", _wrap_OpenPackBattle1},
    { "OpenPackBattle2", _wrap_OpenPackBattle2},
    { "LanRuoBattle", _wrap_LanRuoBattle},
    { "LanRuoBattle3", _wrap_LanRuoBattle3},
    { "LanRuoBattle4", _wrap_LanRuoBattle4},
    { "LanRuoBattle5", _wrap_LanRuoBattle5},
    { "GetTeamMemNum", _wrap_GetTeamMemNum},
    { "GetTeamMember1", _wrap_GetTeamMember1},
    { "GetTeamMember2", _wrap_GetTeamMember2},
    { "GetNpcSceneId", _wrap_GetNpcSceneId},
    { "GetNpcScenePos", _wrap_GetNpcScenePos},
    { "GetNpcName", _wrap_GetNpcName},
    { "OpenPackage", _wrap_OpenPackage},
    { "StudySkill", _wrap_StudySkill},
    { "ListStudySkill", _wrap_ListStudySkill},
    { "LearnSkill", _wrap_LearnSkill},
    { "UserRest", _wrap_UserRest},
    { "EnterLanRuoDiGong", _wrap_EnterLanRuoDiGong},
    { "AddLouLuo", _wrap_AddLouLuo},
    { "DelFaceNpc", _wrap_DelFaceNpc},
    { "AddWuNian", _wrap_AddWuNian},
    { "AddWuXin", _wrap_AddWuXin},
    { "LouLuoFight", _wrap_LouLuoFight},
    { "WuNianFight", _wrap_WuNianFight},
    { "WuXinFight", _wrap_WuXinFight},
    { "DengLongGuiFight", _wrap_DengLongGuiFight},
    { "BaiYueFight", _wrap_BaiYueFight},
    { "ShuiGuiFight", _wrap_ShuiGuiFight},
    { "ChuShiFight", _wrap_ChuShiFight},
    { "QiLinFightYao", _wrap_QiLinFightYao},
    { "QiLinFightXian", _wrap_QiLinFightXian},
    { "UpdateNpcState", _wrap_UpdateNpcState},
    { "CreateBangPai", _wrap_CreateBangPai},
    { "InputStr", _wrap_InputStr},
    { "BankMoney", _wrap_BankMoney},
    { "AddBankMoney", _wrap_AddBankMoney},
    { "SendBankItem", _wrap_SendBankItem},
    { "AddbankItem", _wrap_AddbankItem},
    { "GetBankItem", _wrap_GetBankItem},
    { "ShiPinJianDing", _wrap_ShiPinJianDing},
    { "GetNpcPos", _wrap_GetNpcPos},
    { "GetMonster", _wrap_GetMonster},
    { "ShiBaiChengFa", _wrap_ShiBaiChengFa},
    { "AddBattleRes", _wrap_AddBattleRes},
    { "RemoveBattleRes", _wrap_RemoveBattleRes},
    { "CompoundOrnament", _wrap_CompoundOrnament},
    { "DoItem", _wrap_DoItem},
    { "CompoundItem", _wrap_CompoundItem},
    { "CompoundMaterial", _wrap_CompoundMaterial},
    { "SetHuoDong", _wrap_SetHuoDong},
    { "SetHuoDongBeiLv", _wrap_SetHuoDongBeiLv},
    { "InHuoDong", _wrap_InHuoDong},
    { "GetHuoDongBeiLv", _wrap_GetHuoDongBeiLv},
    { "RankLevel",_wrap_RankLevel},
    { "GetAward", _wrap_GetAward},
    { "SetGetAword", _wrap_SetGetAword},
    { "GetHour", _wrap_GetHour},
    { "SysInfoToAllUser", _wrap_SysInfoToAllUser},
    { "SaveDate", _wrap_SaveDate},
    { "GetScriptVal", _wrap_GetScriptVal},
    { "SetScriptVal", _wrap_SetScriptVal},
    { "upgrade_master", _wrap_upgrade_master},
    { "get_disciple", _wrap_get_disciple},
    { "get_master", _wrap_get_master},
    { "have_master", _wrap_have_master},
    { "have_disciple", _wrap_have_disciple},
    { "cancel_master", _wrap_cancel_master},
    { "cancel_disciple", _wrap_cancel_disciple},
    { "is_master", _wrap_is_master},
    { "do_master", _wrap_do_master},
    { "master_level", _wrap_master_level},
    { "ChuShi", _wrap_ChuShi},
    { "GetDiscipleAward", _wrap_GetDiscipleAward},
    { "DelDiscipleAward", _wrap_DelDiscipleAward},
    { "GetMasterAward", _wrap_GetMasterAward},
    { "DelMasterAward", _wrap_DelMasterAward},
    { "GetMaster", _wrap_GetMaster},
    { "GetTeamLeader", _wrap_GetTeamLeader},
    { "EnterGuiYu", _wrap_EnterGuiYu},
    { "FindYaoNieBattle", _wrap_FindYaoNieBattle},
    { "JiBaiKSBattle", _wrap_JiBaiKSBattle},
    { "XunBaoFight", _wrap_XunBaoFight},
    { "GetCanWalkPos", _wrap_GetCanWalkPos},
    { "ChaiFen", _wrap_ChaiFen},
    { "RongHe", _wrap_RongHe},
    { "SelectAttr", _wrap_SelectAttr},
    { "GetPaiMing", _wrap_GetPaiMing},
    { "GetWeekDay", _wrap_GetWeekDay},
    { "ListBang", _wrap_ListBang},
    { "DeclareWar", _wrap_DeclareWar},
    { "GetBangPros", _wrap_GetBangPros},
    { "EnterBangZhan",_wrap_EnterBangZhan},
    { "FightDiaoXiang", _wrap_FightDiaoXiang},
    { "GetMeScore", _wrap_GetMeScore},
    { "GetEnemyScore", _wrap_GetEnemyScore},
    { "GetOwnScore", _wrap_GetOwnScore},
    { "ShangjiaoKuang", _wrap_ShangjiaoKuang},
    { "GetBangKuang", _wrap_GetBangKuang},
    { "GetMeiYingTime", _wrap_GetMeiYingTime},
    { "StartMeiYing", _wrap_StartMeiYing},
    { "GetBZPosition", _wrap_GetBZPosition},
    { "GetDiaoXiangState", _wrap_GetDiaoXiangState},
    { "GetDiaoXiangTime", _wrap_GetDiaoXiangTime},
    { "InWaZhongHuoDong", _wrap_InWaZhongHuoDong},
    { "GetHuoDongDi", _wrap_GetHuoDongDi},
    { "DelHuoDongDi", _wrap_DelHuoDongDi},
    { "GetWaZhongScene", _wrap_GetWaZhongScene},
    { "ListWarBang", _wrap_ListWarBang},
    { "GetBangName", _wrap_GetBangName},
    { "UpdateUserInfo", _wrap_UpdateUserInfo},
    { "PlantResource", _wrap_PlantResource},
    { "GainResource", _wrap_GainResource},
    { "ListResource", _wrap_ListResource},
    { "DoFarm", _wrap_DoFarm},
    { "GetResourceInfo", _wrap_GetResourceInfo},
    { "GetBangResource", _wrap_GetBangResource},
    { "UpgradeBang", _wrap_UpgradeBang},
    { "GetSceneBang", _wrap_GetSceneBang},
    { "GetBangLevel", _wrap_GetBangLevel},
    { "GetBangMoney", _wrap_GetBangMoney},
    { "AddBangMoney", _wrap_AddBangMoney},
    { "DuiHuanBG", _wrap_DuiHuanBG},
    { "GetAward2", _wrap_GetAward2},
    { "SetAword2", _wrap_SetAword2},
    { "AddPet", _wrap_AddPet},
    { "DonateBang", _wrap_DonateBang},
    { "GetBangHistory", _wrap_GetBangHistory},
    { "GetQuestion", _wrap_GetQuestion},
    { "GetQuestion1", _wrap_GetQuestion1},
    { "GetQuestion2", _wrap_GetQuestion2},
    { "IdentifyBook", _wrap_IdentifyBook},
    { "SubmitScore", _wrap_SubmitScore},
    { "GetDaTiPaiMing", _wrap_GetDaTiPaiMing},
    { "QiChongBattle1", _wrap_QiChongBattle1},
    { "QiChongBattle2", _wrap_QiChongBattle2},
    { "QiChongBattle3", _wrap_QiChongBattle3},
    { "QiChongBattle4", _wrap_QiChongBattle4},
    { "QiChongBattle5", _wrap_QiChongBattle5},
    { "QiChongBattle6", _wrap_QiChongBattle6},
    { "QiChongBattle7", _wrap_QiChongBattle7},
    { "QiChongBattle8", _wrap_QiChongBattle8},
    { "QiChongBattle9", _wrap_QiChongBattle9},
    { "QiChongBattle10", _wrap_QiChongBattle10},
    { "QiChongBattle11", _wrap_QiChongBattle11},
    { "QiChongBattle12", _wrap_QiChongBattle12},
    { "QiChongBattle13", _wrap_QiChongBattle13},
    { "QiChongBattle14", _wrap_QiChongBattle14},
    { "LangBattle1", _wrap_LangBattle1},
    { "LangBattle2", _wrap_LangBattle2},
    { "LangBattle3", _wrap_LangBattle3},
    { "LangBattle4", _wrap_LangBattle4},
    { "LangBattle5", _wrap_LangBattle5},
    { "LangBattle6", _wrap_LangBattle6},
    { "LangBattle7", _wrap_LangBattle7},
    { "LangBattle8", _wrap_LangBattle8},
    { "LangBattle9", _wrap_LangBattle9},
    { "LangBattle10", _wrap_LangBattle10},
    { "LangBattle12", _wrap_LangBattle12},
    { "ShiYaoYW1", _wrap_ShiYaoYW1},
    { "ShiYaoYW2", _wrap_ShiYaoYW2},
    { "ShiYaoYW3", _wrap_ShiYaoYW3},
    { "ShiYaoYW4", _wrap_ShiYaoYW4},
    { "ShiYaoYW5", _wrap_ShiYaoYW5},
    { "ShiYaoYW6", _wrap_ShiYaoYW6},
    { "ShiYaoYW7", _wrap_ShiYaoYW7},
    { "ShiYaoYW8", _wrap_ShiYaoYW8},
    { "ShiYaoYW9", _wrap_ShiYaoYW9},
    { "ShiYaoYW10", _wrap_ShiYaoYW10},
    { "ShiYaoYX1", _wrap_ShiYaoYX1},
    { "ShiYaoYX2", _wrap_ShiYaoYX2},
    { "ShiYaoYX3", _wrap_ShiYaoYX3},
    { "ShiYaoYX4", _wrap_ShiYaoYX4},
    { "ShiYaoYX5", _wrap_ShiYaoYX5},
    { "ShiYaoYX6", _wrap_ShiYaoYX6},
    { "ShiYaoYX7", _wrap_ShiYaoYX7},
    { "ShiYaoYX8", _wrap_ShiYaoYX8},
    { "ShiYaoYX9", _wrap_ShiYaoYX9},
    { "ShiYaoYX10", _wrap_ShiYaoYX10},
    { "ShiYaoPT1", _wrap_ShiYaoPT1},
    { "ShiYaoPT2", _wrap_ShiYaoPT2},
    { "ShiYaoPT3", _wrap_ShiYaoPT3},
    { "ShiYaoPT4", _wrap_ShiYaoPT4},
    { "ShiYaoPT5", _wrap_ShiYaoPT5},
    { "ShiYaoPT6", _wrap_ShiYaoPT6},
    { "ShiYaoPT7", _wrap_ShiYaoPT7},
    { "ShiYaoPT8", _wrap_ShiYaoPT8},
    { "ShiYaoPT9", _wrap_ShiYaoPT9},
    { "ShiYaoPT10", _wrap_ShiYaoPT10},
    { "NuYanQiLing", _wrap_NuYanQiLing},
    { "XianBing1", _wrap_XianBing1},
    { "XianBing2", _wrap_XianBing2},
    { "YaoBing1", _wrap_YaoBing1},
    { "YaoBing2", _wrap_YaoBing2},
    { "MenPaiChuanSong", _wrap_MenPaiChuanSong},
    { "QingLongBaoBao", _wrap_QingLongBaoBao},
    { "KuLouDaWang", _wrap_KuLouDaWang},
    { "JuQingXianRen", _wrap_JuQingXianRen},
    { "JuQingQiLing", _wrap_JuQingQiLing},
    { "JuQingMingYao", _wrap_JuQingMingYao},
    { "GetChongZhi", _wrap_GetChongZhi},
    { "CheckMarry", _wrap_CheckMarry},
    { "DoDivorce", _wrap_DoDivorce},
    { "GetWedding", _wrap_GetWedding},
    { "EnterWedding", _wrap_EnterWedding},
    { "DoMarry", _wrap_DoMarry},
    { "GetMarried", _wrap_GetMarried},
    { "GetMarriedId", _wrap_GetMarriedId},
    { "YanQing", _wrap_YanQing},
    { "GiveHongBao", _wrap_GiveHongBao},
    { "DuiHuanTB", _wrap_DuiHuanTB},
    { "InputNumber", _wrap_InputNumber},
    { "IsBrideGroom", _wrap_IsBrideGroom},
    { "ChaiFenSX", _wrap_ChaiFenSX},
    { "AddPetXiuWei", _wrap_AddPetXiuWei},
    { "GetMarryLeftTime", _wrap_GetMarryLeftTime},
    { "ChangeCharName", _wrap_ChangeCharName},
    { "CanChangeName", _wrap_CanChangeName},
    { "MLSChengJi", _wrap_MLSChengJi},
    { "MLSGetPaiMing", _wrap_MLSGetPaiMing},
    { "MLSGetJiangLi", _wrap_MLSGetJiangLi},
    { "MLSLingJiang", _wrap_MLSLingJiang},
    { "IPostTongji", _wrap_IPostTongji},
    { "ITongjiBang", _wrap_ITongjiBang},
    { "IMyTongji", _wrap_IMyTongji},
    { "PostTongji", _wrap_PostTongji},
    { "ChangeTongji", _wrap_ChangeTongji},
    { "CancelTongji", _wrap_CancelTongji},
    { "TakeTongji", _wrap_TakeTongji},
    { "GetTongJiInfo", _wrap_GetTongJiInfo},
    { "DelTongJiMiss", _wrap_DelTongJiMiss},
    { "GetAllyBang", _wrap_GetAllyBang},
    { "AllyBang", _wrap_AllyBang},
    { "UnallyBang", _wrap_UnallyBang},
    { "InviteAlly", _wrap_InviteAlly},
    { "CheckAlly", _wrap_CheckAlly},
    { "IWWDuihuan", _wrap_IWWDuihuan},
    { "WWTijiaoKuang", _wrap_WWTijiaoKuang},
    { "WWGetKuang", _wrap_WWGetKuang},
    { "WWSetKuang", _wrap_WWSetKuang},
    { "FightCoupleTrial", _wrap_FightCoupleTrial},
    { "WWGetWinBang", _wrap_WWGetWinBang},
    { "WWGetTotalKuang", _wrap_WWGetTotalKuang},
    { "WWGetLostKuang", _wrap_WWGetLostKuang},
    { "InWorldWar", _wrap_InWorldWar},
    { "CanWaKuang", _wrap_CanWaKuang},
    { "WWGetJifen", _wrap_WWGetJifen},
    { "WWGetTotalJifen", _wrap_WWGetTotalJifen},
    { "WWDuihuanJifen", _wrap_WWDuihuanJifen},
    { "AddTolJiFen", _wrap_AddTolJiFen},
    { "AgreeWWFangShou", _wrap_AgreeWWFangShou},
    { "IsFangShou", _wrap_IsFangShou},
    { "UseItemToNpc", _wrap_UseItemToNpc},
    { "Xiazhu", _wrap_Xiazhu},
    { "GetNormalZhu", _wrap_GetNormalZhu},
    { "GetExpertZhu", _wrap_GetExpertZhu},
    { "GetMyZhu", _wrap_GetMyZhu},
    { "InSaiPao", _wrap_InSaiPao},
    { "GetJingcaiAward", _wrap_GetJingcaiAward},
    { "GetMingCi", _wrap_GetMingCi},
    { "EnterFuBenWJ", _wrap_EnterFuBenWJ},
    { "EnterFuBenShiYao", _wrap_EnterFuBenShiYao},
    { "FuBenKaiJia", _wrap_FuBenKaiJia},
    { "TeXiao", _wrap_TeXiao},
    { "SendSysChannelMsg", _wrap_SendSysChannelMsg},
    { "SaiPaoFight", _wrap_SaiPaoFight},
    { "DiaoYuFight", _wrap_DiaoYuFight},
    { "FindJiHuoMa", _wrap_FindJiHuoMa},
    { "OpenXinShi", _wrap_OpenXinShi},
    { "ListXinShi", _wrap_ListXinShi},
    { "GetLeiTaiJiFen", _wrap_GetLeiTaiJiFen},
    { "TiJiaoYiJian", _wrap_TiJiaoYiJian},
    { "SendBankPet", _wrap_SendBankPet},
    { "SaveBankPet", _wrap_SaveBankPet},
    { "GetBankPet", _wrap_GetBankPet},
    { "SendMissionInfo", _wrap_SendMissionInfo},
    { "JieBai", _wrap_JieBai},
    { "JieSanJieBai", _wrap_JieSanJieBai},
    { "GetJieBaiUser", _wrap_GetJieBaiUser},
    { "CanJieBai", _wrap_CanJieBai},
    { "DelRole", _wrap_DelRole},
    { "IntArr_frompointer", _wrap_IntArr_frompointer},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"MAX_ADD_ATTR_NUM", (long) 9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MAX_NAME_LEN", (long) 16, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MAX_KANGXING", (long) 10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MAX_SKILL_NUM", (long) 10, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_IntArrTo_p_int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int *)  ((IntArr *) x));
}
static swig_type_info _swigt__p_CFight = {"_p_CFight", "CFight *", 0, 0, (void*)&_wrap_class_CFight, 0};
static swig_type_info _swigt__p_CScene = {"_p_CScene", "CScene *", 0, 0, (void*)&_wrap_class_CScene, 0};
static swig_type_info _swigt__p_CUser = {"_p_CUser", "CUser *", 0, 0, (void*)&_wrap_class_CUser, 0};
static swig_type_info _swigt__p_IntArr = {"_p_IntArr", "IntArr *", 0, 0, (void*)&_wrap_class_IntArr, 0};
static swig_type_info _swigt__p_SItemInstance = {"_p_SItemInstance", "SItemInstance *", 0, 0, (void*)&_wrap_class_SItemInstance, 0};
static swig_type_info _swigt__p_SItemTemplate = {"_p_SItemTemplate", "SItemTemplate *", 0, 0, (void*)&_wrap_class_SItemTemplate, 0};
static swig_type_info _swigt__p_SMonsterTmpl = {"_p_SMonsterTmpl", "SMonsterTmpl *", 0, 0, (void*)&_wrap_class_SMonsterTmpl, 0};
static swig_type_info _swigt__p_SNpcPos = {"_p_SNpcPos", "SNpcPos *", 0, 0, (void*)&_wrap_class_SNpcPos, 0};
static swig_type_info _swigt__p_SPet = {"_p_SPet", "SPet *", 0, 0, (void*)&_wrap_class_SPet, 0};
static swig_type_info _swigt__p_SResInfo = {"_p_SResInfo", "SResInfo *", 0, 0, (void*)&_wrap_class_SResInfo, 0};
static swig_type_info _swigt__p_STongJiInfo = {"_p_STongJiInfo", "STongJiInfo *", 0, 0, (void*)&_wrap_class_STongJiInfo, 0};
static swig_type_info _swigt__p_SUserAward = {"_p_SUserAward", "SUserAward *", 0, 0, (void*)&_wrap_class_SUserAward, 0};
static swig_type_info _swigt__p_SharePetPtr = {"_p_SharePetPtr", "SharePetPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_listT_uint32_t = {"_p_listT_uint32_t", "list< uint32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "string *|std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_time_t = {"_p_time_t", "time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16 = {"_p_uint16", "uint16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32 = {"_p_uint32", "uint32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8 = {"_p_uint8", "uint8 *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CFight,
  &_swigt__p_CScene,
  &_swigt__p_CUser,
  &_swigt__p_IntArr,
  &_swigt__p_SItemInstance,
  &_swigt__p_SItemTemplate,
  &_swigt__p_SMonsterTmpl,
  &_swigt__p_SNpcPos,
  &_swigt__p_SPet,
  &_swigt__p_SResInfo,
  &_swigt__p_STongJiInfo,
  &_swigt__p_SUserAward,
  &_swigt__p_SharePetPtr,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_listT_uint32_t,
  &_swigt__p_std__string,
  &_swigt__p_time_t,
  &_swigt__p_uint16,
  &_swigt__p_uint32,
  &_swigt__p_uint8,
};

static swig_cast_info _swigc__p_CFight[] = {  {&_swigt__p_CFight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CScene[] = {  {&_swigt__p_CScene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CUser[] = {  {&_swigt__p_CUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntArr[] = {  {&_swigt__p_IntArr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SItemInstance[] = {  {&_swigt__p_SItemInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SItemTemplate[] = {  {&_swigt__p_SItemTemplate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SMonsterTmpl[] = {  {&_swigt__p_SMonsterTmpl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SNpcPos[] = {  {&_swigt__p_SNpcPos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SPet[] = {  {&_swigt__p_SPet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SResInfo[] = {  {&_swigt__p_SResInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_STongJiInfo[] = {  {&_swigt__p_STongJiInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SUserAward[] = {  {&_swigt__p_SUserAward, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SharePetPtr[] = {  {&_swigt__p_SharePetPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_IntArr, _p_IntArrTo_p_int, 0, 0},  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_listT_uint32_t[] = {  {&_swigt__p_listT_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_time_t[] = {  {&_swigt__p_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16[] = {  {&_swigt__p_uint16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32[] = {  {&_swigt__p_uint32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8[] = {  {&_swigt__p_uint8, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CFight,
  _swigc__p_CScene,
  _swigc__p_CUser,
  _swigc__p_IntArr,
  _swigc__p_SItemInstance,
  _swigc__p_SItemTemplate,
  _swigc__p_SMonsterTmpl,
  _swigc__p_SNpcPos,
  _swigc__p_SPet,
  _swigc__p_SResInfo,
  _swigc__p_STongJiInfo,
  _swigc__p_SUserAward,
  _swigc__p_SharePetPtr,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_listT_uint32_t,
  _swigc__p_std__string,
  _swigc__p_time_t,
  _swigc__p_uint16,
  _swigc__p_uint32,
  _swigc__p_uint8,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

