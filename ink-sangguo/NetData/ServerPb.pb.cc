// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerPb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerPb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerPB {

namespace {

const ::google::protobuf::Descriptor* UserCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCamps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCamps_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCycBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCycBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaffleHeroTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaffleHeroTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBanquetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBanquetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamUpdateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamUpdateTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAddData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAddData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiningInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiningInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCluster_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerPb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ServerPb_2eproto() {
  protobuf_AddDesc_ServerPb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerPb.proto");
  GOOGLE_CHECK(file != NULL);
  UserCamp_descriptor_ = file->message_type(0);
  static const int UserCamp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamp, outputdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamp, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamp, leveluptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamp, outputtime_),
  };
  UserCamp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserCamp_descriptor_,
      UserCamp::internal_default_instance(),
      UserCamp_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserCamp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamp, _internal_metadata_));
  UserCamps_descriptor_ = file->message_type(1);
  static const int UserCamps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamps, camps_),
  };
  UserCamps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserCamps_descriptor_,
      UserCamps::internal_default_instance(),
      UserCamps_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserCamps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCamps, _internal_metadata_));
  UserCycBattle_descriptor_ = file->message_type(2);
  static const int UserCycBattle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, maxdifficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, curdifficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, curround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, leftunlocktimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, enemypath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, enemyteam_),
  };
  UserCycBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserCycBattle_descriptor_,
      UserCycBattle::internal_default_instance(),
      UserCycBattle_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserCycBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCycBattle, _internal_metadata_));
  BioStep_descriptor_ = file->message_type(3);
  static const int BioStep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioStep, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioStep, branchids_),
  };
  BioStep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioStep_descriptor_,
      BioStep::internal_default_instance(),
      BioStep_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioStep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioStep, _internal_metadata_));
  BioClass_descriptor_ = file->message_type(4);
  static const int BioClass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClass, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClass, step_),
  };
  BioClass_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioClass_descriptor_,
      BioClass::internal_default_instance(),
      BioClass_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioClass),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClass, _internal_metadata_));
  RaffleHeroTimes_descriptor_ = file->message_type(5);
  static const int RaffleHeroTimes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimes, usetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimes, onerafftimes_),
  };
  RaffleHeroTimes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaffleHeroTimes_descriptor_,
      RaffleHeroTimes::internal_default_instance(),
      RaffleHeroTimes_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaffleHeroTimes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimes, _internal_metadata_));
  UserBanquetInfo_descriptor_ = file->message_type(6);
  static const int UserBanquetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBanquetInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBanquetInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBanquetInfo, duratime_),
  };
  UserBanquetInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserBanquetInfo_descriptor_,
      UserBanquetInfo::internal_default_instance(),
      UserBanquetInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserBanquetInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBanquetInfo, _internal_metadata_));
  TeamUpdateTime_descriptor_ = file->message_type(7);
  static const int TeamUpdateTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateTime, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateTime, time_),
  };
  TeamUpdateTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamUpdateTime_descriptor_,
      TeamUpdateTime::internal_default_instance(),
      TeamUpdateTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(TeamUpdateTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateTime, _internal_metadata_));
  UserTeam_descriptor_ = file->message_type(8);
  static const int UserTeam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTeam, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTeam, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTeam, curcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTeam, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTeam, mininginfo_),
  };
  UserTeam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserTeam_descriptor_,
      UserTeam::internal_default_instance(),
      UserTeam_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserTeam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTeam, _internal_metadata_));
  UserAddData_descriptor_ = file->message_type(9);
  static const int UserAddData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, recruitheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, firsthavehero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, herobios_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, rafftimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, raffday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, selhero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, banquetinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, teams_),
  };
  UserAddData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserAddData_descriptor_,
      UserAddData::internal_default_instance(),
      UserAddData_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserAddData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddData, _internal_metadata_));
  MiningInfo_descriptor_ = file->message_type(10);
  static const int MiningInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiningInfo, startmining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiningInfo, carrynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiningInfo, soldiercarryone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiningInfo, soldiercarrymax_),
  };
  MiningInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MiningInfo_descriptor_,
      MiningInfo::internal_default_instance(),
      MiningInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MiningInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiningInfo, _internal_metadata_));
  UserCluster_descriptor_ = file->message_type(11);
  static const int UserCluster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCluster, creater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCluster, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCluster, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCluster, pub_),
  };
  UserCluster_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserCluster_descriptor_,
      UserCluster::internal_default_instance(),
      UserCluster_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserCluster),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCluster, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerPb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserCamp_descriptor_, UserCamp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserCamps_descriptor_, UserCamps::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserCycBattle_descriptor_, UserCycBattle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioStep_descriptor_, BioStep::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioClass_descriptor_, BioClass::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaffleHeroTimes_descriptor_, RaffleHeroTimes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserBanquetInfo_descriptor_, UserBanquetInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamUpdateTime_descriptor_, TeamUpdateTime::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserTeam_descriptor_, UserTeam::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserAddData_descriptor_, UserAddData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MiningInfo_descriptor_, MiningInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserCluster_descriptor_, UserCluster::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerPb_2eproto() {
  UserCamp_default_instance_.Shutdown();
  delete UserCamp_reflection_;
  UserCamps_default_instance_.Shutdown();
  delete UserCamps_reflection_;
  UserCycBattle_default_instance_.Shutdown();
  delete UserCycBattle_reflection_;
  BioStep_default_instance_.Shutdown();
  delete BioStep_reflection_;
  BioClass_default_instance_.Shutdown();
  delete BioClass_reflection_;
  RaffleHeroTimes_default_instance_.Shutdown();
  delete RaffleHeroTimes_reflection_;
  UserBanquetInfo_default_instance_.Shutdown();
  delete UserBanquetInfo_reflection_;
  TeamUpdateTime_default_instance_.Shutdown();
  delete TeamUpdateTime_reflection_;
  UserTeam_default_instance_.Shutdown();
  delete UserTeam_reflection_;
  UserAddData_default_instance_.Shutdown();
  delete UserAddData_reflection_;
  MiningInfo_default_instance_.Shutdown();
  delete MiningInfo_reflection_;
  UserCluster_default_instance_.Shutdown();
  delete UserCluster_reflection_;
}

void protobuf_InitDefaults_ServerPb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::NetMsg::protobuf_InitDefaults_NetMsg_2eproto();
  UserCamp_default_instance_.DefaultConstruct();
  UserCamps_default_instance_.DefaultConstruct();
  UserCycBattle_default_instance_.DefaultConstruct();
  BioStep_default_instance_.DefaultConstruct();
  BioClass_default_instance_.DefaultConstruct();
  RaffleHeroTimes_default_instance_.DefaultConstruct();
  UserBanquetInfo_default_instance_.DefaultConstruct();
  TeamUpdateTime_default_instance_.DefaultConstruct();
  UserTeam_default_instance_.DefaultConstruct();
  UserAddData_default_instance_.DefaultConstruct();
  MiningInfo_default_instance_.DefaultConstruct();
  UserCluster_default_instance_.DefaultConstruct();
  UserCamp_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserCamps_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserCycBattle_default_instance_.get_mutable()->InitAsDefaultInstance();
  BioStep_default_instance_.get_mutable()->InitAsDefaultInstance();
  BioClass_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaffleHeroTimes_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserBanquetInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  TeamUpdateTime_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserTeam_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserAddData_default_instance_.get_mutable()->InitAsDefaultInstance();
  MiningInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserCluster_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ServerPb_2eproto_once_);
void protobuf_InitDefaults_ServerPb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ServerPb_2eproto_once_,
                 &protobuf_InitDefaults_ServerPb_2eproto_impl);
}
void protobuf_AddDesc_ServerPb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ServerPb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ServerPb.proto\022\010ServerPB\032\014NetMsg.proto"
    "\"v\n\010UserCamp\022\014\n\004type\030\001 \001(\r\022\r\n\005level\030\002 \001("
    "\r\022\022\n\noutputData\030\003 \001(\002\022\020\n\010leftTime\030\004 \001(\r\022"
    "\023\n\013levelUpTime\030\005 \001(\r\022\022\n\noutputTime\030\006 \001(\r"
    "\".\n\tUserCamps\022!\n\005camps\030\001 \003(\0132\022.ServerPB."
    "UserCamp\"\303\001\n\rUserCycBattle\022\025\n\rmaxDifficu"
    "lty\030\001 \001(\r\022\025\n\rcurDifficulty\030\002 \001(\r\022\020\n\010curR"
    "ound\030\003 \001(\r\022\027\n\017leftUnlockTimes\030\004 \001(\r\022\020\n\010l"
    "eftTime\030\005 \001(\r\022\021\n\tenemyPath\030\007 \001(\r\022\017\n\007perc"
    "ent\030\010 \001(\002\022\020\n\010battleId\030\t \001(\004\022\021\n\tenemyTeam"
    "\030\n \001(\r\",\n\007BioStep\022\016\n\006stepId\030\001 \001(\r\022\021\n\tbra"
    "nchIds\030\002 \003(\r\">\n\010BioClass\022\021\n\theroClass\030\001 "
    "\001(\r\022\037\n\004step\030\002 \003(\0132\021.ServerPB.BioStep\"E\n\017"
    "RaffleHeroTimes\022\n\n\002id\030\001 \001(\r\022\020\n\010useTimes\030"
    "\002 \001(\r\022\024\n\014oneRaffTimes\030\003 \001(\r\"[\n\017UserBanqu"
    "etInfo\022\"\n\004info\030\001 \001(\0132\024.NetMsg.BanquetHer"
    "os\022\022\n\ncreateTime\030\002 \001(\r\022\020\n\010duraTime\030\003 \001(\r"
    "\"+\n\016TeamUpdateTime\022\013\n\003pos\030\001 \001(\r\022\014\n\004time\030"
    "\002 \001(\r\"\233\001\n\010UserTeam\022\036\n\004team\030\001 \001(\0132\020.NetMs"
    "g.TeamInfo\022 \n\004path\030\002 \001(\0132\022.NetMsg.RunPat"
    "hAck\022\017\n\007curCity\030\003 \001(\005\022\022\n\nupdateTime\030\004 \001("
    "\r\022(\n\nminingInfo\030\005 \001(\0132\024.ServerPB.MiningI"
    "nfo\"\204\002\n\013UserAddData\022\024\n\014recruitHeros\030\001 \003("
    "\r\022\025\n\rfirstHaveHero\030\002 \003(\r\022$\n\010heroBios\030\003 \003"
    "(\0132\022.ServerPB.BioClass\022,\n\traffTimes\030\004 \003("
    "\0132\031.ServerPB.RaffleHeroTimes\022\017\n\007raffDay\030"
    "\005 \001(\r\022\017\n\007selHero\030\006 \001(\r\022/\n\014banquetInfos\030\007"
    " \003(\0132\031.ServerPB.UserBanquetInfo\022!\n\005teams"
    "\030\010 \003(\0132\022.ServerPB.UserTeam\"e\n\nMiningInfo"
    "\022\023\n\013startMining\030\001 \001(\r\022\020\n\010carryNum\030\002 \001(\r\022"
    "\027\n\017soldierCarryOne\030\003 \001(\r\022\027\n\017soldierCarry"
    "Max\030\004 \001(\r\"\231\001\n\013UserCluster\022\'\n\007creater\030\001 \001"
    "(\0132\026.NetMsg.ClusterCreater\022\'\n\004info\030\002 \003(\013"
    "2\031.NetMsg.ClusterMemberInfo\022+\n\006detail\030\003 "
    "\003(\0132\033.NetMsg.ClusterMemberDetail\022\013\n\003pub\030"
    "\004 \001(\010B\002H\001b\006proto3", 1417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerPb.proto", &protobuf_RegisterTypes);
  ::NetMsg::protobuf_AddDesc_NetMsg_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerPb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ServerPb_2eproto_once_);
void protobuf_AddDesc_ServerPb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ServerPb_2eproto_once_,
                 &protobuf_AddDesc_ServerPb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerPb_2eproto {
  StaticDescriptorInitializer_ServerPb_2eproto() {
    protobuf_AddDesc_ServerPb_2eproto();
  }
} static_descriptor_initializer_ServerPb_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCamp::kTypeFieldNumber;
const int UserCamp::kLevelFieldNumber;
const int UserCamp::kOutputDataFieldNumber;
const int UserCamp::kLeftTimeFieldNumber;
const int UserCamp::kLevelUpTimeFieldNumber;
const int UserCamp::kOutputTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCamp::UserCamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.UserCamp)
}

void UserCamp::InitAsDefaultInstance() {
}

UserCamp::UserCamp(const UserCamp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.UserCamp)
}

void UserCamp::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&outputtime_) -
    reinterpret_cast<char*>(&type_) + sizeof(outputtime_));
  _cached_size_ = 0;
}

UserCamp::~UserCamp() {
  // @@protoc_insertion_point(destructor:ServerPB.UserCamp)
  SharedDtor();
}

void UserCamp::SharedDtor() {
}

void UserCamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCamp_descriptor_;
}

const UserCamp& UserCamp::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserCamp> UserCamp_default_instance_;

UserCamp* UserCamp::New(::google::protobuf::Arena* arena) const {
  UserCamp* n = new UserCamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserCamp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.UserCamp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserCamp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserCamp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, outputtime_);

#undef ZR_HELPER_
#undef ZR_

}

bool UserCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.UserCamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_outputData;
        break;
      }

      // optional float outputData = 3;
      case 3: {
        if (tag == 29) {
         parse_outputData:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outputdata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 4;
      case 4: {
        if (tag == 32) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_levelUpTime;
        break;
      }

      // optional uint32 levelUpTime = 5;
      case 5: {
        if (tag == 40) {
         parse_levelUpTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leveluptime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_outputTime;
        break;
      }

      // optional uint32 outputTime = 6;
      case 6: {
        if (tag == 48) {
         parse_outputTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outputtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.UserCamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.UserCamp)
  return false;
#undef DO_
}

void UserCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.UserCamp)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional float outputData = 3;
  if (this->outputdata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->outputdata(), output);
  }

  // optional uint32 leftTime = 4;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lefttime(), output);
  }

  // optional uint32 levelUpTime = 5;
  if (this->leveluptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leveluptime(), output);
  }

  // optional uint32 outputTime = 6;
  if (this->outputtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->outputtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.UserCamp)
}

::google::protobuf::uint8* UserCamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.UserCamp)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional float outputData = 3;
  if (this->outputdata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->outputdata(), target);
  }

  // optional uint32 leftTime = 4;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lefttime(), target);
  }

  // optional uint32 levelUpTime = 5;
  if (this->leveluptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leveluptime(), target);
  }

  // optional uint32 outputTime = 6;
  if (this->outputtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->outputtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.UserCamp)
  return target;
}

size_t UserCamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.UserCamp)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional float outputData = 3;
  if (this->outputdata() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 leftTime = 4;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  // optional uint32 levelUpTime = 5;
  if (this->leveluptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leveluptime());
  }

  // optional uint32 outputTime = 6;
  if (this->outputtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->outputtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.UserCamp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserCamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserCamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.UserCamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.UserCamp)
    UnsafeMergeFrom(*source);
  }
}

void UserCamp::MergeFrom(const UserCamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.UserCamp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserCamp::UnsafeMergeFrom(const UserCamp& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.outputdata() != 0) {
    set_outputdata(from.outputdata());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
  if (from.leveluptime() != 0) {
    set_leveluptime(from.leveluptime());
  }
  if (from.outputtime() != 0) {
    set_outputtime(from.outputtime());
  }
}

void UserCamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.UserCamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCamp::CopyFrom(const UserCamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.UserCamp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserCamp::IsInitialized() const {

  return true;
}

void UserCamp::Swap(UserCamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCamp::InternalSwap(UserCamp* other) {
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(outputdata_, other->outputdata_);
  std::swap(lefttime_, other->lefttime_);
  std::swap(leveluptime_, other->leveluptime_);
  std::swap(outputtime_, other->outputtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserCamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCamp_descriptor_;
  metadata.reflection = UserCamp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserCamp

// optional uint32 type = 1;
void UserCamp::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 UserCamp::type() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCamp.type)
  return type_;
}
void UserCamp::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCamp.type)
}

// optional uint32 level = 2;
void UserCamp::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 UserCamp::level() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCamp.level)
  return level_;
}
void UserCamp::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCamp.level)
}

// optional float outputData = 3;
void UserCamp::clear_outputdata() {
  outputdata_ = 0;
}
float UserCamp::outputdata() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCamp.outputData)
  return outputdata_;
}
void UserCamp::set_outputdata(float value) {
  
  outputdata_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCamp.outputData)
}

// optional uint32 leftTime = 4;
void UserCamp::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 UserCamp::lefttime() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCamp.leftTime)
  return lefttime_;
}
void UserCamp::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCamp.leftTime)
}

// optional uint32 levelUpTime = 5;
void UserCamp::clear_leveluptime() {
  leveluptime_ = 0u;
}
::google::protobuf::uint32 UserCamp::leveluptime() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCamp.levelUpTime)
  return leveluptime_;
}
void UserCamp::set_leveluptime(::google::protobuf::uint32 value) {
  
  leveluptime_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCamp.levelUpTime)
}

// optional uint32 outputTime = 6;
void UserCamp::clear_outputtime() {
  outputtime_ = 0u;
}
::google::protobuf::uint32 UserCamp::outputtime() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCamp.outputTime)
  return outputtime_;
}
void UserCamp::set_outputtime(::google::protobuf::uint32 value) {
  
  outputtime_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCamp.outputTime)
}

inline const UserCamp* UserCamp::internal_default_instance() {
  return &UserCamp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCamps::kCampsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCamps::UserCamps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.UserCamps)
}

void UserCamps::InitAsDefaultInstance() {
}

UserCamps::UserCamps(const UserCamps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.UserCamps)
}

void UserCamps::SharedCtor() {
  _cached_size_ = 0;
}

UserCamps::~UserCamps() {
  // @@protoc_insertion_point(destructor:ServerPB.UserCamps)
  SharedDtor();
}

void UserCamps::SharedDtor() {
}

void UserCamps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCamps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCamps_descriptor_;
}

const UserCamps& UserCamps::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserCamps> UserCamps_default_instance_;

UserCamps* UserCamps::New(::google::protobuf::Arena* arena) const {
  UserCamps* n = new UserCamps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserCamps::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.UserCamps)
  camps_.Clear();
}

bool UserCamps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.UserCamps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerPB.UserCamp camps = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_camps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_camps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_camps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.UserCamps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.UserCamps)
  return false;
#undef DO_
}

void UserCamps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.UserCamps)
  // repeated .ServerPB.UserCamp camps = 1;
  for (unsigned int i = 0, n = this->camps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.UserCamps)
}

::google::protobuf::uint8* UserCamps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.UserCamps)
  // repeated .ServerPB.UserCamp camps = 1;
  for (unsigned int i = 0, n = this->camps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->camps(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.UserCamps)
  return target;
}

size_t UserCamps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.UserCamps)
  size_t total_size = 0;

  // repeated .ServerPB.UserCamp camps = 1;
  {
    unsigned int count = this->camps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camps(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCamps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.UserCamps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserCamps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserCamps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.UserCamps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.UserCamps)
    UnsafeMergeFrom(*source);
  }
}

void UserCamps::MergeFrom(const UserCamps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.UserCamps)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserCamps::UnsafeMergeFrom(const UserCamps& from) {
  GOOGLE_DCHECK(&from != this);
  camps_.MergeFrom(from.camps_);
}

void UserCamps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.UserCamps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCamps::CopyFrom(const UserCamps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.UserCamps)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserCamps::IsInitialized() const {

  return true;
}

void UserCamps::Swap(UserCamps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCamps::InternalSwap(UserCamps* other) {
  camps_.UnsafeArenaSwap(&other->camps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserCamps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCamps_descriptor_;
  metadata.reflection = UserCamps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserCamps

// repeated .ServerPB.UserCamp camps = 1;
int UserCamps::camps_size() const {
  return camps_.size();
}
void UserCamps::clear_camps() {
  camps_.Clear();
}
const ::ServerPB::UserCamp& UserCamps::camps(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCamps.camps)
  return camps_.Get(index);
}
::ServerPB::UserCamp* UserCamps::mutable_camps(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.UserCamps.camps)
  return camps_.Mutable(index);
}
::ServerPB::UserCamp* UserCamps::add_camps() {
  // @@protoc_insertion_point(field_add:ServerPB.UserCamps.camps)
  return camps_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerPB::UserCamp >*
UserCamps::mutable_camps() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserCamps.camps)
  return &camps_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerPB::UserCamp >&
UserCamps::camps() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserCamps.camps)
  return camps_;
}

inline const UserCamps* UserCamps::internal_default_instance() {
  return &UserCamps_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCycBattle::kMaxDifficultyFieldNumber;
const int UserCycBattle::kCurDifficultyFieldNumber;
const int UserCycBattle::kCurRoundFieldNumber;
const int UserCycBattle::kLeftUnlockTimesFieldNumber;
const int UserCycBattle::kLeftTimeFieldNumber;
const int UserCycBattle::kEnemyPathFieldNumber;
const int UserCycBattle::kPercentFieldNumber;
const int UserCycBattle::kBattleIdFieldNumber;
const int UserCycBattle::kEnemyTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCycBattle::UserCycBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.UserCycBattle)
}

void UserCycBattle::InitAsDefaultInstance() {
}

UserCycBattle::UserCycBattle(const UserCycBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.UserCycBattle)
}

void UserCycBattle::SharedCtor() {
  ::memset(&maxdifficulty_, 0, reinterpret_cast<char*>(&enemyteam_) -
    reinterpret_cast<char*>(&maxdifficulty_) + sizeof(enemyteam_));
  _cached_size_ = 0;
}

UserCycBattle::~UserCycBattle() {
  // @@protoc_insertion_point(destructor:ServerPB.UserCycBattle)
  SharedDtor();
}

void UserCycBattle::SharedDtor() {
}

void UserCycBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCycBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCycBattle_descriptor_;
}

const UserCycBattle& UserCycBattle::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserCycBattle> UserCycBattle_default_instance_;

UserCycBattle* UserCycBattle::New(::google::protobuf::Arena* arena) const {
  UserCycBattle* n = new UserCycBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserCycBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.UserCycBattle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserCycBattle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserCycBattle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(maxdifficulty_, percent_);
  enemyteam_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool UserCycBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.UserCycBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxDifficulty = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxdifficulty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curDifficulty;
        break;
      }

      // optional uint32 curDifficulty = 2;
      case 2: {
        if (tag == 16) {
         parse_curDifficulty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curdifficulty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curRound;
        break;
      }

      // optional uint32 curRound = 3;
      case 3: {
        if (tag == 24) {
         parse_curRound:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curround_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leftUnlockTimes;
        break;
      }

      // optional uint32 leftUnlockTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_leftUnlockTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftunlocktimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 5;
      case 5: {
        if (tag == 40) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_enemyPath;
        break;
      }

      // optional uint32 enemyPath = 7;
      case 7: {
        if (tag == 56) {
         parse_enemyPath:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemypath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_percent;
        break;
      }

      // optional float percent = 8;
      case 8: {
        if (tag == 69) {
         parse_percent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_battleId;
        break;
      }

      // optional uint64 battleId = 9;
      case 9: {
        if (tag == 72) {
         parse_battleId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_enemyTeam;
        break;
      }

      // optional uint32 enemyTeam = 10;
      case 10: {
        if (tag == 80) {
         parse_enemyTeam:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyteam_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.UserCycBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.UserCycBattle)
  return false;
#undef DO_
}

void UserCycBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.UserCycBattle)
  // optional uint32 maxDifficulty = 1;
  if (this->maxdifficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxdifficulty(), output);
  }

  // optional uint32 curDifficulty = 2;
  if (this->curdifficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curdifficulty(), output);
  }

  // optional uint32 curRound = 3;
  if (this->curround() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curround(), output);
  }

  // optional uint32 leftUnlockTimes = 4;
  if (this->leftunlocktimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leftunlocktimes(), output);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lefttime(), output);
  }

  // optional uint32 enemyPath = 7;
  if (this->enemypath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->enemypath(), output);
  }

  // optional float percent = 8;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->percent(), output);
  }

  // optional uint64 battleId = 9;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->battleid(), output);
  }

  // optional uint32 enemyTeam = 10;
  if (this->enemyteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->enemyteam(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.UserCycBattle)
}

::google::protobuf::uint8* UserCycBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.UserCycBattle)
  // optional uint32 maxDifficulty = 1;
  if (this->maxdifficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxdifficulty(), target);
  }

  // optional uint32 curDifficulty = 2;
  if (this->curdifficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curdifficulty(), target);
  }

  // optional uint32 curRound = 3;
  if (this->curround() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curround(), target);
  }

  // optional uint32 leftUnlockTimes = 4;
  if (this->leftunlocktimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leftunlocktimes(), target);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lefttime(), target);
  }

  // optional uint32 enemyPath = 7;
  if (this->enemypath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->enemypath(), target);
  }

  // optional float percent = 8;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->percent(), target);
  }

  // optional uint64 battleId = 9;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->battleid(), target);
  }

  // optional uint32 enemyTeam = 10;
  if (this->enemyteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->enemyteam(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.UserCycBattle)
  return target;
}

size_t UserCycBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.UserCycBattle)
  size_t total_size = 0;

  // optional uint32 maxDifficulty = 1;
  if (this->maxdifficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxdifficulty());
  }

  // optional uint32 curDifficulty = 2;
  if (this->curdifficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curdifficulty());
  }

  // optional uint32 curRound = 3;
  if (this->curround() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curround());
  }

  // optional uint32 leftUnlockTimes = 4;
  if (this->leftunlocktimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftunlocktimes());
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  // optional uint32 enemyPath = 7;
  if (this->enemypath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemypath());
  }

  // optional float percent = 8;
  if (this->percent() != 0) {
    total_size += 1 + 4;
  }

  // optional uint64 battleId = 9;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 enemyTeam = 10;
  if (this->enemyteam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemyteam());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCycBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.UserCycBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserCycBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserCycBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.UserCycBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.UserCycBattle)
    UnsafeMergeFrom(*source);
  }
}

void UserCycBattle::MergeFrom(const UserCycBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.UserCycBattle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserCycBattle::UnsafeMergeFrom(const UserCycBattle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.maxdifficulty() != 0) {
    set_maxdifficulty(from.maxdifficulty());
  }
  if (from.curdifficulty() != 0) {
    set_curdifficulty(from.curdifficulty());
  }
  if (from.curround() != 0) {
    set_curround(from.curround());
  }
  if (from.leftunlocktimes() != 0) {
    set_leftunlocktimes(from.leftunlocktimes());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
  if (from.enemypath() != 0) {
    set_enemypath(from.enemypath());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.enemyteam() != 0) {
    set_enemyteam(from.enemyteam());
  }
}

void UserCycBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.UserCycBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCycBattle::CopyFrom(const UserCycBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.UserCycBattle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserCycBattle::IsInitialized() const {

  return true;
}

void UserCycBattle::Swap(UserCycBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCycBattle::InternalSwap(UserCycBattle* other) {
  std::swap(maxdifficulty_, other->maxdifficulty_);
  std::swap(curdifficulty_, other->curdifficulty_);
  std::swap(curround_, other->curround_);
  std::swap(leftunlocktimes_, other->leftunlocktimes_);
  std::swap(lefttime_, other->lefttime_);
  std::swap(enemypath_, other->enemypath_);
  std::swap(percent_, other->percent_);
  std::swap(battleid_, other->battleid_);
  std::swap(enemyteam_, other->enemyteam_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserCycBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCycBattle_descriptor_;
  metadata.reflection = UserCycBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserCycBattle

// optional uint32 maxDifficulty = 1;
void UserCycBattle::clear_maxdifficulty() {
  maxdifficulty_ = 0u;
}
::google::protobuf::uint32 UserCycBattle::maxdifficulty() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.maxDifficulty)
  return maxdifficulty_;
}
void UserCycBattle::set_maxdifficulty(::google::protobuf::uint32 value) {
  
  maxdifficulty_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.maxDifficulty)
}

// optional uint32 curDifficulty = 2;
void UserCycBattle::clear_curdifficulty() {
  curdifficulty_ = 0u;
}
::google::protobuf::uint32 UserCycBattle::curdifficulty() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.curDifficulty)
  return curdifficulty_;
}
void UserCycBattle::set_curdifficulty(::google::protobuf::uint32 value) {
  
  curdifficulty_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.curDifficulty)
}

// optional uint32 curRound = 3;
void UserCycBattle::clear_curround() {
  curround_ = 0u;
}
::google::protobuf::uint32 UserCycBattle::curround() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.curRound)
  return curround_;
}
void UserCycBattle::set_curround(::google::protobuf::uint32 value) {
  
  curround_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.curRound)
}

// optional uint32 leftUnlockTimes = 4;
void UserCycBattle::clear_leftunlocktimes() {
  leftunlocktimes_ = 0u;
}
::google::protobuf::uint32 UserCycBattle::leftunlocktimes() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.leftUnlockTimes)
  return leftunlocktimes_;
}
void UserCycBattle::set_leftunlocktimes(::google::protobuf::uint32 value) {
  
  leftunlocktimes_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.leftUnlockTimes)
}

// optional uint32 leftTime = 5;
void UserCycBattle::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 UserCycBattle::lefttime() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.leftTime)
  return lefttime_;
}
void UserCycBattle::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.leftTime)
}

// optional uint32 enemyPath = 7;
void UserCycBattle::clear_enemypath() {
  enemypath_ = 0u;
}
::google::protobuf::uint32 UserCycBattle::enemypath() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.enemyPath)
  return enemypath_;
}
void UserCycBattle::set_enemypath(::google::protobuf::uint32 value) {
  
  enemypath_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.enemyPath)
}

// optional float percent = 8;
void UserCycBattle::clear_percent() {
  percent_ = 0;
}
float UserCycBattle::percent() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.percent)
  return percent_;
}
void UserCycBattle::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.percent)
}

// optional uint64 battleId = 9;
void UserCycBattle::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UserCycBattle::battleid() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.battleId)
  return battleid_;
}
void UserCycBattle::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.battleId)
}

// optional uint32 enemyTeam = 10;
void UserCycBattle::clear_enemyteam() {
  enemyteam_ = 0u;
}
::google::protobuf::uint32 UserCycBattle::enemyteam() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCycBattle.enemyTeam)
  return enemyteam_;
}
void UserCycBattle::set_enemyteam(::google::protobuf::uint32 value) {
  
  enemyteam_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCycBattle.enemyTeam)
}

inline const UserCycBattle* UserCycBattle::internal_default_instance() {
  return &UserCycBattle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioStep::kStepIdFieldNumber;
const int BioStep::kBranchIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioStep::BioStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.BioStep)
}

void BioStep::InitAsDefaultInstance() {
}

BioStep::BioStep(const BioStep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.BioStep)
}

void BioStep::SharedCtor() {
  stepid_ = 0u;
  _cached_size_ = 0;
}

BioStep::~BioStep() {
  // @@protoc_insertion_point(destructor:ServerPB.BioStep)
  SharedDtor();
}

void BioStep::SharedDtor() {
}

void BioStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioStep_descriptor_;
}

const BioStep& BioStep::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BioStep> BioStep_default_instance_;

BioStep* BioStep::New(::google::protobuf::Arena* arena) const {
  BioStep* n = new BioStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioStep::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.BioStep)
  stepid_ = 0u;
  branchids_.Clear();
}

bool BioStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.BioStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_branchIds;
        break;
      }

      // repeated uint32 branchIds = 2;
      case 2: {
        if (tag == 18) {
         parse_branchIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_branchids())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_branchids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.BioStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.BioStep)
  return false;
#undef DO_
}

void BioStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.BioStep)
  // optional uint32 stepId = 1;
  if (this->stepid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // repeated uint32 branchIds = 2;
  if (this->branchids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_branchids_cached_byte_size_);
  }
  for (int i = 0; i < this->branchids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->branchids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.BioStep)
}

::google::protobuf::uint8* BioStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.BioStep)
  // optional uint32 stepId = 1;
  if (this->stepid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // repeated uint32 branchIds = 2;
  if (this->branchids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _branchids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->branchids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->branchids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.BioStep)
  return target;
}

size_t BioStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.BioStep)
  size_t total_size = 0;

  // optional uint32 stepId = 1;
  if (this->stepid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stepid());
  }

  // repeated uint32 branchIds = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->branchids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->branchids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _branchids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.BioStep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BioStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.BioStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.BioStep)
    UnsafeMergeFrom(*source);
  }
}

void BioStep::MergeFrom(const BioStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.BioStep)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BioStep::UnsafeMergeFrom(const BioStep& from) {
  GOOGLE_DCHECK(&from != this);
  branchids_.UnsafeMergeFrom(from.branchids_);
  if (from.stepid() != 0) {
    set_stepid(from.stepid());
  }
}

void BioStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.BioStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioStep::CopyFrom(const BioStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.BioStep)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BioStep::IsInitialized() const {

  return true;
}

void BioStep::Swap(BioStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioStep::InternalSwap(BioStep* other) {
  std::swap(stepid_, other->stepid_);
  branchids_.UnsafeArenaSwap(&other->branchids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioStep_descriptor_;
  metadata.reflection = BioStep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioStep

// optional uint32 stepId = 1;
void BioStep::clear_stepid() {
  stepid_ = 0u;
}
::google::protobuf::uint32 BioStep::stepid() const {
  // @@protoc_insertion_point(field_get:ServerPB.BioStep.stepId)
  return stepid_;
}
void BioStep::set_stepid(::google::protobuf::uint32 value) {
  
  stepid_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.BioStep.stepId)
}

// repeated uint32 branchIds = 2;
int BioStep::branchids_size() const {
  return branchids_.size();
}
void BioStep::clear_branchids() {
  branchids_.Clear();
}
::google::protobuf::uint32 BioStep::branchids(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.BioStep.branchIds)
  return branchids_.Get(index);
}
void BioStep::set_branchids(int index, ::google::protobuf::uint32 value) {
  branchids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ServerPB.BioStep.branchIds)
}
void BioStep::add_branchids(::google::protobuf::uint32 value) {
  branchids_.Add(value);
  // @@protoc_insertion_point(field_add:ServerPB.BioStep.branchIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BioStep::branchids() const {
  // @@protoc_insertion_point(field_list:ServerPB.BioStep.branchIds)
  return branchids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BioStep::mutable_branchids() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.BioStep.branchIds)
  return &branchids_;
}

inline const BioStep* BioStep::internal_default_instance() {
  return &BioStep_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioClass::kHeroClassFieldNumber;
const int BioClass::kStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioClass::BioClass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.BioClass)
}

void BioClass::InitAsDefaultInstance() {
}

BioClass::BioClass(const BioClass& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.BioClass)
}

void BioClass::SharedCtor() {
  heroclass_ = 0u;
  _cached_size_ = 0;
}

BioClass::~BioClass() {
  // @@protoc_insertion_point(destructor:ServerPB.BioClass)
  SharedDtor();
}

void BioClass::SharedDtor() {
}

void BioClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioClass_descriptor_;
}

const BioClass& BioClass::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BioClass> BioClass_default_instance_;

BioClass* BioClass::New(::google::protobuf::Arena* arena) const {
  BioClass* n = new BioClass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioClass::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.BioClass)
  heroclass_ = 0u;
  step_.Clear();
}

bool BioClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.BioClass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_step;
        break;
      }

      // repeated .ServerPB.BioStep step = 2;
      case 2: {
        if (tag == 18) {
         parse_step:
          DO_(input->IncrementRecursionDepth());
         parse_loop_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_step;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.BioClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.BioClass)
  return false;
#undef DO_
}

void BioClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.BioClass)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // repeated .ServerPB.BioStep step = 2;
  for (unsigned int i = 0, n = this->step_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->step(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.BioClass)
}

::google::protobuf::uint8* BioClass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.BioClass)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // repeated .ServerPB.BioStep step = 2;
  for (unsigned int i = 0, n = this->step_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->step(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.BioClass)
  return target;
}

size_t BioClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.BioClass)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // repeated .ServerPB.BioStep step = 2;
  {
    unsigned int count = this->step_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->step(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.BioClass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioClass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BioClass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.BioClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.BioClass)
    UnsafeMergeFrom(*source);
  }
}

void BioClass::MergeFrom(const BioClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.BioClass)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BioClass::UnsafeMergeFrom(const BioClass& from) {
  GOOGLE_DCHECK(&from != this);
  step_.MergeFrom(from.step_);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
}

void BioClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.BioClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioClass::CopyFrom(const BioClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.BioClass)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BioClass::IsInitialized() const {

  return true;
}

void BioClass::Swap(BioClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioClass::InternalSwap(BioClass* other) {
  std::swap(heroclass_, other->heroclass_);
  step_.UnsafeArenaSwap(&other->step_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioClass_descriptor_;
  metadata.reflection = BioClass_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioClass

// optional uint32 heroClass = 1;
void BioClass::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 BioClass::heroclass() const {
  // @@protoc_insertion_point(field_get:ServerPB.BioClass.heroClass)
  return heroclass_;
}
void BioClass::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.BioClass.heroClass)
}

// repeated .ServerPB.BioStep step = 2;
int BioClass::step_size() const {
  return step_.size();
}
void BioClass::clear_step() {
  step_.Clear();
}
const ::ServerPB::BioStep& BioClass::step(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.BioClass.step)
  return step_.Get(index);
}
::ServerPB::BioStep* BioClass::mutable_step(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.BioClass.step)
  return step_.Mutable(index);
}
::ServerPB::BioStep* BioClass::add_step() {
  // @@protoc_insertion_point(field_add:ServerPB.BioClass.step)
  return step_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerPB::BioStep >*
BioClass::mutable_step() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.BioClass.step)
  return &step_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerPB::BioStep >&
BioClass::step() const {
  // @@protoc_insertion_point(field_list:ServerPB.BioClass.step)
  return step_;
}

inline const BioClass* BioClass::internal_default_instance() {
  return &BioClass_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaffleHeroTimes::kIdFieldNumber;
const int RaffleHeroTimes::kUseTimesFieldNumber;
const int RaffleHeroTimes::kOneRaffTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaffleHeroTimes::RaffleHeroTimes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.RaffleHeroTimes)
}

void RaffleHeroTimes::InitAsDefaultInstance() {
}

RaffleHeroTimes::RaffleHeroTimes(const RaffleHeroTimes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.RaffleHeroTimes)
}

void RaffleHeroTimes::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&onerafftimes_) -
    reinterpret_cast<char*>(&id_) + sizeof(onerafftimes_));
  _cached_size_ = 0;
}

RaffleHeroTimes::~RaffleHeroTimes() {
  // @@protoc_insertion_point(destructor:ServerPB.RaffleHeroTimes)
  SharedDtor();
}

void RaffleHeroTimes::SharedDtor() {
}

void RaffleHeroTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaffleHeroTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaffleHeroTimes_descriptor_;
}

const RaffleHeroTimes& RaffleHeroTimes::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaffleHeroTimes> RaffleHeroTimes_default_instance_;

RaffleHeroTimes* RaffleHeroTimes::New(::google::protobuf::Arena* arena) const {
  RaffleHeroTimes* n = new RaffleHeroTimes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaffleHeroTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.RaffleHeroTimes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaffleHeroTimes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaffleHeroTimes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, onerafftimes_);

#undef ZR_HELPER_
#undef ZR_

}

bool RaffleHeroTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.RaffleHeroTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_useTimes;
        break;
      }

      // optional uint32 useTimes = 2;
      case 2: {
        if (tag == 16) {
         parse_useTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oneRaffTimes;
        break;
      }

      // optional uint32 oneRaffTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_oneRaffTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onerafftimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.RaffleHeroTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.RaffleHeroTimes)
  return false;
#undef DO_
}

void RaffleHeroTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.RaffleHeroTimes)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 useTimes = 2;
  if (this->usetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usetimes(), output);
  }

  // optional uint32 oneRaffTimes = 3;
  if (this->onerafftimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onerafftimes(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.RaffleHeroTimes)
}

::google::protobuf::uint8* RaffleHeroTimes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.RaffleHeroTimes)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 useTimes = 2;
  if (this->usetimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usetimes(), target);
  }

  // optional uint32 oneRaffTimes = 3;
  if (this->onerafftimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onerafftimes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.RaffleHeroTimes)
  return target;
}

size_t RaffleHeroTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.RaffleHeroTimes)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 useTimes = 2;
  if (this->usetimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usetimes());
  }

  // optional uint32 oneRaffTimes = 3;
  if (this->onerafftimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onerafftimes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaffleHeroTimes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.RaffleHeroTimes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaffleHeroTimes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaffleHeroTimes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.RaffleHeroTimes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.RaffleHeroTimes)
    UnsafeMergeFrom(*source);
  }
}

void RaffleHeroTimes::MergeFrom(const RaffleHeroTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.RaffleHeroTimes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaffleHeroTimes::UnsafeMergeFrom(const RaffleHeroTimes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.usetimes() != 0) {
    set_usetimes(from.usetimes());
  }
  if (from.onerafftimes() != 0) {
    set_onerafftimes(from.onerafftimes());
  }
}

void RaffleHeroTimes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.RaffleHeroTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaffleHeroTimes::CopyFrom(const RaffleHeroTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.RaffleHeroTimes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaffleHeroTimes::IsInitialized() const {

  return true;
}

void RaffleHeroTimes::Swap(RaffleHeroTimes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaffleHeroTimes::InternalSwap(RaffleHeroTimes* other) {
  std::swap(id_, other->id_);
  std::swap(usetimes_, other->usetimes_);
  std::swap(onerafftimes_, other->onerafftimes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaffleHeroTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaffleHeroTimes_descriptor_;
  metadata.reflection = RaffleHeroTimes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaffleHeroTimes

// optional uint32 id = 1;
void RaffleHeroTimes::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 RaffleHeroTimes::id() const {
  // @@protoc_insertion_point(field_get:ServerPB.RaffleHeroTimes.id)
  return id_;
}
void RaffleHeroTimes::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.RaffleHeroTimes.id)
}

// optional uint32 useTimes = 2;
void RaffleHeroTimes::clear_usetimes() {
  usetimes_ = 0u;
}
::google::protobuf::uint32 RaffleHeroTimes::usetimes() const {
  // @@protoc_insertion_point(field_get:ServerPB.RaffleHeroTimes.useTimes)
  return usetimes_;
}
void RaffleHeroTimes::set_usetimes(::google::protobuf::uint32 value) {
  
  usetimes_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.RaffleHeroTimes.useTimes)
}

// optional uint32 oneRaffTimes = 3;
void RaffleHeroTimes::clear_onerafftimes() {
  onerafftimes_ = 0u;
}
::google::protobuf::uint32 RaffleHeroTimes::onerafftimes() const {
  // @@protoc_insertion_point(field_get:ServerPB.RaffleHeroTimes.oneRaffTimes)
  return onerafftimes_;
}
void RaffleHeroTimes::set_onerafftimes(::google::protobuf::uint32 value) {
  
  onerafftimes_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.RaffleHeroTimes.oneRaffTimes)
}

inline const RaffleHeroTimes* RaffleHeroTimes::internal_default_instance() {
  return &RaffleHeroTimes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBanquetInfo::kInfoFieldNumber;
const int UserBanquetInfo::kCreateTimeFieldNumber;
const int UserBanquetInfo::kDuraTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBanquetInfo::UserBanquetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.UserBanquetInfo)
}

void UserBanquetInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::NetMsg::BanquetHeros*>(
      ::NetMsg::BanquetHeros::internal_default_instance());
}

UserBanquetInfo::UserBanquetInfo(const UserBanquetInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.UserBanquetInfo)
}

void UserBanquetInfo::SharedCtor() {
  info_ = NULL;
  ::memset(&createtime_, 0, reinterpret_cast<char*>(&duratime_) -
    reinterpret_cast<char*>(&createtime_) + sizeof(duratime_));
  _cached_size_ = 0;
}

UserBanquetInfo::~UserBanquetInfo() {
  // @@protoc_insertion_point(destructor:ServerPB.UserBanquetInfo)
  SharedDtor();
}

void UserBanquetInfo::SharedDtor() {
  if (this != &UserBanquetInfo_default_instance_.get()) {
    delete info_;
  }
}

void UserBanquetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBanquetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBanquetInfo_descriptor_;
}

const UserBanquetInfo& UserBanquetInfo::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserBanquetInfo> UserBanquetInfo_default_instance_;

UserBanquetInfo* UserBanquetInfo::New(::google::protobuf::Arena* arena) const {
  UserBanquetInfo* n = new UserBanquetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserBanquetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.UserBanquetInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserBanquetInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserBanquetInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(createtime_, duratime_);
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool UserBanquetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.UserBanquetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.BanquetHeros info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 2;
      case 2: {
        if (tag == 16) {
         parse_createTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duraTime;
        break;
      }

      // optional uint32 duraTime = 3;
      case 3: {
        if (tag == 24) {
         parse_duraTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duratime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.UserBanquetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.UserBanquetInfo)
  return false;
#undef DO_
}

void UserBanquetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.UserBanquetInfo)
  // optional .NetMsg.BanquetHeros info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // optional uint32 createTime = 2;
  if (this->createtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->createtime(), output);
  }

  // optional uint32 duraTime = 3;
  if (this->duratime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duratime(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.UserBanquetInfo)
}

::google::protobuf::uint8* UserBanquetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.UserBanquetInfo)
  // optional .NetMsg.BanquetHeros info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, false, target);
  }

  // optional uint32 createTime = 2;
  if (this->createtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->createtime(), target);
  }

  // optional uint32 duraTime = 3;
  if (this->duratime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duratime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.UserBanquetInfo)
  return target;
}

size_t UserBanquetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.UserBanquetInfo)
  size_t total_size = 0;

  // optional .NetMsg.BanquetHeros info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // optional uint32 createTime = 2;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  // optional uint32 duraTime = 3;
  if (this->duratime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duratime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBanquetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.UserBanquetInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserBanquetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserBanquetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.UserBanquetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.UserBanquetInfo)
    UnsafeMergeFrom(*source);
  }
}

void UserBanquetInfo::MergeFrom(const UserBanquetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.UserBanquetInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserBanquetInfo::UnsafeMergeFrom(const UserBanquetInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_info()) {
    mutable_info()->::NetMsg::BanquetHeros::MergeFrom(from.info());
  }
  if (from.createtime() != 0) {
    set_createtime(from.createtime());
  }
  if (from.duratime() != 0) {
    set_duratime(from.duratime());
  }
}

void UserBanquetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.UserBanquetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBanquetInfo::CopyFrom(const UserBanquetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.UserBanquetInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserBanquetInfo::IsInitialized() const {

  return true;
}

void UserBanquetInfo::Swap(UserBanquetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBanquetInfo::InternalSwap(UserBanquetInfo* other) {
  std::swap(info_, other->info_);
  std::swap(createtime_, other->createtime_);
  std::swap(duratime_, other->duratime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserBanquetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBanquetInfo_descriptor_;
  metadata.reflection = UserBanquetInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserBanquetInfo

// optional .NetMsg.BanquetHeros info = 1;
bool UserBanquetInfo::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void UserBanquetInfo::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::NetMsg::BanquetHeros& UserBanquetInfo::info() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserBanquetInfo.info)
  return info_ != NULL ? *info_
                         : *::NetMsg::BanquetHeros::internal_default_instance();
}
::NetMsg::BanquetHeros* UserBanquetInfo::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::NetMsg::BanquetHeros;
  }
  // @@protoc_insertion_point(field_mutable:ServerPB.UserBanquetInfo.info)
  return info_;
}
::NetMsg::BanquetHeros* UserBanquetInfo::release_info() {
  // @@protoc_insertion_point(field_release:ServerPB.UserBanquetInfo.info)
  
  ::NetMsg::BanquetHeros* temp = info_;
  info_ = NULL;
  return temp;
}
void UserBanquetInfo::set_allocated_info(::NetMsg::BanquetHeros* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPB.UserBanquetInfo.info)
}

// optional uint32 createTime = 2;
void UserBanquetInfo::clear_createtime() {
  createtime_ = 0u;
}
::google::protobuf::uint32 UserBanquetInfo::createtime() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserBanquetInfo.createTime)
  return createtime_;
}
void UserBanquetInfo::set_createtime(::google::protobuf::uint32 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserBanquetInfo.createTime)
}

// optional uint32 duraTime = 3;
void UserBanquetInfo::clear_duratime() {
  duratime_ = 0u;
}
::google::protobuf::uint32 UserBanquetInfo::duratime() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserBanquetInfo.duraTime)
  return duratime_;
}
void UserBanquetInfo::set_duratime(::google::protobuf::uint32 value) {
  
  duratime_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserBanquetInfo.duraTime)
}

inline const UserBanquetInfo* UserBanquetInfo::internal_default_instance() {
  return &UserBanquetInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamUpdateTime::kPosFieldNumber;
const int TeamUpdateTime::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamUpdateTime::TeamUpdateTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.TeamUpdateTime)
}

void TeamUpdateTime::InitAsDefaultInstance() {
}

TeamUpdateTime::TeamUpdateTime(const TeamUpdateTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.TeamUpdateTime)
}

void TeamUpdateTime::SharedCtor() {
  ::memset(&pos_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&pos_) + sizeof(time_));
  _cached_size_ = 0;
}

TeamUpdateTime::~TeamUpdateTime() {
  // @@protoc_insertion_point(destructor:ServerPB.TeamUpdateTime)
  SharedDtor();
}

void TeamUpdateTime::SharedDtor() {
}

void TeamUpdateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamUpdateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamUpdateTime_descriptor_;
}

const TeamUpdateTime& TeamUpdateTime::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TeamUpdateTime> TeamUpdateTime_default_instance_;

TeamUpdateTime* TeamUpdateTime::New(::google::protobuf::Arena* arena) const {
  TeamUpdateTime* n = new TeamUpdateTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamUpdateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.TeamUpdateTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TeamUpdateTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TeamUpdateTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pos_, time_);

#undef ZR_HELPER_
#undef ZR_

}

bool TeamUpdateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.TeamUpdateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.TeamUpdateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.TeamUpdateTime)
  return false;
#undef DO_
}

void TeamUpdateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.TeamUpdateTime)
  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.TeamUpdateTime)
}

::google::protobuf::uint8* TeamUpdateTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.TeamUpdateTime)
  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.TeamUpdateTime)
  return target;
}

size_t TeamUpdateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.TeamUpdateTime)
  size_t total_size = 0;

  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamUpdateTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.TeamUpdateTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamUpdateTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamUpdateTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.TeamUpdateTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.TeamUpdateTime)
    UnsafeMergeFrom(*source);
  }
}

void TeamUpdateTime::MergeFrom(const TeamUpdateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.TeamUpdateTime)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TeamUpdateTime::UnsafeMergeFrom(const TeamUpdateTime& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void TeamUpdateTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.TeamUpdateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUpdateTime::CopyFrom(const TeamUpdateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.TeamUpdateTime)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TeamUpdateTime::IsInitialized() const {

  return true;
}

void TeamUpdateTime::Swap(TeamUpdateTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamUpdateTime::InternalSwap(TeamUpdateTime* other) {
  std::swap(pos_, other->pos_);
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamUpdateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamUpdateTime_descriptor_;
  metadata.reflection = TeamUpdateTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamUpdateTime

// optional uint32 pos = 1;
void TeamUpdateTime::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 TeamUpdateTime::pos() const {
  // @@protoc_insertion_point(field_get:ServerPB.TeamUpdateTime.pos)
  return pos_;
}
void TeamUpdateTime::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.TeamUpdateTime.pos)
}

// optional uint32 time = 2;
void TeamUpdateTime::clear_time() {
  time_ = 0u;
}
::google::protobuf::uint32 TeamUpdateTime::time() const {
  // @@protoc_insertion_point(field_get:ServerPB.TeamUpdateTime.time)
  return time_;
}
void TeamUpdateTime::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.TeamUpdateTime.time)
}

inline const TeamUpdateTime* TeamUpdateTime::internal_default_instance() {
  return &TeamUpdateTime_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTeam::kTeamFieldNumber;
const int UserTeam::kPathFieldNumber;
const int UserTeam::kCurCityFieldNumber;
const int UserTeam::kUpdateTimeFieldNumber;
const int UserTeam::kMiningInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTeam::UserTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.UserTeam)
}

void UserTeam::InitAsDefaultInstance() {
  team_ = const_cast< ::NetMsg::TeamInfo*>(
      ::NetMsg::TeamInfo::internal_default_instance());
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
  mininginfo_ = const_cast< ::ServerPB::MiningInfo*>(
      ::ServerPB::MiningInfo::internal_default_instance());
}

UserTeam::UserTeam(const UserTeam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.UserTeam)
}

void UserTeam::SharedCtor() {
  team_ = NULL;
  path_ = NULL;
  mininginfo_ = NULL;
  ::memset(&curcity_, 0, reinterpret_cast<char*>(&updatetime_) -
    reinterpret_cast<char*>(&curcity_) + sizeof(updatetime_));
  _cached_size_ = 0;
}

UserTeam::~UserTeam() {
  // @@protoc_insertion_point(destructor:ServerPB.UserTeam)
  SharedDtor();
}

void UserTeam::SharedDtor() {
  if (this != &UserTeam_default_instance_.get()) {
    delete team_;
    delete path_;
    delete mininginfo_;
  }
}

void UserTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTeam_descriptor_;
}

const UserTeam& UserTeam::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserTeam> UserTeam_default_instance_;

UserTeam* UserTeam::New(::google::protobuf::Arena* arena) const {
  UserTeam* n = new UserTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.UserTeam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserTeam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserTeam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(curcity_, updatetime_);
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  if (GetArenaNoVirtual() == NULL && mininginfo_ != NULL) delete mininginfo_;
  mininginfo_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool UserTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.UserTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.TeamInfo team = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .NetMsg.RunPathAck path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curCity;
        break;
      }

      // optional int32 curCity = 3;
      case 3: {
        if (tag == 24) {
         parse_curCity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_updateTime;
        break;
      }

      // optional uint32 updateTime = 4;
      case 4: {
        if (tag == 32) {
         parse_updateTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_miningInfo;
        break;
      }

      // optional .ServerPB.MiningInfo miningInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_miningInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mininginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.UserTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.UserTeam)
  return false;
#undef DO_
}

void UserTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.UserTeam)
  // optional .NetMsg.TeamInfo team = 1;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_, output);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // optional int32 curCity = 3;
  if (this->curcity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curcity(), output);
  }

  // optional uint32 updateTime = 4;
  if (this->updatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updatetime(), output);
  }

  // optional .ServerPB.MiningInfo miningInfo = 5;
  if (this->has_mininginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mininginfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.UserTeam)
}

::google::protobuf::uint8* UserTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.UserTeam)
  // optional .NetMsg.TeamInfo team = 1;
  if (this->has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_, false, target);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // optional int32 curCity = 3;
  if (this->curcity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curcity(), target);
  }

  // optional uint32 updateTime = 4;
  if (this->updatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->updatetime(), target);
  }

  // optional .ServerPB.MiningInfo miningInfo = 5;
  if (this->has_mininginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->mininginfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.UserTeam)
  return target;
}

size_t UserTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.UserTeam)
  size_t total_size = 0;

  // optional .NetMsg.TeamInfo team = 1;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional int32 curCity = 3;
  if (this->curcity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curcity());
  }

  // optional uint32 updateTime = 4;
  if (this->updatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());
  }

  // optional .ServerPB.MiningInfo miningInfo = 5;
  if (this->has_mininginfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mininginfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.UserTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.UserTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.UserTeam)
    UnsafeMergeFrom(*source);
  }
}

void UserTeam::MergeFrom(const UserTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.UserTeam)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserTeam::UnsafeMergeFrom(const UserTeam& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_team()) {
    mutable_team()->::NetMsg::TeamInfo::MergeFrom(from.team());
  }
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
  if (from.curcity() != 0) {
    set_curcity(from.curcity());
  }
  if (from.updatetime() != 0) {
    set_updatetime(from.updatetime());
  }
  if (from.has_mininginfo()) {
    mutable_mininginfo()->::ServerPB::MiningInfo::MergeFrom(from.mininginfo());
  }
}

void UserTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.UserTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTeam::CopyFrom(const UserTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.UserTeam)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserTeam::IsInitialized() const {

  return true;
}

void UserTeam::Swap(UserTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTeam::InternalSwap(UserTeam* other) {
  std::swap(team_, other->team_);
  std::swap(path_, other->path_);
  std::swap(curcity_, other->curcity_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(mininginfo_, other->mininginfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTeam_descriptor_;
  metadata.reflection = UserTeam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserTeam

// optional .NetMsg.TeamInfo team = 1;
bool UserTeam::has_team() const {
  return this != internal_default_instance() && team_ != NULL;
}
void UserTeam::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::NetMsg::TeamInfo& UserTeam::team() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserTeam.team)
  return team_ != NULL ? *team_
                         : *::NetMsg::TeamInfo::internal_default_instance();
}
::NetMsg::TeamInfo* UserTeam::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::NetMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:ServerPB.UserTeam.team)
  return team_;
}
::NetMsg::TeamInfo* UserTeam::release_team() {
  // @@protoc_insertion_point(field_release:ServerPB.UserTeam.team)
  
  ::NetMsg::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void UserTeam::set_allocated_team(::NetMsg::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPB.UserTeam.team)
}

// optional .NetMsg.RunPathAck path = 2;
bool UserTeam::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void UserTeam::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& UserTeam::path() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserTeam.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* UserTeam::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:ServerPB.UserTeam.path)
  return path_;
}
::NetMsg::RunPathAck* UserTeam::release_path() {
  // @@protoc_insertion_point(field_release:ServerPB.UserTeam.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void UserTeam::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPB.UserTeam.path)
}

// optional int32 curCity = 3;
void UserTeam::clear_curcity() {
  curcity_ = 0;
}
::google::protobuf::int32 UserTeam::curcity() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserTeam.curCity)
  return curcity_;
}
void UserTeam::set_curcity(::google::protobuf::int32 value) {
  
  curcity_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserTeam.curCity)
}

// optional uint32 updateTime = 4;
void UserTeam::clear_updatetime() {
  updatetime_ = 0u;
}
::google::protobuf::uint32 UserTeam::updatetime() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserTeam.updateTime)
  return updatetime_;
}
void UserTeam::set_updatetime(::google::protobuf::uint32 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserTeam.updateTime)
}

// optional .ServerPB.MiningInfo miningInfo = 5;
bool UserTeam::has_mininginfo() const {
  return this != internal_default_instance() && mininginfo_ != NULL;
}
void UserTeam::clear_mininginfo() {
  if (GetArenaNoVirtual() == NULL && mininginfo_ != NULL) delete mininginfo_;
  mininginfo_ = NULL;
}
const ::ServerPB::MiningInfo& UserTeam::mininginfo() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserTeam.miningInfo)
  return mininginfo_ != NULL ? *mininginfo_
                         : *::ServerPB::MiningInfo::internal_default_instance();
}
::ServerPB::MiningInfo* UserTeam::mutable_mininginfo() {
  
  if (mininginfo_ == NULL) {
    mininginfo_ = new ::ServerPB::MiningInfo;
  }
  // @@protoc_insertion_point(field_mutable:ServerPB.UserTeam.miningInfo)
  return mininginfo_;
}
::ServerPB::MiningInfo* UserTeam::release_mininginfo() {
  // @@protoc_insertion_point(field_release:ServerPB.UserTeam.miningInfo)
  
  ::ServerPB::MiningInfo* temp = mininginfo_;
  mininginfo_ = NULL;
  return temp;
}
void UserTeam::set_allocated_mininginfo(::ServerPB::MiningInfo* mininginfo) {
  delete mininginfo_;
  mininginfo_ = mininginfo;
  if (mininginfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPB.UserTeam.miningInfo)
}

inline const UserTeam* UserTeam::internal_default_instance() {
  return &UserTeam_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserAddData::kRecruitHerosFieldNumber;
const int UserAddData::kFirstHaveHeroFieldNumber;
const int UserAddData::kHeroBiosFieldNumber;
const int UserAddData::kRaffTimesFieldNumber;
const int UserAddData::kRaffDayFieldNumber;
const int UserAddData::kSelHeroFieldNumber;
const int UserAddData::kBanquetInfosFieldNumber;
const int UserAddData::kTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserAddData::UserAddData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.UserAddData)
}

void UserAddData::InitAsDefaultInstance() {
}

UserAddData::UserAddData(const UserAddData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.UserAddData)
}

void UserAddData::SharedCtor() {
  ::memset(&raffday_, 0, reinterpret_cast<char*>(&selhero_) -
    reinterpret_cast<char*>(&raffday_) + sizeof(selhero_));
  _cached_size_ = 0;
}

UserAddData::~UserAddData() {
  // @@protoc_insertion_point(destructor:ServerPB.UserAddData)
  SharedDtor();
}

void UserAddData::SharedDtor() {
}

void UserAddData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAddData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAddData_descriptor_;
}

const UserAddData& UserAddData::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserAddData> UserAddData_default_instance_;

UserAddData* UserAddData::New(::google::protobuf::Arena* arena) const {
  UserAddData* n = new UserAddData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserAddData::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.UserAddData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserAddData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserAddData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(raffday_, selhero_);

#undef ZR_HELPER_
#undef ZR_

  recruitheros_.Clear();
  firsthavehero_.Clear();
  herobios_.Clear();
  rafftimes_.Clear();
  banquetinfos_.Clear();
  teams_.Clear();
}

bool UserAddData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.UserAddData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 recruitHeros = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recruitheros())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_recruitheros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_firstHaveHero;
        break;
      }

      // repeated uint32 firstHaveHero = 2;
      case 2: {
        if (tag == 18) {
         parse_firstHaveHero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_firsthavehero())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_firsthavehero())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heroBios;
        break;
      }

      // repeated .ServerPB.BioClass heroBios = 3;
      case 3: {
        if (tag == 26) {
         parse_heroBios:
          DO_(input->IncrementRecursionDepth());
         parse_loop_heroBios:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_herobios()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_heroBios;
        if (input->ExpectTag(34)) goto parse_loop_raffTimes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ServerPB.RaffleHeroTimes raffTimes = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_raffTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rafftimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_raffTimes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_raffDay;
        break;
      }

      // optional uint32 raffDay = 5;
      case 5: {
        if (tag == 40) {
         parse_raffDay:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raffday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_selHero;
        break;
      }

      // optional uint32 selHero = 6;
      case 6: {
        if (tag == 48) {
         parse_selHero:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selhero_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_banquetInfos;
        break;
      }

      // repeated .ServerPB.UserBanquetInfo banquetInfos = 7;
      case 7: {
        if (tag == 58) {
         parse_banquetInfos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_banquetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_banquetinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_banquetInfos;
        if (input->ExpectTag(66)) goto parse_loop_teams;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ServerPB.UserTeam teams = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_teams;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.UserAddData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.UserAddData)
  return false;
#undef DO_
}

void UserAddData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.UserAddData)
  // repeated uint32 recruitHeros = 1;
  if (this->recruitheros_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_recruitheros_cached_byte_size_);
  }
  for (int i = 0; i < this->recruitheros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->recruitheros(i), output);
  }

  // repeated uint32 firstHaveHero = 2;
  if (this->firsthavehero_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_firsthavehero_cached_byte_size_);
  }
  for (int i = 0; i < this->firsthavehero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->firsthavehero(i), output);
  }

  // repeated .ServerPB.BioClass heroBios = 3;
  for (unsigned int i = 0, n = this->herobios_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herobios(i), output);
  }

  // repeated .ServerPB.RaffleHeroTimes raffTimes = 4;
  for (unsigned int i = 0, n = this->rafftimes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rafftimes(i), output);
  }

  // optional uint32 raffDay = 5;
  if (this->raffday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raffday(), output);
  }

  // optional uint32 selHero = 6;
  if (this->selhero() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->selhero(), output);
  }

  // repeated .ServerPB.UserBanquetInfo banquetInfos = 7;
  for (unsigned int i = 0, n = this->banquetinfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->banquetinfos(i), output);
  }

  // repeated .ServerPB.UserTeam teams = 8;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->teams(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.UserAddData)
}

::google::protobuf::uint8* UserAddData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.UserAddData)
  // repeated uint32 recruitHeros = 1;
  if (this->recruitheros_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _recruitheros_cached_byte_size_, target);
  }
  for (int i = 0; i < this->recruitheros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->recruitheros(i), target);
  }

  // repeated uint32 firstHaveHero = 2;
  if (this->firsthavehero_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _firsthavehero_cached_byte_size_, target);
  }
  for (int i = 0; i < this->firsthavehero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->firsthavehero(i), target);
  }

  // repeated .ServerPB.BioClass heroBios = 3;
  for (unsigned int i = 0, n = this->herobios_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->herobios(i), false, target);
  }

  // repeated .ServerPB.RaffleHeroTimes raffTimes = 4;
  for (unsigned int i = 0, n = this->rafftimes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->rafftimes(i), false, target);
  }

  // optional uint32 raffDay = 5;
  if (this->raffday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raffday(), target);
  }

  // optional uint32 selHero = 6;
  if (this->selhero() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->selhero(), target);
  }

  // repeated .ServerPB.UserBanquetInfo banquetInfos = 7;
  for (unsigned int i = 0, n = this->banquetinfos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->banquetinfos(i), false, target);
  }

  // repeated .ServerPB.UserTeam teams = 8;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->teams(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.UserAddData)
  return target;
}

size_t UserAddData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.UserAddData)
  size_t total_size = 0;

  // optional uint32 raffDay = 5;
  if (this->raffday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raffday());
  }

  // optional uint32 selHero = 6;
  if (this->selhero() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selhero());
  }

  // repeated uint32 recruitHeros = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->recruitheros_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recruitheros(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _recruitheros_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 firstHaveHero = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->firsthavehero_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->firsthavehero(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _firsthavehero_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .ServerPB.BioClass heroBios = 3;
  {
    unsigned int count = this->herobios_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herobios(i));
    }
  }

  // repeated .ServerPB.RaffleHeroTimes raffTimes = 4;
  {
    unsigned int count = this->rafftimes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rafftimes(i));
    }
  }

  // repeated .ServerPB.UserBanquetInfo banquetInfos = 7;
  {
    unsigned int count = this->banquetinfos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banquetinfos(i));
    }
  }

  // repeated .ServerPB.UserTeam teams = 8;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAddData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.UserAddData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserAddData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAddData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.UserAddData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.UserAddData)
    UnsafeMergeFrom(*source);
  }
}

void UserAddData::MergeFrom(const UserAddData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.UserAddData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserAddData::UnsafeMergeFrom(const UserAddData& from) {
  GOOGLE_DCHECK(&from != this);
  recruitheros_.UnsafeMergeFrom(from.recruitheros_);
  firsthavehero_.UnsafeMergeFrom(from.firsthavehero_);
  herobios_.MergeFrom(from.herobios_);
  rafftimes_.MergeFrom(from.rafftimes_);
  banquetinfos_.MergeFrom(from.banquetinfos_);
  teams_.MergeFrom(from.teams_);
  if (from.raffday() != 0) {
    set_raffday(from.raffday());
  }
  if (from.selhero() != 0) {
    set_selhero(from.selhero());
  }
}

void UserAddData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.UserAddData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAddData::CopyFrom(const UserAddData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.UserAddData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserAddData::IsInitialized() const {

  return true;
}

void UserAddData::Swap(UserAddData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserAddData::InternalSwap(UserAddData* other) {
  recruitheros_.UnsafeArenaSwap(&other->recruitheros_);
  firsthavehero_.UnsafeArenaSwap(&other->firsthavehero_);
  herobios_.UnsafeArenaSwap(&other->herobios_);
  rafftimes_.UnsafeArenaSwap(&other->rafftimes_);
  std::swap(raffday_, other->raffday_);
  std::swap(selhero_, other->selhero_);
  banquetinfos_.UnsafeArenaSwap(&other->banquetinfos_);
  teams_.UnsafeArenaSwap(&other->teams_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserAddData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAddData_descriptor_;
  metadata.reflection = UserAddData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserAddData

// repeated uint32 recruitHeros = 1;
int UserAddData::recruitheros_size() const {
  return recruitheros_.size();
}
void UserAddData::clear_recruitheros() {
  recruitheros_.Clear();
}
::google::protobuf::uint32 UserAddData::recruitheros(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.recruitHeros)
  return recruitheros_.Get(index);
}
void UserAddData::set_recruitheros(int index, ::google::protobuf::uint32 value) {
  recruitheros_.Set(index, value);
  // @@protoc_insertion_point(field_set:ServerPB.UserAddData.recruitHeros)
}
void UserAddData::add_recruitheros(::google::protobuf::uint32 value) {
  recruitheros_.Add(value);
  // @@protoc_insertion_point(field_add:ServerPB.UserAddData.recruitHeros)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserAddData::recruitheros() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserAddData.recruitHeros)
  return recruitheros_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserAddData::mutable_recruitheros() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserAddData.recruitHeros)
  return &recruitheros_;
}

// repeated uint32 firstHaveHero = 2;
int UserAddData::firsthavehero_size() const {
  return firsthavehero_.size();
}
void UserAddData::clear_firsthavehero() {
  firsthavehero_.Clear();
}
::google::protobuf::uint32 UserAddData::firsthavehero(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.firstHaveHero)
  return firsthavehero_.Get(index);
}
void UserAddData::set_firsthavehero(int index, ::google::protobuf::uint32 value) {
  firsthavehero_.Set(index, value);
  // @@protoc_insertion_point(field_set:ServerPB.UserAddData.firstHaveHero)
}
void UserAddData::add_firsthavehero(::google::protobuf::uint32 value) {
  firsthavehero_.Add(value);
  // @@protoc_insertion_point(field_add:ServerPB.UserAddData.firstHaveHero)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserAddData::firsthavehero() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserAddData.firstHaveHero)
  return firsthavehero_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserAddData::mutable_firsthavehero() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserAddData.firstHaveHero)
  return &firsthavehero_;
}

// repeated .ServerPB.BioClass heroBios = 3;
int UserAddData::herobios_size() const {
  return herobios_.size();
}
void UserAddData::clear_herobios() {
  herobios_.Clear();
}
const ::ServerPB::BioClass& UserAddData::herobios(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.heroBios)
  return herobios_.Get(index);
}
::ServerPB::BioClass* UserAddData::mutable_herobios(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.UserAddData.heroBios)
  return herobios_.Mutable(index);
}
::ServerPB::BioClass* UserAddData::add_herobios() {
  // @@protoc_insertion_point(field_add:ServerPB.UserAddData.heroBios)
  return herobios_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerPB::BioClass >*
UserAddData::mutable_herobios() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserAddData.heroBios)
  return &herobios_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerPB::BioClass >&
UserAddData::herobios() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserAddData.heroBios)
  return herobios_;
}

// repeated .ServerPB.RaffleHeroTimes raffTimes = 4;
int UserAddData::rafftimes_size() const {
  return rafftimes_.size();
}
void UserAddData::clear_rafftimes() {
  rafftimes_.Clear();
}
const ::ServerPB::RaffleHeroTimes& UserAddData::rafftimes(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.raffTimes)
  return rafftimes_.Get(index);
}
::ServerPB::RaffleHeroTimes* UserAddData::mutable_rafftimes(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.UserAddData.raffTimes)
  return rafftimes_.Mutable(index);
}
::ServerPB::RaffleHeroTimes* UserAddData::add_rafftimes() {
  // @@protoc_insertion_point(field_add:ServerPB.UserAddData.raffTimes)
  return rafftimes_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerPB::RaffleHeroTimes >*
UserAddData::mutable_rafftimes() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserAddData.raffTimes)
  return &rafftimes_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerPB::RaffleHeroTimes >&
UserAddData::rafftimes() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserAddData.raffTimes)
  return rafftimes_;
}

// optional uint32 raffDay = 5;
void UserAddData::clear_raffday() {
  raffday_ = 0u;
}
::google::protobuf::uint32 UserAddData::raffday() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.raffDay)
  return raffday_;
}
void UserAddData::set_raffday(::google::protobuf::uint32 value) {
  
  raffday_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserAddData.raffDay)
}

// optional uint32 selHero = 6;
void UserAddData::clear_selhero() {
  selhero_ = 0u;
}
::google::protobuf::uint32 UserAddData::selhero() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.selHero)
  return selhero_;
}
void UserAddData::set_selhero(::google::protobuf::uint32 value) {
  
  selhero_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserAddData.selHero)
}

// repeated .ServerPB.UserBanquetInfo banquetInfos = 7;
int UserAddData::banquetinfos_size() const {
  return banquetinfos_.size();
}
void UserAddData::clear_banquetinfos() {
  banquetinfos_.Clear();
}
const ::ServerPB::UserBanquetInfo& UserAddData::banquetinfos(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.banquetInfos)
  return banquetinfos_.Get(index);
}
::ServerPB::UserBanquetInfo* UserAddData::mutable_banquetinfos(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.UserAddData.banquetInfos)
  return banquetinfos_.Mutable(index);
}
::ServerPB::UserBanquetInfo* UserAddData::add_banquetinfos() {
  // @@protoc_insertion_point(field_add:ServerPB.UserAddData.banquetInfos)
  return banquetinfos_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerPB::UserBanquetInfo >*
UserAddData::mutable_banquetinfos() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserAddData.banquetInfos)
  return &banquetinfos_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerPB::UserBanquetInfo >&
UserAddData::banquetinfos() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserAddData.banquetInfos)
  return banquetinfos_;
}

// repeated .ServerPB.UserTeam teams = 8;
int UserAddData::teams_size() const {
  return teams_.size();
}
void UserAddData::clear_teams() {
  teams_.Clear();
}
const ::ServerPB::UserTeam& UserAddData::teams(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserAddData.teams)
  return teams_.Get(index);
}
::ServerPB::UserTeam* UserAddData::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.UserAddData.teams)
  return teams_.Mutable(index);
}
::ServerPB::UserTeam* UserAddData::add_teams() {
  // @@protoc_insertion_point(field_add:ServerPB.UserAddData.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerPB::UserTeam >*
UserAddData::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserAddData.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerPB::UserTeam >&
UserAddData::teams() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserAddData.teams)
  return teams_;
}

inline const UserAddData* UserAddData::internal_default_instance() {
  return &UserAddData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MiningInfo::kStartMiningFieldNumber;
const int MiningInfo::kCarryNumFieldNumber;
const int MiningInfo::kSoldierCarryOneFieldNumber;
const int MiningInfo::kSoldierCarryMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MiningInfo::MiningInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.MiningInfo)
}

void MiningInfo::InitAsDefaultInstance() {
}

MiningInfo::MiningInfo(const MiningInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.MiningInfo)
}

void MiningInfo::SharedCtor() {
  ::memset(&startmining_, 0, reinterpret_cast<char*>(&soldiercarrymax_) -
    reinterpret_cast<char*>(&startmining_) + sizeof(soldiercarrymax_));
  _cached_size_ = 0;
}

MiningInfo::~MiningInfo() {
  // @@protoc_insertion_point(destructor:ServerPB.MiningInfo)
  SharedDtor();
}

void MiningInfo::SharedDtor() {
}

void MiningInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiningInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiningInfo_descriptor_;
}

const MiningInfo& MiningInfo::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MiningInfo> MiningInfo_default_instance_;

MiningInfo* MiningInfo::New(::google::protobuf::Arena* arena) const {
  MiningInfo* n = new MiningInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MiningInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.MiningInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MiningInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MiningInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(startmining_, soldiercarrymax_);

#undef ZR_HELPER_
#undef ZR_

}

bool MiningInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.MiningInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 startMining = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startmining_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_carryNum;
        break;
      }

      // optional uint32 carryNum = 2;
      case 2: {
        if (tag == 16) {
         parse_carryNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrynum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_soldierCarryOne;
        break;
      }

      // optional uint32 soldierCarryOne = 3;
      case 3: {
        if (tag == 24) {
         parse_soldierCarryOne:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soldiercarryone_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_soldierCarryMax;
        break;
      }

      // optional uint32 soldierCarryMax = 4;
      case 4: {
        if (tag == 32) {
         parse_soldierCarryMax:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soldiercarrymax_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.MiningInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.MiningInfo)
  return false;
#undef DO_
}

void MiningInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.MiningInfo)
  // optional uint32 startMining = 1;
  if (this->startmining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startmining(), output);
  }

  // optional uint32 carryNum = 2;
  if (this->carrynum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->carrynum(), output);
  }

  // optional uint32 soldierCarryOne = 3;
  if (this->soldiercarryone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->soldiercarryone(), output);
  }

  // optional uint32 soldierCarryMax = 4;
  if (this->soldiercarrymax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->soldiercarrymax(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.MiningInfo)
}

::google::protobuf::uint8* MiningInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.MiningInfo)
  // optional uint32 startMining = 1;
  if (this->startmining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startmining(), target);
  }

  // optional uint32 carryNum = 2;
  if (this->carrynum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->carrynum(), target);
  }

  // optional uint32 soldierCarryOne = 3;
  if (this->soldiercarryone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->soldiercarryone(), target);
  }

  // optional uint32 soldierCarryMax = 4;
  if (this->soldiercarrymax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->soldiercarrymax(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.MiningInfo)
  return target;
}

size_t MiningInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.MiningInfo)
  size_t total_size = 0;

  // optional uint32 startMining = 1;
  if (this->startmining() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startmining());
  }

  // optional uint32 carryNum = 2;
  if (this->carrynum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->carrynum());
  }

  // optional uint32 soldierCarryOne = 3;
  if (this->soldiercarryone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->soldiercarryone());
  }

  // optional uint32 soldierCarryMax = 4;
  if (this->soldiercarrymax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->soldiercarrymax());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiningInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.MiningInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MiningInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MiningInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.MiningInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.MiningInfo)
    UnsafeMergeFrom(*source);
  }
}

void MiningInfo::MergeFrom(const MiningInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.MiningInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MiningInfo::UnsafeMergeFrom(const MiningInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.startmining() != 0) {
    set_startmining(from.startmining());
  }
  if (from.carrynum() != 0) {
    set_carrynum(from.carrynum());
  }
  if (from.soldiercarryone() != 0) {
    set_soldiercarryone(from.soldiercarryone());
  }
  if (from.soldiercarrymax() != 0) {
    set_soldiercarrymax(from.soldiercarrymax());
  }
}

void MiningInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.MiningInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiningInfo::CopyFrom(const MiningInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.MiningInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MiningInfo::IsInitialized() const {

  return true;
}

void MiningInfo::Swap(MiningInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MiningInfo::InternalSwap(MiningInfo* other) {
  std::swap(startmining_, other->startmining_);
  std::swap(carrynum_, other->carrynum_);
  std::swap(soldiercarryone_, other->soldiercarryone_);
  std::swap(soldiercarrymax_, other->soldiercarrymax_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MiningInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiningInfo_descriptor_;
  metadata.reflection = MiningInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MiningInfo

// optional uint32 startMining = 1;
void MiningInfo::clear_startmining() {
  startmining_ = 0u;
}
::google::protobuf::uint32 MiningInfo::startmining() const {
  // @@protoc_insertion_point(field_get:ServerPB.MiningInfo.startMining)
  return startmining_;
}
void MiningInfo::set_startmining(::google::protobuf::uint32 value) {
  
  startmining_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.MiningInfo.startMining)
}

// optional uint32 carryNum = 2;
void MiningInfo::clear_carrynum() {
  carrynum_ = 0u;
}
::google::protobuf::uint32 MiningInfo::carrynum() const {
  // @@protoc_insertion_point(field_get:ServerPB.MiningInfo.carryNum)
  return carrynum_;
}
void MiningInfo::set_carrynum(::google::protobuf::uint32 value) {
  
  carrynum_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.MiningInfo.carryNum)
}

// optional uint32 soldierCarryOne = 3;
void MiningInfo::clear_soldiercarryone() {
  soldiercarryone_ = 0u;
}
::google::protobuf::uint32 MiningInfo::soldiercarryone() const {
  // @@protoc_insertion_point(field_get:ServerPB.MiningInfo.soldierCarryOne)
  return soldiercarryone_;
}
void MiningInfo::set_soldiercarryone(::google::protobuf::uint32 value) {
  
  soldiercarryone_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.MiningInfo.soldierCarryOne)
}

// optional uint32 soldierCarryMax = 4;
void MiningInfo::clear_soldiercarrymax() {
  soldiercarrymax_ = 0u;
}
::google::protobuf::uint32 MiningInfo::soldiercarrymax() const {
  // @@protoc_insertion_point(field_get:ServerPB.MiningInfo.soldierCarryMax)
  return soldiercarrymax_;
}
void MiningInfo::set_soldiercarrymax(::google::protobuf::uint32 value) {
  
  soldiercarrymax_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.MiningInfo.soldierCarryMax)
}

inline const MiningInfo* MiningInfo::internal_default_instance() {
  return &MiningInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCluster::kCreaterFieldNumber;
const int UserCluster::kInfoFieldNumber;
const int UserCluster::kDetailFieldNumber;
const int UserCluster::kPubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCluster::UserCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ServerPb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPB.UserCluster)
}

void UserCluster::InitAsDefaultInstance() {
  creater_ = const_cast< ::NetMsg::ClusterCreater*>(
      ::NetMsg::ClusterCreater::internal_default_instance());
}

UserCluster::UserCluster(const UserCluster& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPB.UserCluster)
}

void UserCluster::SharedCtor() {
  creater_ = NULL;
  pub_ = false;
  _cached_size_ = 0;
}

UserCluster::~UserCluster() {
  // @@protoc_insertion_point(destructor:ServerPB.UserCluster)
  SharedDtor();
}

void UserCluster::SharedDtor() {
  if (this != &UserCluster_default_instance_.get()) {
    delete creater_;
  }
}

void UserCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCluster_descriptor_;
}

const UserCluster& UserCluster::default_instance() {
  protobuf_InitDefaults_ServerPb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserCluster> UserCluster_default_instance_;

UserCluster* UserCluster::New(::google::protobuf::Arena* arena) const {
  UserCluster* n = new UserCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPB.UserCluster)
  if (GetArenaNoVirtual() == NULL && creater_ != NULL) delete creater_;
  creater_ = NULL;
  pub_ = false;
  info_.Clear();
  detail_.Clear();
}

bool UserCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPB.UserCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.ClusterCreater creater = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .NetMsg.ClusterMemberInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_info;
        if (input->ExpectTag(26)) goto parse_loop_detail;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .NetMsg.ClusterMemberDetail detail = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_detail;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_pub;
        break;
      }

      // optional bool pub = 4;
      case 4: {
        if (tag == 32) {
         parse_pub:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pub_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPB.UserCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPB.UserCluster)
  return false;
#undef DO_
}

void UserCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPB.UserCluster)
  // optional .NetMsg.ClusterCreater creater = 1;
  if (this->has_creater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->creater_, output);
  }

  // repeated .NetMsg.ClusterMemberInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // repeated .NetMsg.ClusterMemberDetail detail = 3;
  for (unsigned int i = 0, n = this->detail_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(i), output);
  }

  // optional bool pub = 4;
  if (this->pub() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pub(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerPB.UserCluster)
}

::google::protobuf::uint8* UserCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerPB.UserCluster)
  // optional .NetMsg.ClusterCreater creater = 1;
  if (this->has_creater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->creater_, false, target);
  }

  // repeated .NetMsg.ClusterMemberInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->info(i), false, target);
  }

  // repeated .NetMsg.ClusterMemberDetail detail = 3;
  for (unsigned int i = 0, n = this->detail_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->detail(i), false, target);
  }

  // optional bool pub = 4;
  if (this->pub() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pub(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerPB.UserCluster)
  return target;
}

size_t UserCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPB.UserCluster)
  size_t total_size = 0;

  // optional .NetMsg.ClusterCreater creater = 1;
  if (this->has_creater()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creater_);
  }

  // optional bool pub = 4;
  if (this->pub() != 0) {
    total_size += 1 + 1;
  }

  // repeated .NetMsg.ClusterMemberInfo info = 2;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  // repeated .NetMsg.ClusterMemberDetail detail = 3;
  {
    unsigned int count = this->detail_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPB.UserCluster)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPB.UserCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPB.UserCluster)
    UnsafeMergeFrom(*source);
  }
}

void UserCluster::MergeFrom(const UserCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPB.UserCluster)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserCluster::UnsafeMergeFrom(const UserCluster& from) {
  GOOGLE_DCHECK(&from != this);
  info_.MergeFrom(from.info_);
  detail_.MergeFrom(from.detail_);
  if (from.has_creater()) {
    mutable_creater()->::NetMsg::ClusterCreater::MergeFrom(from.creater());
  }
  if (from.pub() != 0) {
    set_pub(from.pub());
  }
}

void UserCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPB.UserCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCluster::CopyFrom(const UserCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPB.UserCluster)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserCluster::IsInitialized() const {

  return true;
}

void UserCluster::Swap(UserCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCluster::InternalSwap(UserCluster* other) {
  std::swap(creater_, other->creater_);
  info_.UnsafeArenaSwap(&other->info_);
  detail_.UnsafeArenaSwap(&other->detail_);
  std::swap(pub_, other->pub_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCluster_descriptor_;
  metadata.reflection = UserCluster_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserCluster

// optional .NetMsg.ClusterCreater creater = 1;
bool UserCluster::has_creater() const {
  return this != internal_default_instance() && creater_ != NULL;
}
void UserCluster::clear_creater() {
  if (GetArenaNoVirtual() == NULL && creater_ != NULL) delete creater_;
  creater_ = NULL;
}
const ::NetMsg::ClusterCreater& UserCluster::creater() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCluster.creater)
  return creater_ != NULL ? *creater_
                         : *::NetMsg::ClusterCreater::internal_default_instance();
}
::NetMsg::ClusterCreater* UserCluster::mutable_creater() {
  
  if (creater_ == NULL) {
    creater_ = new ::NetMsg::ClusterCreater;
  }
  // @@protoc_insertion_point(field_mutable:ServerPB.UserCluster.creater)
  return creater_;
}
::NetMsg::ClusterCreater* UserCluster::release_creater() {
  // @@protoc_insertion_point(field_release:ServerPB.UserCluster.creater)
  
  ::NetMsg::ClusterCreater* temp = creater_;
  creater_ = NULL;
  return temp;
}
void UserCluster::set_allocated_creater(::NetMsg::ClusterCreater* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPB.UserCluster.creater)
}

// repeated .NetMsg.ClusterMemberInfo info = 2;
int UserCluster::info_size() const {
  return info_.size();
}
void UserCluster::clear_info() {
  info_.Clear();
}
const ::NetMsg::ClusterMemberInfo& UserCluster::info(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCluster.info)
  return info_.Get(index);
}
::NetMsg::ClusterMemberInfo* UserCluster::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.UserCluster.info)
  return info_.Mutable(index);
}
::NetMsg::ClusterMemberInfo* UserCluster::add_info() {
  // @@protoc_insertion_point(field_add:ServerPB.UserCluster.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberInfo >*
UserCluster::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserCluster.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberInfo >&
UserCluster::info() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserCluster.info)
  return info_;
}

// repeated .NetMsg.ClusterMemberDetail detail = 3;
int UserCluster::detail_size() const {
  return detail_.size();
}
void UserCluster::clear_detail() {
  detail_.Clear();
}
const ::NetMsg::ClusterMemberDetail& UserCluster::detail(int index) const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCluster.detail)
  return detail_.Get(index);
}
::NetMsg::ClusterMemberDetail* UserCluster::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:ServerPB.UserCluster.detail)
  return detail_.Mutable(index);
}
::NetMsg::ClusterMemberDetail* UserCluster::add_detail() {
  // @@protoc_insertion_point(field_add:ServerPB.UserCluster.detail)
  return detail_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberDetail >*
UserCluster::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:ServerPB.UserCluster.detail)
  return &detail_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberDetail >&
UserCluster::detail() const {
  // @@protoc_insertion_point(field_list:ServerPB.UserCluster.detail)
  return detail_;
}

// optional bool pub = 4;
void UserCluster::clear_pub() {
  pub_ = false;
}
bool UserCluster::pub() const {
  // @@protoc_insertion_point(field_get:ServerPB.UserCluster.pub)
  return pub_;
}
void UserCluster::set_pub(bool value) {
  
  pub_ = value;
  // @@protoc_insertion_point(field_set:ServerPB.UserCluster.pub)
}

inline const UserCluster* UserCluster::internal_default_instance() {
  return &UserCluster_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerPB

// @@protoc_insertion_point(global_scope)
