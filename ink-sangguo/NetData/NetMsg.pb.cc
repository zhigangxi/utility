// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetMsg {

namespace {

const ::google::protobuf::Descriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserNamePassAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserNamePassAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCreateUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreateUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateUserAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateUserAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqThirdPartyLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqThirdPartyLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOrderId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOrderId_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderIdAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderIdAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePlayerAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdatePlayerAck_UpdateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserNickAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserNickAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetNewGuide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetNewGuide_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunPathAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunPathAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRunPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRunPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrivedCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrivedCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Formation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Formation_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroFormationAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroFormationAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetHeroFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetHeroFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AwardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AwardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestConsAgriculture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestConsAgriculture_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestConsBusiness_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestConsBusiness_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestConsMilitary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestConsMilitary_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestVisit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestVisit_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestConscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestConscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestDiscovery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestDiscovery_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestData_reflection_ = NULL;
struct QuestDataOneofInstance {
  const ::NetMsg::QuestConsAgriculture* agriculture_;
  const ::NetMsg::QuestConsBusiness* business_;
  const ::NetMsg::QuestConsMilitary* consmill_;
  const ::NetMsg::QuestBattle* battle_;
  const ::NetMsg::QuestVisit* visit_;
  const ::NetMsg::QuestConscription* conscription_;
  const ::NetMsg::QuestDiscovery* discovery_;
}* QuestData_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ReqQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDoQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDoQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoQuestAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoQuestAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoQuestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoQuestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSubmitQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubmitQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitQuestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitQuestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAcceptQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAcceptQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptQuestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptQuestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAddHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAddHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClearHeroCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClearHeroCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearHeroCDAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearHeroCDAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshQuestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshQuestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleEnemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleEnemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPrepareBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPrepareBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareBattleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareBattleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBattleEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBattleEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleEndAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleEndAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeroUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeroUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroUserItemAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroUserItemAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAddItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAddItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddItemAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddItemAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvantureContinuousBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvantureContinuousBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvantureEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvantureEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvantureInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvantureInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvantureAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvantureAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAdvantureEventDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAdvantureEventDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvantureEventDoneAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvantureEventDoneAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroFriendship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroFriendship_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroFriendshipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroFriendshipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroGeneralSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroGeneralSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroGeneralSoulAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroGeneralSoulAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLearnVsCDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLearnVsCDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLearnVsCDAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLearnVsCDAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGiveHeroGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGiveHeroGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveHeroGiftAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveHeroGiftAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGeneralSoulExchangeHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGeneralSoulExchangeHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralSoulExchangeHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralSoulExchangeHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItemAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItemAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuyShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuyShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyShopAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyShopAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRefreshShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRefreshShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshShopAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshShopAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEvolveHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEvolveHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvolveHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvolveHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAdvancementRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAdvancementRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvancementRankAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvancementRankAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRankTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRankTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankTitlePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankTitlePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankTitleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankTitleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfoPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfoPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqElectionTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqElectionTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElectionTitleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElectionTitleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroClassSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroClassSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroClassInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroClassInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeroClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeroClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroClassAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroClassAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqStudySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqStudySkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* StudySkillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StudySkillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqStudyProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqStudyProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* StudyPropertyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StudyPropertyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRaffleHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRaffleHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaffleHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaffleHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRaffleHeroTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRaffleHeroTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaffleHeroTimesAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaffleHeroTimesAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAddMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAddMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMoneyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMoneyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLevelUpCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLevelUpCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelUpCampAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelUpCampAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClearCampCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClearCampCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearCampCDAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearCampCDAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCampState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCampState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampStateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampStateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetCampOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetCampOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCampOutAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCampOutAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CycleBattleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CycleBattleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefresshCycleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefresshCycleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSelectCycleDiff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSelectCycleDiff_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectCycleDiffAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectCycleDiffAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CycleBattleInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CycleBattleInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvantureEventStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvantureEventStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRecruitHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRecruitHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecruitHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecruitHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRecruitedHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRecruitedHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecruitedHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecruitedHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqVSBattleBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqVSBattleBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSBattleEnemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSBattleEnemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSBattleBeginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSBattleBeginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqVSBattleReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqVSBattleReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSBattleReadyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSBattleReadyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqVSBattleOpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqVSBattleOpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSBattleOptAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSBattleOptAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSBattleUnitState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSBattleUnitState_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSBattleTurn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSBattleTurn_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSBattleEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSBattleEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBioHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBioHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioHeroStepData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioHeroStepData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioHeroInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioHeroInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBioHeroStepDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBioHeroStepDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioHeroStepDoneAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioHeroStepDoneAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRemoveFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRemoveFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTopList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTopList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopListData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopListData_reflection_ = NULL;
struct TopListDataOneofInstance {
  const ::NetMsg::SortReputationData* sortreputation_;
  const ::NetMsg::SortMilitaryData* sortmilitary_;
  const ::NetMsg::SortLevelData* sortlevel_;
}* TopListData_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SortReputationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortReputationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortMilitaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortMilitaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortLevelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortLevelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailSender_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailSender_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMailDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMailDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailDetailAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailDetailAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetMailAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetMailAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMailAwardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMailAwardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDeleteMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDeleteMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteMailAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteMailAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* BanquetHeros_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanquetHeros_reflection_ = NULL;
const ::google::protobuf::Descriptor* BanquetInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanquetInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBanquetHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBanquetHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* BanquetHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanquetHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBattleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBattleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldWarTopList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldWarTopList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarTopListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarTopListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSetTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSetTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWriteSkillBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWriteSkillBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteSkillBookAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteSkillBookAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTeamRunPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTeamRunPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRunPathAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRunPathAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamRunPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamRunPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTeamArrivedTar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTeamArrivedTar_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamArrivedTarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamArrivedTarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterCreater_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterCreater_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClusterDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClusterDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterMemberDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterMemberDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSetClusterAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSetClusterAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetClusterAttrAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetClusterAttrAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterDetailInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterDetailInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllClusterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllClusterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateClusterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateClusterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqJoinCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqJoinCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinClusterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinClusterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqExitCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqExitCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitClusterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitClusterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityItemAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityItemAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCityHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCityHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityHeroAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityHeroAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqResourceDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqResourceDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceDetailInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceDetailInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegInviteJoinCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegInviteJoinCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinClusterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinClusterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInviteJoinCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInviteJoinCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterRunPathAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterRunPathAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetClusterRunPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetClusterRunPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClusterArrivedTar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClusterArrivedTar_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterArrivedTarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterArrivedTarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterWorldWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterWorldWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterWorldWarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterWorldWarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldWarStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldWarStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarSceneBlockState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarSceneBlockState_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarSceneBuildingState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarSceneBuildingState_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarSceneAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarSceneAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarStatusAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarStatusAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldWarMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldWarMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarMoveAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarMoveAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldWarDefence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldWarDefence_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarDefenceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarDefenceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldWarDefenceTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldWarDefenceTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldWarDefenceTargetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldWarDefenceTargetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveWorldWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveWorldWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveWorldWarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveWorldWarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RunState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RunTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestDiscoveryFinishedType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdvantureEventStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroPropertyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CampType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TopListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldWarSceneForceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldWarSceneForceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldWarSceneBuildingType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetMsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_NetMsg_2eproto() {
  protobuf_AddDesc_NetMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetMsg.proto");
  GOOGLE_CHECK(file != NULL);
  MessageType_descriptor_ = file->message_type(0);
  static const int MessageType_offsets_[1] = {
  };
  MessageType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageType_descriptor_,
      MessageType::internal_default_instance(),
      MessageType_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageType, _internal_metadata_));
  MessageType_Type_descriptor_ = MessageType_descriptor_->enum_type(0);
  ReqLogin_descriptor_ = file->message_type(1);
  static const int ReqLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, password_),
  };
  ReqLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::internal_default_instance(),
      ReqLogin_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _internal_metadata_));
  PlayerData_descriptor_ = file->message_type(2);
  static const int PlayerData_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, campcityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, newguide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, selecthero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, stone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, iron_),
  };
  PlayerData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::internal_default_instance(),
      PlayerData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _internal_metadata_));
  LoginAck_descriptor_ = file->message_type(3);
  static const int LoginAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, session_),
  };
  LoginAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginAck_descriptor_,
      LoginAck::internal_default_instance(),
      LoginAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, _internal_metadata_));
  VersionInfoAck_descriptor_ = file->message_type(4);
  static const int VersionInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfoAck, clientversion_),
  };
  VersionInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VersionInfoAck_descriptor_,
      VersionInfoAck::internal_default_instance(),
      VersionInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(VersionInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfoAck, _internal_metadata_));
  UserNamePassAck_descriptor_ = file->message_type(5);
  static const int UserNamePassAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNamePassAck, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNamePassAck, password_),
  };
  UserNamePassAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserNamePassAck_descriptor_,
      UserNamePassAck::internal_default_instance(),
      UserNamePassAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserNamePassAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNamePassAck, _internal_metadata_));
  ReqRegister_descriptor_ = file->message_type(6);
  static const int ReqRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, password_),
  };
  ReqRegister_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRegister_descriptor_,
      ReqRegister::internal_default_instance(),
      ReqRegister_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRegister),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, _internal_metadata_));
  RegisterAck_descriptor_ = file->message_type(7);
  static const int RegisterAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAck, error_),
  };
  RegisterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterAck_descriptor_,
      RegisterAck::internal_default_instance(),
      RegisterAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAck, _internal_metadata_));
  ReqEnterGame_descriptor_ = file->message_type(8);
  static const int ReqEnterGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGame, session_),
  };
  ReqEnterGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqEnterGame_descriptor_,
      ReqEnterGame::internal_default_instance(),
      ReqEnterGame_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqEnterGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGame, _internal_metadata_));
  EnterGameAck_descriptor_ = file->message_type(9);
  static const int EnterGameAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAck, player_),
  };
  EnterGameAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterGameAck_descriptor_,
      EnterGameAck::internal_default_instance(),
      EnterGameAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnterGameAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAck, _internal_metadata_));
  ReqCreateUser_descriptor_ = file->message_type(10);
  static const int ReqCreateUser_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateUser, newguideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateUser, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateUser, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateUser, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateUser, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateUser, icon_),
  };
  ReqCreateUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCreateUser_descriptor_,
      ReqCreateUser::internal_default_instance(),
      ReqCreateUser_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqCreateUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateUser, _internal_metadata_));
  CreateUserAck_descriptor_ = file->message_type(11);
  static const int CreateUserAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserAck, player_),
  };
  CreateUserAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateUserAck_descriptor_,
      CreateUserAck::internal_default_instance(),
      CreateUserAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateUserAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserAck, _internal_metadata_));
  ServerInfo_descriptor_ = file->message_type(12);
  static const int ServerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, status_),
  };
  ServerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::internal_default_instance(),
      ServerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _internal_metadata_));
  ServerListAck_descriptor_ = file->message_type(13);
  static const int ServerListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListAck, info_),
  };
  ServerListAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerListAck_descriptor_,
      ServerListAck::internal_default_instance(),
      ServerListAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerListAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListAck, _internal_metadata_));
  ReqThirdPartyLogin_descriptor_ = file->message_type(14);
  static const int ReqThirdPartyLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqThirdPartyLogin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqThirdPartyLogin, tocken_),
  };
  ReqThirdPartyLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqThirdPartyLogin_descriptor_,
      ReqThirdPartyLogin::internal_default_instance(),
      ReqThirdPartyLogin_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqThirdPartyLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqThirdPartyLogin, _internal_metadata_));
  ReqOrderId_descriptor_ = file->message_type(15);
  static const int ReqOrderId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOrderId, productid_),
  };
  ReqOrderId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqOrderId_descriptor_,
      ReqOrderId::internal_default_instance(),
      ReqOrderId_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqOrderId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOrderId, _internal_metadata_));
  OrderIdAck_descriptor_ = file->message_type(16);
  static const int OrderIdAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderIdAck, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderIdAck, ext_),
  };
  OrderIdAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrderIdAck_descriptor_,
      OrderIdAck::internal_default_instance(),
      OrderIdAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(OrderIdAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderIdAck, _internal_metadata_));
  UpdatePlayerAck_descriptor_ = file->message_type(17);
  static const int UpdatePlayerAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerAck, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerAck, player_),
  };
  UpdatePlayerAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdatePlayerAck_descriptor_,
      UpdatePlayerAck::internal_default_instance(),
      UpdatePlayerAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdatePlayerAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerAck, _internal_metadata_));
  UpdatePlayerAck_UpdateType_descriptor_ = UpdatePlayerAck_descriptor_->enum_type(0);
  ReqChat_descriptor_ = file->message_type(18);
  static const int ReqChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, touserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, tonick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, msg_),
  };
  ReqChat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqChat_descriptor_,
      ReqChat::internal_default_instance(),
      ReqChat_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqChat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, _internal_metadata_));
  ChatAck_descriptor_ = file->message_type(19);
  static const int ChatAck_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, fromuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, fromnick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, touserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, tonick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, fromforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, fromusericon_),
  };
  ChatAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatAck_descriptor_,
      ChatAck::internal_default_instance(),
      ChatAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAck, _internal_metadata_));
  UserNickAck_descriptor_ = file->message_type(20);
  static const int UserNickAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNickAck, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNickAck, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNickAck, secondname_),
  };
  UserNickAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserNickAck_descriptor_,
      UserNickAck::internal_default_instance(),
      UserNickAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserNickAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNickAck, _internal_metadata_));
  SkillInfo_descriptor_ = file->message_type(21);
  static const int SkillInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skilllevel_),
  };
  SkillInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::internal_default_instance(),
      SkillInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SkillInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _internal_metadata_));
  HeroAttr_descriptor_ = file->message_type(22);
  static const int HeroAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttr, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttr, lv_),
  };
  HeroAttr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroAttr_descriptor_,
      HeroAttr::internal_default_instance(),
      HeroAttr_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroAttr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttr, _internal_metadata_));
  HeroInfo_descriptor_ = file->message_type(23);
  static const int HeroInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, udid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, extrastrength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, extraleadership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, extrawisdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, extracharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, extraluck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, skills_),
  };
  HeroInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroInfo_descriptor_,
      HeroInfo::internal_default_instance(),
      HeroInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, _internal_metadata_));
  HeroAck_descriptor_ = file->message_type(24);
  static const int HeroAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAck, heros_),
  };
  HeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroAck_descriptor_,
      HeroAck::internal_default_instance(),
      HeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAck, _internal_metadata_));
  ItemInfo_descriptor_ = file->message_type(25);
  static const int ItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, num_),
  };
  ItemInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::internal_default_instance(),
      ItemInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _internal_metadata_));
  ItemAck_descriptor_ = file->message_type(26);
  static const int ItemAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAck, items_),
  };
  ItemAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemAck_descriptor_,
      ItemAck::internal_default_instance(),
      ItemAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAck, _internal_metadata_));
  UpdateSkill_descriptor_ = file->message_type(27);
  static const int UpdateSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkill, herouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkill, skills_),
  };
  UpdateSkill_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateSkill_descriptor_,
      UpdateSkill::internal_default_instance(),
      UpdateSkill_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateSkill),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkill, _internal_metadata_));
  SetNewGuide_descriptor_ = file->message_type(28);
  static const int SetNewGuide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNewGuide, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNewGuide, adddata_),
  };
  SetNewGuide_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetNewGuide_descriptor_,
      SetNewGuide::internal_default_instance(),
      SetNewGuide_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetNewGuide),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNewGuide, _internal_metadata_));
  PathInfo_descriptor_ = file->message_type(29);
  static const int PathInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, startpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, startper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, endpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, endper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, curpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, curper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, curwaypointind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, waypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, runtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, targetid_),
  };
  PathInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathInfo_descriptor_,
      PathInfo::internal_default_instance(),
      PathInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInfo, _internal_metadata_));
  RunPathAck_descriptor_ = file->message_type(30);
  static const int RunPathAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPathAck, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPathAck, state_),
  };
  RunPathAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunPathAck_descriptor_,
      RunPathAck::internal_default_instance(),
      RunPathAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunPathAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPathAck, _internal_metadata_));
  SetRunPath_descriptor_ = file->message_type(31);
  static const int SetRunPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRunPath, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRunPath, state_),
  };
  SetRunPath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetRunPath_descriptor_,
      SetRunPath::internal_default_instance(),
      SetRunPath_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetRunPath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRunPath, _internal_metadata_));
  ArrivedCity_descriptor_ = file->message_type(32);
  static const int ArrivedCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrivedCity, cityid_),
  };
  ArrivedCity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArrivedCity_descriptor_,
      ArrivedCity::internal_default_instance(),
      ArrivedCity_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArrivedCity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrivedCity, _internal_metadata_));
  Formation_descriptor_ = file->message_type(33);
  static const int Formation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, heroid_),
  };
  Formation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Formation_descriptor_,
      Formation::internal_default_instance(),
      Formation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Formation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, _internal_metadata_));
  HeroFormationAck_descriptor_ = file->message_type(34);
  static const int HeroFormationAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFormationAck, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFormationAck, curformation_),
  };
  HeroFormationAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroFormationAck_descriptor_,
      HeroFormationAck::internal_default_instance(),
      HeroFormationAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroFormationAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFormationAck, _internal_metadata_));
  SetHeroFormation_descriptor_ = file->message_type(35);
  static const int SetHeroFormation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroFormation, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroFormation, pos_),
  };
  SetHeroFormation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetHeroFormation_descriptor_,
      SetHeroFormation::internal_default_instance(),
      SetHeroFormation_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetHeroFormation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroFormation, _internal_metadata_));
  ReqCityInfo_descriptor_ = file->message_type(36);
  static const int ReqCityInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCityInfo, cityid_),
  };
  ReqCityInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCityInfo_descriptor_,
      ReqCityInfo::internal_default_instance(),
      ReqCityInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqCityInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCityInfo, _internal_metadata_));
  CityItemInfo_descriptor_ = file->message_type(37);
  static const int CityItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityItemInfo, itemnum_),
  };
  CityItemInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CityItemInfo_descriptor_,
      CityItemInfo::internal_default_instance(),
      CityItemInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CityItemInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityItemInfo, _internal_metadata_));
  CityHeroInfo_descriptor_ = file->message_type(38);
  static const int CityHeroInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHeroInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHeroInfo, heroname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHeroInfo, herolevel_),
  };
  CityHeroInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CityHeroInfo_descriptor_,
      CityHeroInfo::internal_default_instance(),
      CityHeroInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CityHeroInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHeroInfo, _internal_metadata_));
  CityInfoAck_descriptor_ = file->message_type(39);
  static const int CityInfoAck_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, governor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, agriculture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, business_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, military_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, provisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, moneydelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, provisionsdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, culturedevelopment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, reserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, infantry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, archer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, cavalry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, swordshield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, crossbowman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, elephant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, infantrywounded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, archerwounded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, cavalrywounded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, swordshieldwounded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, crossbowmanwounded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, elephantwounded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, populationspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, loyalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, heroinfo_),
  };
  CityInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CityInfoAck_descriptor_,
      CityInfoAck::internal_default_instance(),
      CityInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CityInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfoAck, _internal_metadata_));
  AwardItem_descriptor_ = file->message_type(40);
  static const int AwardItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardItem, heroids_),
  };
  AwardItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AwardItem_descriptor_,
      AwardItem::internal_default_instance(),
      AwardItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(AwardItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardItem, _internal_metadata_));
  Award_descriptor_ = file->message_type(41);
  static const int Award_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, awardid_),
  };
  Award_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Award_descriptor_,
      Award::internal_default_instance(),
      Award_offsets_,
      -1,
      -1,
      -1,
      sizeof(Award),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, _internal_metadata_));
  QuestConsAgriculture_descriptor_ = file->message_type(42);
  static const int QuestConsAgriculture_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsAgriculture, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsAgriculture, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsAgriculture, curtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsAgriculture, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsAgriculture, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsAgriculture, award_),
  };
  QuestConsAgriculture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestConsAgriculture_descriptor_,
      QuestConsAgriculture::internal_default_instance(),
      QuestConsAgriculture_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestConsAgriculture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsAgriculture, _internal_metadata_));
  QuestConsBusiness_descriptor_ = file->message_type(43);
  static const int QuestConsBusiness_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsBusiness, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsBusiness, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsBusiness, curtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsBusiness, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsBusiness, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsBusiness, award_),
  };
  QuestConsBusiness_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestConsBusiness_descriptor_,
      QuestConsBusiness::internal_default_instance(),
      QuestConsBusiness_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestConsBusiness),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsBusiness, _internal_metadata_));
  QuestConsMilitary_descriptor_ = file->message_type(44);
  static const int QuestConsMilitary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsMilitary, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsMilitary, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsMilitary, curtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsMilitary, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsMilitary, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsMilitary, award_),
  };
  QuestConsMilitary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestConsMilitary_descriptor_,
      QuestConsMilitary::internal_default_instance(),
      QuestConsMilitary_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestConsMilitary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConsMilitary, _internal_metadata_));
  QuestBattle_descriptor_ = file->message_type(45);
  static const int QuestBattle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestBattle, enemypath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestBattle, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestBattle, enemyteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestBattle, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestBattle, award_),
  };
  QuestBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestBattle_descriptor_,
      QuestBattle::internal_default_instance(),
      QuestBattle_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestBattle, _internal_metadata_));
  QuestVisit_descriptor_ = file->message_type(46);
  static const int QuestVisit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVisit, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVisit, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVisit, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVisit, award_),
  };
  QuestVisit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestVisit_descriptor_,
      QuestVisit::internal_default_instance(),
      QuestVisit_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestVisit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVisit, _internal_metadata_));
  QuestConscription_descriptor_ = file->message_type(47);
  static const int QuestConscription_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConscription, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConscription, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConscription, curtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConscription, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConscription, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConscription, award_),
  };
  QuestConscription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestConscription_descriptor_,
      QuestConscription::internal_default_instance(),
      QuestConscription_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestConscription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestConscription, _internal_metadata_));
  QuestDiscovery_descriptor_ = file->message_type(48);
  static const int QuestDiscovery_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, enemypath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, award_),
  };
  QuestDiscovery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestDiscovery_descriptor_,
      QuestDiscovery::internal_default_instance(),
      QuestDiscovery_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestDiscovery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestDiscovery, _internal_metadata_));
  QuestListAck_descriptor_ = file->message_type(49);
  static const int QuestListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestListAck, questlist_),
  };
  QuestListAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestListAck_descriptor_,
      QuestListAck::internal_default_instance(),
      QuestListAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestListAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestListAck, _internal_metadata_));
  QuestData_descriptor_ = file->message_type(50);
  static const int QuestData_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QuestData_default_oneof_instance_, agriculture_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QuestData_default_oneof_instance_, business_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QuestData_default_oneof_instance_, consmill_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QuestData_default_oneof_instance_, battle_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QuestData_default_oneof_instance_, visit_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QuestData_default_oneof_instance_, conscription_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QuestData_default_oneof_instance_, discovery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, dialog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, info_),
  };
  QuestData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestData_descriptor_,
      QuestData::internal_default_instance(),
      QuestData_offsets_,
      -1,
      -1,
      -1,
      QuestData_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _oneof_case_[0]),
      sizeof(QuestData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _internal_metadata_));
  ReqQuestInfo_descriptor_ = file->message_type(51);
  static const int ReqQuestInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuestInfo, uid_),
  };
  ReqQuestInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqQuestInfo_descriptor_,
      ReqQuestInfo::internal_default_instance(),
      ReqQuestInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqQuestInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuestInfo, _internal_metadata_));
  QuestInfoAck_descriptor_ = file->message_type(52);
  static const int QuestInfoAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfoAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfoAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfoAck, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfoAck, state_),
  };
  QuestInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestInfoAck_descriptor_,
      QuestInfoAck::internal_default_instance(),
      QuestInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuestInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfoAck, _internal_metadata_));
  GiveAward_descriptor_ = file->message_type(53);
  static const int GiveAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveAward, award_),
  };
  GiveAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GiveAward_descriptor_,
      GiveAward::internal_default_instance(),
      GiveAward_offsets_,
      -1,
      -1,
      -1,
      sizeof(GiveAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveAward, _internal_metadata_));
  ReqDoQuest_descriptor_ = file->message_type(54);
  static const int ReqDoQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDoQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDoQuest, heroids_),
  };
  ReqDoQuest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqDoQuest_descriptor_,
      ReqDoQuest::internal_default_instance(),
      ReqDoQuest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqDoQuest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDoQuest, _internal_metadata_));
  DoQuestAward_descriptor_ = file->message_type(55);
  static const int DoQuestAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAward, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAward, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAward, awardnum_),
  };
  DoQuestAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoQuestAward_descriptor_,
      DoQuestAward::internal_default_instance(),
      DoQuestAward_offsets_,
      -1,
      -1,
      -1,
      sizeof(DoQuestAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAward, _internal_metadata_));
  DoQuestAck_descriptor_ = file->message_type(56);
  static const int DoQuestAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAck, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAck, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAck, award_),
  };
  DoQuestAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoQuestAck_descriptor_,
      DoQuestAck::internal_default_instance(),
      DoQuestAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(DoQuestAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoQuestAck, _internal_metadata_));
  ReqSubmitQuest_descriptor_ = file->message_type(57);
  static const int ReqSubmitQuest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitQuest, questid_),
  };
  ReqSubmitQuest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSubmitQuest_descriptor_,
      ReqSubmitQuest::internal_default_instance(),
      ReqSubmitQuest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqSubmitQuest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitQuest, _internal_metadata_));
  SubmitQuestAck_descriptor_ = file->message_type(58);
  static const int SubmitQuestAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQuestAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQuestAck, questid_),
  };
  SubmitQuestAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmitQuestAck_descriptor_,
      SubmitQuestAck::internal_default_instance(),
      SubmitQuestAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmitQuestAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQuestAck, _internal_metadata_));
  ReqAcceptQuest_descriptor_ = file->message_type(59);
  static const int ReqAcceptQuest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptQuest, questid_),
  };
  ReqAcceptQuest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAcceptQuest_descriptor_,
      ReqAcceptQuest::internal_default_instance(),
      ReqAcceptQuest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqAcceptQuest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptQuest, _internal_metadata_));
  AcceptQuestAck_descriptor_ = file->message_type(60);
  static const int AcceptQuestAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptQuestAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptQuestAck, questid_),
  };
  AcceptQuestAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcceptQuestAck_descriptor_,
      AcceptQuestAck::internal_default_instance(),
      AcceptQuestAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcceptQuestAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptQuestAck, _internal_metadata_));
  ReqAddHero_descriptor_ = file->message_type(61);
  static const int ReqAddHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddHero, heroid_),
  };
  ReqAddHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAddHero_descriptor_,
      ReqAddHero::internal_default_instance(),
      ReqAddHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqAddHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddHero, _internal_metadata_));
  AddHeroAck_descriptor_ = file->message_type(62);
  static const int AddHeroAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHeroAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHeroAck, heroid_),
  };
  AddHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddHeroAck_descriptor_,
      AddHeroAck::internal_default_instance(),
      AddHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHeroAck, _internal_metadata_));
  ReqClearHeroCD_descriptor_ = file->message_type(63);
  static const int ReqClearHeroCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClearHeroCD, heroid_),
  };
  ReqClearHeroCD_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqClearHeroCD_descriptor_,
      ReqClearHeroCD::internal_default_instance(),
      ReqClearHeroCD_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqClearHeroCD),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClearHeroCD, _internal_metadata_));
  ClearHeroCDAck_descriptor_ = file->message_type(64);
  static const int ClearHeroCDAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearHeroCDAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearHeroCDAck, heroid_),
  };
  ClearHeroCDAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearHeroCDAck_descriptor_,
      ClearHeroCDAck::internal_default_instance(),
      ClearHeroCDAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClearHeroCDAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearHeroCDAck, _internal_metadata_));
  RefreshQuestAck_descriptor_ = file->message_type(65);
  static const int RefreshQuestAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuestAck, success_),
  };
  RefreshQuestAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RefreshQuestAck_descriptor_,
      RefreshQuestAck::internal_default_instance(),
      RefreshQuestAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RefreshQuestAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuestAck, _internal_metadata_));
  BattleEnemy_descriptor_ = file->message_type(66);
  static const int BattleEnemy_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, promotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, herohp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, soldierhp_),
  };
  BattleEnemy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BattleEnemy_descriptor_,
      BattleEnemy::internal_default_instance(),
      BattleEnemy_offsets_,
      -1,
      -1,
      -1,
      sizeof(BattleEnemy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnemy, _internal_metadata_));
  ReqBattle_descriptor_ = file->message_type(67);
  static const int ReqBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBattle, battleid_),
  };
  ReqBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBattle_descriptor_,
      ReqBattle::internal_default_instance(),
      ReqBattle_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBattle, _internal_metadata_));
  BattleAck_descriptor_ = file->message_type(68);
  static const int BattleAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAck, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAck, enemys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAck, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAck, error_),
  };
  BattleAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BattleAck_descriptor_,
      BattleAck::internal_default_instance(),
      BattleAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(BattleAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAck, _internal_metadata_));
  ReqPrepareBattle_descriptor_ = file->message_type(69);
  static const int ReqPrepareBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPrepareBattle, enemyteam_),
  };
  ReqPrepareBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqPrepareBattle_descriptor_,
      ReqPrepareBattle::internal_default_instance(),
      ReqPrepareBattle_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqPrepareBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPrepareBattle, _internal_metadata_));
  PrepareBattleAck_descriptor_ = file->message_type(70);
  static const int PrepareBattleAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBattleAck, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBattleAck, enemys_),
  };
  PrepareBattleAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareBattleAck_descriptor_,
      PrepareBattleAck::internal_default_instance(),
      PrepareBattleAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrepareBattleAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBattleAck, _internal_metadata_));
  RecoverBattle_descriptor_ = file->message_type(71);
  static const int RecoverBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverBattle, battleid_),
  };
  RecoverBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecoverBattle_descriptor_,
      RecoverBattle::internal_default_instance(),
      RecoverBattle_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecoverBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverBattle, _internal_metadata_));
  ReqBattleEnd_descriptor_ = file->message_type(72);
  static const int ReqBattleEnd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBattleEnd, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBattleEnd, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBattleEnd, enemys_),
  };
  ReqBattleEnd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBattleEnd_descriptor_,
      ReqBattleEnd::internal_default_instance(),
      ReqBattleEnd_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqBattleEnd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBattleEnd, _internal_metadata_));
  BattleEndAck_descriptor_ = file->message_type(73);
  static const int BattleEndAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEndAck, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEndAck, victory_),
  };
  BattleEndAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BattleEndAck_descriptor_,
      BattleEndAck::internal_default_instance(),
      BattleEndAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(BattleEndAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEndAck, _internal_metadata_));
  ReqHeroUseItem_descriptor_ = file->message_type(74);
  static const int ReqHeroUseItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroUseItem, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroUseItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroUseItem, num_),
  };
  ReqHeroUseItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqHeroUseItem_descriptor_,
      ReqHeroUseItem::internal_default_instance(),
      ReqHeroUseItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqHeroUseItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroUseItem, _internal_metadata_));
  HeroUserItemAck_descriptor_ = file->message_type(75);
  static const int HeroUserItemAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroUserItemAck, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroUserItemAck, error_),
  };
  HeroUserItemAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroUserItemAck_descriptor_,
      HeroUserItemAck::internal_default_instance(),
      HeroUserItemAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroUserItemAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroUserItemAck, _internal_metadata_));
  ReqUseItem_descriptor_ = file->message_type(76);
  static const int ReqUseItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUseItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUseItem, num_),
  };
  ReqUseItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqUseItem_descriptor_,
      ReqUseItem::internal_default_instance(),
      ReqUseItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqUseItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUseItem, _internal_metadata_));
  UseItemAck_descriptor_ = file->message_type(77);
  static const int UseItemAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemAck, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemAck, error_),
  };
  UseItemAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UseItemAck_descriptor_,
      UseItemAck::internal_default_instance(),
      UseItemAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(UseItemAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemAck, _internal_metadata_));
  ReqAddItem_descriptor_ = file->message_type(78);
  static const int ReqAddItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddItem, num_),
  };
  ReqAddItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAddItem_descriptor_,
      ReqAddItem::internal_default_instance(),
      ReqAddItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqAddItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddItem, _internal_metadata_));
  AddItemAck_descriptor_ = file->message_type(79);
  static const int AddItemAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemAck, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemAck, error_),
  };
  AddItemAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddItemAck_descriptor_,
      AddItemAck::internal_default_instance(),
      AddItemAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddItemAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemAck, _internal_metadata_));
  AdvantureContinuousBattle_descriptor_ = file->message_type(80);
  static const int AdvantureContinuousBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureContinuousBattle, enemypath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureContinuousBattle, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureContinuousBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureContinuousBattle, enemyteam_),
  };
  AdvantureContinuousBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvantureContinuousBattle_descriptor_,
      AdvantureContinuousBattle::internal_default_instance(),
      AdvantureContinuousBattle_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvantureContinuousBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureContinuousBattle, _internal_metadata_));
  AdvantureEvent_descriptor_ = file->message_type(81);
  static const int AdvantureEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, status_),
  };
  AdvantureEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvantureEvent_descriptor_,
      AdvantureEvent::internal_default_instance(),
      AdvantureEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvantureEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEvent, _internal_metadata_));
  AdvantureInfoAck_descriptor_ = file->message_type(82);
  static const int AdvantureInfoAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureInfoAck, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureInfoAck, timesmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureInfoAck, nexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureInfoAck, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureInfoAck, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureInfoAck, dotimes_),
  };
  AdvantureInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvantureInfoAck_descriptor_,
      AdvantureInfoAck::internal_default_instance(),
      AdvantureInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvantureInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureInfoAck, _internal_metadata_));
  AdvantureAck_descriptor_ = file->message_type(83);
  static const int AdvantureAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureAck, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureAck, nexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureAck, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureAck, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureAck, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureAck, event_),
  };
  AdvantureAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvantureAck_descriptor_,
      AdvantureAck::internal_default_instance(),
      AdvantureAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvantureAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureAck, _internal_metadata_));
  ReqAdvantureEventDone_descriptor_ = file->message_type(84);
  static const int ReqAdvantureEventDone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAdvantureEventDone, id_),
  };
  ReqAdvantureEventDone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAdvantureEventDone_descriptor_,
      ReqAdvantureEventDone::internal_default_instance(),
      ReqAdvantureEventDone_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqAdvantureEventDone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAdvantureEventDone, _internal_metadata_));
  AdvantureEventDoneAck_descriptor_ = file->message_type(85);
  static const int AdvantureEventDoneAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEventDoneAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEventDoneAck, error_),
  };
  AdvantureEventDoneAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvantureEventDoneAck_descriptor_,
      AdvantureEventDoneAck::internal_default_instance(),
      AdvantureEventDoneAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvantureEventDoneAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEventDoneAck, _internal_metadata_));
  HeroFriendship_descriptor_ = file->message_type(86);
  static const int HeroFriendship_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFriendship, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFriendship, friendshipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFriendship, friendshiplv_),
  };
  HeroFriendship_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroFriendship_descriptor_,
      HeroFriendship::internal_default_instance(),
      HeroFriendship_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroFriendship),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFriendship, _internal_metadata_));
  HeroFriendshipAck_descriptor_ = file->message_type(87);
  static const int HeroFriendshipAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFriendshipAck, herofri_),
  };
  HeroFriendshipAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroFriendshipAck_descriptor_,
      HeroFriendshipAck::internal_default_instance(),
      HeroFriendshipAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroFriendshipAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFriendshipAck, _internal_metadata_));
  HeroGeneralSoul_descriptor_ = file->message_type(88);
  static const int HeroGeneralSoul_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGeneralSoul, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGeneralSoul, num_),
  };
  HeroGeneralSoul_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroGeneralSoul_descriptor_,
      HeroGeneralSoul::internal_default_instance(),
      HeroGeneralSoul_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroGeneralSoul),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGeneralSoul, _internal_metadata_));
  HeroGeneralSoulAck_descriptor_ = file->message_type(89);
  static const int HeroGeneralSoulAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGeneralSoulAck, herosoul_),
  };
  HeroGeneralSoulAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroGeneralSoulAck_descriptor_,
      HeroGeneralSoulAck::internal_default_instance(),
      HeroGeneralSoulAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroGeneralSoulAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGeneralSoulAck, _internal_metadata_));
  UserLearnVsCDInfo_descriptor_ = file->message_type(90);
  static const int UserLearnVsCDInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLearnVsCDInfo, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLearnVsCDInfo, userlearnvscd_),
  };
  UserLearnVsCDInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserLearnVsCDInfo_descriptor_,
      UserLearnVsCDInfo::internal_default_instance(),
      UserLearnVsCDInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserLearnVsCDInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLearnVsCDInfo, _internal_metadata_));
  UserLearnVsCDAck_descriptor_ = file->message_type(91);
  static const int UserLearnVsCDAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLearnVsCDAck, cdinfo_),
  };
  UserLearnVsCDAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserLearnVsCDAck_descriptor_,
      UserLearnVsCDAck::internal_default_instance(),
      UserLearnVsCDAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserLearnVsCDAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLearnVsCDAck, _internal_metadata_));
  ReqGiveHeroGift_descriptor_ = file->message_type(92);
  static const int ReqGiveHeroGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGiveHeroGift, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGiveHeroGift, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGiveHeroGift, itemnum_),
  };
  ReqGiveHeroGift_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqGiveHeroGift_descriptor_,
      ReqGiveHeroGift::internal_default_instance(),
      ReqGiveHeroGift_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqGiveHeroGift),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGiveHeroGift, _internal_metadata_));
  GiveHeroGiftAck_descriptor_ = file->message_type(93);
  static const int GiveHeroGiftAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveHeroGiftAck, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveHeroGiftAck, error_),
  };
  GiveHeroGiftAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GiveHeroGiftAck_descriptor_,
      GiveHeroGiftAck::internal_default_instance(),
      GiveHeroGiftAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(GiveHeroGiftAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveHeroGiftAck, _internal_metadata_));
  ReqGeneralSoulExchangeHero_descriptor_ = file->message_type(94);
  static const int ReqGeneralSoulExchangeHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGeneralSoulExchangeHero, heroid_),
  };
  ReqGeneralSoulExchangeHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqGeneralSoulExchangeHero_descriptor_,
      ReqGeneralSoulExchangeHero::internal_default_instance(),
      ReqGeneralSoulExchangeHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqGeneralSoulExchangeHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGeneralSoulExchangeHero, _internal_metadata_));
  GeneralSoulExchangeHeroAck_descriptor_ = file->message_type(95);
  static const int GeneralSoulExchangeHeroAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralSoulExchangeHeroAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralSoulExchangeHeroAck, heroid_),
  };
  GeneralSoulExchangeHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeneralSoulExchangeHeroAck_descriptor_,
      GeneralSoulExchangeHeroAck::internal_default_instance(),
      GeneralSoulExchangeHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(GeneralSoulExchangeHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralSoulExchangeHeroAck, _internal_metadata_));
  ReqShopItem_descriptor_ = file->message_type(96);
  static const int ReqShopItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqShopItem, shopid_),
  };
  ReqShopItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqShopItem_descriptor_,
      ReqShopItem::internal_default_instance(),
      ReqShopItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqShopItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqShopItem, _internal_metadata_));
  ShopItem_descriptor_ = file->message_type(97);
  static const int ShopItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, buytimes_),
  };
  ShopItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShopItem_descriptor_,
      ShopItem::internal_default_instance(),
      ShopItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShopItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, _internal_metadata_));
  ShopItemAck_descriptor_ = file->message_type(98);
  static const int ShopItemAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemAck, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemAck, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemAck, items_),
  };
  ShopItemAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShopItemAck_descriptor_,
      ShopItemAck::internal_default_instance(),
      ShopItemAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShopItemAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemAck, _internal_metadata_));
  ReqBuyShop_descriptor_ = file->message_type(99);
  static const int ReqBuyShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyShop, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyShop, shoppos_),
  };
  ReqBuyShop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBuyShop_descriptor_,
      ReqBuyShop::internal_default_instance(),
      ReqBuyShop_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqBuyShop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyShop, _internal_metadata_));
  BuyShopAck_descriptor_ = file->message_type(100);
  static const int BuyShopAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyShopAck, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyShopAck, shoppos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyShopAck, error_),
  };
  BuyShopAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BuyShopAck_descriptor_,
      BuyShopAck::internal_default_instance(),
      BuyShopAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(BuyShopAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyShopAck, _internal_metadata_));
  ReqRefreshShop_descriptor_ = file->message_type(101);
  static const int ReqRefreshShop_offsets_[1] = {
  };
  ReqRefreshShop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRefreshShop_descriptor_,
      ReqRefreshShop::internal_default_instance(),
      ReqRefreshShop_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRefreshShop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRefreshShop, _internal_metadata_));
  RefreshShopAck_descriptor_ = file->message_type(102);
  static const int RefreshShopAck_offsets_[1] = {
  };
  RefreshShopAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RefreshShopAck_descriptor_,
      RefreshShopAck::internal_default_instance(),
      RefreshShopAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RefreshShopAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshShopAck, _internal_metadata_));
  ReqEvolveHero_descriptor_ = file->message_type(103);
  static const int ReqEvolveHero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEvolveHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEvolveHero, eatheroid_),
  };
  ReqEvolveHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqEvolveHero_descriptor_,
      ReqEvolveHero::internal_default_instance(),
      ReqEvolveHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqEvolveHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEvolveHero, _internal_metadata_));
  EvolveHeroAck_descriptor_ = file->message_type(104);
  static const int EvolveHeroAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveHeroAck, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveHeroAck, error_),
  };
  EvolveHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EvolveHeroAck_descriptor_,
      EvolveHeroAck::internal_default_instance(),
      EvolveHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(EvolveHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveHeroAck, _internal_metadata_));
  ReqAdvancementRank_descriptor_ = file->message_type(105);
  static const int ReqAdvancementRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAdvancementRank, rank_),
  };
  ReqAdvancementRank_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAdvancementRank_descriptor_,
      ReqAdvancementRank::internal_default_instance(),
      ReqAdvancementRank_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqAdvancementRank),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAdvancementRank, _internal_metadata_));
  AdvancementRankAck_descriptor_ = file->message_type(106);
  static const int AdvancementRankAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancementRankAck, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancementRankAck, error_),
  };
  AdvancementRankAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvancementRankAck_descriptor_,
      AdvancementRankAck::internal_default_instance(),
      AdvancementRankAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvancementRankAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancementRankAck, _internal_metadata_));
  ReqRankTitle_descriptor_ = file->message_type(107);
  static const int ReqRankTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankTitle, rank_),
  };
  ReqRankTitle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRankTitle_descriptor_,
      ReqRankTitle::internal_default_instance(),
      ReqRankTitle_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRankTitle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankTitle, _internal_metadata_));
  RankTitlePlayer_descriptor_ = file->message_type(108);
  static const int RankTitlePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTitlePlayer, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTitlePlayer, playernum_),
  };
  RankTitlePlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RankTitlePlayer_descriptor_,
      RankTitlePlayer::internal_default_instance(),
      RankTitlePlayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(RankTitlePlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTitlePlayer, _internal_metadata_));
  RankTitleAck_descriptor_ = file->message_type(109);
  static const int RankTitleAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTitleAck, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTitleAck, players_),
  };
  RankTitleAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RankTitleAck_descriptor_,
      RankTitleAck::internal_default_instance(),
      RankTitleAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RankTitleAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTitleAck, _internal_metadata_));
  ReqTitleInfo_descriptor_ = file->message_type(110);
  static const int ReqTitleInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTitleInfo, title_),
  };
  ReqTitleInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqTitleInfo_descriptor_,
      ReqTitleInfo::internal_default_instance(),
      ReqTitleInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqTitleInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTitleInfo, _internal_metadata_));
  TitleInfoPlayer_descriptor_ = file->message_type(111);
  static const int TitleInfoPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoPlayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoPlayer, name_),
  };
  TitleInfoPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TitleInfoPlayer_descriptor_,
      TitleInfoPlayer::internal_default_instance(),
      TitleInfoPlayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(TitleInfoPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoPlayer, _internal_metadata_));
  TitleInfoAck_descriptor_ = file->message_type(112);
  static const int TitleInfoAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoAck, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoAck, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoAck, curplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoAck, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoAck, meiselection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoAck, electiondata_),
  };
  TitleInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TitleInfoAck_descriptor_,
      TitleInfoAck::internal_default_instance(),
      TitleInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TitleInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoAck, _internal_metadata_));
  ReqElectionTitle_descriptor_ = file->message_type(113);
  static const int ReqElectionTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElectionTitle, title_),
  };
  ReqElectionTitle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqElectionTitle_descriptor_,
      ReqElectionTitle::internal_default_instance(),
      ReqElectionTitle_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqElectionTitle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElectionTitle, _internal_metadata_));
  ElectionTitleAck_descriptor_ = file->message_type(114);
  static const int ElectionTitleAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectionTitleAck, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectionTitleAck, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectionTitleAck, playernum_),
  };
  ElectionTitleAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ElectionTitleAck_descriptor_,
      ElectionTitleAck::internal_default_instance(),
      ElectionTitleAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ElectionTitleAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectionTitleAck, _internal_metadata_));
  HeroClassSkill_descriptor_ = file->message_type(115);
  static const int HeroClassSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassSkill, skilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassSkill, exp_),
  };
  HeroClassSkill_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroClassSkill_descriptor_,
      HeroClassSkill::internal_default_instance(),
      HeroClassSkill_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroClassSkill),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassSkill, _internal_metadata_));
  HeroClassInfo_descriptor_ = file->message_type(116);
  static const int HeroClassInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, leadership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, wisdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, luck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, skills_),
  };
  HeroClassInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroClassInfo_descriptor_,
      HeroClassInfo::internal_default_instance(),
      HeroClassInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroClassInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassInfo, _internal_metadata_));
  ReqHeroClass_descriptor_ = file->message_type(117);
  static const int ReqHeroClass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroClass, classid_),
  };
  ReqHeroClass_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqHeroClass_descriptor_,
      ReqHeroClass::internal_default_instance(),
      ReqHeroClass_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqHeroClass),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroClass, _internal_metadata_));
  HeroClassAck_descriptor_ = file->message_type(118);
  static const int HeroClassAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassAck, hero_),
  };
  HeroClassAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeroClassAck_descriptor_,
      HeroClassAck::internal_default_instance(),
      HeroClassAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeroClassAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClassAck, _internal_metadata_));
  ReqStudySkill_descriptor_ = file->message_type(119);
  static const int ReqStudySkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudySkill, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudySkill, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudySkill, skillid_),
  };
  ReqStudySkill_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqStudySkill_descriptor_,
      ReqStudySkill::internal_default_instance(),
      ReqStudySkill_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqStudySkill),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudySkill, _internal_metadata_));
  StudySkillAck_descriptor_ = file->message_type(120);
  static const int StudySkillAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudySkillAck, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudySkillAck, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudySkillAck, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudySkillAck, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudySkillAck, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudySkillAck, error_),
  };
  StudySkillAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StudySkillAck_descriptor_,
      StudySkillAck::internal_default_instance(),
      StudySkillAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(StudySkillAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudySkillAck, _internal_metadata_));
  ReqStudyProperty_descriptor_ = file->message_type(121);
  static const int ReqStudyProperty_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudyProperty, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudyProperty, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudyProperty, type_),
  };
  ReqStudyProperty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqStudyProperty_descriptor_,
      ReqStudyProperty::internal_default_instance(),
      ReqStudyProperty_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqStudyProperty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStudyProperty, _internal_metadata_));
  StudyPropertyAck_descriptor_ = file->message_type(122);
  static const int StudyPropertyAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudyPropertyAck, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudyPropertyAck, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudyPropertyAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudyPropertyAck, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudyPropertyAck, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudyPropertyAck, error_),
  };
  StudyPropertyAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StudyPropertyAck_descriptor_,
      StudyPropertyAck::internal_default_instance(),
      StudyPropertyAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(StudyPropertyAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StudyPropertyAck, _internal_metadata_));
  ReqRaffleHero_descriptor_ = file->message_type(123);
  static const int ReqRaffleHero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRaffleHero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRaffleHero, num_),
  };
  ReqRaffleHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRaffleHero_descriptor_,
      ReqRaffleHero::internal_default_instance(),
      ReqRaffleHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRaffleHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRaffleHero, _internal_metadata_));
  RaffleHeroAck_descriptor_ = file->message_type(124);
  static const int RaffleHeroAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroAck, herouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroAck, error_),
  };
  RaffleHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaffleHeroAck_descriptor_,
      RaffleHeroAck::internal_default_instance(),
      RaffleHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaffleHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroAck, _internal_metadata_));
  ReqRaffleHeroTimes_descriptor_ = file->message_type(125);
  static const int ReqRaffleHeroTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRaffleHeroTimes, id_),
  };
  ReqRaffleHeroTimes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRaffleHeroTimes_descriptor_,
      ReqRaffleHeroTimes::internal_default_instance(),
      ReqRaffleHeroTimes_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRaffleHeroTimes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRaffleHeroTimes, _internal_metadata_));
  RaffleHeroTimesAck_descriptor_ = file->message_type(126);
  static const int RaffleHeroTimesAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimesAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimesAck, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimesAck, onerafftime_),
  };
  RaffleHeroTimesAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaffleHeroTimesAck_descriptor_,
      RaffleHeroTimesAck::internal_default_instance(),
      RaffleHeroTimesAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaffleHeroTimesAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaffleHeroTimesAck, _internal_metadata_));
  ReqAddMoney_descriptor_ = file->message_type(127);
  static const int ReqAddMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddMoney, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddMoney, add_),
  };
  ReqAddMoney_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAddMoney_descriptor_,
      ReqAddMoney::internal_default_instance(),
      ReqAddMoney_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqAddMoney),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddMoney, _internal_metadata_));
  AddMoneyAck_descriptor_ = file->message_type(128);
  static const int AddMoneyAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyAck, add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyAck, error_),
  };
  AddMoneyAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddMoneyAck_descriptor_,
      AddMoneyAck::internal_default_instance(),
      AddMoneyAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddMoneyAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyAck, _internal_metadata_));
  ReqLevelUpCamp_descriptor_ = file->message_type(129);
  static const int ReqLevelUpCamp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLevelUpCamp, type_),
  };
  ReqLevelUpCamp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqLevelUpCamp_descriptor_,
      ReqLevelUpCamp::internal_default_instance(),
      ReqLevelUpCamp_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqLevelUpCamp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLevelUpCamp, _internal_metadata_));
  LevelUpCampAck_descriptor_ = file->message_type(130);
  static const int LevelUpCampAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpCampAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpCampAck, error_),
  };
  LevelUpCampAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LevelUpCampAck_descriptor_,
      LevelUpCampAck::internal_default_instance(),
      LevelUpCampAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(LevelUpCampAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpCampAck, _internal_metadata_));
  ReqClearCampCD_descriptor_ = file->message_type(131);
  static const int ReqClearCampCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClearCampCD, type_),
  };
  ReqClearCampCD_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqClearCampCD_descriptor_,
      ReqClearCampCD::internal_default_instance(),
      ReqClearCampCD_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqClearCampCD),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClearCampCD, _internal_metadata_));
  ClearCampCDAck_descriptor_ = file->message_type(132);
  static const int ClearCampCDAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearCampCDAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearCampCDAck, error_),
  };
  ClearCampCDAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearCampCDAck_descriptor_,
      ClearCampCDAck::internal_default_instance(),
      ClearCampCDAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClearCampCDAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearCampCDAck, _internal_metadata_));
  ReqCampState_descriptor_ = file->message_type(133);
  static const int ReqCampState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCampState, types_),
  };
  ReqCampState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCampState_descriptor_,
      ReqCampState::internal_default_instance(),
      ReqCampState_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqCampState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCampState, _internal_metadata_));
  CampState_descriptor_ = file->message_type(134);
  static const int CampState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampState, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampState, outputdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampState, lefttime_),
  };
  CampState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CampState_descriptor_,
      CampState::internal_default_instance(),
      CampState_offsets_,
      -1,
      -1,
      -1,
      sizeof(CampState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampState, _internal_metadata_));
  CampStateAck_descriptor_ = file->message_type(135);
  static const int CampStateAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampStateAck, states_),
  };
  CampStateAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CampStateAck_descriptor_,
      CampStateAck::internal_default_instance(),
      CampStateAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CampStateAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampStateAck, _internal_metadata_));
  ReqGetCampOut_descriptor_ = file->message_type(136);
  static const int ReqGetCampOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetCampOut, type_),
  };
  ReqGetCampOut_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqGetCampOut_descriptor_,
      ReqGetCampOut::internal_default_instance(),
      ReqGetCampOut_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqGetCampOut),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetCampOut, _internal_metadata_));
  GetCampOutAck_descriptor_ = file->message_type(137);
  static const int GetCampOutAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCampOutAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCampOutAck, output_),
  };
  GetCampOutAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetCampOutAck_descriptor_,
      GetCampOutAck::internal_default_instance(),
      GetCampOutAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetCampOutAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCampOutAck, _internal_metadata_));
  CycleBattleAck_descriptor_ = file->message_type(138);
  static const int CycleBattleAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleAck, maxdifficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleAck, curdifficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleAck, curround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleAck, leftunlocktimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleAck, lefttime_),
  };
  CycleBattleAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CycleBattleAck_descriptor_,
      CycleBattleAck::internal_default_instance(),
      CycleBattleAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CycleBattleAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleAck, _internal_metadata_));
  RefresshCycleAck_descriptor_ = file->message_type(139);
  static const int RefresshCycleAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefresshCycleAck, error_),
  };
  RefresshCycleAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RefresshCycleAck_descriptor_,
      RefresshCycleAck::internal_default_instance(),
      RefresshCycleAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RefresshCycleAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefresshCycleAck, _internal_metadata_));
  ReqSelectCycleDiff_descriptor_ = file->message_type(140);
  static const int ReqSelectCycleDiff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSelectCycleDiff, difficulty_),
  };
  ReqSelectCycleDiff_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSelectCycleDiff_descriptor_,
      ReqSelectCycleDiff::internal_default_instance(),
      ReqSelectCycleDiff_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqSelectCycleDiff),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSelectCycleDiff, _internal_metadata_));
  SelectCycleDiffAck_descriptor_ = file->message_type(141);
  static const int SelectCycleDiffAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCycleDiffAck, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCycleDiffAck, error_),
  };
  SelectCycleDiffAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelectCycleDiffAck_descriptor_,
      SelectCycleDiffAck::internal_default_instance(),
      SelectCycleDiffAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(SelectCycleDiffAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCycleDiffAck, _internal_metadata_));
  CycleBattleInfoAck_descriptor_ = file->message_type(142);
  static const int CycleBattleInfoAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleInfoAck, enemypath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleInfoAck, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleInfoAck, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleInfoAck, enemyteam_),
  };
  CycleBattleInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CycleBattleInfoAck_descriptor_,
      CycleBattleInfoAck::internal_default_instance(),
      CycleBattleInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CycleBattleInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CycleBattleInfoAck, _internal_metadata_));
  AdvantureEventStatusChange_descriptor_ = file->message_type(143);
  static const int AdvantureEventStatusChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEventStatusChange, adveventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEventStatusChange, adveventstatus_),
  };
  AdvantureEventStatusChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvantureEventStatusChange_descriptor_,
      AdvantureEventStatusChange::internal_default_instance(),
      AdvantureEventStatusChange_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvantureEventStatusChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantureEventStatusChange, _internal_metadata_));
  ReqRecruitHero_descriptor_ = file->message_type(144);
  static const int ReqRecruitHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecruitHero, recruitid_),
  };
  ReqRecruitHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRecruitHero_descriptor_,
      ReqRecruitHero::internal_default_instance(),
      ReqRecruitHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRecruitHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecruitHero, _internal_metadata_));
  RecruitHeroAck_descriptor_ = file->message_type(145);
  static const int RecruitHeroAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitHeroAck, recruitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitHeroAck, error_),
  };
  RecruitHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecruitHeroAck_descriptor_,
      RecruitHeroAck::internal_default_instance(),
      RecruitHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecruitHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitHeroAck, _internal_metadata_));
  ReqRecruitedHero_descriptor_ = file->message_type(146);
  static const int ReqRecruitedHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecruitedHero, recruitids_),
  };
  ReqRecruitedHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRecruitedHero_descriptor_,
      ReqRecruitedHero::internal_default_instance(),
      ReqRecruitedHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRecruitedHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecruitedHero, _internal_metadata_));
  RecruitedHeroAck_descriptor_ = file->message_type(147);
  static const int RecruitedHeroAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitedHeroAck, recruitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitedHeroAck, recruited_),
  };
  RecruitedHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecruitedHeroAck_descriptor_,
      RecruitedHeroAck::internal_default_instance(),
      RecruitedHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecruitedHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitedHeroAck, _internal_metadata_));
  ReqVSBattleBegin_descriptor_ = file->message_type(148);
  static const int ReqVSBattleBegin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleBegin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleBegin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleBegin, heroid_),
  };
  ReqVSBattleBegin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqVSBattleBegin_descriptor_,
      ReqVSBattleBegin::internal_default_instance(),
      ReqVSBattleBegin_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqVSBattleBegin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleBegin, _internal_metadata_));
  VSBattleEnemy_descriptor_ = file->message_type(149);
  static const int VSBattleEnemy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleEnemy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleEnemy, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleEnemy, nuqi_),
  };
  VSBattleEnemy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VSBattleEnemy_descriptor_,
      VSBattleEnemy::internal_default_instance(),
      VSBattleEnemy_offsets_,
      -1,
      -1,
      -1,
      sizeof(VSBattleEnemy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleEnemy, _internal_metadata_));
  VSBattleBeginAck_descriptor_ = file->message_type(150);
  static const int VSBattleBeginAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleBeginAck, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleBeginAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleBeginAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleBeginAck, enemys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleBeginAck, error_),
  };
  VSBattleBeginAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VSBattleBeginAck_descriptor_,
      VSBattleBeginAck::internal_default_instance(),
      VSBattleBeginAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(VSBattleBeginAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleBeginAck, _internal_metadata_));
  ReqVSBattleReady_descriptor_ = file->message_type(151);
  static const int ReqVSBattleReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleReady, battleid_),
  };
  ReqVSBattleReady_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqVSBattleReady_descriptor_,
      ReqVSBattleReady::internal_default_instance(),
      ReqVSBattleReady_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqVSBattleReady),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleReady, _internal_metadata_));
  VSBattleReadyAck_descriptor_ = file->message_type(152);
  static const int VSBattleReadyAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleReadyAck, battleid_),
  };
  VSBattleReadyAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VSBattleReadyAck_descriptor_,
      VSBattleReadyAck::internal_default_instance(),
      VSBattleReadyAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(VSBattleReadyAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleReadyAck, _internal_metadata_));
  ReqVSBattleOpt_descriptor_ = file->message_type(153);
  static const int ReqVSBattleOpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleOpt, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleOpt, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleOpt, turn_),
  };
  ReqVSBattleOpt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqVSBattleOpt_descriptor_,
      ReqVSBattleOpt::internal_default_instance(),
      ReqVSBattleOpt_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqVSBattleOpt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVSBattleOpt, _internal_metadata_));
  VSBattleOptAck_descriptor_ = file->message_type(154);
  static const int VSBattleOptAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleOptAck, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleOptAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleOptAck, turn_),
  };
  VSBattleOptAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VSBattleOptAck_descriptor_,
      VSBattleOptAck::internal_default_instance(),
      VSBattleOptAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(VSBattleOptAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleOptAck, _internal_metadata_));
  VSBattleUnitState_descriptor_ = file->message_type(155);
  static const int VSBattleUnitState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleUnitState, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleUnitState, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleUnitState, nuqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleUnitState, opttype_),
  };
  VSBattleUnitState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VSBattleUnitState_descriptor_,
      VSBattleUnitState::internal_default_instance(),
      VSBattleUnitState_offsets_,
      -1,
      -1,
      -1,
      sizeof(VSBattleUnitState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleUnitState, _internal_metadata_));
  VSBattleTurn_descriptor_ = file->message_type(156);
  static const int VSBattleTurn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleTurn, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleTurn, mestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleTurn, otherstate_),
  };
  VSBattleTurn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VSBattleTurn_descriptor_,
      VSBattleTurn::internal_default_instance(),
      VSBattleTurn_offsets_,
      -1,
      -1,
      -1,
      sizeof(VSBattleTurn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleTurn, _internal_metadata_));
  VSBattleEnd_descriptor_ = file->message_type(157);
  static const int VSBattleEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleEnd, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleEnd, victory_),
  };
  VSBattleEnd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VSBattleEnd_descriptor_,
      VSBattleEnd::internal_default_instance(),
      VSBattleEnd_offsets_,
      -1,
      -1,
      -1,
      sizeof(VSBattleEnd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSBattleEnd, _internal_metadata_));
  ReqBioHeroInfo_descriptor_ = file->message_type(158);
  static const int ReqBioHeroInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBioHeroInfo, heroclass_),
  };
  ReqBioHeroInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBioHeroInfo_descriptor_,
      ReqBioHeroInfo::internal_default_instance(),
      ReqBioHeroInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqBioHeroInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBioHeroInfo, _internal_metadata_));
  BioHeroStepData_descriptor_ = file->message_type(159);
  static const int BioHeroStepData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepData, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepData, branchescomplete_),
  };
  BioHeroStepData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioHeroStepData_descriptor_,
      BioHeroStepData::internal_default_instance(),
      BioHeroStepData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioHeroStepData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepData, _internal_metadata_));
  BioHeroInfoAck_descriptor_ = file->message_type(160);
  static const int BioHeroInfoAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroInfoAck, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroInfoAck, steps_),
  };
  BioHeroInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioHeroInfoAck_descriptor_,
      BioHeroInfoAck::internal_default_instance(),
      BioHeroInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioHeroInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroInfoAck, _internal_metadata_));
  ReqBioHeroStepDone_descriptor_ = file->message_type(161);
  static const int ReqBioHeroStepDone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBioHeroStepDone, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBioHeroStepDone, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBioHeroStepDone, branchid_),
  };
  ReqBioHeroStepDone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBioHeroStepDone_descriptor_,
      ReqBioHeroStepDone::internal_default_instance(),
      ReqBioHeroStepDone_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqBioHeroStepDone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBioHeroStepDone, _internal_metadata_));
  BioHeroStepDoneAck_descriptor_ = file->message_type(162);
  static const int BioHeroStepDoneAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepDoneAck, heroclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepDoneAck, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepDoneAck, unlockstepids_),
  };
  BioHeroStepDoneAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioHeroStepDoneAck_descriptor_,
      BioHeroStepDoneAck::internal_default_instance(),
      BioHeroStepDoneAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioHeroStepDoneAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioHeroStepDoneAck, _internal_metadata_));
  ReqAddFriend_descriptor_ = file->message_type(163);
  static const int ReqAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFriend, userid_),
  };
  ReqAddFriend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAddFriend_descriptor_,
      ReqAddFriend::internal_default_instance(),
      ReqAddFriend_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqAddFriend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFriend, _internal_metadata_));
  ReqRemoveFriend_descriptor_ = file->message_type(164);
  static const int ReqRemoveFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveFriend, userid_),
  };
  ReqRemoveFriend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRemoveFriend_descriptor_,
      ReqRemoveFriend::internal_default_instance(),
      ReqRemoveFriend_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqRemoveFriend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveFriend, _internal_metadata_));
  RemoveFriendAck_descriptor_ = file->message_type(165);
  static const int RemoveFriendAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendAck, userid_),
  };
  RemoveFriendAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemoveFriendAck_descriptor_,
      RemoveFriendAck::internal_default_instance(),
      RemoveFriendAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(RemoveFriendAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendAck, _internal_metadata_));
  ReqTopList_descriptor_ = file->message_type(166);
  static const int ReqTopList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTopList, type_),
  };
  ReqTopList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqTopList_descriptor_,
      ReqTopList::internal_default_instance(),
      ReqTopList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqTopList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTopList, _internal_metadata_));
  TopListAck_descriptor_ = file->message_type(167);
  static const int TopListAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopListAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopListAck, topdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopListAck, myranking_),
  };
  TopListAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopListAck_descriptor_,
      TopListAck::internal_default_instance(),
      TopListAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopListAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopListAck, _internal_metadata_));
  TopListData_descriptor_ = file->message_type(168);
  static const int TopListData_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopListData_default_oneof_instance_, sortreputation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopListData_default_oneof_instance_, sortmilitary_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopListData_default_oneof_instance_, sortlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopListData, info_),
  };
  TopListData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopListData_descriptor_,
      TopListData::internal_default_instance(),
      TopListData_offsets_,
      -1,
      -1,
      -1,
      TopListData_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopListData, _oneof_case_[0]),
      sizeof(TopListData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopListData, _internal_metadata_));
  SortReputationData_descriptor_ = file->message_type(169);
  static const int SortReputationData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, sortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, icon_),
  };
  SortReputationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SortReputationData_descriptor_,
      SortReputationData::internal_default_instance(),
      SortReputationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SortReputationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReputationData, _internal_metadata_));
  SortMilitaryData_descriptor_ = file->message_type(170);
  static const int SortMilitaryData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, sortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, military_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, icon_),
  };
  SortMilitaryData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SortMilitaryData_descriptor_,
      SortMilitaryData::internal_default_instance(),
      SortMilitaryData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SortMilitaryData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortMilitaryData, _internal_metadata_));
  SortLevelData_descriptor_ = file->message_type(171);
  static const int SortLevelData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, sortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, military_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, icon_),
  };
  SortLevelData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SortLevelData_descriptor_,
      SortLevelData::internal_default_instance(),
      SortLevelData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SortLevelData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortLevelData, _internal_metadata_));
  FriendInfo_descriptor_ = file->message_type(172);
  static const int FriendInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, online_),
  };
  FriendInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::internal_default_instance(),
      FriendInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(FriendInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _internal_metadata_));
  FriendsInfoAck_descriptor_ = file->message_type(173);
  static const int FriendsInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsInfoAck, friends_),
  };
  FriendsInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendsInfoAck_descriptor_,
      FriendsInfoAck::internal_default_instance(),
      FriendsInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(FriendsInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsInfoAck, _internal_metadata_));
  MailSender_descriptor_ = file->message_type(174);
  static const int MailSender_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailSender, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailSender, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailSender, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailSender, title_),
  };
  MailSender_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MailSender_descriptor_,
      MailSender::internal_default_instance(),
      MailSender_offsets_,
      -1,
      -1,
      -1,
      sizeof(MailSender),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailSender, _internal_metadata_));
  MailData_descriptor_ = file->message_type(175);
  static const int MailData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, hasaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, isread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, isgetaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, type_),
  };
  MailData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MailData_descriptor_,
      MailData::internal_default_instance(),
      MailData_offsets_,
      -1,
      -1,
      -1,
      sizeof(MailData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, _internal_metadata_));
  MailInfoAck_descriptor_ = file->message_type(176);
  static const int MailInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfoAck, mails_),
  };
  MailInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MailInfoAck_descriptor_,
      MailInfoAck::internal_default_instance(),
      MailInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(MailInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfoAck, _internal_metadata_));
  ReqMailDetail_descriptor_ = file->message_type(177);
  static const int ReqMailDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMailDetail, id_),
  };
  ReqMailDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqMailDetail_descriptor_,
      ReqMailDetail::internal_default_instance(),
      ReqMailDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqMailDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMailDetail, _internal_metadata_));
  MailDetailAck_descriptor_ = file->message_type(178);
  static const int MailDetailAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetailAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetailAck, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetailAck, award_),
  };
  MailDetailAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MailDetailAck_descriptor_,
      MailDetailAck::internal_default_instance(),
      MailDetailAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(MailDetailAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetailAck, _internal_metadata_));
  ReqGetMailAward_descriptor_ = file->message_type(179);
  static const int ReqGetMailAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMailAward, id_),
  };
  ReqGetMailAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqGetMailAward_descriptor_,
      ReqGetMailAward::internal_default_instance(),
      ReqGetMailAward_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqGetMailAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMailAward, _internal_metadata_));
  GetMailAwardAck_descriptor_ = file->message_type(180);
  static const int GetMailAwardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAwardAck, id_),
  };
  GetMailAwardAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMailAwardAck_descriptor_,
      GetMailAwardAck::internal_default_instance(),
      GetMailAwardAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetMailAwardAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAwardAck, _internal_metadata_));
  ReqDeleteMail_descriptor_ = file->message_type(181);
  static const int ReqDeleteMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteMail, id_),
  };
  ReqDeleteMail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqDeleteMail_descriptor_,
      ReqDeleteMail::internal_default_instance(),
      ReqDeleteMail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqDeleteMail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteMail, _internal_metadata_));
  DeleteMailAck_descriptor_ = file->message_type(182);
  static const int DeleteMailAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMailAck, id_),
  };
  DeleteMailAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteMailAck_descriptor_,
      DeleteMailAck::internal_default_instance(),
      DeleteMailAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteMailAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMailAck, _internal_metadata_));
  BanquetHeros_descriptor_ = file->message_type(183);
  static const int BanquetHeros_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeros, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeros, banquetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeros, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeros, banquet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeros, leftfreetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeros, lefttime_),
  };
  BanquetHeros_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BanquetHeros_descriptor_,
      BanquetHeros::internal_default_instance(),
      BanquetHeros_offsets_,
      -1,
      -1,
      -1,
      sizeof(BanquetHeros),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeros, _internal_metadata_));
  BanquetInfoAck_descriptor_ = file->message_type(184);
  static const int BanquetInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetInfoAck, info_),
  };
  BanquetInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BanquetInfoAck_descriptor_,
      BanquetInfoAck::internal_default_instance(),
      BanquetInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(BanquetInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetInfoAck, _internal_metadata_));
  ReqBanquetHero_descriptor_ = file->message_type(185);
  static const int ReqBanquetHero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBanquetHero, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBanquetHero, uid_),
  };
  ReqBanquetHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBanquetHero_descriptor_,
      ReqBanquetHero::internal_default_instance(),
      ReqBanquetHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqBanquetHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBanquetHero, _internal_metadata_));
  BanquetHeroAck_descriptor_ = file->message_type(186);
  static const int BanquetHeroAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeroAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeroAck, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeroAck, error_),
  };
  BanquetHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BanquetHeroAck_descriptor_,
      BanquetHeroAck::internal_default_instance(),
      BanquetHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(BanquetHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanquetHeroAck, _internal_metadata_));
  WorldWarInfo_descriptor_ = file->message_type(187);
  static const int WorldWarInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, force1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, force2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, warid_),
  };
  WorldWarInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarInfo_descriptor_,
      WorldWarInfo::internal_default_instance(),
      WorldWarInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarInfo, _internal_metadata_));
  WorldWarAck_descriptor_ = file->message_type(188);
  static const int WorldWarAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarAck, wars_),
  };
  WorldWarAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarAck_descriptor_,
      WorldWarAck::internal_default_instance(),
      WorldWarAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarAck, _internal_metadata_));
  ReqWorldBattle_descriptor_ = file->message_type(189);
  static const int ReqWorldBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldBattle, id_),
  };
  ReqWorldBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWorldBattle_descriptor_,
      ReqWorldBattle::internal_default_instance(),
      ReqWorldBattle_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqWorldBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldBattle, _internal_metadata_));
  WorldBattleAck_descriptor_ = file->message_type(190);
  static const int WorldBattleAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleAck, battle_),
  };
  WorldBattleAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldBattleAck_descriptor_,
      WorldBattleAck::internal_default_instance(),
      WorldBattleAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldBattleAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleAck, _internal_metadata_));
  ReqWorldWarTopList_descriptor_ = file->message_type(191);
  static const int ReqWorldWarTopList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarTopList, id_),
  };
  ReqWorldWarTopList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWorldWarTopList_descriptor_,
      ReqWorldWarTopList::internal_default_instance(),
      ReqWorldWarTopList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqWorldWarTopList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarTopList, _internal_metadata_));
  WorldWarUserInfo_descriptor_ = file->message_type(192);
  static const int WorldWarUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarUserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarUserInfo, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarUserInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarUserInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarUserInfo, level_),
  };
  WorldWarUserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarUserInfo_descriptor_,
      WorldWarUserInfo::internal_default_instance(),
      WorldWarUserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarUserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarUserInfo, _internal_metadata_));
  WorldWarTopListAck_descriptor_ = file->message_type(193);
  static const int WorldWarTopListAck_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, tollist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, lastlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, tolrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, lastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, tolexploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, lastexploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, tollefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, periodlefttime_),
  };
  WorldWarTopListAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarTopListAck_descriptor_,
      WorldWarTopListAck::internal_default_instance(),
      WorldWarTopListAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarTopListAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarTopListAck, _internal_metadata_));
  TeamInfo_descriptor_ = file->message_type(194);
  static const int TeamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, clusterid_),
  };
  TeamInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::internal_default_instance(),
      TeamInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TeamInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _internal_metadata_));
  TeamInfoAck_descriptor_ = file->message_type(195);
  static const int TeamInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoAck, infos_),
  };
  TeamInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamInfoAck_descriptor_,
      TeamInfoAck::internal_default_instance(),
      TeamInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TeamInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoAck, _internal_metadata_));
  ReqSetTeam_descriptor_ = file->message_type(196);
  static const int ReqSetTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetTeam, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetTeam, heroid_),
  };
  ReqSetTeam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSetTeam_descriptor_,
      ReqSetTeam::internal_default_instance(),
      ReqSetTeam_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqSetTeam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetTeam, _internal_metadata_));
  SetTeamAck_descriptor_ = file->message_type(197);
  static const int SetTeamAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamAck, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamAck, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamAck, error_),
  };
  SetTeamAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetTeamAck_descriptor_,
      SetTeamAck::internal_default_instance(),
      SetTeamAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetTeamAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamAck, _internal_metadata_));
  ReqWriteSkillBook_descriptor_ = file->message_type(198);
  static const int ReqWriteSkillBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWriteSkillBook, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWriteSkillBook, items_),
  };
  ReqWriteSkillBook_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWriteSkillBook_descriptor_,
      ReqWriteSkillBook::internal_default_instance(),
      ReqWriteSkillBook_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqWriteSkillBook),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWriteSkillBook, _internal_metadata_));
  WriteSkillBookAck_descriptor_ = file->message_type(199);
  static const int WriteSkillBookAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSkillBookAck, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSkillBookAck, error_),
  };
  WriteSkillBookAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteSkillBookAck_descriptor_,
      WriteSkillBookAck::internal_default_instance(),
      WriteSkillBookAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteSkillBookAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSkillBookAck, _internal_metadata_));
  ReqTeamRunPath_descriptor_ = file->message_type(200);
  static const int ReqTeamRunPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamRunPath, position_),
  };
  ReqTeamRunPath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqTeamRunPath_descriptor_,
      ReqTeamRunPath::internal_default_instance(),
      ReqTeamRunPath_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqTeamRunPath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamRunPath, _internal_metadata_));
  TeamRunPathAck_descriptor_ = file->message_type(201);
  static const int TeamRunPathAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRunPathAck, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRunPathAck, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRunPathAck, curcity_),
  };
  TeamRunPathAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamRunPathAck_descriptor_,
      TeamRunPathAck::internal_default_instance(),
      TeamRunPathAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TeamRunPathAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRunPathAck, _internal_metadata_));
  SetTeamRunPath_descriptor_ = file->message_type(202);
  static const int SetTeamRunPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamRunPath, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamRunPath, path_),
  };
  SetTeamRunPath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetTeamRunPath_descriptor_,
      SetTeamRunPath::internal_default_instance(),
      SetTeamRunPath_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetTeamRunPath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamRunPath, _internal_metadata_));
  ReqTeamArrivedTar_descriptor_ = file->message_type(203);
  static const int ReqTeamArrivedTar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamArrivedTar, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamArrivedTar, path_),
  };
  ReqTeamArrivedTar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqTeamArrivedTar_descriptor_,
      ReqTeamArrivedTar::internal_default_instance(),
      ReqTeamArrivedTar_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqTeamArrivedTar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamArrivedTar, _internal_metadata_));
  TeamArrivedTarAck_descriptor_ = file->message_type(204);
  static const int TeamArrivedTarAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamArrivedTarAck, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamArrivedTarAck, path_),
  };
  TeamArrivedTarAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamArrivedTarAck_descriptor_,
      TeamArrivedTarAck::internal_default_instance(),
      TeamArrivedTarAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TeamArrivedTarAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamArrivedTarAck, _internal_metadata_));
  ClusterMemberInfo_descriptor_ = file->message_type(205);
  static const int ClusterMemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMemberInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMemberInfo, teampos_),
  };
  ClusterMemberInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterMemberInfo_descriptor_,
      ClusterMemberInfo::internal_default_instance(),
      ClusterMemberInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterMemberInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMemberInfo, _internal_metadata_));
  ClusterCreater_descriptor_ = file->message_type(206);
  static const int ClusterCreater_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCreater, createrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCreater, name_),
  };
  ClusterCreater_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterCreater_descriptor_,
      ClusterCreater::internal_default_instance(),
      ClusterCreater_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterCreater),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCreater, _internal_metadata_));
  ClusterInfo_descriptor_ = file->message_type(207);
  static const int ClusterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, creater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, members_),
  };
  ClusterInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterInfo_descriptor_,
      ClusterInfo::internal_default_instance(),
      ClusterInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, _internal_metadata_));
  ReqClusterDetailInfo_descriptor_ = file->message_type(208);
  static const int ReqClusterDetailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClusterDetailInfo, uid_),
  };
  ReqClusterDetailInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqClusterDetailInfo_descriptor_,
      ReqClusterDetailInfo::internal_default_instance(),
      ReqClusterDetailInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqClusterDetailInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClusterDetailInfo, _internal_metadata_));
  TeamMemberDetail_descriptor_ = file->message_type(209);
  static const int TeamMemberDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberDetail, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberDetail, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberDetail, hp_),
  };
  TeamMemberDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamMemberDetail_descriptor_,
      TeamMemberDetail::internal_default_instance(),
      TeamMemberDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(TeamMemberDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberDetail, _internal_metadata_));
  ClusterMemberDetail_descriptor_ = file->message_type(210);
  static const int ClusterMemberDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMemberDetail, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMemberDetail, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMemberDetail, heros_),
  };
  ClusterMemberDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterMemberDetail_descriptor_,
      ClusterMemberDetail::internal_default_instance(),
      ClusterMemberDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterMemberDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMemberDetail, _internal_metadata_));
  ReqSetClusterAttr_descriptor_ = file->message_type(211);
  static const int ReqSetClusterAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetClusterAttr, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetClusterAttr, pub_),
  };
  ReqSetClusterAttr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSetClusterAttr_descriptor_,
      ReqSetClusterAttr::internal_default_instance(),
      ReqSetClusterAttr_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqSetClusterAttr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetClusterAttr, _internal_metadata_));
  SetClusterAttrAck_descriptor_ = file->message_type(212);
  static const int SetClusterAttrAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterAttrAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterAttrAck, pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterAttrAck, error_),
  };
  SetClusterAttrAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetClusterAttrAck_descriptor_,
      SetClusterAttrAck::internal_default_instance(),
      SetClusterAttrAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetClusterAttrAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterAttrAck, _internal_metadata_));
  ClusterDetailInfoAck_descriptor_ = file->message_type(213);
  static const int ClusterDetailInfoAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDetailInfoAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDetailInfoAck, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDetailInfoAck, pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDetailInfoAck, error_),
  };
  ClusterDetailInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterDetailInfoAck_descriptor_,
      ClusterDetailInfoAck::internal_default_instance(),
      ClusterDetailInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterDetailInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDetailInfoAck, _internal_metadata_));
  ClusterInfoAck_descriptor_ = file->message_type(214);
  static const int ClusterInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoAck, infos_),
  };
  ClusterInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterInfoAck_descriptor_,
      ClusterInfoAck::internal_default_instance(),
      ClusterInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoAck, _internal_metadata_));
  AllClusterAck_descriptor_ = file->message_type(215);
  static const int AllClusterAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllClusterAck, infos_),
  };
  AllClusterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllClusterAck_descriptor_,
      AllClusterAck::internal_default_instance(),
      AllClusterAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllClusterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllClusterAck, _internal_metadata_));
  CreateClusterAck_descriptor_ = file->message_type(216);
  static const int CreateClusterAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterAck, error_),
  };
  CreateClusterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateClusterAck_descriptor_,
      CreateClusterAck::internal_default_instance(),
      CreateClusterAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateClusterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterAck, _internal_metadata_));
  ReqJoinCluster_descriptor_ = file->message_type(217);
  static const int ReqJoinCluster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinCluster, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinCluster, teampos_),
  };
  ReqJoinCluster_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqJoinCluster_descriptor_,
      ReqJoinCluster::internal_default_instance(),
      ReqJoinCluster_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqJoinCluster),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinCluster, _internal_metadata_));
  JoinClusterAck_descriptor_ = file->message_type(218);
  static const int JoinClusterAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClusterAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClusterAck, teampos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClusterAck, error_),
  };
  JoinClusterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JoinClusterAck_descriptor_,
      JoinClusterAck::internal_default_instance(),
      JoinClusterAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(JoinClusterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClusterAck, _internal_metadata_));
  ReqExitCluster_descriptor_ = file->message_type(219);
  static const int ReqExitCluster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExitCluster, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExitCluster, teampos_),
  };
  ReqExitCluster_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqExitCluster_descriptor_,
      ReqExitCluster::internal_default_instance(),
      ReqExitCluster_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqExitCluster),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExitCluster, _internal_metadata_));
  ExitClusterAck_descriptor_ = file->message_type(220);
  static const int ExitClusterAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitClusterAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitClusterAck, teampos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitClusterAck, error_),
  };
  ExitClusterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExitClusterAck_descriptor_,
      ExitClusterAck::internal_default_instance(),
      ExitClusterAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExitClusterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitClusterAck, _internal_metadata_));
  ReqCityItem_descriptor_ = file->message_type(221);
  static const int ReqCityItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCityItem, cityid_),
  };
  ReqCityItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCityItem_descriptor_,
      ReqCityItem::internal_default_instance(),
      ReqCityItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqCityItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCityItem, _internal_metadata_));
  CityItemAck_descriptor_ = file->message_type(222);
  static const int CityItemAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityItemAck, cityitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityItemAck, error_),
  };
  CityItemAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CityItemAck_descriptor_,
      CityItemAck::internal_default_instance(),
      CityItemAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CityItemAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityItemAck, _internal_metadata_));
  ReqCityHero_descriptor_ = file->message_type(223);
  static const int ReqCityHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCityHero, cityid_),
  };
  ReqCityHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCityHero_descriptor_,
      ReqCityHero::internal_default_instance(),
      ReqCityHero_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqCityHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCityHero, _internal_metadata_));
  CityHeroAck_descriptor_ = file->message_type(224);
  static const int CityHeroAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHeroAck, cityhero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHeroAck, error_),
  };
  CityHeroAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CityHeroAck_descriptor_,
      CityHeroAck::internal_default_instance(),
      CityHeroAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(CityHeroAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHeroAck, _internal_metadata_));
  ResourceInfo_descriptor_ = file->message_type(225);
  static const int ResourceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, resourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, posid_),
  };
  ResourceInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceInfo_descriptor_,
      ResourceInfo::internal_default_instance(),
      ResourceInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _internal_metadata_));
  ResourceInfoAck_descriptor_ = file->message_type(226);
  static const int ResourceInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfoAck, info_),
  };
  ResourceInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceInfoAck_descriptor_,
      ResourceInfoAck::internal_default_instance(),
      ResourceInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfoAck, _internal_metadata_));
  ReqResourceDetailInfo_descriptor_ = file->message_type(227);
  static const int ReqResourceDetailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResourceDetailInfo, uid_),
  };
  ReqResourceDetailInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqResourceDetailInfo_descriptor_,
      ReqResourceDetailInfo::internal_default_instance(),
      ReqResourceDetailInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqResourceDetailInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResourceDetailInfo, _internal_metadata_));
  ResourceDetailInfo_descriptor_ = file->message_type(228);
  static const int ResourceDetailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfo, teampos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfo, resourcenum_),
  };
  ResourceDetailInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceDetailInfo_descriptor_,
      ResourceDetailInfo::internal_default_instance(),
      ResourceDetailInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceDetailInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfo, _internal_metadata_));
  ResourceDetailInfoAck_descriptor_ = file->message_type(229);
  static const int ResourceDetailInfoAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfoAck, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfoAck, resourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfoAck, detailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfoAck, error_),
  };
  ResourceDetailInfoAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceDetailInfoAck_descriptor_,
      ResourceDetailInfoAck::internal_default_instance(),
      ResourceDetailInfoAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceDetailInfoAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDetailInfoAck, _internal_metadata_));
  RegInviteJoinCluster_descriptor_ = file->message_type(230);
  static const int RegInviteJoinCluster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegInviteJoinCluster, userid_),
  };
  RegInviteJoinCluster_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegInviteJoinCluster_descriptor_,
      RegInviteJoinCluster::internal_default_instance(),
      RegInviteJoinCluster_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegInviteJoinCluster),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegInviteJoinCluster, _internal_metadata_));
  InviteJoinClusterAck_descriptor_ = file->message_type(231);
  static const int InviteJoinClusterAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinClusterAck, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinClusterAck, error_),
  };
  InviteJoinClusterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InviteJoinClusterAck_descriptor_,
      InviteJoinClusterAck::internal_default_instance(),
      InviteJoinClusterAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(InviteJoinClusterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinClusterAck, _internal_metadata_));
  UserInviteJoinCluster_descriptor_ = file->message_type(232);
  static const int UserInviteJoinCluster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInviteJoinCluster, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInviteJoinCluster, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInviteJoinCluster, username_),
  };
  UserInviteJoinCluster_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInviteJoinCluster_descriptor_,
      UserInviteJoinCluster::internal_default_instance(),
      UserInviteJoinCluster_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInviteJoinCluster),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInviteJoinCluster, _internal_metadata_));
  ClusterRunPathAck_descriptor_ = file->message_type(233);
  static const int ClusterRunPathAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterRunPathAck, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterRunPathAck, curcity_),
  };
  ClusterRunPathAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterRunPathAck_descriptor_,
      ClusterRunPathAck::internal_default_instance(),
      ClusterRunPathAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterRunPathAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterRunPathAck, _internal_metadata_));
  SetClusterRunPath_descriptor_ = file->message_type(234);
  static const int SetClusterRunPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterRunPath, path_),
  };
  SetClusterRunPath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetClusterRunPath_descriptor_,
      SetClusterRunPath::internal_default_instance(),
      SetClusterRunPath_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetClusterRunPath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterRunPath, _internal_metadata_));
  ReqClusterArrivedTar_descriptor_ = file->message_type(235);
  static const int ReqClusterArrivedTar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClusterArrivedTar, path_),
  };
  ReqClusterArrivedTar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqClusterArrivedTar_descriptor_,
      ReqClusterArrivedTar::internal_default_instance(),
      ReqClusterArrivedTar_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqClusterArrivedTar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClusterArrivedTar, _internal_metadata_));
  ClusterArrivedTarAck_descriptor_ = file->message_type(236);
  static const int ClusterArrivedTarAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterArrivedTarAck, path_),
  };
  ClusterArrivedTarAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterArrivedTarAck_descriptor_,
      ClusterArrivedTarAck::internal_default_instance(),
      ClusterArrivedTarAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterArrivedTarAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterArrivedTarAck, _internal_metadata_));
  ReqEnterWorldWar_descriptor_ = file->message_type(237);
  static const int ReqEnterWorldWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterWorldWar, worldwarid_),
  };
  ReqEnterWorldWar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqEnterWorldWar_descriptor_,
      ReqEnterWorldWar::internal_default_instance(),
      ReqEnterWorldWar_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqEnterWorldWar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterWorldWar, _internal_metadata_));
  EnterWorldWarAck_descriptor_ = file->message_type(238);
  static const int EnterWorldWarAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorldWarAck, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorldWarAck, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorldWarAck, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorldWarAck, error_),
  };
  EnterWorldWarAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterWorldWarAck_descriptor_,
      EnterWorldWarAck::internal_default_instance(),
      EnterWorldWarAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnterWorldWarAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorldWarAck, _internal_metadata_));
  ReqWorldWarStatus_descriptor_ = file->message_type(239);
  static const int ReqWorldWarStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarStatus, worldwarid_),
  };
  ReqWorldWarStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWorldWarStatus_descriptor_,
      ReqWorldWarStatus::internal_default_instance(),
      ReqWorldWarStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqWorldWarStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarStatus, _internal_metadata_));
  WorldWarSceneBlockState_descriptor_ = file->message_type(240);
  static const int WorldWarSceneBlockState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBlockState, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBlockState, occupied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBlockState, number_),
  };
  WorldWarSceneBlockState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarSceneBlockState_descriptor_,
      WorldWarSceneBlockState::internal_default_instance(),
      WorldWarSceneBlockState_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarSceneBlockState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBlockState, _internal_metadata_));
  WorldWarSceneBuildingState_descriptor_ = file->message_type(241);
  static const int WorldWarSceneBuildingState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBuildingState, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBuildingState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBuildingState, occupied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBuildingState, currenthealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBuildingState, totalhealth_),
  };
  WorldWarSceneBuildingState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarSceneBuildingState_descriptor_,
      WorldWarSceneBuildingState::internal_default_instance(),
      WorldWarSceneBuildingState_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarSceneBuildingState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneBuildingState, _internal_metadata_));
  WorldWarSceneAgent_descriptor_ = file->message_type(242);
  static const int WorldWarSceneAgent_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, iscluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, clusteridorteampos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, currenthealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, totalhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, attackcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, movecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, currentblockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, defencetarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, path_),
  };
  WorldWarSceneAgent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarSceneAgent_descriptor_,
      WorldWarSceneAgent::internal_default_instance(),
      WorldWarSceneAgent_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarSceneAgent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarSceneAgent, _internal_metadata_));
  WorldWarStatusAck_descriptor_ = file->message_type(243);
  static const int WorldWarStatusAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarStatusAck, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarStatusAck, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarStatusAck, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarStatusAck, agents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarStatusAck, importantagents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarStatusAck, error_),
  };
  WorldWarStatusAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarStatusAck_descriptor_,
      WorldWarStatusAck::internal_default_instance(),
      WorldWarStatusAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarStatusAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarStatusAck, _internal_metadata_));
  ReqWorldWarMove_descriptor_ = file->message_type(244);
  static const int ReqWorldWarMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarMove, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarMove, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarMove, path_),
  };
  ReqWorldWarMove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWorldWarMove_descriptor_,
      ReqWorldWarMove::internal_default_instance(),
      ReqWorldWarMove_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqWorldWarMove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarMove, _internal_metadata_));
  WorldWarMoveAck_descriptor_ = file->message_type(245);
  static const int WorldWarMoveAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarMoveAck, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarMoveAck, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarMoveAck, error_),
  };
  WorldWarMoveAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarMoveAck_descriptor_,
      WorldWarMoveAck::internal_default_instance(),
      WorldWarMoveAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarMoveAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarMoveAck, _internal_metadata_));
  ReqWorldWarDefence_descriptor_ = file->message_type(246);
  static const int ReqWorldWarDefence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarDefence, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarDefence, agentid_),
  };
  ReqWorldWarDefence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWorldWarDefence_descriptor_,
      ReqWorldWarDefence::internal_default_instance(),
      ReqWorldWarDefence_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqWorldWarDefence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarDefence, _internal_metadata_));
  WorldWarDefenceAck_descriptor_ = file->message_type(247);
  static const int WorldWarDefenceAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceAck, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceAck, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceAck, error_),
  };
  WorldWarDefenceAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarDefenceAck_descriptor_,
      WorldWarDefenceAck::internal_default_instance(),
      WorldWarDefenceAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarDefenceAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceAck, _internal_metadata_));
  ReqWorldWarDefenceTarget_descriptor_ = file->message_type(248);
  static const int ReqWorldWarDefenceTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarDefenceTarget, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarDefenceTarget, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarDefenceTarget, blockid_),
  };
  ReqWorldWarDefenceTarget_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWorldWarDefenceTarget_descriptor_,
      ReqWorldWarDefenceTarget::internal_default_instance(),
      ReqWorldWarDefenceTarget_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqWorldWarDefenceTarget),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldWarDefenceTarget, _internal_metadata_));
  WorldWarDefenceTargetAck_descriptor_ = file->message_type(249);
  static const int WorldWarDefenceTargetAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceTargetAck, worldwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceTargetAck, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceTargetAck, error_),
  };
  WorldWarDefenceTargetAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldWarDefenceTargetAck_descriptor_,
      WorldWarDefenceTargetAck::internal_default_instance(),
      WorldWarDefenceTargetAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorldWarDefenceTargetAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldWarDefenceTargetAck, _internal_metadata_));
  ReqLeaveWorldWar_descriptor_ = file->message_type(250);
  static const int ReqLeaveWorldWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveWorldWar, worldwarid_),
  };
  ReqLeaveWorldWar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqLeaveWorldWar_descriptor_,
      ReqLeaveWorldWar::internal_default_instance(),
      ReqLeaveWorldWar_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqLeaveWorldWar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveWorldWar, _internal_metadata_));
  LeaveWorldWarAck_descriptor_ = file->message_type(251);
  static const int LeaveWorldWarAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveWorldWarAck, worldwarid_),
  };
  LeaveWorldWarAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeaveWorldWarAck_descriptor_,
      LeaveWorldWarAck::internal_default_instance(),
      LeaveWorldWarAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(LeaveWorldWarAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveWorldWarAck, _internal_metadata_));
  ReqTest_descriptor_ = file->message_type(252);
  static const int ReqTest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, g_),
  };
  ReqTest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqTest_descriptor_,
      ReqTest::internal_default_instance(),
      ReqTest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqTest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, _internal_metadata_));
  TestAck_descriptor_ = file->message_type(253);
  static const int TestAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, g_),
  };
  TestAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestAck_descriptor_,
      TestAck::internal_default_instance(),
      TestAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAck, _internal_metadata_));
  ServerStatus_descriptor_ = file->enum_type(0);
  ChatType_descriptor_ = file->enum_type(1);
  RunState_descriptor_ = file->enum_type(2);
  RunTargetType_descriptor_ = file->enum_type(3);
  QuestDiscoveryFinishedType_descriptor_ = file->enum_type(4);
  QuestState_descriptor_ = file->enum_type(5);
  QuestType_descriptor_ = file->enum_type(6);
  AdvantureEventStatus_descriptor_ = file->enum_type(7);
  HeroPropertyType_descriptor_ = file->enum_type(8);
  CampType_descriptor_ = file->enum_type(9);
  TopListType_descriptor_ = file->enum_type(10);
  MailType_descriptor_ = file->enum_type(11);
  ResourceType_descriptor_ = file->enum_type(12);
  WorldWarSceneForceType_descriptor_ = file->enum_type(13);
  WorldWarSceneForceState_descriptor_ = file->enum_type(14);
  WorldWarSceneBuildingType_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageType_descriptor_, MessageType::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqLogin_descriptor_, ReqLogin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerData_descriptor_, PlayerData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginAck_descriptor_, LoginAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VersionInfoAck_descriptor_, VersionInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserNamePassAck_descriptor_, UserNamePassAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRegister_descriptor_, ReqRegister::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterAck_descriptor_, RegisterAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqEnterGame_descriptor_, ReqEnterGame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterGameAck_descriptor_, EnterGameAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCreateUser_descriptor_, ReqCreateUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateUserAck_descriptor_, CreateUserAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerInfo_descriptor_, ServerInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerListAck_descriptor_, ServerListAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqThirdPartyLogin_descriptor_, ReqThirdPartyLogin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqOrderId_descriptor_, ReqOrderId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrderIdAck_descriptor_, OrderIdAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdatePlayerAck_descriptor_, UpdatePlayerAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqChat_descriptor_, ReqChat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatAck_descriptor_, ChatAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserNickAck_descriptor_, UserNickAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SkillInfo_descriptor_, SkillInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroAttr_descriptor_, HeroAttr::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroInfo_descriptor_, HeroInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroAck_descriptor_, HeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemInfo_descriptor_, ItemInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemAck_descriptor_, ItemAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateSkill_descriptor_, UpdateSkill::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetNewGuide_descriptor_, SetNewGuide::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathInfo_descriptor_, PathInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunPathAck_descriptor_, RunPathAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetRunPath_descriptor_, SetRunPath::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArrivedCity_descriptor_, ArrivedCity::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Formation_descriptor_, Formation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroFormationAck_descriptor_, HeroFormationAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetHeroFormation_descriptor_, SetHeroFormation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCityInfo_descriptor_, ReqCityInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CityItemInfo_descriptor_, CityItemInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CityHeroInfo_descriptor_, CityHeroInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CityInfoAck_descriptor_, CityInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AwardItem_descriptor_, AwardItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Award_descriptor_, Award::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestConsAgriculture_descriptor_, QuestConsAgriculture::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestConsBusiness_descriptor_, QuestConsBusiness::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestConsMilitary_descriptor_, QuestConsMilitary::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestBattle_descriptor_, QuestBattle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestVisit_descriptor_, QuestVisit::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestConscription_descriptor_, QuestConscription::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestDiscovery_descriptor_, QuestDiscovery::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestListAck_descriptor_, QuestListAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestData_descriptor_, QuestData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqQuestInfo_descriptor_, ReqQuestInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestInfoAck_descriptor_, QuestInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GiveAward_descriptor_, GiveAward::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqDoQuest_descriptor_, ReqDoQuest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoQuestAward_descriptor_, DoQuestAward::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoQuestAck_descriptor_, DoQuestAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSubmitQuest_descriptor_, ReqSubmitQuest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmitQuestAck_descriptor_, SubmitQuestAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAcceptQuest_descriptor_, ReqAcceptQuest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcceptQuestAck_descriptor_, AcceptQuestAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAddHero_descriptor_, ReqAddHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddHeroAck_descriptor_, AddHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqClearHeroCD_descriptor_, ReqClearHeroCD::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearHeroCDAck_descriptor_, ClearHeroCDAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RefreshQuestAck_descriptor_, RefreshQuestAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BattleEnemy_descriptor_, BattleEnemy::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBattle_descriptor_, ReqBattle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BattleAck_descriptor_, BattleAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqPrepareBattle_descriptor_, ReqPrepareBattle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareBattleAck_descriptor_, PrepareBattleAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecoverBattle_descriptor_, RecoverBattle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBattleEnd_descriptor_, ReqBattleEnd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BattleEndAck_descriptor_, BattleEndAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqHeroUseItem_descriptor_, ReqHeroUseItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroUserItemAck_descriptor_, HeroUserItemAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqUseItem_descriptor_, ReqUseItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UseItemAck_descriptor_, UseItemAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAddItem_descriptor_, ReqAddItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddItemAck_descriptor_, AddItemAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvantureContinuousBattle_descriptor_, AdvantureContinuousBattle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvantureEvent_descriptor_, AdvantureEvent::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvantureInfoAck_descriptor_, AdvantureInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvantureAck_descriptor_, AdvantureAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAdvantureEventDone_descriptor_, ReqAdvantureEventDone::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvantureEventDoneAck_descriptor_, AdvantureEventDoneAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroFriendship_descriptor_, HeroFriendship::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroFriendshipAck_descriptor_, HeroFriendshipAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroGeneralSoul_descriptor_, HeroGeneralSoul::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroGeneralSoulAck_descriptor_, HeroGeneralSoulAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserLearnVsCDInfo_descriptor_, UserLearnVsCDInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserLearnVsCDAck_descriptor_, UserLearnVsCDAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqGiveHeroGift_descriptor_, ReqGiveHeroGift::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GiveHeroGiftAck_descriptor_, GiveHeroGiftAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqGeneralSoulExchangeHero_descriptor_, ReqGeneralSoulExchangeHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeneralSoulExchangeHeroAck_descriptor_, GeneralSoulExchangeHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqShopItem_descriptor_, ReqShopItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShopItem_descriptor_, ShopItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShopItemAck_descriptor_, ShopItemAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBuyShop_descriptor_, ReqBuyShop::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BuyShopAck_descriptor_, BuyShopAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRefreshShop_descriptor_, ReqRefreshShop::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RefreshShopAck_descriptor_, RefreshShopAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqEvolveHero_descriptor_, ReqEvolveHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EvolveHeroAck_descriptor_, EvolveHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAdvancementRank_descriptor_, ReqAdvancementRank::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvancementRankAck_descriptor_, AdvancementRankAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRankTitle_descriptor_, ReqRankTitle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RankTitlePlayer_descriptor_, RankTitlePlayer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RankTitleAck_descriptor_, RankTitleAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqTitleInfo_descriptor_, ReqTitleInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TitleInfoPlayer_descriptor_, TitleInfoPlayer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TitleInfoAck_descriptor_, TitleInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqElectionTitle_descriptor_, ReqElectionTitle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ElectionTitleAck_descriptor_, ElectionTitleAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroClassSkill_descriptor_, HeroClassSkill::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroClassInfo_descriptor_, HeroClassInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqHeroClass_descriptor_, ReqHeroClass::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeroClassAck_descriptor_, HeroClassAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqStudySkill_descriptor_, ReqStudySkill::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StudySkillAck_descriptor_, StudySkillAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqStudyProperty_descriptor_, ReqStudyProperty::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StudyPropertyAck_descriptor_, StudyPropertyAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRaffleHero_descriptor_, ReqRaffleHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaffleHeroAck_descriptor_, RaffleHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRaffleHeroTimes_descriptor_, ReqRaffleHeroTimes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaffleHeroTimesAck_descriptor_, RaffleHeroTimesAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAddMoney_descriptor_, ReqAddMoney::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddMoneyAck_descriptor_, AddMoneyAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqLevelUpCamp_descriptor_, ReqLevelUpCamp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LevelUpCampAck_descriptor_, LevelUpCampAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqClearCampCD_descriptor_, ReqClearCampCD::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearCampCDAck_descriptor_, ClearCampCDAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCampState_descriptor_, ReqCampState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CampState_descriptor_, CampState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CampStateAck_descriptor_, CampStateAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqGetCampOut_descriptor_, ReqGetCampOut::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetCampOutAck_descriptor_, GetCampOutAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CycleBattleAck_descriptor_, CycleBattleAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RefresshCycleAck_descriptor_, RefresshCycleAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSelectCycleDiff_descriptor_, ReqSelectCycleDiff::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelectCycleDiffAck_descriptor_, SelectCycleDiffAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CycleBattleInfoAck_descriptor_, CycleBattleInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvantureEventStatusChange_descriptor_, AdvantureEventStatusChange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRecruitHero_descriptor_, ReqRecruitHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecruitHeroAck_descriptor_, RecruitHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRecruitedHero_descriptor_, ReqRecruitedHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecruitedHeroAck_descriptor_, RecruitedHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqVSBattleBegin_descriptor_, ReqVSBattleBegin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VSBattleEnemy_descriptor_, VSBattleEnemy::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VSBattleBeginAck_descriptor_, VSBattleBeginAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqVSBattleReady_descriptor_, ReqVSBattleReady::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VSBattleReadyAck_descriptor_, VSBattleReadyAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqVSBattleOpt_descriptor_, ReqVSBattleOpt::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VSBattleOptAck_descriptor_, VSBattleOptAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VSBattleUnitState_descriptor_, VSBattleUnitState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VSBattleTurn_descriptor_, VSBattleTurn::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VSBattleEnd_descriptor_, VSBattleEnd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBioHeroInfo_descriptor_, ReqBioHeroInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioHeroStepData_descriptor_, BioHeroStepData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioHeroInfoAck_descriptor_, BioHeroInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBioHeroStepDone_descriptor_, ReqBioHeroStepDone::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioHeroStepDoneAck_descriptor_, BioHeroStepDoneAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAddFriend_descriptor_, ReqAddFriend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRemoveFriend_descriptor_, ReqRemoveFriend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoveFriendAck_descriptor_, RemoveFriendAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqTopList_descriptor_, ReqTopList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopListAck_descriptor_, TopListAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopListData_descriptor_, TopListData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SortReputationData_descriptor_, SortReputationData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SortMilitaryData_descriptor_, SortMilitaryData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SortLevelData_descriptor_, SortLevelData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendInfo_descriptor_, FriendInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendsInfoAck_descriptor_, FriendsInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MailSender_descriptor_, MailSender::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MailData_descriptor_, MailData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MailInfoAck_descriptor_, MailInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqMailDetail_descriptor_, ReqMailDetail::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MailDetailAck_descriptor_, MailDetailAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqGetMailAward_descriptor_, ReqGetMailAward::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMailAwardAck_descriptor_, GetMailAwardAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqDeleteMail_descriptor_, ReqDeleteMail::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteMailAck_descriptor_, DeleteMailAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BanquetHeros_descriptor_, BanquetHeros::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BanquetInfoAck_descriptor_, BanquetInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBanquetHero_descriptor_, ReqBanquetHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BanquetHeroAck_descriptor_, BanquetHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarInfo_descriptor_, WorldWarInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarAck_descriptor_, WorldWarAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWorldBattle_descriptor_, ReqWorldBattle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldBattleAck_descriptor_, WorldBattleAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWorldWarTopList_descriptor_, ReqWorldWarTopList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarUserInfo_descriptor_, WorldWarUserInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarTopListAck_descriptor_, WorldWarTopListAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamInfo_descriptor_, TeamInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamInfoAck_descriptor_, TeamInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSetTeam_descriptor_, ReqSetTeam::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetTeamAck_descriptor_, SetTeamAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWriteSkillBook_descriptor_, ReqWriteSkillBook::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteSkillBookAck_descriptor_, WriteSkillBookAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqTeamRunPath_descriptor_, ReqTeamRunPath::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamRunPathAck_descriptor_, TeamRunPathAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetTeamRunPath_descriptor_, SetTeamRunPath::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqTeamArrivedTar_descriptor_, ReqTeamArrivedTar::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamArrivedTarAck_descriptor_, TeamArrivedTarAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterMemberInfo_descriptor_, ClusterMemberInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterCreater_descriptor_, ClusterCreater::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterInfo_descriptor_, ClusterInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqClusterDetailInfo_descriptor_, ReqClusterDetailInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamMemberDetail_descriptor_, TeamMemberDetail::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterMemberDetail_descriptor_, ClusterMemberDetail::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSetClusterAttr_descriptor_, ReqSetClusterAttr::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetClusterAttrAck_descriptor_, SetClusterAttrAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterDetailInfoAck_descriptor_, ClusterDetailInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterInfoAck_descriptor_, ClusterInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllClusterAck_descriptor_, AllClusterAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateClusterAck_descriptor_, CreateClusterAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqJoinCluster_descriptor_, ReqJoinCluster::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JoinClusterAck_descriptor_, JoinClusterAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqExitCluster_descriptor_, ReqExitCluster::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExitClusterAck_descriptor_, ExitClusterAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCityItem_descriptor_, ReqCityItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CityItemAck_descriptor_, CityItemAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCityHero_descriptor_, ReqCityHero::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CityHeroAck_descriptor_, CityHeroAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceInfo_descriptor_, ResourceInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceInfoAck_descriptor_, ResourceInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqResourceDetailInfo_descriptor_, ReqResourceDetailInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceDetailInfo_descriptor_, ResourceDetailInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceDetailInfoAck_descriptor_, ResourceDetailInfoAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegInviteJoinCluster_descriptor_, RegInviteJoinCluster::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InviteJoinClusterAck_descriptor_, InviteJoinClusterAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInviteJoinCluster_descriptor_, UserInviteJoinCluster::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterRunPathAck_descriptor_, ClusterRunPathAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetClusterRunPath_descriptor_, SetClusterRunPath::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqClusterArrivedTar_descriptor_, ReqClusterArrivedTar::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterArrivedTarAck_descriptor_, ClusterArrivedTarAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqEnterWorldWar_descriptor_, ReqEnterWorldWar::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterWorldWarAck_descriptor_, EnterWorldWarAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWorldWarStatus_descriptor_, ReqWorldWarStatus::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarSceneBlockState_descriptor_, WorldWarSceneBlockState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarSceneBuildingState_descriptor_, WorldWarSceneBuildingState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarSceneAgent_descriptor_, WorldWarSceneAgent::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarStatusAck_descriptor_, WorldWarStatusAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWorldWarMove_descriptor_, ReqWorldWarMove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarMoveAck_descriptor_, WorldWarMoveAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWorldWarDefence_descriptor_, ReqWorldWarDefence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarDefenceAck_descriptor_, WorldWarDefenceAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWorldWarDefenceTarget_descriptor_, ReqWorldWarDefenceTarget::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldWarDefenceTargetAck_descriptor_, WorldWarDefenceTargetAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqLeaveWorldWar_descriptor_, ReqLeaveWorldWar::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeaveWorldWarAck_descriptor_, LeaveWorldWarAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqTest_descriptor_, ReqTest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestAck_descriptor_, TestAck::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetMsg_2eproto() {
  MessageType_default_instance_.Shutdown();
  delete MessageType_reflection_;
  ReqLogin_default_instance_.Shutdown();
  delete ReqLogin_reflection_;
  PlayerData_default_instance_.Shutdown();
  delete PlayerData_reflection_;
  LoginAck_default_instance_.Shutdown();
  delete LoginAck_reflection_;
  VersionInfoAck_default_instance_.Shutdown();
  delete VersionInfoAck_reflection_;
  UserNamePassAck_default_instance_.Shutdown();
  delete UserNamePassAck_reflection_;
  ReqRegister_default_instance_.Shutdown();
  delete ReqRegister_reflection_;
  RegisterAck_default_instance_.Shutdown();
  delete RegisterAck_reflection_;
  ReqEnterGame_default_instance_.Shutdown();
  delete ReqEnterGame_reflection_;
  EnterGameAck_default_instance_.Shutdown();
  delete EnterGameAck_reflection_;
  ReqCreateUser_default_instance_.Shutdown();
  delete ReqCreateUser_reflection_;
  CreateUserAck_default_instance_.Shutdown();
  delete CreateUserAck_reflection_;
  ServerInfo_default_instance_.Shutdown();
  delete ServerInfo_reflection_;
  ServerListAck_default_instance_.Shutdown();
  delete ServerListAck_reflection_;
  ReqThirdPartyLogin_default_instance_.Shutdown();
  delete ReqThirdPartyLogin_reflection_;
  ReqOrderId_default_instance_.Shutdown();
  delete ReqOrderId_reflection_;
  OrderIdAck_default_instance_.Shutdown();
  delete OrderIdAck_reflection_;
  UpdatePlayerAck_default_instance_.Shutdown();
  delete UpdatePlayerAck_reflection_;
  ReqChat_default_instance_.Shutdown();
  delete ReqChat_reflection_;
  ChatAck_default_instance_.Shutdown();
  delete ChatAck_reflection_;
  UserNickAck_default_instance_.Shutdown();
  delete UserNickAck_reflection_;
  SkillInfo_default_instance_.Shutdown();
  delete SkillInfo_reflection_;
  HeroAttr_default_instance_.Shutdown();
  delete HeroAttr_reflection_;
  HeroInfo_default_instance_.Shutdown();
  delete HeroInfo_reflection_;
  HeroAck_default_instance_.Shutdown();
  delete HeroAck_reflection_;
  ItemInfo_default_instance_.Shutdown();
  delete ItemInfo_reflection_;
  ItemAck_default_instance_.Shutdown();
  delete ItemAck_reflection_;
  UpdateSkill_default_instance_.Shutdown();
  delete UpdateSkill_reflection_;
  SetNewGuide_default_instance_.Shutdown();
  delete SetNewGuide_reflection_;
  PathInfo_default_instance_.Shutdown();
  delete PathInfo_reflection_;
  RunPathAck_default_instance_.Shutdown();
  delete RunPathAck_reflection_;
  SetRunPath_default_instance_.Shutdown();
  delete SetRunPath_reflection_;
  ArrivedCity_default_instance_.Shutdown();
  delete ArrivedCity_reflection_;
  Formation_default_instance_.Shutdown();
  delete Formation_reflection_;
  HeroFormationAck_default_instance_.Shutdown();
  delete HeroFormationAck_reflection_;
  SetHeroFormation_default_instance_.Shutdown();
  delete SetHeroFormation_reflection_;
  ReqCityInfo_default_instance_.Shutdown();
  delete ReqCityInfo_reflection_;
  CityItemInfo_default_instance_.Shutdown();
  delete CityItemInfo_reflection_;
  CityHeroInfo_default_instance_.Shutdown();
  delete CityHeroInfo_reflection_;
  CityInfoAck_default_instance_.Shutdown();
  delete CityInfoAck_reflection_;
  AwardItem_default_instance_.Shutdown();
  delete AwardItem_reflection_;
  Award_default_instance_.Shutdown();
  delete Award_reflection_;
  QuestConsAgriculture_default_instance_.Shutdown();
  delete QuestConsAgriculture_reflection_;
  QuestConsBusiness_default_instance_.Shutdown();
  delete QuestConsBusiness_reflection_;
  QuestConsMilitary_default_instance_.Shutdown();
  delete QuestConsMilitary_reflection_;
  QuestBattle_default_instance_.Shutdown();
  delete QuestBattle_reflection_;
  QuestVisit_default_instance_.Shutdown();
  delete QuestVisit_reflection_;
  QuestConscription_default_instance_.Shutdown();
  delete QuestConscription_reflection_;
  QuestDiscovery_default_instance_.Shutdown();
  delete QuestDiscovery_reflection_;
  QuestListAck_default_instance_.Shutdown();
  delete QuestListAck_reflection_;
  QuestData_default_instance_.Shutdown();
  delete QuestData_default_oneof_instance_;
  delete QuestData_reflection_;
  ReqQuestInfo_default_instance_.Shutdown();
  delete ReqQuestInfo_reflection_;
  QuestInfoAck_default_instance_.Shutdown();
  delete QuestInfoAck_reflection_;
  GiveAward_default_instance_.Shutdown();
  delete GiveAward_reflection_;
  ReqDoQuest_default_instance_.Shutdown();
  delete ReqDoQuest_reflection_;
  DoQuestAward_default_instance_.Shutdown();
  delete DoQuestAward_reflection_;
  DoQuestAck_default_instance_.Shutdown();
  delete DoQuestAck_reflection_;
  ReqSubmitQuest_default_instance_.Shutdown();
  delete ReqSubmitQuest_reflection_;
  SubmitQuestAck_default_instance_.Shutdown();
  delete SubmitQuestAck_reflection_;
  ReqAcceptQuest_default_instance_.Shutdown();
  delete ReqAcceptQuest_reflection_;
  AcceptQuestAck_default_instance_.Shutdown();
  delete AcceptQuestAck_reflection_;
  ReqAddHero_default_instance_.Shutdown();
  delete ReqAddHero_reflection_;
  AddHeroAck_default_instance_.Shutdown();
  delete AddHeroAck_reflection_;
  ReqClearHeroCD_default_instance_.Shutdown();
  delete ReqClearHeroCD_reflection_;
  ClearHeroCDAck_default_instance_.Shutdown();
  delete ClearHeroCDAck_reflection_;
  RefreshQuestAck_default_instance_.Shutdown();
  delete RefreshQuestAck_reflection_;
  BattleEnemy_default_instance_.Shutdown();
  delete BattleEnemy_reflection_;
  ReqBattle_default_instance_.Shutdown();
  delete ReqBattle_reflection_;
  BattleAck_default_instance_.Shutdown();
  delete BattleAck_reflection_;
  ReqPrepareBattle_default_instance_.Shutdown();
  delete ReqPrepareBattle_reflection_;
  PrepareBattleAck_default_instance_.Shutdown();
  delete PrepareBattleAck_reflection_;
  RecoverBattle_default_instance_.Shutdown();
  delete RecoverBattle_reflection_;
  ReqBattleEnd_default_instance_.Shutdown();
  delete ReqBattleEnd_reflection_;
  BattleEndAck_default_instance_.Shutdown();
  delete BattleEndAck_reflection_;
  ReqHeroUseItem_default_instance_.Shutdown();
  delete ReqHeroUseItem_reflection_;
  HeroUserItemAck_default_instance_.Shutdown();
  delete HeroUserItemAck_reflection_;
  ReqUseItem_default_instance_.Shutdown();
  delete ReqUseItem_reflection_;
  UseItemAck_default_instance_.Shutdown();
  delete UseItemAck_reflection_;
  ReqAddItem_default_instance_.Shutdown();
  delete ReqAddItem_reflection_;
  AddItemAck_default_instance_.Shutdown();
  delete AddItemAck_reflection_;
  AdvantureContinuousBattle_default_instance_.Shutdown();
  delete AdvantureContinuousBattle_reflection_;
  AdvantureEvent_default_instance_.Shutdown();
  delete AdvantureEvent_reflection_;
  AdvantureInfoAck_default_instance_.Shutdown();
  delete AdvantureInfoAck_reflection_;
  AdvantureAck_default_instance_.Shutdown();
  delete AdvantureAck_reflection_;
  ReqAdvantureEventDone_default_instance_.Shutdown();
  delete ReqAdvantureEventDone_reflection_;
  AdvantureEventDoneAck_default_instance_.Shutdown();
  delete AdvantureEventDoneAck_reflection_;
  HeroFriendship_default_instance_.Shutdown();
  delete HeroFriendship_reflection_;
  HeroFriendshipAck_default_instance_.Shutdown();
  delete HeroFriendshipAck_reflection_;
  HeroGeneralSoul_default_instance_.Shutdown();
  delete HeroGeneralSoul_reflection_;
  HeroGeneralSoulAck_default_instance_.Shutdown();
  delete HeroGeneralSoulAck_reflection_;
  UserLearnVsCDInfo_default_instance_.Shutdown();
  delete UserLearnVsCDInfo_reflection_;
  UserLearnVsCDAck_default_instance_.Shutdown();
  delete UserLearnVsCDAck_reflection_;
  ReqGiveHeroGift_default_instance_.Shutdown();
  delete ReqGiveHeroGift_reflection_;
  GiveHeroGiftAck_default_instance_.Shutdown();
  delete GiveHeroGiftAck_reflection_;
  ReqGeneralSoulExchangeHero_default_instance_.Shutdown();
  delete ReqGeneralSoulExchangeHero_reflection_;
  GeneralSoulExchangeHeroAck_default_instance_.Shutdown();
  delete GeneralSoulExchangeHeroAck_reflection_;
  ReqShopItem_default_instance_.Shutdown();
  delete ReqShopItem_reflection_;
  ShopItem_default_instance_.Shutdown();
  delete ShopItem_reflection_;
  ShopItemAck_default_instance_.Shutdown();
  delete ShopItemAck_reflection_;
  ReqBuyShop_default_instance_.Shutdown();
  delete ReqBuyShop_reflection_;
  BuyShopAck_default_instance_.Shutdown();
  delete BuyShopAck_reflection_;
  ReqRefreshShop_default_instance_.Shutdown();
  delete ReqRefreshShop_reflection_;
  RefreshShopAck_default_instance_.Shutdown();
  delete RefreshShopAck_reflection_;
  ReqEvolveHero_default_instance_.Shutdown();
  delete ReqEvolveHero_reflection_;
  EvolveHeroAck_default_instance_.Shutdown();
  delete EvolveHeroAck_reflection_;
  ReqAdvancementRank_default_instance_.Shutdown();
  delete ReqAdvancementRank_reflection_;
  AdvancementRankAck_default_instance_.Shutdown();
  delete AdvancementRankAck_reflection_;
  ReqRankTitle_default_instance_.Shutdown();
  delete ReqRankTitle_reflection_;
  RankTitlePlayer_default_instance_.Shutdown();
  delete RankTitlePlayer_reflection_;
  RankTitleAck_default_instance_.Shutdown();
  delete RankTitleAck_reflection_;
  ReqTitleInfo_default_instance_.Shutdown();
  delete ReqTitleInfo_reflection_;
  TitleInfoPlayer_default_instance_.Shutdown();
  delete TitleInfoPlayer_reflection_;
  TitleInfoAck_default_instance_.Shutdown();
  delete TitleInfoAck_reflection_;
  ReqElectionTitle_default_instance_.Shutdown();
  delete ReqElectionTitle_reflection_;
  ElectionTitleAck_default_instance_.Shutdown();
  delete ElectionTitleAck_reflection_;
  HeroClassSkill_default_instance_.Shutdown();
  delete HeroClassSkill_reflection_;
  HeroClassInfo_default_instance_.Shutdown();
  delete HeroClassInfo_reflection_;
  ReqHeroClass_default_instance_.Shutdown();
  delete ReqHeroClass_reflection_;
  HeroClassAck_default_instance_.Shutdown();
  delete HeroClassAck_reflection_;
  ReqStudySkill_default_instance_.Shutdown();
  delete ReqStudySkill_reflection_;
  StudySkillAck_default_instance_.Shutdown();
  delete StudySkillAck_reflection_;
  ReqStudyProperty_default_instance_.Shutdown();
  delete ReqStudyProperty_reflection_;
  StudyPropertyAck_default_instance_.Shutdown();
  delete StudyPropertyAck_reflection_;
  ReqRaffleHero_default_instance_.Shutdown();
  delete ReqRaffleHero_reflection_;
  RaffleHeroAck_default_instance_.Shutdown();
  delete RaffleHeroAck_reflection_;
  ReqRaffleHeroTimes_default_instance_.Shutdown();
  delete ReqRaffleHeroTimes_reflection_;
  RaffleHeroTimesAck_default_instance_.Shutdown();
  delete RaffleHeroTimesAck_reflection_;
  ReqAddMoney_default_instance_.Shutdown();
  delete ReqAddMoney_reflection_;
  AddMoneyAck_default_instance_.Shutdown();
  delete AddMoneyAck_reflection_;
  ReqLevelUpCamp_default_instance_.Shutdown();
  delete ReqLevelUpCamp_reflection_;
  LevelUpCampAck_default_instance_.Shutdown();
  delete LevelUpCampAck_reflection_;
  ReqClearCampCD_default_instance_.Shutdown();
  delete ReqClearCampCD_reflection_;
  ClearCampCDAck_default_instance_.Shutdown();
  delete ClearCampCDAck_reflection_;
  ReqCampState_default_instance_.Shutdown();
  delete ReqCampState_reflection_;
  CampState_default_instance_.Shutdown();
  delete CampState_reflection_;
  CampStateAck_default_instance_.Shutdown();
  delete CampStateAck_reflection_;
  ReqGetCampOut_default_instance_.Shutdown();
  delete ReqGetCampOut_reflection_;
  GetCampOutAck_default_instance_.Shutdown();
  delete GetCampOutAck_reflection_;
  CycleBattleAck_default_instance_.Shutdown();
  delete CycleBattleAck_reflection_;
  RefresshCycleAck_default_instance_.Shutdown();
  delete RefresshCycleAck_reflection_;
  ReqSelectCycleDiff_default_instance_.Shutdown();
  delete ReqSelectCycleDiff_reflection_;
  SelectCycleDiffAck_default_instance_.Shutdown();
  delete SelectCycleDiffAck_reflection_;
  CycleBattleInfoAck_default_instance_.Shutdown();
  delete CycleBattleInfoAck_reflection_;
  AdvantureEventStatusChange_default_instance_.Shutdown();
  delete AdvantureEventStatusChange_reflection_;
  ReqRecruitHero_default_instance_.Shutdown();
  delete ReqRecruitHero_reflection_;
  RecruitHeroAck_default_instance_.Shutdown();
  delete RecruitHeroAck_reflection_;
  ReqRecruitedHero_default_instance_.Shutdown();
  delete ReqRecruitedHero_reflection_;
  RecruitedHeroAck_default_instance_.Shutdown();
  delete RecruitedHeroAck_reflection_;
  ReqVSBattleBegin_default_instance_.Shutdown();
  delete ReqVSBattleBegin_reflection_;
  VSBattleEnemy_default_instance_.Shutdown();
  delete VSBattleEnemy_reflection_;
  VSBattleBeginAck_default_instance_.Shutdown();
  delete VSBattleBeginAck_reflection_;
  ReqVSBattleReady_default_instance_.Shutdown();
  delete ReqVSBattleReady_reflection_;
  VSBattleReadyAck_default_instance_.Shutdown();
  delete VSBattleReadyAck_reflection_;
  ReqVSBattleOpt_default_instance_.Shutdown();
  delete ReqVSBattleOpt_reflection_;
  VSBattleOptAck_default_instance_.Shutdown();
  delete VSBattleOptAck_reflection_;
  VSBattleUnitState_default_instance_.Shutdown();
  delete VSBattleUnitState_reflection_;
  VSBattleTurn_default_instance_.Shutdown();
  delete VSBattleTurn_reflection_;
  VSBattleEnd_default_instance_.Shutdown();
  delete VSBattleEnd_reflection_;
  ReqBioHeroInfo_default_instance_.Shutdown();
  delete ReqBioHeroInfo_reflection_;
  BioHeroStepData_default_instance_.Shutdown();
  delete BioHeroStepData_reflection_;
  BioHeroInfoAck_default_instance_.Shutdown();
  delete BioHeroInfoAck_reflection_;
  ReqBioHeroStepDone_default_instance_.Shutdown();
  delete ReqBioHeroStepDone_reflection_;
  BioHeroStepDoneAck_default_instance_.Shutdown();
  delete BioHeroStepDoneAck_reflection_;
  ReqAddFriend_default_instance_.Shutdown();
  delete ReqAddFriend_reflection_;
  ReqRemoveFriend_default_instance_.Shutdown();
  delete ReqRemoveFriend_reflection_;
  RemoveFriendAck_default_instance_.Shutdown();
  delete RemoveFriendAck_reflection_;
  ReqTopList_default_instance_.Shutdown();
  delete ReqTopList_reflection_;
  TopListAck_default_instance_.Shutdown();
  delete TopListAck_reflection_;
  TopListData_default_instance_.Shutdown();
  delete TopListData_default_oneof_instance_;
  delete TopListData_reflection_;
  SortReputationData_default_instance_.Shutdown();
  delete SortReputationData_reflection_;
  SortMilitaryData_default_instance_.Shutdown();
  delete SortMilitaryData_reflection_;
  SortLevelData_default_instance_.Shutdown();
  delete SortLevelData_reflection_;
  FriendInfo_default_instance_.Shutdown();
  delete FriendInfo_reflection_;
  FriendsInfoAck_default_instance_.Shutdown();
  delete FriendsInfoAck_reflection_;
  MailSender_default_instance_.Shutdown();
  delete MailSender_reflection_;
  MailData_default_instance_.Shutdown();
  delete MailData_reflection_;
  MailInfoAck_default_instance_.Shutdown();
  delete MailInfoAck_reflection_;
  ReqMailDetail_default_instance_.Shutdown();
  delete ReqMailDetail_reflection_;
  MailDetailAck_default_instance_.Shutdown();
  delete MailDetailAck_reflection_;
  ReqGetMailAward_default_instance_.Shutdown();
  delete ReqGetMailAward_reflection_;
  GetMailAwardAck_default_instance_.Shutdown();
  delete GetMailAwardAck_reflection_;
  ReqDeleteMail_default_instance_.Shutdown();
  delete ReqDeleteMail_reflection_;
  DeleteMailAck_default_instance_.Shutdown();
  delete DeleteMailAck_reflection_;
  BanquetHeros_default_instance_.Shutdown();
  delete BanquetHeros_reflection_;
  BanquetInfoAck_default_instance_.Shutdown();
  delete BanquetInfoAck_reflection_;
  ReqBanquetHero_default_instance_.Shutdown();
  delete ReqBanquetHero_reflection_;
  BanquetHeroAck_default_instance_.Shutdown();
  delete BanquetHeroAck_reflection_;
  WorldWarInfo_default_instance_.Shutdown();
  delete WorldWarInfo_reflection_;
  WorldWarAck_default_instance_.Shutdown();
  delete WorldWarAck_reflection_;
  ReqWorldBattle_default_instance_.Shutdown();
  delete ReqWorldBattle_reflection_;
  WorldBattleAck_default_instance_.Shutdown();
  delete WorldBattleAck_reflection_;
  ReqWorldWarTopList_default_instance_.Shutdown();
  delete ReqWorldWarTopList_reflection_;
  WorldWarUserInfo_default_instance_.Shutdown();
  delete WorldWarUserInfo_reflection_;
  WorldWarTopListAck_default_instance_.Shutdown();
  delete WorldWarTopListAck_reflection_;
  TeamInfo_default_instance_.Shutdown();
  delete TeamInfo_reflection_;
  TeamInfoAck_default_instance_.Shutdown();
  delete TeamInfoAck_reflection_;
  ReqSetTeam_default_instance_.Shutdown();
  delete ReqSetTeam_reflection_;
  SetTeamAck_default_instance_.Shutdown();
  delete SetTeamAck_reflection_;
  ReqWriteSkillBook_default_instance_.Shutdown();
  delete ReqWriteSkillBook_reflection_;
  WriteSkillBookAck_default_instance_.Shutdown();
  delete WriteSkillBookAck_reflection_;
  ReqTeamRunPath_default_instance_.Shutdown();
  delete ReqTeamRunPath_reflection_;
  TeamRunPathAck_default_instance_.Shutdown();
  delete TeamRunPathAck_reflection_;
  SetTeamRunPath_default_instance_.Shutdown();
  delete SetTeamRunPath_reflection_;
  ReqTeamArrivedTar_default_instance_.Shutdown();
  delete ReqTeamArrivedTar_reflection_;
  TeamArrivedTarAck_default_instance_.Shutdown();
  delete TeamArrivedTarAck_reflection_;
  ClusterMemberInfo_default_instance_.Shutdown();
  delete ClusterMemberInfo_reflection_;
  ClusterCreater_default_instance_.Shutdown();
  delete ClusterCreater_reflection_;
  ClusterInfo_default_instance_.Shutdown();
  delete ClusterInfo_reflection_;
  ReqClusterDetailInfo_default_instance_.Shutdown();
  delete ReqClusterDetailInfo_reflection_;
  TeamMemberDetail_default_instance_.Shutdown();
  delete TeamMemberDetail_reflection_;
  ClusterMemberDetail_default_instance_.Shutdown();
  delete ClusterMemberDetail_reflection_;
  ReqSetClusterAttr_default_instance_.Shutdown();
  delete ReqSetClusterAttr_reflection_;
  SetClusterAttrAck_default_instance_.Shutdown();
  delete SetClusterAttrAck_reflection_;
  ClusterDetailInfoAck_default_instance_.Shutdown();
  delete ClusterDetailInfoAck_reflection_;
  ClusterInfoAck_default_instance_.Shutdown();
  delete ClusterInfoAck_reflection_;
  AllClusterAck_default_instance_.Shutdown();
  delete AllClusterAck_reflection_;
  CreateClusterAck_default_instance_.Shutdown();
  delete CreateClusterAck_reflection_;
  ReqJoinCluster_default_instance_.Shutdown();
  delete ReqJoinCluster_reflection_;
  JoinClusterAck_default_instance_.Shutdown();
  delete JoinClusterAck_reflection_;
  ReqExitCluster_default_instance_.Shutdown();
  delete ReqExitCluster_reflection_;
  ExitClusterAck_default_instance_.Shutdown();
  delete ExitClusterAck_reflection_;
  ReqCityItem_default_instance_.Shutdown();
  delete ReqCityItem_reflection_;
  CityItemAck_default_instance_.Shutdown();
  delete CityItemAck_reflection_;
  ReqCityHero_default_instance_.Shutdown();
  delete ReqCityHero_reflection_;
  CityHeroAck_default_instance_.Shutdown();
  delete CityHeroAck_reflection_;
  ResourceInfo_default_instance_.Shutdown();
  delete ResourceInfo_reflection_;
  ResourceInfoAck_default_instance_.Shutdown();
  delete ResourceInfoAck_reflection_;
  ReqResourceDetailInfo_default_instance_.Shutdown();
  delete ReqResourceDetailInfo_reflection_;
  ResourceDetailInfo_default_instance_.Shutdown();
  delete ResourceDetailInfo_reflection_;
  ResourceDetailInfoAck_default_instance_.Shutdown();
  delete ResourceDetailInfoAck_reflection_;
  RegInviteJoinCluster_default_instance_.Shutdown();
  delete RegInviteJoinCluster_reflection_;
  InviteJoinClusterAck_default_instance_.Shutdown();
  delete InviteJoinClusterAck_reflection_;
  UserInviteJoinCluster_default_instance_.Shutdown();
  delete UserInviteJoinCluster_reflection_;
  ClusterRunPathAck_default_instance_.Shutdown();
  delete ClusterRunPathAck_reflection_;
  SetClusterRunPath_default_instance_.Shutdown();
  delete SetClusterRunPath_reflection_;
  ReqClusterArrivedTar_default_instance_.Shutdown();
  delete ReqClusterArrivedTar_reflection_;
  ClusterArrivedTarAck_default_instance_.Shutdown();
  delete ClusterArrivedTarAck_reflection_;
  ReqEnterWorldWar_default_instance_.Shutdown();
  delete ReqEnterWorldWar_reflection_;
  EnterWorldWarAck_default_instance_.Shutdown();
  delete EnterWorldWarAck_reflection_;
  ReqWorldWarStatus_default_instance_.Shutdown();
  delete ReqWorldWarStatus_reflection_;
  WorldWarSceneBlockState_default_instance_.Shutdown();
  delete WorldWarSceneBlockState_reflection_;
  WorldWarSceneBuildingState_default_instance_.Shutdown();
  delete WorldWarSceneBuildingState_reflection_;
  WorldWarSceneAgent_default_instance_.Shutdown();
  delete WorldWarSceneAgent_reflection_;
  WorldWarStatusAck_default_instance_.Shutdown();
  delete WorldWarStatusAck_reflection_;
  ReqWorldWarMove_default_instance_.Shutdown();
  delete ReqWorldWarMove_reflection_;
  WorldWarMoveAck_default_instance_.Shutdown();
  delete WorldWarMoveAck_reflection_;
  ReqWorldWarDefence_default_instance_.Shutdown();
  delete ReqWorldWarDefence_reflection_;
  WorldWarDefenceAck_default_instance_.Shutdown();
  delete WorldWarDefenceAck_reflection_;
  ReqWorldWarDefenceTarget_default_instance_.Shutdown();
  delete ReqWorldWarDefenceTarget_reflection_;
  WorldWarDefenceTargetAck_default_instance_.Shutdown();
  delete WorldWarDefenceTargetAck_reflection_;
  ReqLeaveWorldWar_default_instance_.Shutdown();
  delete ReqLeaveWorldWar_reflection_;
  LeaveWorldWarAck_default_instance_.Shutdown();
  delete LeaveWorldWarAck_reflection_;
  ReqTest_default_instance_.Shutdown();
  delete ReqTest_reflection_;
  TestAck_default_instance_.Shutdown();
  delete TestAck_reflection_;
}

void protobuf_InitDefaults_NetMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  MessageType_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReqLogin_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PlayerData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoginAck_default_instance_.DefaultConstruct();
  VersionInfoAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserNamePassAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReqRegister_default_instance_.DefaultConstruct();
  RegisterAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReqEnterGame_default_instance_.DefaultConstruct();
  EnterGameAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReqCreateUser_default_instance_.DefaultConstruct();
  CreateUserAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServerInfo_default_instance_.DefaultConstruct();
  ServerListAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReqThirdPartyLogin_default_instance_.DefaultConstruct();
  ReqOrderId_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OrderIdAck_default_instance_.DefaultConstruct();
  UpdatePlayerAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReqChat_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ChatAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserNickAck_default_instance_.DefaultConstruct();
  SkillInfo_default_instance_.DefaultConstruct();
  HeroAttr_default_instance_.DefaultConstruct();
  HeroInfo_default_instance_.DefaultConstruct();
  HeroAck_default_instance_.DefaultConstruct();
  ItemInfo_default_instance_.DefaultConstruct();
  ItemAck_default_instance_.DefaultConstruct();
  UpdateSkill_default_instance_.DefaultConstruct();
  SetNewGuide_default_instance_.DefaultConstruct();
  PathInfo_default_instance_.DefaultConstruct();
  RunPathAck_default_instance_.DefaultConstruct();
  SetRunPath_default_instance_.DefaultConstruct();
  ArrivedCity_default_instance_.DefaultConstruct();
  Formation_default_instance_.DefaultConstruct();
  HeroFormationAck_default_instance_.DefaultConstruct();
  SetHeroFormation_default_instance_.DefaultConstruct();
  ReqCityInfo_default_instance_.DefaultConstruct();
  CityItemInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CityHeroInfo_default_instance_.DefaultConstruct();
  CityInfoAck_default_instance_.DefaultConstruct();
  AwardItem_default_instance_.DefaultConstruct();
  Award_default_instance_.DefaultConstruct();
  QuestConsAgriculture_default_instance_.DefaultConstruct();
  QuestConsBusiness_default_instance_.DefaultConstruct();
  QuestConsMilitary_default_instance_.DefaultConstruct();
  QuestBattle_default_instance_.DefaultConstruct();
  QuestVisit_default_instance_.DefaultConstruct();
  QuestConscription_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QuestDiscovery_default_instance_.DefaultConstruct();
  QuestListAck_default_instance_.DefaultConstruct();
  QuestData_default_instance_.DefaultConstruct();
  QuestData_default_oneof_instance_ = new QuestDataOneofInstance();
  ReqQuestInfo_default_instance_.DefaultConstruct();
  QuestInfoAck_default_instance_.DefaultConstruct();
  GiveAward_default_instance_.DefaultConstruct();
  ReqDoQuest_default_instance_.DefaultConstruct();
  DoQuestAward_default_instance_.DefaultConstruct();
  DoQuestAck_default_instance_.DefaultConstruct();
  ReqSubmitQuest_default_instance_.DefaultConstruct();
  SubmitQuestAck_default_instance_.DefaultConstruct();
  ReqAcceptQuest_default_instance_.DefaultConstruct();
  AcceptQuestAck_default_instance_.DefaultConstruct();
  ReqAddHero_default_instance_.DefaultConstruct();
  AddHeroAck_default_instance_.DefaultConstruct();
  ReqClearHeroCD_default_instance_.DefaultConstruct();
  ClearHeroCDAck_default_instance_.DefaultConstruct();
  RefreshQuestAck_default_instance_.DefaultConstruct();
  BattleEnemy_default_instance_.DefaultConstruct();
  ReqBattle_default_instance_.DefaultConstruct();
  BattleAck_default_instance_.DefaultConstruct();
  ReqPrepareBattle_default_instance_.DefaultConstruct();
  PrepareBattleAck_default_instance_.DefaultConstruct();
  RecoverBattle_default_instance_.DefaultConstruct();
  ReqBattleEnd_default_instance_.DefaultConstruct();
  BattleEndAck_default_instance_.DefaultConstruct();
  ReqHeroUseItem_default_instance_.DefaultConstruct();
  HeroUserItemAck_default_instance_.DefaultConstruct();
  ReqUseItem_default_instance_.DefaultConstruct();
  UseItemAck_default_instance_.DefaultConstruct();
  ReqAddItem_default_instance_.DefaultConstruct();
  AddItemAck_default_instance_.DefaultConstruct();
  AdvantureContinuousBattle_default_instance_.DefaultConstruct();
  AdvantureEvent_default_instance_.DefaultConstruct();
  AdvantureInfoAck_default_instance_.DefaultConstruct();
  AdvantureAck_default_instance_.DefaultConstruct();
  ReqAdvantureEventDone_default_instance_.DefaultConstruct();
  AdvantureEventDoneAck_default_instance_.DefaultConstruct();
  HeroFriendship_default_instance_.DefaultConstruct();
  HeroFriendshipAck_default_instance_.DefaultConstruct();
  HeroGeneralSoul_default_instance_.DefaultConstruct();
  HeroGeneralSoulAck_default_instance_.DefaultConstruct();
  UserLearnVsCDInfo_default_instance_.DefaultConstruct();
  UserLearnVsCDAck_default_instance_.DefaultConstruct();
  ReqGiveHeroGift_default_instance_.DefaultConstruct();
  GiveHeroGiftAck_default_instance_.DefaultConstruct();
  ReqGeneralSoulExchangeHero_default_instance_.DefaultConstruct();
  GeneralSoulExchangeHeroAck_default_instance_.DefaultConstruct();
  ReqShopItem_default_instance_.DefaultConstruct();
  ShopItem_default_instance_.DefaultConstruct();
  ShopItemAck_default_instance_.DefaultConstruct();
  ReqBuyShop_default_instance_.DefaultConstruct();
  BuyShopAck_default_instance_.DefaultConstruct();
  ReqRefreshShop_default_instance_.DefaultConstruct();
  RefreshShopAck_default_instance_.DefaultConstruct();
  ReqEvolveHero_default_instance_.DefaultConstruct();
  EvolveHeroAck_default_instance_.DefaultConstruct();
  ReqAdvancementRank_default_instance_.DefaultConstruct();
  AdvancementRankAck_default_instance_.DefaultConstruct();
  ReqRankTitle_default_instance_.DefaultConstruct();
  RankTitlePlayer_default_instance_.DefaultConstruct();
  RankTitleAck_default_instance_.DefaultConstruct();
  ReqTitleInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TitleInfoPlayer_default_instance_.DefaultConstruct();
  TitleInfoAck_default_instance_.DefaultConstruct();
  ReqElectionTitle_default_instance_.DefaultConstruct();
  ElectionTitleAck_default_instance_.DefaultConstruct();
  HeroClassSkill_default_instance_.DefaultConstruct();
  HeroClassInfo_default_instance_.DefaultConstruct();
  ReqHeroClass_default_instance_.DefaultConstruct();
  HeroClassAck_default_instance_.DefaultConstruct();
  ReqStudySkill_default_instance_.DefaultConstruct();
  StudySkillAck_default_instance_.DefaultConstruct();
  ReqStudyProperty_default_instance_.DefaultConstruct();
  StudyPropertyAck_default_instance_.DefaultConstruct();
  ReqRaffleHero_default_instance_.DefaultConstruct();
  RaffleHeroAck_default_instance_.DefaultConstruct();
  ReqRaffleHeroTimes_default_instance_.DefaultConstruct();
  RaffleHeroTimesAck_default_instance_.DefaultConstruct();
  ReqAddMoney_default_instance_.DefaultConstruct();
  AddMoneyAck_default_instance_.DefaultConstruct();
  ReqLevelUpCamp_default_instance_.DefaultConstruct();
  LevelUpCampAck_default_instance_.DefaultConstruct();
  ReqClearCampCD_default_instance_.DefaultConstruct();
  ClearCampCDAck_default_instance_.DefaultConstruct();
  ReqCampState_default_instance_.DefaultConstruct();
  CampState_default_instance_.DefaultConstruct();
  CampStateAck_default_instance_.DefaultConstruct();
  ReqGetCampOut_default_instance_.DefaultConstruct();
  GetCampOutAck_default_instance_.DefaultConstruct();
  CycleBattleAck_default_instance_.DefaultConstruct();
  RefresshCycleAck_default_instance_.DefaultConstruct();
  ReqSelectCycleDiff_default_instance_.DefaultConstruct();
  SelectCycleDiffAck_default_instance_.DefaultConstruct();
  CycleBattleInfoAck_default_instance_.DefaultConstruct();
  AdvantureEventStatusChange_default_instance_.DefaultConstruct();
  ReqRecruitHero_default_instance_.DefaultConstruct();
  RecruitHeroAck_default_instance_.DefaultConstruct();
  ReqRecruitedHero_default_instance_.DefaultConstruct();
  RecruitedHeroAck_default_instance_.DefaultConstruct();
  ReqVSBattleBegin_default_instance_.DefaultConstruct();
  VSBattleEnemy_default_instance_.DefaultConstruct();
  VSBattleBeginAck_default_instance_.DefaultConstruct();
  ReqVSBattleReady_default_instance_.DefaultConstruct();
  VSBattleReadyAck_default_instance_.DefaultConstruct();
  ReqVSBattleOpt_default_instance_.DefaultConstruct();
  VSBattleOptAck_default_instance_.DefaultConstruct();
  VSBattleUnitState_default_instance_.DefaultConstruct();
  VSBattleTurn_default_instance_.DefaultConstruct();
  VSBattleEnd_default_instance_.DefaultConstruct();
  ReqBioHeroInfo_default_instance_.DefaultConstruct();
  BioHeroStepData_default_instance_.DefaultConstruct();
  BioHeroInfoAck_default_instance_.DefaultConstruct();
  ReqBioHeroStepDone_default_instance_.DefaultConstruct();
  BioHeroStepDoneAck_default_instance_.DefaultConstruct();
  ReqAddFriend_default_instance_.DefaultConstruct();
  ReqRemoveFriend_default_instance_.DefaultConstruct();
  RemoveFriendAck_default_instance_.DefaultConstruct();
  ReqTopList_default_instance_.DefaultConstruct();
  TopListAck_default_instance_.DefaultConstruct();
  TopListData_default_instance_.DefaultConstruct();
  TopListData_default_oneof_instance_ = new TopListDataOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  SortReputationData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SortMilitaryData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SortLevelData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FriendInfo_default_instance_.DefaultConstruct();
  FriendsInfoAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MailSender_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MailData_default_instance_.DefaultConstruct();
  MailInfoAck_default_instance_.DefaultConstruct();
  ReqMailDetail_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MailDetailAck_default_instance_.DefaultConstruct();
  ReqGetMailAward_default_instance_.DefaultConstruct();
  GetMailAwardAck_default_instance_.DefaultConstruct();
  ReqDeleteMail_default_instance_.DefaultConstruct();
  DeleteMailAck_default_instance_.DefaultConstruct();
  BanquetHeros_default_instance_.DefaultConstruct();
  BanquetInfoAck_default_instance_.DefaultConstruct();
  ReqBanquetHero_default_instance_.DefaultConstruct();
  BanquetHeroAck_default_instance_.DefaultConstruct();
  WorldWarInfo_default_instance_.DefaultConstruct();
  WorldWarAck_default_instance_.DefaultConstruct();
  ReqWorldBattle_default_instance_.DefaultConstruct();
  WorldBattleAck_default_instance_.DefaultConstruct();
  ReqWorldWarTopList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WorldWarUserInfo_default_instance_.DefaultConstruct();
  WorldWarTopListAck_default_instance_.DefaultConstruct();
  TeamInfo_default_instance_.DefaultConstruct();
  TeamInfoAck_default_instance_.DefaultConstruct();
  ReqSetTeam_default_instance_.DefaultConstruct();
  SetTeamAck_default_instance_.DefaultConstruct();
  ReqWriteSkillBook_default_instance_.DefaultConstruct();
  WriteSkillBookAck_default_instance_.DefaultConstruct();
  ReqTeamRunPath_default_instance_.DefaultConstruct();
  TeamRunPathAck_default_instance_.DefaultConstruct();
  SetTeamRunPath_default_instance_.DefaultConstruct();
  ReqTeamArrivedTar_default_instance_.DefaultConstruct();
  TeamArrivedTarAck_default_instance_.DefaultConstruct();
  ClusterMemberInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ClusterCreater_default_instance_.DefaultConstruct();
  ClusterInfo_default_instance_.DefaultConstruct();
  ReqClusterDetailInfo_default_instance_.DefaultConstruct();
  TeamMemberDetail_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ClusterMemberDetail_default_instance_.DefaultConstruct();
  ReqSetClusterAttr_default_instance_.DefaultConstruct();
  SetClusterAttrAck_default_instance_.DefaultConstruct();
  ClusterDetailInfoAck_default_instance_.DefaultConstruct();
  ClusterInfoAck_default_instance_.DefaultConstruct();
  AllClusterAck_default_instance_.DefaultConstruct();
  CreateClusterAck_default_instance_.DefaultConstruct();
  ReqJoinCluster_default_instance_.DefaultConstruct();
  JoinClusterAck_default_instance_.DefaultConstruct();
  ReqExitCluster_default_instance_.DefaultConstruct();
  ExitClusterAck_default_instance_.DefaultConstruct();
  ReqCityItem_default_instance_.DefaultConstruct();
  CityItemAck_default_instance_.DefaultConstruct();
  ReqCityHero_default_instance_.DefaultConstruct();
  CityHeroAck_default_instance_.DefaultConstruct();
  ResourceInfo_default_instance_.DefaultConstruct();
  ResourceInfoAck_default_instance_.DefaultConstruct();
  ReqResourceDetailInfo_default_instance_.DefaultConstruct();
  ResourceDetailInfo_default_instance_.DefaultConstruct();
  ResourceDetailInfoAck_default_instance_.DefaultConstruct();
  RegInviteJoinCluster_default_instance_.DefaultConstruct();
  InviteJoinClusterAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserInviteJoinCluster_default_instance_.DefaultConstruct();
  ClusterRunPathAck_default_instance_.DefaultConstruct();
  SetClusterRunPath_default_instance_.DefaultConstruct();
  ReqClusterArrivedTar_default_instance_.DefaultConstruct();
  ClusterArrivedTarAck_default_instance_.DefaultConstruct();
  ReqEnterWorldWar_default_instance_.DefaultConstruct();
  EnterWorldWarAck_default_instance_.DefaultConstruct();
  ReqWorldWarStatus_default_instance_.DefaultConstruct();
  WorldWarSceneBlockState_default_instance_.DefaultConstruct();
  WorldWarSceneBuildingState_default_instance_.DefaultConstruct();
  WorldWarSceneAgent_default_instance_.DefaultConstruct();
  WorldWarStatusAck_default_instance_.DefaultConstruct();
  ReqWorldWarMove_default_instance_.DefaultConstruct();
  WorldWarMoveAck_default_instance_.DefaultConstruct();
  ReqWorldWarDefence_default_instance_.DefaultConstruct();
  WorldWarDefenceAck_default_instance_.DefaultConstruct();
  ReqWorldWarDefenceTarget_default_instance_.DefaultConstruct();
  WorldWarDefenceTargetAck_default_instance_.DefaultConstruct();
  ReqLeaveWorldWar_default_instance_.DefaultConstruct();
  LeaveWorldWarAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReqTest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TestAck_default_instance_.DefaultConstruct();
  MessageType_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqLogin_default_instance_.get_mutable()->InitAsDefaultInstance();
  PlayerData_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  VersionInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserNamePassAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRegister_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegisterAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqEnterGame_default_instance_.get_mutable()->InitAsDefaultInstance();
  EnterGameAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqCreateUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateUserAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerListAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqThirdPartyLogin_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqOrderId_default_instance_.get_mutable()->InitAsDefaultInstance();
  OrderIdAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdatePlayerAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqChat_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChatAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserNickAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  SkillInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroAttr_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ItemInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ItemAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateSkill_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetNewGuide_default_instance_.get_mutable()->InitAsDefaultInstance();
  PathInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunPathAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetRunPath_default_instance_.get_mutable()->InitAsDefaultInstance();
  ArrivedCity_default_instance_.get_mutable()->InitAsDefaultInstance();
  Formation_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroFormationAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetHeroFormation_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqCityInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  CityItemInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  CityHeroInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  CityInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  AwardItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  Award_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestConsAgriculture_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestConsBusiness_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestConsMilitary_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestBattle_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestVisit_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestConscription_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestDiscovery_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestListAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestData_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqQuestInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuestInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  GiveAward_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqDoQuest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DoQuestAward_default_instance_.get_mutable()->InitAsDefaultInstance();
  DoQuestAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqSubmitQuest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubmitQuestAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqAcceptQuest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AcceptQuestAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqAddHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqClearHeroCD_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClearHeroCDAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  RefreshQuestAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  BattleEnemy_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqBattle_default_instance_.get_mutable()->InitAsDefaultInstance();
  BattleAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqPrepareBattle_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrepareBattleAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  RecoverBattle_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqBattleEnd_default_instance_.get_mutable()->InitAsDefaultInstance();
  BattleEndAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqHeroUseItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroUserItemAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqUseItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  UseItemAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqAddItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddItemAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvantureContinuousBattle_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvantureEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvantureInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvantureAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqAdvantureEventDone_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvantureEventDoneAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroFriendship_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroFriendshipAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroGeneralSoul_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroGeneralSoulAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserLearnVsCDInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserLearnVsCDAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqGiveHeroGift_default_instance_.get_mutable()->InitAsDefaultInstance();
  GiveHeroGiftAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqGeneralSoulExchangeHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  GeneralSoulExchangeHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqShopItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  ShopItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  ShopItemAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqBuyShop_default_instance_.get_mutable()->InitAsDefaultInstance();
  BuyShopAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRefreshShop_default_instance_.get_mutable()->InitAsDefaultInstance();
  RefreshShopAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqEvolveHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  EvolveHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqAdvancementRank_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvancementRankAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRankTitle_default_instance_.get_mutable()->InitAsDefaultInstance();
  RankTitlePlayer_default_instance_.get_mutable()->InitAsDefaultInstance();
  RankTitleAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqTitleInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  TitleInfoPlayer_default_instance_.get_mutable()->InitAsDefaultInstance();
  TitleInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqElectionTitle_default_instance_.get_mutable()->InitAsDefaultInstance();
  ElectionTitleAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroClassSkill_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroClassInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqHeroClass_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeroClassAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqStudySkill_default_instance_.get_mutable()->InitAsDefaultInstance();
  StudySkillAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqStudyProperty_default_instance_.get_mutable()->InitAsDefaultInstance();
  StudyPropertyAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRaffleHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaffleHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRaffleHeroTimes_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaffleHeroTimesAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqAddMoney_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddMoneyAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqLevelUpCamp_default_instance_.get_mutable()->InitAsDefaultInstance();
  LevelUpCampAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqClearCampCD_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClearCampCDAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqCampState_default_instance_.get_mutable()->InitAsDefaultInstance();
  CampState_default_instance_.get_mutable()->InitAsDefaultInstance();
  CampStateAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqGetCampOut_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetCampOutAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  CycleBattleAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  RefresshCycleAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqSelectCycleDiff_default_instance_.get_mutable()->InitAsDefaultInstance();
  SelectCycleDiffAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  CycleBattleInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdvantureEventStatusChange_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRecruitHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  RecruitHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRecruitedHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  RecruitedHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqVSBattleBegin_default_instance_.get_mutable()->InitAsDefaultInstance();
  VSBattleEnemy_default_instance_.get_mutable()->InitAsDefaultInstance();
  VSBattleBeginAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqVSBattleReady_default_instance_.get_mutable()->InitAsDefaultInstance();
  VSBattleReadyAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqVSBattleOpt_default_instance_.get_mutable()->InitAsDefaultInstance();
  VSBattleOptAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  VSBattleUnitState_default_instance_.get_mutable()->InitAsDefaultInstance();
  VSBattleTurn_default_instance_.get_mutable()->InitAsDefaultInstance();
  VSBattleEnd_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqBioHeroInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  BioHeroStepData_default_instance_.get_mutable()->InitAsDefaultInstance();
  BioHeroInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqBioHeroStepDone_default_instance_.get_mutable()->InitAsDefaultInstance();
  BioHeroStepDoneAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqAddFriend_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqRemoveFriend_default_instance_.get_mutable()->InitAsDefaultInstance();
  RemoveFriendAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqTopList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopListAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopListData_default_instance_.get_mutable()->InitAsDefaultInstance();
  SortReputationData_default_instance_.get_mutable()->InitAsDefaultInstance();
  SortMilitaryData_default_instance_.get_mutable()->InitAsDefaultInstance();
  SortLevelData_default_instance_.get_mutable()->InitAsDefaultInstance();
  FriendInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  FriendsInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  MailSender_default_instance_.get_mutable()->InitAsDefaultInstance();
  MailData_default_instance_.get_mutable()->InitAsDefaultInstance();
  MailInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqMailDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
  MailDetailAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqGetMailAward_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetMailAwardAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqDeleteMail_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteMailAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  BanquetHeros_default_instance_.get_mutable()->InitAsDefaultInstance();
  BanquetInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqBanquetHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  BanquetHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqWorldBattle_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldBattleAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqWorldWarTopList_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarUserInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarTopListAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  TeamInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  TeamInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqSetTeam_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetTeamAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqWriteSkillBook_default_instance_.get_mutable()->InitAsDefaultInstance();
  WriteSkillBookAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqTeamRunPath_default_instance_.get_mutable()->InitAsDefaultInstance();
  TeamRunPathAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetTeamRunPath_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqTeamArrivedTar_default_instance_.get_mutable()->InitAsDefaultInstance();
  TeamArrivedTarAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterMemberInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterCreater_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqClusterDetailInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  TeamMemberDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterMemberDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqSetClusterAttr_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetClusterAttrAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterDetailInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  AllClusterAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateClusterAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqJoinCluster_default_instance_.get_mutable()->InitAsDefaultInstance();
  JoinClusterAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqExitCluster_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExitClusterAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqCityItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  CityItemAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqCityHero_default_instance_.get_mutable()->InitAsDefaultInstance();
  CityHeroAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResourceInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResourceInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqResourceDetailInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResourceDetailInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResourceDetailInfoAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegInviteJoinCluster_default_instance_.get_mutable()->InitAsDefaultInstance();
  InviteJoinClusterAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserInviteJoinCluster_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterRunPathAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetClusterRunPath_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqClusterArrivedTar_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClusterArrivedTarAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqEnterWorldWar_default_instance_.get_mutable()->InitAsDefaultInstance();
  EnterWorldWarAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqWorldWarStatus_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarSceneBlockState_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarSceneBuildingState_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarSceneAgent_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarStatusAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqWorldWarMove_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarMoveAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqWorldWarDefence_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarDefenceAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqWorldWarDefenceTarget_default_instance_.get_mutable()->InitAsDefaultInstance();
  WorldWarDefenceTargetAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqLeaveWorldWar_default_instance_.get_mutable()->InitAsDefaultInstance();
  LeaveWorldWarAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReqTest_default_instance_.get_mutable()->InitAsDefaultInstance();
  TestAck_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_NetMsg_2eproto_once_);
void protobuf_InitDefaults_NetMsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_NetMsg_2eproto_once_,
                 &protobuf_InitDefaults_NetMsg_2eproto_impl);
}
void protobuf_AddDesc_NetMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_NetMsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014NetMsg.proto\022\006NetMsg\"\372#\n\013MessageType\"\352"
    "#\n\004Type\022\014\n\010ReqLogin\020\000\022\014\n\010LoginAck\020\001\022\022\n\016R"
    "eqVersionInfo\020\002\022\022\n\016VersionInfoAck\020\003\022\023\n\017R"
    "eqUserNamePass\020\004\022\023\n\017UserNamePassAck\020\005\022\017\n"
    "\013ReqRegister\020\006\022\017\n\013RegisterAck\020\007\022\020\n\014ReqEn"
    "terGame\020\010\022\020\n\014EnterGameAck\020\t\022\021\n\rReqCreate"
    "User\020\n\022\021\n\rCreateUserAck\020\013\022\021\n\rReqServerLi"
    "st\020\014\022\021\n\rServerListAck\020\r\022\026\n\022ReqThirdParty"
    "Login\020\016\022\016\n\nReqOrderId\020\017\022\016\n\nOrderIdAck\020\020\022"
    "\023\n\017UpdatePlayerAck\020\021\022\013\n\007ReqChat\020\022\022\013\n\007Cha"
    "tAck\020\023\022\017\n\013ReqUserNick\020\024\022\017\n\013UserNickAck\020\025"
    "\022\013\n\007ReqHero\020\026\022\013\n\007HeroAck\020\027\022\013\n\007ReqItem\020\030\022"
    "\013\n\007ItemAck\020\031\022\017\n\013UpdateSkill\020\032\022\017\n\013SetNewG"
    "uide\020\033\022\016\n\nReqRunPath\020\034\022\016\n\nRunPathAck\020\035\022\016"
    "\n\nSetRunPath\020\036\022\017\n\013ArrivedCity\020\037\022\024\n\020ReqHe"
    "roFormation\020 \022\024\n\020HeroFormationAck\020!\022\024\n\020S"
    "etHeroFormation\020\"\022\017\n\013ReqCityInfo\020#\022\017\n\013Ci"
    "tyInfoAck\020$\022\020\n\014ReqQuestList\020%\022\020\n\014QuestLi"
    "stAck\020&\022\020\n\014ReqQuestInfo\020\'\022\020\n\014QuestInfoAc"
    "k\020(\022\r\n\tGiveAward\020)\022\016\n\nReqDoQuest\020*\022\016\n\nDo"
    "QuestAck\020+\022\022\n\016ReqSubmitQuest\020,\022\022\n\016Submit"
    "QuestAck\020-\022\022\n\016ReqAcceptQuest\020.\022\022\n\016Accept"
    "QuestAck\020/\022\022\n\016ReqClearHeroCD\0200\022\022\n\016ClearH"
    "eroCDAck\0201\022\023\n\017ReqRefreshQuest\0202\022\023\n\017Refre"
    "shQuestAck\0203\022\r\n\tReqBattle\0204\022\r\n\tBattleAck"
    "\0205\022\020\n\014ReqBattleEnd\0206\022\020\n\014BattleEndAck\0207\022\022"
    "\n\016ReqHeroUseItem\0208\022\023\n\017HeroUserItemAck\0209\022"
    "\016\n\nReqUseItem\020:\022\016\n\nUseItemAck\020;\022\024\n\020ReqAd"
    "vantureInfo\020<\022\024\n\020AdvantureInfoAck\020=\022\020\n\014R"
    "eqAdvanture\020>\022\020\n\014AdvantureAck\020\?\022\031\n\025ReqAd"
    "vantureEventDone\020@\022\031\n\025AdvantureEventDone"
    "Ack\020A\022\025\n\021ReqHeroFriendship\020B\022\025\n\021HeroFrie"
    "ndshipAck\020C\022\023\n\017ReqGiveHeroGift\020D\022\023\n\017Give"
    "HeroGiftAck\020E\022\017\n\013ReqShopItem\020F\022\017\n\013ShopIt"
    "emAck\020G\022\016\n\nReqBuyShop\020H\022\016\n\nBuyShopAck\020I\022"
    "\022\n\016ReqRefreshShop\020J\022\022\n\016RefreshShopAck\020K\022"
    "\021\n\rReqEvolveHero\020L\022\021\n\rEvolveHeroAck\020M\022\026\n"
    "\022ReqAdvancementRank\020N\022\026\n\022AdvancementRank"
    "Ack\020O\022\020\n\014ReqHeroClass\020P\022\020\n\014HeroClassAck\020"
    "Q\022\021\n\rReqStudySkill\020R\022\021\n\rStudySkillAck\020S\022"
    "\024\n\020ReqStudyProperty\020T\022\024\n\020StudyPropertyAc"
    "k\020U\022\021\n\rReqRaffleHero\020V\022\021\n\rRaffleHeroAck\020"
    "W\022\020\n\014ReqRankTitle\020X\022\020\n\014RankTitleAck\020Y\022\020\n"
    "\014ReqTitleInfo\020Z\022\020\n\014TitleInfoAck\020[\022\024\n\020Req"
    "ElectionTitle\020\\\022\024\n\020ElectionTitleAck\020]\022\022\n"
    "\016ReqLevelUpCamp\020^\022\022\n\016LevelUpCampAck\020_\022\020\n"
    "\014ReqCampState\020`\022\020\n\014CampStateAck\020a\022\021\n\rReq"
    "GetCampOut\020b\022\021\n\rGetCampOutAck\020c\022\022\n\016ReqCl"
    "earCampCD\020d\022\022\n\016ClearCampCDAck\020e\022\022\n\016ReqCy"
    "cleBattle\020f\022\022\n\016CycleBattleAck\020g\022\024\n\020ReqRe"
    "fresshCycle\020h\022\024\n\020RefresshCycleAck\020i\022\026\n\022R"
    "eqSelectCycleDiff\020j\022\026\n\022SelectCycleDiffAc"
    "k\020k\022\026\n\022ReqCycleBattleInfo\020l\022\026\n\022CycleBatt"
    "leInfoAck\020m\022\036\n\032AdvantureEventStatusChang"
    "e\020n\022\022\n\016ReqRecruitHero\020o\022\022\n\016RecruitHeroAc"
    "k\020p\022\024\n\020ReqRecruitedHero\020q\022\024\n\020RecruitedHe"
    "roAck\020r\022\024\n\020ReqVSBattleBegin\020s\022\024\n\020VSBattl"
    "eBeginAck\020t\022\024\n\020ReqVSBattleReady\020u\022\024\n\020VSB"
    "attleReadyAck\020v\022\022\n\016ReqVSBattleOpt\020w\022\022\n\016V"
    "SBattleOptAck\020x\022\020\n\014VSBattleTurn\020y\022\017\n\013VSB"
    "attleEnd\020z\022\022\n\016ReqBioHeroInfo\020{\022\022\n\016BioHer"
    "oInfoAck\020|\022\026\n\022ReqBioHeroStepDone\020}\022\026\n\022Bi"
    "oHeroStepDoneAck\020~\022\020\n\014ReqAddFriend\020\177\022\024\n\017"
    "ReqRemoveFriend\020\200\001\022\023\n\016ReqFriendsInfo\020\201\001\022"
    "\023\n\016FriendsInfoAck\020\202\001\022\020\n\013ReqMailInfo\020\203\001\022\020"
    "\n\013MailInfoAck\020\204\001\022\022\n\rReqMailDetail\020\205\001\022\022\n\r"
    "MailDetailAck\020\206\001\022\022\n\rReqDeleteMail\020\207\001\022\022\n\r"
    "DeleteMailAck\020\210\001\022\024\n\017ReqGetMailAward\020\211\001\022\024"
    "\n\017GetMailAwardAck\020\212\001\022\027\n\022ReqRaffleHeroTim"
    "es\020\213\001\022\027\n\022RaffleHeroTimesAck\020\214\001\022\023\n\016ReqBan"
    "quetInfo\020\215\001\022\023\n\016BanquetInfoAck\020\216\001\022\023\n\016ReqB"
    "anquetHero\020\217\001\022\023\n\016BanquetHeroAck\020\220\001\022\025\n\020Re"
    "qPrepareBattle\020\226\001\022\025\n\020PrepareBattleAck\020\227\001"
    "\022\024\n\017RemoveFriendAck\020\230\001\022\017\n\nReqTopList\020\231\001\022"
    "\017\n\nTopListAck\020\232\001\022\020\n\013ReqWorldWar\020\233\001\022\020\n\013Wo"
    "rldWarAck\020\234\001\022\023\n\016ReqWorldBattle\020\235\001\022\023\n\016Wor"
    "ldBattleAck\020\236\001\022\027\n\022ReqWorldWarTopList\020\237\001\022"
    "\027\n\022WorldWarTopListAck\020\240\001\022\027\n\022ReqHeroGener"
    "alSoul\020\241\001\022\027\n\022HeroGeneralSoulAck\020\242\001\022\037\n\032Re"
    "qGeneralSoulExchangeHero\020\243\001\022\037\n\032GeneralSo"
    "ulExchangeHeroAck\020\244\001\022\025\n\020ReqUserLearnVsCD"
    "\020\245\001\022\025\n\020UserLearnVsCDAck\020\246\001\022\020\n\013ReqTeamInf"
    "o\020\247\001\022\020\n\013TeamInfoAck\020\250\001\022\017\n\nReqSetTeam\020\251\001\022"
    "\017\n\nSetTeamAck\020\252\001\022\023\n\016ReqClusterInfo\020\253\001\022\023\n"
    "\016ClusterInfoAck\020\254\001\022\022\n\rReqAllCluster\020\255\001\022\022"
    "\n\rAllClusterAck\020\256\001\022\025\n\020ReqCreateCluster\020\257"
    "\001\022\025\n\020CreateClusterAck\020\260\001\022\023\n\016ReqJoinClust"
    "er\020\261\001\022\023\n\016JoinClusterAck\020\262\001\022\026\n\021ReqSetClus"
    "terAttr\020\263\001\022\026\n\021SetClusterAttrAck\020\264\001\022\023\n\016Re"
    "qExitCluster\020\265\001\022\023\n\016ExitClusterAck\020\266\001\022\026\n\021"
    "ReqWriteSkillBook\020\267\001\022\026\n\021WriteSkillBookAc"
    "k\020\270\001\022\023\n\016ReqTeamRunPath\020\271\001\022\023\n\016TeamRunPath"
    "Ack\020\272\001\022\023\n\016SetTeamRunPath\020\273\001\022\026\n\021ReqTeamAr"
    "rivedTar\020\274\001\022\026\n\021TeamArrivedTarAck\020\275\001\022\031\n\024R"
    "eqClusterDetailInfo\020\276\001\022\031\n\024ClusterDetailI"
    "nfoAck\020\277\001\022\020\n\013ReqCityItem\020\300\001\022\020\n\013CityItemA"
    "ck\020\301\001\022\020\n\013ReqCityHero\020\302\001\022\020\n\013CityHeroAck\020\303"
    "\001\022\024\n\017ReqResourceInfo\020\304\001\022\024\n\017ResourceInfoA"
    "ck\020\305\001\022\032\n\025ReqResourceDetailInfo\020\306\001\022\032\n\025Res"
    "ourceDetailInfoAck\020\307\001\022\031\n\024RegInviteJoinCl"
    "uster\020\310\001\022\031\n\024InviteJoinClusterAck\020\311\001\022\032\n\025U"
    "serInviteJoinCluster\020\312\001\022\026\n\021ReqClusterRun"
    "Path\020\313\001\022\026\n\021ClusterRunPathAck\020\314\001\022\026\n\021SetCl"
    "usterRunPath\020\315\001\022\031\n\024ReqClusterArrivedTar\020"
    "\316\001\022\031\n\024ClusterArrivedTarAck\020\317\001\022\025\n\020ReqEnte"
    "rWorldWar\020\320\001\022\025\n\020EnterWorldWarAck\020\321\001\022\026\n\021R"
    "eqWorldWarStatus\020\322\001\022\026\n\021WorldWarStatusAck"
    "\020\323\001\022\024\n\017ReqWorldWarMove\020\324\001\022\024\n\017WorldWarMov"
    "eAck\020\325\001\022\027\n\022ReqWorldWarDefence\020\326\001\022\027\n\022Worl"
    "dWarDefenceAck\020\327\001\022\035\n\030ReqWorldWarDefenceT"
    "arget\020\330\001\022\035\n\030WorldWarDefenceTargetAck\020\331\001\022"
    "\025\n\020ReqLeaveWorldWar\020\332\001\022\025\n\020LeaveWorldWarA"
    "ck\020\333\001\022\020\n\nReqAddHero\020\241\215\006\022\020\n\nAddHeroAck\020\242\215"
    "\006\022\020\n\nReqAddItem\020\243\215\006\022\020\n\nAddItemAck\020\244\215\006\022\021\n"
    "\013ReqAddMoney\020\245\215\006\022\021\n\013AddMoneyAck\020\246\215\006\022\016\n\007R"
    "eqTest\020\360\377\377\007\022\016\n\007TestAck\020\361\377\377\007\"*\n\010ReqLogin\022"
    "\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\265\003\n\nPlay"
    "erData\022\021\n\tfirstName\030\001 \001(\t\022\020\n\010lastName\030\002 "
    "\001(\t\022\022\n\nsecondName\030\003 \001(\t\022\n\n\002id\030\004 \001(\r\022\r\n\005l"
    "evel\030\005 \001(\r\022\013\n\003exp\030\006 \001(\r\022\017\n\007stamina\030\007 \001(\r"
    "\022\014\n\004coin\030\010 \001(\r\022\014\n\004gold\030\t \001(\r\022\020\n\010vipLevel"
    "\030\n \001(\r\022\016\n\006cityId\030\013 \001(\005\022\022\n\ncampCityId\030\014 \001"
    "(\r\022\r\n\005force\030\r \001(\r\022\020\n\010newGuide\030\016 \001(\r\022\r\n\005t"
    "itle\030\017 \001(\r\022\024\n\014contribution\030\020 \001(\r\022\022\n\nrepu"
    "tation\030\021 \001(\r\022\020\n\010battleId\030\022 \001(\004\022\014\n\004rank\030\023"
    " \001(\r\022\013\n\003sex\030\024 \001(\r\022\014\n\004icon\030\025 \001(\r\022\022\n\nselec"
    "tHero\030\026 \001(\r\022\017\n\007exploit\030\027 \001(\r\022\014\n\004wood\030\030 \001"
    "(\r\022\r\n\005stone\030\031 \001(\r\022\014\n\004iron\030\032 \001(\r\"*\n\010Login"
    "Ack\022\r\n\005error\030\001 \001(\r\022\017\n\007session\030\002 \001(\t\"\'\n\016V"
    "ersionInfoAck\022\025\n\rclientVersion\030\001 \001(\005\"1\n\017"
    "UserNamePassAck\022\014\n\004name\030\001 \001(\t\022\020\n\010passwor"
    "d\030\002 \001(\t\"-\n\013ReqRegister\022\014\n\004name\030\001 \001(\t\022\020\n\010"
    "password\030\002 \001(\t\"\034\n\013RegisterAck\022\r\n\005error\030\001"
    " \001(\005\"\037\n\014ReqEnterGame\022\017\n\007session\030\001 \001(\t\"A\n"
    "\014EnterGameAck\022\r\n\005error\030\001 \001(\005\022\"\n\006player\030\002"
    " \001(\0132\022.NetMsg.PlayerData\"w\n\rReqCreateUse"
    "r\022\022\n\nnewGuideId\030\001 \001(\r\022\021\n\tfirstName\030\002 \001(\t"
    "\022\020\n\010lastName\030\003 \001(\t\022\022\n\nsecondName\030\004 \001(\t\022\013"
    "\n\003sex\030\005 \001(\r\022\014\n\004icon\030\006 \001(\r\"B\n\rCreateUserA"
    "ck\022\r\n\005error\030\001 \001(\005\022\"\n\006player\030\002 \001(\0132\022.NetM"
    "sg.PlayerData\"f\n\nServerInfo\022\n\n\002id\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022"
    "$\n\006status\030\005 \001(\0162\024.NetMsg.ServerStatus\"1\n"
    "\rServerListAck\022 \n\004info\030\001 \003(\0132\022.NetMsg.Se"
    "rverInfo\"0\n\022ReqThirdPartyLogin\022\n\n\002id\030\001 \001"
    "(\005\022\016\n\006tocken\030\002 \001(\t\"\037\n\nReqOrderId\022\021\n\tprod"
    "uctId\030\001 \001(\005\"*\n\nOrderIdAck\022\017\n\007orderId\030\001 \001"
    "(\t\022\013\n\003ext\030\002 \001(\t\"\251\003\n\017UpdatePlayerAck\022\014\n\004m"
    "ask\030\001 \001(\004\022\"\n\006player\030\002 \001(\0132\022.NetMsg.Playe"
    "rData\"\343\002\n\nUpdateType\022\016\n\nUpdateNick\020\000\022\017\n\013"
    "UpdateLevel\020\001\022\r\n\tUpdateExp\020\002\022\021\n\rUpdateSt"
    "amina\020\003\022\016\n\nUpdateCoin\020\004\022\016\n\nUpdateGold\020\005\022"
    "\022\n\016UpdateVipLevel\020\006\022\020\n\014UpdateCityId\020\007\022\024\n"
    "\020UpdateCampCityId\020\010\022\017\n\013UpdateForce\020\t\022\022\n\016"
    "UpdateNewGuide\020\n\022\017\n\013UpdateTitle\020\013\022\026\n\022Upd"
    "ateContribution\020\014\022\024\n\020UpdateReputation\020\r\022"
    "\016\n\nUpdateRank\020\016\022\021\n\rUpdateExploit\020\017\022\016\n\nUp"
    "dateWood\020\020\022\017\n\013UpdateStone\020\021\022\016\n\nUpdateIro"
    "n\020\022\"J\n\007ReqChat\022\020\n\010chatType\030\001 \001(\r\022\020\n\010toUs"
    "erId\030\002 \001(\r\022\016\n\006toNick\030\003 \001(\t\022\013\n\003msg\030\004 \001(\t\""
    "\272\001\n\007ChatAck\022\020\n\010chatType\030\001 \001(\r\022\022\n\nfromUse"
    "rId\030\002 \001(\r\022\020\n\010fromNick\030\003 \001(\t\022\020\n\010toUserId\030"
    "\004 \001(\r\022\016\n\006toNick\030\005 \001(\t\022\013\n\003msg\030\006 \001(\t\022\r\n\005er"
    "ror\030\007 \001(\r\022\020\n\010sendTime\030\010 \001(\r\022\021\n\tfromForce"
    "\030\t \001(\r\022\024\n\014fromUserIcon\030\n \001(\r\"F\n\013UserNick"
    "Ack\022\021\n\tfirstName\030\001 \001(\t\022\020\n\010lastName\030\002 \001(\t"
    "\022\022\n\nsecondName\030\003 \001(\t\"O\n\tSkillInfo\022\013\n\003uid"
    "\030\001 \001(\004\022\017\n\007skillId\030\002 \001(\r\022\020\n\010skillExp\030\003 \001("
    "\r\022\022\n\nskillLevel\030\004 \001(\r\"#\n\010HeroAttr\022\013\n\003exp"
    "\030\001 \001(\r\022\n\n\002lv\030\002 \001(\r\"\314\002\n\010HeroInfo\022\014\n\004udid\030"
    "\001 \001(\004\022\n\n\002id\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\021\n\tstar"
    "Level\030\004 \001(\r\022\'\n\rextraStrength\030\005 \001(\0132\020.Net"
    "Msg.HeroAttr\022)\n\017extraLeadership\030\006 \001(\0132\020."
    "NetMsg.HeroAttr\022%\n\013extraWisdom\030\007 \001(\0132\020.N"
    "etMsg.HeroAttr\022$\n\nextraCharm\030\010 \001(\0132\020.Net"
    "Msg.HeroAttr\022#\n\textraLuck\030\t \001(\0132\020.NetMsg"
    ".HeroAttr\022\016\n\006cdTime\030\n \001(\r\022\013\n\003exp\030\013 \001(\r\022!"
    "\n\006skills\030\014 \003(\0132\021.NetMsg.SkillInfo\"*\n\007Her"
    "oAck\022\037\n\005heros\030\001 \003(\0132\020.NetMsg.HeroInfo\"0\n"
    "\010ItemInfo\022\013\n\003uid\030\001 \001(\004\022\n\n\002id\030\002 \001(\r\022\013\n\003nu"
    "m\030\003 \001(\r\"*\n\007ItemAck\022\037\n\005items\030\001 \003(\0132\020.NetM"
    "sg.ItemInfo\"A\n\013UpdateSkill\022\017\n\007heroUid\030\001 "
    "\001(\004\022!\n\006skills\030\002 \003(\0132\021.NetMsg.SkillInfo\","
    "\n\013SetNewGuide\022\014\n\004step\030\001 \001(\r\022\017\n\007addData\030\002"
    " \001(\r\"\327\001\n\010PathInfo\022\021\n\tstartPath\030\001 \001(\r\022\020\n\010"
    "startPer\030\002 \001(\002\022\017\n\007endPath\030\003 \001(\r\022\016\n\006endPe"
    "r\030\004 \001(\002\022\017\n\007curPath\030\005 \001(\r\022\016\n\006curPer\030\006 \001(\002"
    "\022\026\n\016curWayPointInd\030\007 \001(\r\022\020\n\010wayPoint\030\010 \003"
    "(\r\022(\n\trunTarget\030\t \001(\0162\025.NetMsg.RunTarget"
    "Type\022\020\n\010targetID\030\n \001(\004\"M\n\nRunPathAck\022\036\n\004"
    "path\030\001 \001(\0132\020.NetMsg.PathInfo\022\037\n\005state\030\002 "
    "\001(\0162\020.NetMsg.RunState\"M\n\nSetRunPath\022\036\n\004p"
    "ath\030\001 \001(\0132\020.NetMsg.PathInfo\022\037\n\005state\030\002 \001"
    "(\0162\020.NetMsg.RunState\"\035\n\013ArrivedCity\022\016\n\006c"
    "ityId\030\001 \001(\005\"\033\n\tFormation\022\016\n\006heroId\030\001 \003(\004"
    "\"N\n\020HeroFormationAck\022$\n\tformation\030\001 \003(\0132"
    "\021.NetMsg.Formation\022\024\n\014curFormation\030\002 \001(\r"
    "\"E\n\020SetHeroFormation\022$\n\tformation\030\001 \001(\0132"
    "\021.NetMsg.Formation\022\013\n\003pos\030\002 \001(\r\"\035\n\013ReqCi"
    "tyInfo\022\016\n\006cityId\030\001 \001(\r\"/\n\014CityItemInfo\022\016"
    "\n\006itemId\030\001 \001(\r\022\017\n\007itemNum\030\002 \001(\r\"C\n\014CityH"
    "eroInfo\022\016\n\006heroId\030\001 \001(\r\022\020\n\010heroName\030\002 \001("
    "\t\022\021\n\theroLevel\030\003 \001(\r\"\262\005\n\013CityInfoAck\022\016\n\006"
    "cityId\030\001 \001(\r\022\020\n\010governor\030\002 \001(\r\022\023\n\013agricu"
    "lture\030\003 \001(\r\022\020\n\010business\030\004 \001(\r\022\020\n\010militar"
    "y\030\005 \001(\r\022\r\n\005force\030\006 \001(\r\022\021\n\theroClass\030\007 \003("
    "\r\022\r\n\005Money\030\010 \001(\r\022\022\n\nProvisions\030\t \001(\r\022\022\n\n"
    "MoneyDelta\030\n \001(\r\022\027\n\017ProvisionsDelta\030\013 \001("
    "\r\022\032\n\022CultureDevelopment\030\014 \001(\r\022\020\n\010Reserve"
    "r\030\r \001(\r\022\020\n\010Infantry\030\016 \001(\r\022\016\n\006Archer\030\017 \001("
    "\r\022\017\n\007Cavalry\030\020 \001(\r\022\023\n\013SwordShield\030\021 \001(\r\022"
    "\023\n\013CrossbowMan\030\022 \001(\r\022\020\n\010Elephant\030\023 \001(\r\022\027"
    "\n\017InfantryWounded\030\024 \001(\r\022\025\n\rArcherWounded"
    "\030\025 \001(\r\022\026\n\016CavalryWounded\030\026 \001(\r\022\032\n\022SwordS"
    "hieldWounded\030\027 \001(\r\022\032\n\022CrossbowManWounded"
    "\030\030 \001(\r\022\027\n\017ElephantWounded\030\031 \001(\r\022\022\n\nPopul"
    "ation\030\032 \001(\r\022\027\n\017PopulationSpeed\030\033 \001(\r\022\017\n\007"
    "Loyalty\030\034 \001(\r\022\022\n\nDurability\030\035 \001(\r\022&\n\010ite"
    "mInfo\030\036 \003(\0132\024.NetMsg.CityItemInfo\022&\n\010her"
    "oInfo\030\037 \003(\0132\024.NetMsg.CityHeroInfo\"C\n\tAwa"
    "rdItem\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\013\n\003num\030"
    "\003 \001(\r\022\017\n\007heroIds\030\004 \003(\004\":\n\005Award\022 \n\005items"
    "\030\001 \003(\0132\021.NetMsg.AwardItem\022\017\n\007awardId\030\002 \001"
    "(\r\"\205\001\n\024QuestConsAgriculture\022\r\n\005title\030\001 \001"
    "(\r\022\016\n\006cityId\030\002 \001(\r\022\021\n\tcurTarget\030\003 \001(\r\022\016\n"
    "\006target\030\004 \001(\r\022\r\n\005place\030\005 \001(\r\022\034\n\005award\030\006 "
    "\001(\0132\r.NetMsg.Award\"\202\001\n\021QuestConsBusiness"
    "\022\r\n\005title\030\001 \001(\r\022\016\n\006cityId\030\002 \001(\r\022\021\n\tcurTa"
    "rget\030\003 \001(\r\022\016\n\006target\030\004 \001(\r\022\r\n\005place\030\005 \001("
    "\r\022\034\n\005award\030\006 \001(\0132\r.NetMsg.Award\"\202\001\n\021Ques"
    "tConsMilitary\022\r\n\005title\030\001 \001(\r\022\016\n\006cityId\030\002"
    " \001(\r\022\021\n\tcurTarget\030\003 \001(\r\022\016\n\006target\030\004 \001(\r\022"
    "\r\n\005place\030\005 \001(\r\022\034\n\005award\030\006 \001(\0132\r.NetMsg.A"
    "ward\"\206\001\n\013QuestBattle\022\021\n\tenemyPath\030\001 \001(\r\022"
    "\017\n\007percent\030\002 \001(\002\022\020\n\010battleId\030\003 \001(\004\022\021\n\ten"
    "emyTeam\030\004 \001(\r\022\020\n\010leftTime\030\005 \001(\r\022\034\n\005award"
    "\030\006 \001(\0132\r.NetMsg.Award\"Z\n\nQuestVisit\022\021\n\th"
    "eroClass\030\001 \001(\r\022\014\n\004city\030\002 \001(\r\022\r\n\005place\030\003 "
    "\001(\r\022\034\n\005award\030\004 \001(\0132\r.NetMsg.Award\"\202\001\n\021Qu"
    "estConscription\022\r\n\005title\030\001 \001(\r\022\016\n\006cityId"
    "\030\002 \001(\r\022\021\n\tcurTarget\030\003 \001(\r\022\016\n\006target\030\004 \001("
    "\r\022\r\n\005place\030\005 \001(\r\022\034\n\005award\030\006 \001(\0132\r.NetMsg"
    ".Award\"\374\001\n\016QuestDiscovery\022\r\n\005title\030\001 \001(\r"
    "\022\014\n\004city\030\002 \001(\r\022\r\n\005place\030\003 \001(\r\022\021\n\tenemyPa"
    "th\030\004 \001(\r\022\017\n\007percent\030\005 \001(\002\0220\n\004type\030\006 \001(\0162"
    "\".NetMsg.QuestDiscoveryFinishedType\022\014\n\004i"
    "tem\030\007 \001(\r\022\014\n\004hero\030\010 \001(\r\022\014\n\004name\030\t \001(\t\022\r\n"
    "\005level\030\n \001(\r\022\021\n\tstarLevel\030\013 \001(\r\022\034\n\005award"
    "\030\014 \001(\0132\r.NetMsg.Award\"!\n\014QuestListAck\022\021\n"
    "\tquestList\030\001 \003(\004\"\342\002\n\tQuestData\0223\n\013agricu"
    "lture\030\001 \001(\0132\034.NetMsg.QuestConsAgricultur"
    "eH\000\022-\n\010business\030\002 \001(\0132\031.NetMsg.QuestCons"
    "BusinessH\000\022-\n\010consMill\030\003 \001(\0132\031.NetMsg.Qu"
    "estConsMilitaryH\000\022%\n\006battle\030\004 \001(\0132\023.NetM"
    "sg.QuestBattleH\000\022#\n\005visit\030\005 \001(\0132\022.NetMsg"
    ".QuestVisitH\000\0221\n\014conscription\030\006 \001(\0132\031.Ne"
    "tMsg.QuestConscriptionH\000\022+\n\tdiscovery\030\007 "
    "\001(\0132\026.NetMsg.QuestDiscoveryH\000\022\016\n\006dialog\030"
    "\036 \001(\rB\006\n\004info\"\033\n\014ReqQuestInfo\022\013\n\003uid\030\001 \001"
    "(\004\"\200\001\n\014QuestInfoAck\022\013\n\003uid\030\001 \001(\004\022\037\n\004type"
    "\030\002 \001(\0162\021.NetMsg.QuestType\022\037\n\004data\030\003 \001(\0132"
    "\021.NetMsg.QuestData\022!\n\005state\030\004 \001(\0162\022.NetM"
    "sg.QuestState\")\n\tGiveAward\022\034\n\005award\030\001 \001("
    "\0132\r.NetMsg.Award\".\n\nReqDoQuest\022\017\n\007questI"
    "d\030\001 \001(\004\022\017\n\007heroIds\030\002 \003(\004\"C\n\014DoQuestAward"
    "\022\016\n\006heroId\030\001 \001(\004\022\021\n\tawardType\030\002 \003(\r\022\020\n\010a"
    "wardnum\030\003 \003(\r\"a\n\nDoQuestAck\022\017\n\007questId\030\001"
    " \001(\004\022\r\n\005error\030\002 \001(\r\022\016\n\006effect\030\003 \001(\r\022#\n\005a"
    "ward\030\004 \003(\0132\024.NetMsg.DoQuestAward\"!\n\016ReqS"
    "ubmitQuest\022\017\n\007questId\030\001 \001(\004\"0\n\016SubmitQue"
    "stAck\022\r\n\005error\030\001 \001(\r\022\017\n\007questId\030\002 \001(\004\"!\n"
    "\016ReqAcceptQuest\022\017\n\007questId\030\001 \001(\004\"0\n\016Acce"
    "ptQuestAck\022\r\n\005error\030\001 \001(\r\022\017\n\007questId\030\002 \001"
    "(\004\"\034\n\nReqAddHero\022\016\n\006heroId\030\001 \001(\r\"+\n\nAddH"
    "eroAck\022\r\n\005error\030\001 \001(\r\022\016\n\006heroId\030\002 \001(\r\" \n"
    "\016ReqClearHeroCD\022\016\n\006heroId\030\001 \001(\004\"/\n\016Clear"
    "HeroCDAck\022\r\n\005error\030\001 \001(\r\022\016\n\006heroId\030\002 \001(\004"
    "\"\"\n\017RefreshQuestAck\022\017\n\007success\030\001 \001(\010\"\242\001\n"
    "\013BattleEnemy\022\n\n\002id\030\001 \001(\r\022\014\n\004star\030\002 \001(\r\022\021"
    "\n\tpromotion\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\022\021\n\tform"
    "ation\030\005 \001(\r\022\r\n\005skill\030\006 \003(\r\022\022\n\nskillLevel"
    "\030\007 \003(\r\022\016\n\006heroHp\030\010 \001(\002\022\021\n\tsoldierHp\030\t \001("
    "\002\"\035\n\tReqBattle\022\020\n\010battleId\030\001 \001(\004\"a\n\tBatt"
    "leAck\022\020\n\010battleId\030\001 \001(\004\022#\n\006enemys\030\002 \003(\0132"
    "\023.NetMsg.BattleEnemy\022\016\n\006teamId\030\003 \001(\r\022\r\n\005"
    "error\030\004 \001(\r\"%\n\020ReqPrepareBattle\022\021\n\tenemy"
    "Team\030\001 \001(\r\"I\n\020PrepareBattleAck\022\020\n\010battle"
    "Id\030\001 \001(\004\022#\n\006enemys\030\002 \003(\0132\023.NetMsg.Battle"
    "Enemy\"!\n\rRecoverBattle\022\020\n\010battleId\030\001 \001(\004"
    "\"V\n\014ReqBattleEnd\022\020\n\010battleId\030\001 \001(\004\022\017\n\007vi"
    "ctory\030\002 \001(\010\022#\n\006enemys\030\003 \003(\0132\023.NetMsg.Bat"
    "tleEnemy\"1\n\014BattleEndAck\022\020\n\010battleId\030\001 \001"
    "(\004\022\017\n\007victory\030\002 \001(\010\"=\n\016ReqHeroUseItem\022\016\n"
    "\006heroId\030\001 \001(\004\022\016\n\006itemId\030\002 \001(\004\022\013\n\003num\030\003 \001"
    "(\r\"0\n\017HeroUserItemAck\022\016\n\006heroId\030\001 \001(\004\022\r\n"
    "\005error\030\002 \001(\r\")\n\nReqUseItem\022\016\n\006itemId\030\001 \001"
    "(\004\022\013\n\003num\030\002 \001(\r\"+\n\nUseItemAck\022\016\n\006itemId\030"
    "\001 \001(\004\022\r\n\005error\030\002 \001(\r\")\n\nReqAddItem\022\016\n\006it"
    "emId\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"+\n\nAddItemAck\022\016\n"
    "\006itemId\030\001 \001(\r\022\r\n\005error\030\002 \001(\r\"d\n\031Advantur"
    "eContinuousBattle\022\021\n\tenemyPath\030\001 \001(\r\022\017\n\007"
    "percent\030\002 \001(\002\022\020\n\010battleId\030\003 \001(\004\022\021\n\tenemy"
    "Team\030\004 \001(\r\"\313\001\n\016AdvantureEvent\022\n\n\002id\030\001 \001("
    "\r\022\014\n\004type\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\022\034\n\005award\030\004"
    " \001(\0132\r.NetMsg.Award\022\022\n\ncreateTime\030\005 \001(\r\022"
    "1\n\006battle\030\006 \001(\0132!.NetMsg.AdvantureContin"
    "uousBattle\022,\n\006status\030\007 \001(\0162\034.NetMsg.Adva"
    "ntureEventStatus\"\222\001\n\020AdvantureInfoAck\022\r\n"
    "\005times\030\001 \001(\r\022\020\n\010timesMax\030\002 \001(\r\022\020\n\010nextTi"
    "me\030\003 \001(\r\022&\n\006events\030\004 \003(\0132\026.NetMsg.Advant"
    "ureEvent\022\022\n\nupdateTime\030\005 \001(\r\022\017\n\007doTimes\030"
    "\006 \001(\r\"\177\n\014AdvantureAck\022\r\n\005times\030\001 \001(\r\022\020\n\010"
    "nextTime\030\002 \001(\r\022\014\n\004gold\030\003 \001(\r\022\013\n\003exp\030\004 \001("
    "\r\022\014\n\004crit\030\005 \001(\r\022%\n\005event\030\006 \001(\0132\026.NetMsg."
    "AdvantureEvent\"#\n\025ReqAdvantureEventDone\022"
    "\n\n\002id\030\001 \001(\r\"2\n\025AdvantureEventDoneAck\022\n\n\002"
    "id\030\001 \001(\r\022\r\n\005error\030\002 \001(\r\"P\n\016HeroFriendshi"
    "p\022\021\n\theroClass\030\001 \001(\r\022\025\n\rfriendshipExp\030\002 "
    "\001(\r\022\024\n\014friendshipLv\030\003 \001(\r\"<\n\021HeroFriends"
    "hipAck\022\'\n\007heroFri\030\001 \003(\0132\026.NetMsg.HeroFri"
    "endship\"1\n\017HeroGeneralSoul\022\021\n\theroClass\030"
    "\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\?\n\022HeroGeneralSoulAck"
    "\022)\n\010heroSoul\030\001 \003(\0132\027.NetMsg.HeroGeneralS"
    "oul\"=\n\021UserLearnVsCDInfo\022\021\n\theroClass\030\001 "
    "\001(\r\022\025\n\rUserLearnVsCD\030\002 \001(\r\"=\n\020UserLearnV"
    "sCDAck\022)\n\006cdInfo\030\001 \003(\0132\031.NetMsg.UserLear"
    "nVsCDInfo\"E\n\017ReqGiveHeroGift\022\021\n\theroClas"
    "s\030\001 \001(\r\022\016\n\006itemId\030\002 \001(\004\022\017\n\007itemNum\030\003 \001(\r"
    "\"0\n\017GiveHeroGiftAck\022\016\n\006itemId\030\001 \001(\004\022\r\n\005e"
    "rror\030\002 \001(\r\",\n\032ReqGeneralSoulExchangeHero"
    "\022\016\n\006heroId\030\001 \001(\r\";\n\032GeneralSoulExchangeH"
    "eroAck\022\r\n\005error\030\001 \001(\r\022\016\n\006heroId\030\002 \001(\r\"\035\n"
    "\013ReqShopItem\022\016\n\006shopId\030\001 \001(\r\"b\n\010ShopItem"
    "\022\016\n\006itemId\030\001 \001(\r\022\017\n\007itemNum\030\002 \001(\r\022\024\n\014cur"
    "rencyType\030\003 \001(\r\022\r\n\005price\030\004 \001(\r\022\020\n\010buyTim"
    "es\030\005 \001(\r\"S\n\013ShopItemAck\022\016\n\006shopId\030\001 \001(\r\022"
    "\023\n\013refreshTime\030\002 \001(\r\022\037\n\005items\030\003 \003(\0132\020.Ne"
    "tMsg.ShopItem\"-\n\nReqBuyShop\022\016\n\006shopId\030\001 "
    "\001(\r\022\017\n\007shopPos\030\002 \001(\r\"<\n\nBuyShopAck\022\016\n\006sh"
    "opId\030\001 \001(\r\022\017\n\007shopPos\030\002 \001(\r\022\r\n\005error\030\003 \001"
    "(\r\"\020\n\016ReqRefreshShop\"\020\n\016RefreshShopAck\"2"
    "\n\rReqEvolveHero\022\016\n\006heroId\030\001 \001(\004\022\021\n\teatHe"
    "roId\030\002 \001(\004\".\n\rEvolveHeroAck\022\016\n\006heroId\030\001 "
    "\001(\004\022\r\n\005error\030\002 \001(\r\"\"\n\022ReqAdvancementRank"
    "\022\014\n\004rank\030\001 \001(\r\"1\n\022AdvancementRankAck\022\014\n\004"
    "rank\030\001 \001(\r\022\r\n\005error\030\002 \001(\r\"\034\n\014ReqRankTitl"
    "e\022\014\n\004rank\030\001 \001(\r\"3\n\017RankTitlePlayer\022\r\n\005ti"
    "tle\030\001 \001(\r\022\021\n\tplayerNum\030\002 \001(\r\"F\n\014RankTitl"
    "eAck\022\014\n\004rank\030\001 \001(\r\022(\n\007players\030\002 \003(\0132\027.Ne"
    "tMsg.RankTitlePlayer\"\035\n\014ReqTitleInfo\022\r\n\005"
    "title\030\001 \001(\r\"+\n\017TitleInfoPlayer\022\n\n\002id\030\001 \001"
    "(\r\022\014\n\004name\030\002 \001(\t\"\233\001\n\014TitleInfoAck\022\r\n\005tit"
    "le\030\001 \001(\r\022\020\n\010leftTime\030\002 \001(\r\022\024\n\014curPlayerN"
    "um\030\003 \001(\r\022(\n\007players\030\004 \003(\0132\027.NetMsg.Title"
    "InfoPlayer\022\024\n\014meIsElection\030\005 \001(\010\022\024\n\014elec"
    "tionData\030\006 \001(\r\"!\n\020ReqElectionTitle\022\r\n\005ti"
    "tle\030\001 \001(\r\"C\n\020ElectionTitleAck\022\r\n\005title\030\001"
    " \001(\r\022\r\n\005error\030\002 \001(\r\022\021\n\tplayerNum\030\003 \001(\r\"\?"
    "\n\016HeroClassSkill\022\017\n\007skillId\030\001 \001(\r\022\017\n\007ski"
    "llLv\030\002 \001(\r\022\013\n\003exp\030\003 \001(\r\"\244\002\n\rHeroClassInf"
    "o\022\017\n\007classId\030\001 \001(\r\022\r\n\005force\030\002 \001(\r\022\036\n\004sta"
    "r\030\003 \001(\0132\020.NetMsg.HeroAttr\022\"\n\010strength\030\004 "
    "\001(\0132\020.NetMsg.HeroAttr\022$\n\nleadership\030\005 \001("
    "\0132\020.NetMsg.HeroAttr\022 \n\006wisdom\030\006 \001(\0132\020.Ne"
    "tMsg.HeroAttr\022\037\n\005charm\030\007 \001(\0132\020.NetMsg.He"
    "roAttr\022\036\n\004luck\030\010 \001(\0132\020.NetMsg.HeroAttr\022&"
    "\n\006skills\030\t \003(\0132\026.NetMsg.HeroClassSkill\"\037"
    "\n\014ReqHeroClass\022\017\n\007classId\030\001 \001(\r\"3\n\014HeroC"
    "lassAck\022#\n\004hero\030\001 \001(\0132\025.NetMsg.HeroClass"
    "Info\"C\n\rReqStudySkill\022\016\n\006heroId\030\001 \001(\004\022\021\n"
    "\theroClass\030\002 \001(\r\022\017\n\007skillId\030\003 \001(\r\"m\n\rStu"
    "dySkillAck\022\016\n\006heroId\030\001 \001(\004\022\021\n\theroClass\030"
    "\002 \001(\r\022\017\n\007skillId\030\003 \001(\r\022\013\n\003exp\030\004 \001(\r\022\014\n\004c"
    "rit\030\005 \001(\r\022\r\n\005error\030\006 \001(\r\"]\n\020ReqStudyProp"
    "erty\022\016\n\006heroId\030\001 \001(\004\022\021\n\theroClass\030\002 \001(\r\022"
    "&\n\004type\030\003 \001(\0162\030.NetMsg.HeroPropertyType\""
    "\214\001\n\020StudyPropertyAck\022\016\n\006heroId\030\001 \001(\004\022\021\n\t"
    "heroClass\030\002 \001(\r\022&\n\004type\030\003 \001(\0162\030.NetMsg.H"
    "eroPropertyType\022\020\n\010property\030\004 \001(\r\022\014\n\004cri"
    "t\030\005 \001(\r\022\r\n\005error\030\006 \001(\r\"(\n\rReqRaffleHero\022"
    "\n\n\002id\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"/\n\rRaffleHeroAc"
    "k\022\017\n\007heroUId\030\001 \003(\004\022\r\n\005error\030\002 \001(\r\" \n\022Req"
    "RaffleHeroTimes\022\n\n\002id\030\001 \001(\r\"D\n\022RaffleHer"
    "oTimesAck\022\n\n\002id\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\022\023\n\013"
    "oneRaffTime\030\003 \001(\r\"(\n\013ReqAddMoney\022\014\n\004type"
    "\030\001 \001(\005\022\013\n\003add\030\002 \001(\005\"7\n\013AddMoneyAck\022\014\n\004ty"
    "pe\030\001 \001(\005\022\013\n\003add\030\002 \001(\005\022\r\n\005error\030\003 \001(\r\"0\n\016"
    "ReqLevelUpCamp\022\036\n\004type\030\001 \001(\0162\020.NetMsg.Ca"
    "mpType\"\?\n\016LevelUpCampAck\022\036\n\004type\030\001 \001(\0162\020"
    ".NetMsg.CampType\022\r\n\005error\030\003 \001(\r\"0\n\016ReqCl"
    "earCampCD\022\036\n\004type\030\001 \001(\0162\020.NetMsg.CampTyp"
    "e\"\?\n\016ClearCampCDAck\022\036\n\004type\030\001 \001(\0162\020.NetM"
    "sg.CampType\022\r\n\005error\030\002 \001(\r\"/\n\014ReqCampSta"
    "te\022\037\n\005types\030\001 \003(\0162\020.NetMsg.CampType\"`\n\tC"
    "ampState\022\036\n\004type\030\001 \001(\0162\020.NetMsg.CampType"
    "\022\r\n\005level\030\002 \001(\r\022\022\n\noutputData\030\003 \001(\r\022\020\n\010l"
    "eftTime\030\004 \001(\r\"1\n\014CampStateAck\022!\n\006states\030"
    "\001 \003(\0132\021.NetMsg.CampState\"/\n\rReqGetCampOu"
    "t\022\036\n\004type\030\001 \001(\0162\020.NetMsg.CampType\"\?\n\rGet"
    "CampOutAck\022\036\n\004type\030\001 \001(\0162\020.NetMsg.CampTy"
    "pe\022\016\n\006output\030\002 \001(\r\"{\n\016CycleBattleAck\022\025\n\r"
    "maxDifficulty\030\001 \001(\r\022\025\n\rcurDifficulty\030\002 \001"
    "(\r\022\020\n\010curRound\030\003 \001(\r\022\027\n\017leftUnlockTimes\030"
    "\004 \001(\r\022\020\n\010leftTime\030\005 \001(\r\"!\n\020RefresshCycle"
    "Ack\022\r\n\005error\030\001 \001(\r\"(\n\022ReqSelectCycleDiff"
    "\022\022\n\ndifficulty\030\001 \001(\r\"7\n\022SelectCycleDiffA"
    "ck\022\022\n\ndifficulty\030\001 \001(\r\022\r\n\005error\030\002 \001(\r\"]\n"
    "\022CycleBattleInfoAck\022\021\n\tenemyPath\030\001 \001(\r\022\017"
    "\n\007percent\030\002 \001(\002\022\020\n\010battleId\030\003 \001(\004\022\021\n\tene"
    "myTeam\030\004 \001(\r\"f\n\032AdvantureEventStatusChan"
    "ge\022\022\n\nadvEventId\030\001 \001(\r\0224\n\016advEventStatus"
    "\030\002 \001(\0162\034.NetMsg.AdvantureEventStatus\"#\n\016"
    "ReqRecruitHero\022\021\n\trecruitId\030\001 \001(\r\"2\n\016Rec"
    "ruitHeroAck\022\021\n\trecruitId\030\001 \001(\r\022\r\n\005error\030"
    "\002 \001(\r\"&\n\020ReqRecruitedHero\022\022\n\nrecruitIds\030"
    "\001 \003(\r\"8\n\020RecruitedHeroAck\022\021\n\trecruitId\030\001"
    " \003(\r\022\021\n\trecruited\030\002 \003(\010\"<\n\020ReqVSBattleBe"
    "gin\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\016\n\006heroId\030"
    "\003 \001(\004\"7\n\rVSBattleEnemy\022\n\n\002id\030\001 \001(\r\022\014\n\004st"
    "ar\030\002 \001(\r\022\014\n\004nuqi\030\003 \001(\r\"t\n\020VSBattleBeginA"
    "ck\022\020\n\010battleId\030\001 \001(\004\022\014\n\004type\030\002 \001(\r\022\n\n\002id"
    "\030\003 \001(\r\022%\n\006enemys\030\004 \003(\0132\025.NetMsg.VSBattle"
    "Enemy\022\r\n\005error\030\005 \001(\r\"$\n\020ReqVSBattleReady"
    "\022\020\n\010battleId\030\001 \001(\004\"$\n\020VSBattleReadyAck\022\020"
    "\n\010battleId\030\001 \001(\004\">\n\016ReqVSBattleOpt\022\020\n\010ba"
    "ttleId\030\001 \001(\004\022\014\n\004type\030\002 \001(\r\022\014\n\004turn\030\003 \001(\r"
    "\">\n\016VSBattleOptAck\022\020\n\010battleId\030\001 \001(\004\022\014\n\004"
    "type\030\002 \001(\r\022\014\n\004turn\030\003 \001(\r\"P\n\021VSBattleUnit"
    "State\022\020\n\010battleId\030\001 \001(\004\022\n\n\002hp\030\002 \001(\r\022\014\n\004n"
    "uqi\030\003 \001(\r\022\017\n\007optType\030\004 \001(\r\"{\n\014VSBattleTu"
    "rn\022\020\n\010battleId\030\001 \001(\004\022*\n\007meState\030\002 \001(\0132\031."
    "NetMsg.VSBattleUnitState\022-\n\notherState\030\003"
    " \001(\0132\031.NetMsg.VSBattleUnitState\"0\n\013VSBat"
    "tleEnd\022\020\n\010battleId\030\001 \001(\004\022\017\n\007victory\030\002 \001("
    "\r\"#\n\016ReqBioHeroInfo\022\021\n\theroClass\030\001 \001(\r\"E"
    "\n\017BioHeroStepData\022\n\n\002id\030\001 \001(\r\022\014\n\004lock\030\002 "
    "\001(\010\022\030\n\020branchesComplete\030\003 \003(\r\"K\n\016BioHero"
    "InfoAck\022\021\n\theroClass\030\002 \001(\r\022&\n\005steps\030\001 \003("
    "\0132\027.NetMsg.BioHeroStepData\"I\n\022ReqBioHero"
    "StepDone\022\021\n\theroClass\030\001 \001(\r\022\016\n\006stepId\030\002 "
    "\001(\r\022\020\n\010branchId\030\003 \001(\r\"N\n\022BioHeroStepDone"
    "Ack\022\021\n\theroClass\030\001 \001(\r\022\016\n\006stepId\030\002 \001(\r\022\025"
    "\n\runlockStepIds\030\004 \003(\r\"\036\n\014ReqAddFriend\022\016\n"
    "\006userId\030\001 \001(\r\"!\n\017ReqRemoveFriend\022\016\n\006user"
    "Id\030\001 \001(\r\"!\n\017RemoveFriendAck\022\016\n\006userId\030\001 "
    "\001(\r\"/\n\nReqTopList\022!\n\004type\030\001 \001(\0162\023.NetMsg"
    ".TopListType\"h\n\nTopListAck\022!\n\004type\030\001 \001(\016"
    "2\023.NetMsg.TopListType\022$\n\007topData\030\002 \003(\0132\023"
    ".NetMsg.TopListData\022\021\n\tmyRanking\030\003 \001(\r\"\251"
    "\001\n\013TopListData\0224\n\016sortReputation\030\001 \001(\0132\032"
    ".NetMsg.SortReputationDataH\000\0220\n\014sortMili"
    "tary\030\002 \001(\0132\030.NetMsg.SortMilitaryDataH\000\022*"
    "\n\tsortLevel\030\003 \001(\0132\025.NetMsg.SortLevelData"
    "H\000B\006\n\004info\"\227\001\n\022SortReputationData\022\016\n\006use"
    "rID\030\001 \001(\r\022\016\n\006sortID\030\002 \001(\r\022\022\n\nplayerName\030"
    "\003 \001(\t\022\r\n\005force\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\r\n\005t"
    "itle\030\006 \001(\r\022\022\n\nreputation\030\007 \001(\r\022\014\n\004icon\030\010"
    " \001(\r\"\223\001\n\020SortMilitaryData\022\016\n\006userID\030\001 \001("
    "\r\022\016\n\006sortID\030\002 \001(\r\022\022\n\nplayerName\030\003 \001(\t\022\r\n"
    "\005force\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\r\n\005title\030\006 \001"
    "(\r\022\020\n\010military\030\007 \001(\r\022\014\n\004icon\030\010 \001(\r\"\220\001\n\rS"
    "ortLevelData\022\016\n\006userID\030\001 \001(\r\022\016\n\006sortID\030\002"
    " \001(\r\022\022\n\nplayerName\030\003 \001(\t\022\r\n\005force\030\004 \001(\r\022"
    "\r\n\005title\030\005 \001(\r\022\020\n\010military\030\006 \001(\r\022\r\n\005leve"
    "l\030\007 \001(\r\022\014\n\004icon\030\010 \001(\r\"t\n\nFriendInfo\022\016\n\006u"
    "serId\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003 \001(\r\022"
    "\r\n\005force\030\004 \001(\r\022\014\n\004rank\030\005 \001(\r\022\r\n\005title\030\006 "
    "\001(\r\022\016\n\006online\030\007 \001(\010\"5\n\016FriendsInfoAck\022#\n"
    "\007friends\030\001 \003(\0132\022.NetMsg.FriendInfo\"C\n\nMa"
    "ilSender\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004ic"
    "on\030\003 \001(\r\022\r\n\005title\030\004 \001(\r\"\261\001\n\010MailData\022\n\n\002"
    "id\030\001 \001(\r\022\020\n\010sendTime\030\002 \001(\003\022\"\n\006sender\030\003 \001"
    "(\0132\022.NetMsg.MailSender\022\r\n\005title\030\004 \001(\t\022\020\n"
    "\010hasAward\030\005 \001(\010\022\016\n\006isRead\030\006 \001(\010\022\022\n\nisGet"
    "Award\030\007 \001(\010\022\036\n\004type\030\010 \001(\0162\020.NetMsg.MailT"
    "ype\".\n\013MailInfoAck\022\037\n\005mails\030\001 \003(\0132\020.NetM"
    "sg.MailData\"\033\n\rReqMailDetail\022\n\n\002id\030\001 \001(\r"
    "\"J\n\rMailDetailAck\022\n\n\002id\030\001 \001(\r\022\017\n\007content"
    "\030\002 \001(\t\022\034\n\005award\030\003 \001(\0132\r.NetMsg.Award\"\035\n\017"
    "ReqGetMailAward\022\n\n\002id\030\001 \001(\r\"\035\n\017GetMailAw"
    "ardAck\022\n\n\002id\030\001 \001(\r\"\033\n\rReqDeleteMail\022\n\n\002i"
    "d\030\001 \001(\r\"\033\n\rDeleteMailAck\022\n\n\002id\030\001 \001(\r\"w\n\014"
    "BanquetHeros\022\013\n\003uid\030\001 \001(\r\022\021\n\tbanquetId\030\002"
    " \001(\r\022\r\n\005heros\030\003 \003(\r\022\017\n\007banquet\030\004 \003(\010\022\025\n\r"
    "leftFreeTimes\030\005 \001(\r\022\020\n\010leftTime\030\006 \001(\r\"4\n"
    "\016BanquetInfoAck\022\"\n\004info\030\001 \003(\0132\024.NetMsg.B"
    "anquetHeros\"+\n\016ReqBanquetHero\022\014\n\004type\030\001 "
    "\001(\r\022\013\n\003uid\030\002 \001(\r\";\n\016BanquetHeroAck\022\013\n\003ui"
    "d\030\001 \001(\r\022\r\n\005heros\030\002 \003(\004\022\r\n\005error\030\003 \001(\r\"\210\001"
    "\n\014WorldWarInfo\022\n\n\002id\030\001 \001(\r\022\016\n\006force1\030\002 \001"
    "(\r\022\016\n\006force2\030\003 \001(\r\022\014\n\004type\030\004 \001(\r\022\014\n\004path"
    "\030\005 \001(\r\022\017\n\007percent\030\006 \001(\002\022\020\n\010leftTime\030\007 \001("
    "\r\022\r\n\005warId\030\010 \001(\r\"1\n\013WorldWarAck\022\"\n\004wars\030"
    "\001 \003(\0132\024.NetMsg.WorldWarInfo\"\034\n\016ReqWorldB"
    "attle\022\n\n\002id\030\001 \001(\r\"\?\n\016WorldBattleAck\022\n\n\002i"
    "d\030\001 \001(\r\022!\n\006battle\030\002 \001(\0132\021.NetMsg.BattleA"
    "ck\" \n\022ReqWorldWarTopList\022\n\n\002id\030\001 \001(\r\"n\n\020"
    "WorldWarUserInfo\022\016\n\006userId\030\001 \001(\r\022\017\n\007expl"
    "oit\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\r\n\005title\030\004 \001(\r\022\r"
    "\n\005force\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\"\360\001\n\022WorldWa"
    "rTopListAck\022\n\n\002id\030\001 \001(\r\022)\n\007tolList\030\002 \003(\013"
    "2\030.NetMsg.WorldWarUserInfo\022*\n\010lastList\030\003"
    " \003(\0132\030.NetMsg.WorldWarUserInfo\022\017\n\007tolRan"
    "k\030\004 \001(\r\022\020\n\010lastRank\030\005 \001(\r\022\022\n\ntolExploit\030"
    "\006 \001(\r\022\023\n\013lastExploit\030\007 \001(\r\022\023\n\013tolLeftTim"
    "e\030\010 \001(\r\022\026\n\016periodLeftTime\030\t \001(\r\"-\n\010TeamI"
    "nfo\022\016\n\006heroId\030\001 \003(\004\022\021\n\tclusterId\030\002 \001(\004\"."
    "\n\013TeamInfoAck\022\037\n\005infos\030\001 \003(\0132\020.NetMsg.Te"
    "amInfo\")\n\nReqSetTeam\022\013\n\003pos\030\001 \001(\r\022\016\n\006her"
    "oId\030\002 \003(\004\"8\n\nSetTeamAck\022\013\n\003pos\030\001 \001(\r\022\016\n\006"
    "heroId\030\002 \003(\004\022\r\n\005error\030\003 \001(\r\"D\n\021ReqWriteS"
    "killBook\022\016\n\006heroId\030\001 \001(\004\022\037\n\005items\030\002 \003(\0132"
    "\020.NetMsg.ItemInfo\"C\n\021WriteSkillBookAck\022\037"
    "\n\005items\030\001 \003(\0132\020.NetMsg.ItemInfo\022\r\n\005error"
    "\030\002 \001(\r\"\"\n\016ReqTeamRunPath\022\020\n\010position\030\001 \001"
    "(\r\"U\n\016TeamRunPathAck\022\020\n\010position\030\001 \001(\r\022 "
    "\n\004path\030\002 \001(\0132\022.NetMsg.RunPathAck\022\017\n\007curC"
    "ity\030\003 \001(\005\"D\n\016SetTeamRunPath\022\020\n\010position\030"
    "\001 \001(\r\022 \n\004path\030\002 \001(\0132\022.NetMsg.RunPathAck\""
    "G\n\021ReqTeamArrivedTar\022\020\n\010position\030\001 \001(\r\022 "
    "\n\004path\030\002 \001(\0132\022.NetMsg.RunPathAck\"G\n\021Team"
    "ArrivedTarAck\022\020\n\010position\030\001 \001(\r\022 \n\004path\030"
    "\002 \001(\0132\022.NetMsg.RunPathAck\"4\n\021ClusterMemb"
    "erInfo\022\016\n\006userId\030\001 \001(\r\022\017\n\007teamPos\030\002 \001(\r\""
    "1\n\016ClusterCreater\022\021\n\tcreaterId\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\"o\n\013ClusterInfo\022\013\n\003uid\030\001 \001(\004\022\'"
    "\n\007creater\030\002 \001(\0132\026.NetMsg.ClusterCreater\022"
    "*\n\007members\030\003 \003(\0132\031.NetMsg.ClusterMemberI"
    "nfo\"#\n\024ReqClusterDetailInfo\022\013\n\003uid\030\001 \001(\004"
    "\"=\n\020TeamMemberDetail\022\016\n\006heroId\030\001 \001(\r\022\r\n\005"
    "level\030\002 \001(\r\022\n\n\002hp\030\003 \001(\005\"`\n\023ClusterMember"
    "Detail\022\016\n\006userId\030\001 \001(\r\022\020\n\010userName\030\002 \001(\t"
    "\022\'\n\005heros\030\003 \003(\0132\030.NetMsg.TeamMemberDetai"
    "l\"-\n\021ReqSetClusterAttr\022\013\n\003uid\030\001 \001(\004\022\013\n\003p"
    "ub\030\002 \001(\010\"<\n\021SetClusterAttrAck\022\013\n\003uid\030\001 \001"
    "(\004\022\013\n\003pub\030\002 \001(\010\022\r\n\005error\030\003 \001(\r\"m\n\024Cluste"
    "rDetailInfoAck\022\013\n\003uid\030\001 \001(\004\022,\n\007members\030\002"
    " \003(\0132\033.NetMsg.ClusterMemberDetail\022\013\n\003pub"
    "\030\003 \001(\010\022\r\n\005error\030\004 \001(\r\"4\n\016ClusterInfoAck\022"
    "\"\n\005infos\030\001 \003(\0132\023.NetMsg.ClusterInfo\"3\n\rA"
    "llClusterAck\022\"\n\005infos\030\001 \003(\0132\023.NetMsg.Clu"
    "sterInfo\".\n\020CreateClusterAck\022\013\n\003uid\030\001 \001("
    "\004\022\r\n\005error\030\002 \001(\r\".\n\016ReqJoinCluster\022\013\n\003ui"
    "d\030\001 \001(\004\022\017\n\007teamPos\030\002 \001(\r\"=\n\016JoinClusterA"
    "ck\022\013\n\003uid\030\001 \001(\004\022\017\n\007teamPos\030\002 \001(\r\022\r\n\005erro"
    "r\030\003 \001(\r\".\n\016ReqExitCluster\022\013\n\003uid\030\001 \001(\004\022\017"
    "\n\007teamPos\030\002 \001(\r\"=\n\016ExitClusterAck\022\013\n\003uid"
    "\030\001 \001(\004\022\017\n\007teamPos\030\002 \001(\r\022\r\n\005error\030\003 \001(\r\"\035"
    "\n\013ReqCityItem\022\016\n\006cityId\030\001 \001(\r\"D\n\013CityIte"
    "mAck\022&\n\010cityItem\030\001 \003(\0132\024.NetMsg.CityItem"
    "Info\022\r\n\005error\030\002 \001(\r\"\035\n\013ReqCityHero\022\016\n\006ci"
    "tyId\030\001 \001(\r\"D\n\013CityHeroAck\022&\n\010cityHero\030\001 "
    "\003(\0132\024.NetMsg.CityHeroInfo\022\r\n\005error\030\002 \001(\r"
    "\"\203\001\n\014ResourceInfo\022\013\n\003uid\030\001 \001(\r\022\014\n\004star\030\002"
    " \001(\r\022\"\n\004type\030\003 \001(\0162\024.NetMsg.ResourceType"
    "\022\023\n\013resourceNum\030\004 \001(\r\022\020\n\010leftTime\030\005 \001(\r\022"
    "\r\n\005posId\030\006 \001(\r\"5\n\017ResourceInfoAck\022\"\n\004inf"
    "o\030\001 \003(\0132\024.NetMsg.ResourceInfo\"$\n\025ReqReso"
    "urceDetailInfo\022\013\n\003uid\030\001 \001(\r\":\n\022ResourceD"
    "etailInfo\022\017\n\007teamPos\030\001 \001(\r\022\023\n\013resourceNu"
    "m\030\002 \001(\r\"x\n\025ResourceDetailInfoAck\022\013\n\003uid\030"
    "\001 \001(\r\022\023\n\013resourceNum\030\002 \001(\r\022.\n\ndetailInfo"
    "\030\003 \003(\0132\032.NetMsg.ResourceDetailInfo\022\r\n\005er"
    "ror\030\004 \001(\r\"&\n\024RegInviteJoinCluster\022\016\n\006use"
    "rId\030\001 \001(\r\"5\n\024InviteJoinClusterAck\022\016\n\006use"
    "rId\030\001 \001(\r\022\r\n\005error\030\002 \001(\r\"L\n\025UserInviteJo"
    "inCluster\022\016\n\006userId\030\001 \001(\r\022\021\n\tclusterId\030\002"
    " \001(\004\022\020\n\010userName\030\003 \001(\t\"F\n\021ClusterRunPath"
    "Ack\022 \n\004path\030\001 \001(\0132\022.NetMsg.RunPathAck\022\017\n"
    "\007curCity\030\002 \001(\005\"5\n\021SetClusterRunPath\022 \n\004p"
    "ath\030\001 \001(\0132\022.NetMsg.RunPathAck\"8\n\024ReqClus"
    "terArrivedTar\022 \n\004path\030\001 \001(\0132\022.NetMsg.Run"
    "PathAck\"8\n\024ClusterArrivedTarAck\022 \n\004path\030"
    "\001 \001(\0132\022.NetMsg.RunPathAck\"&\n\020ReqEnterWor"
    "ldWar\022\022\n\nworldWarId\030\001 \001(\r\"u\n\020EnterWorldW"
    "arAck\022\022\n\nworldWarId\030\001 \001(\r\022\017\n\007sceneId\030\002 \001"
    "(\r\022-\n\005force\030\003 \001(\0162\036.NetMsg.WorldWarScene"
    "ForceType\022\r\n\005error\030\004 \001(\r\"\'\n\021ReqWorldWarS"
    "tatus\022\022\n\nworldWarId\030\001 \001(\r\"l\n\027WorldWarSce"
    "neBlockState\022\017\n\007blockId\030\001 \001(\r\0220\n\010occupie"
    "d\030\002 \001(\0162\036.NetMsg.WorldWarSceneForceType\022"
    "\016\n\006number\030\003 \001(\r\"\274\001\n\032WorldWarSceneBuildin"
    "gState\022\017\n\007blockId\030\001 \001(\r\022/\n\004type\030\002 \001(\0162!."
    "NetMsg.WorldWarSceneBuildingType\0220\n\010occu"
    "pied\030\003 \001(\0162\036.NetMsg.WorldWarSceneForceTy"
    "pe\022\025\n\rcurrentHealth\030\004 \001(\r\022\023\n\013totalHealth"
    "\030\005 \001(\r\"\237\002\n\022WorldWarSceneAgent\022\017\n\007agentId"
    "\030\001 \001(\r\022\016\n\006userId\030\002 \001(\r\022\021\n\tisCluster\030\003 \001("
    "\010\022\032\n\022clusterIdOrTeamPos\030\004 \001(\004\022.\n\005state\030\005"
    " \001(\0162\037.NetMsg.WorldWarSceneForceState\022\025\n"
    "\rcurrentHealth\030\006 \001(\r\022\023\n\013totalHealth\030\007 \001("
    "\r\022\020\n\010attackCD\030\010 \001(\r\022\016\n\006moveCD\030\t \001(\r\022\026\n\016c"
    "urrentBlockId\030\n \001(\r\022\025\n\rDefenceTarget\030\013 \001"
    "(\r\022\014\n\004path\030\014 \003(\r\"\377\001\n\021WorldWarStatusAck\022\022"
    "\n\nworldWarId\030\001 \001(\r\022/\n\006blocks\030\002 \003(\0132\037.Net"
    "Msg.WorldWarSceneBlockState\0225\n\tbuildings"
    "\030\003 \003(\0132\".NetMsg.WorldWarSceneBuildingSta"
    "te\022*\n\006agents\030\004 \003(\0132\032.NetMsg.WorldWarScen"
    "eAgent\0223\n\017importantAgents\030\005 \003(\0132\032.NetMsg"
    ".WorldWarSceneAgent\022\r\n\005error\030\006 \001(\r\"D\n\017Re"
    "qWorldWarMove\022\022\n\nworldWarId\030\001 \001(\r\022\017\n\007age"
    "ntId\030\002 \001(\r\022\014\n\004path\030\003 \003(\r\"E\n\017WorldWarMove"
    "Ack\022\022\n\nworldWarId\030\001 \001(\r\022\017\n\007agentId\030\002 \001(\r"
    "\022\r\n\005error\030\003 \001(\r\"9\n\022ReqWorldWarDefence\022\022\n"
    "\nworldWarId\030\001 \001(\r\022\017\n\007agentId\030\002 \001(\r\"H\n\022Wo"
    "rldWarDefenceAck\022\022\n\nworldWarId\030\001 \001(\r\022\017\n\007"
    "agentId\030\002 \001(\r\022\r\n\005error\030\003 \001(\r\"P\n\030ReqWorld"
    "WarDefenceTarget\022\022\n\nworldWarId\030\001 \001(\r\022\017\n\007"
    "agentId\030\002 \001(\r\022\017\n\007blockId\030\003 \001(\r\"N\n\030WorldW"
    "arDefenceTargetAck\022\022\n\nworldWarId\030\001 \001(\r\022\017"
    "\n\007agentId\030\002 \001(\r\022\r\n\005error\030\003 \001(\r\"&\n\020ReqLea"
    "veWorldWar\022\022\n\nworldWarId\030\001 \001(\r\"&\n\020LeaveW"
    "orldWarAck\022\022\n\nworldWarId\030\001 \001(\r\"j\n\007ReqTes"
    "t\022\t\n\001a\030\001 \001(\t\022\t\n\001b\030\002 \001(\002\022\t\n\001c\030\003 \001(\005\022\t\n\001d\030"
    "\004 \001(\r\022\t\n\001e\030\005 \001(\010\022\t\n\001f\030\006 \003(\t\022\035\n\001g\030\007 \001(\0132\022"
    ".NetMsg.PlayerData\"j\n\007TestAck\022\t\n\001a\030\001 \001(\t"
    "\022\t\n\001b\030\002 \001(\002\022\t\n\001c\030\003 \001(\005\022\t\n\001d\030\004 \001(\r\022\t\n\001e\030\005"
    " \001(\010\022\t\n\001f\030\006 \003(\t\022\035\n\001g\030\007 \001(\0132\022.NetMsg.Play"
    "erData*>\n\014ServerStatus\022\007\n\003New\020\000\022\010\n\004Busy\020"
    "\001\022\017\n\013Maintenance\020\002\022\n\n\006Normal\020\003*F\n\010ChatTy"
    "pe\022\014\n\010PToPChat\020\000\022\r\n\tWorldChat\020\001\022\r\n\tForce"
    "Chat\020\002\022\016\n\nFriendChat\020\003*H\n\010RunState\022\017\n\013No"
    "nRunState\020\000\022\021\n\rArrivedTarget\020\001\022\014\n\010PauseR"
    "un\020\002\022\n\n\006Runing\020\003*T\n\rRunTargetType\022\r\n\tRun"
    "ToCity\020\000\022\016\n\nRunToQuest\020\001\022\021\n\rRunToWorldWa"
    "r\020\002\022\021\n\rRunToResource\020\003*\224\001\n\032QuestDiscover"
    "yFinishedType\022\022\n\016NoFinishedType\020\000\022\021\n\rFin"
    "dItemError\020\001\022\021\n\rFindHeroError\020\002\022\017\n\013NotFi"
    "ndItem\020\003\022\014\n\010FindItem\020\004\022\017\n\013NotFindHero\020\005\022"
    "\014\n\010FindHero\020\006*e\n\nQuestState\022\020\n\014NoQuestSt"
    "ate\020\000\022\022\n\016NotAcceptQuest\020\001\022\017\n\013AcceptQuest"
    "\020\002\022\017\n\013FinishQuest\020\003\022\017\n\013SubmitQuest\020\004*\255\001\n"
    "\tQuestType\022\017\n\013NoQuestType\020\000\022\030\n\024Construct"
    "Agriculture\020\001\022\025\n\021ConstructBusiness\020\002\022\025\n\021"
    "ConstructMilitary\020\003\022\021\n\rBattleCateran\020\004\022\016"
    "\n\nVisitQuest\020\005\022\025\n\021ConscriptionQuest\020\006\022\r\n"
    "\tDiscovery\020\007*=\n\024AdvantureEventStatus\022\016\n\n"
    "InProgress\020\000\022\010\n\004Done\020\001\022\013\n\007Invalid\020\002*v\n\020H"
    "eroPropertyType\022\017\n\013NonHeroType\020\000\022\020\n\014Hero"
    "Strength\020\001\022\022\n\016HeroLeadership\020\002\022\016\n\nHeroWi"
    "sdom\020\003\022\r\n\tHeroCharm\020\004\022\014\n\010HeroLuck\020\005*l\n\010C"
    "ampType\022\017\n\013NonCampType\020\000\022\014\n\010BaseCamp\020\001\022\016"
    "\n\nMarketCamp\020\002\022\020\n\014FarmlandCamp\020\003\022\017\n\013Barr"
    "ackCamp\020\004\022\016\n\nArmoryCamp\020\005*5\n\013TopListType"
    "\022\013\n\007NonType\020\000\022\016\n\nReputation\020\001\022\t\n\005Level\020\002"
    "*J\n\010MailType\022\017\n\013NonMailTyep\020\000\022\016\n\nSystemM"
    "ail\020\001\022\016\n\nPlayerMail\020\002\022\r\n\tTitleMail\020\003*o\n\014"
    "ResourceType\022\020\n\014ResourceNone\020\000\022\026\n\022Resour"
    "ceProvisions\020\001\022\020\n\014ResourceWood\020\002\022\021\n\rReso"
    "urceStone\020\003\022\020\n\014ResourceIron\020\004*\?\n\026WorldWa"
    "rSceneForceType\022\r\n\tForceNone\020\000\022\n\n\006Force1"
    "\020\001\022\n\n\006Force2\020\002*:\n\027WorldWarSceneForceStat"
    "e\022\r\n\tStateMove\020\000\022\020\n\014StateDefence\020\001*\177\n\031Wo"
    "rldWarSceneBuildingType\022\010\n\004None\020\000\022\010\n\004Bas"
    "e\020\001\022\016\n\nStronghold\020\002\022\010\n\004Barn\020\003\022\013\n\007Barrack"
    "\020\004\022\t\n\005Tower\020\005\022\016\n\nSpawnPoint\020\006\022\014\n\010Catapul"
    "t\020\007B\016B\nNetMessageH\001b\006proto3", 26267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetMsg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetMsg_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_NetMsg_2eproto_once_);
void protobuf_AddDesc_NetMsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_NetMsg_2eproto_once_,
                 &protobuf_AddDesc_NetMsg_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetMsg_2eproto {
  StaticDescriptorInitializer_NetMsg_2eproto() {
    protobuf_AddDesc_NetMsg_2eproto();
  }
} static_descriptor_initializer_NetMsg_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_descriptor_;
}
bool ServerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatType_descriptor_;
}
bool ChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RunState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunState_descriptor_;
}
bool RunState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RunTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunTargetType_descriptor_;
}
bool RunTargetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestDiscoveryFinishedType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestDiscoveryFinishedType_descriptor_;
}
bool QuestDiscoveryFinishedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestState_descriptor_;
}
bool QuestState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestType_descriptor_;
}
bool QuestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdvantureEventStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantureEventStatus_descriptor_;
}
bool AdvantureEventStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HeroPropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroPropertyType_descriptor_;
}
bool HeroPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CampType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampType_descriptor_;
}
bool CampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TopListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopListType_descriptor_;
}
bool TopListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailType_descriptor_;
}
bool MailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceType_descriptor_;
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorldWarSceneForceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarSceneForceType_descriptor_;
}
bool WorldWarSceneForceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorldWarSceneForceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarSceneForceState_descriptor_;
}
bool WorldWarSceneForceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorldWarSceneBuildingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarSceneBuildingType_descriptor_;
}
bool WorldWarSceneBuildingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_Type_descriptor_;
}
bool MessageType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 100001:
    case 100002:
    case 100003:
    case 100004:
    case 100005:
    case 100006:
    case 16777200:
    case 16777201:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MessageType_Type MessageType::ReqLogin;
const MessageType_Type MessageType::LoginAck;
const MessageType_Type MessageType::ReqVersionInfo;
const MessageType_Type MessageType::VersionInfoAck;
const MessageType_Type MessageType::ReqUserNamePass;
const MessageType_Type MessageType::UserNamePassAck;
const MessageType_Type MessageType::ReqRegister;
const MessageType_Type MessageType::RegisterAck;
const MessageType_Type MessageType::ReqEnterGame;
const MessageType_Type MessageType::EnterGameAck;
const MessageType_Type MessageType::ReqCreateUser;
const MessageType_Type MessageType::CreateUserAck;
const MessageType_Type MessageType::ReqServerList;
const MessageType_Type MessageType::ServerListAck;
const MessageType_Type MessageType::ReqThirdPartyLogin;
const MessageType_Type MessageType::ReqOrderId;
const MessageType_Type MessageType::OrderIdAck;
const MessageType_Type MessageType::UpdatePlayerAck;
const MessageType_Type MessageType::ReqChat;
const MessageType_Type MessageType::ChatAck;
const MessageType_Type MessageType::ReqUserNick;
const MessageType_Type MessageType::UserNickAck;
const MessageType_Type MessageType::ReqHero;
const MessageType_Type MessageType::HeroAck;
const MessageType_Type MessageType::ReqItem;
const MessageType_Type MessageType::ItemAck;
const MessageType_Type MessageType::UpdateSkill;
const MessageType_Type MessageType::SetNewGuide;
const MessageType_Type MessageType::ReqRunPath;
const MessageType_Type MessageType::RunPathAck;
const MessageType_Type MessageType::SetRunPath;
const MessageType_Type MessageType::ArrivedCity;
const MessageType_Type MessageType::ReqHeroFormation;
const MessageType_Type MessageType::HeroFormationAck;
const MessageType_Type MessageType::SetHeroFormation;
const MessageType_Type MessageType::ReqCityInfo;
const MessageType_Type MessageType::CityInfoAck;
const MessageType_Type MessageType::ReqQuestList;
const MessageType_Type MessageType::QuestListAck;
const MessageType_Type MessageType::ReqQuestInfo;
const MessageType_Type MessageType::QuestInfoAck;
const MessageType_Type MessageType::GiveAward;
const MessageType_Type MessageType::ReqDoQuest;
const MessageType_Type MessageType::DoQuestAck;
const MessageType_Type MessageType::ReqSubmitQuest;
const MessageType_Type MessageType::SubmitQuestAck;
const MessageType_Type MessageType::ReqAcceptQuest;
const MessageType_Type MessageType::AcceptQuestAck;
const MessageType_Type MessageType::ReqClearHeroCD;
const MessageType_Type MessageType::ClearHeroCDAck;
const MessageType_Type MessageType::ReqRefreshQuest;
const MessageType_Type MessageType::RefreshQuestAck;
const MessageType_Type MessageType::ReqBattle;
const MessageType_Type MessageType::BattleAck;
const MessageType_Type MessageType::ReqBattleEnd;
const MessageType_Type MessageType::BattleEndAck;
const MessageType_Type MessageType::ReqHeroUseItem;
const MessageType_Type MessageType::HeroUserItemAck;
const MessageType_Type MessageType::ReqUseItem;
const MessageType_Type MessageType::UseItemAck;
const MessageType_Type MessageType::ReqAdvantureInfo;
const MessageType_Type MessageType::AdvantureInfoAck;
const MessageType_Type MessageType::ReqAdvanture;
const MessageType_Type MessageType::AdvantureAck;
const MessageType_Type MessageType::ReqAdvantureEventDone;
const MessageType_Type MessageType::AdvantureEventDoneAck;
const MessageType_Type MessageType::ReqHeroFriendship;
const MessageType_Type MessageType::HeroFriendshipAck;
const MessageType_Type MessageType::ReqGiveHeroGift;
const MessageType_Type MessageType::GiveHeroGiftAck;
const MessageType_Type MessageType::ReqShopItem;
const MessageType_Type MessageType::ShopItemAck;
const MessageType_Type MessageType::ReqBuyShop;
const MessageType_Type MessageType::BuyShopAck;
const MessageType_Type MessageType::ReqRefreshShop;
const MessageType_Type MessageType::RefreshShopAck;
const MessageType_Type MessageType::ReqEvolveHero;
const MessageType_Type MessageType::EvolveHeroAck;
const MessageType_Type MessageType::ReqAdvancementRank;
const MessageType_Type MessageType::AdvancementRankAck;
const MessageType_Type MessageType::ReqHeroClass;
const MessageType_Type MessageType::HeroClassAck;
const MessageType_Type MessageType::ReqStudySkill;
const MessageType_Type MessageType::StudySkillAck;
const MessageType_Type MessageType::ReqStudyProperty;
const MessageType_Type MessageType::StudyPropertyAck;
const MessageType_Type MessageType::ReqRaffleHero;
const MessageType_Type MessageType::RaffleHeroAck;
const MessageType_Type MessageType::ReqRankTitle;
const MessageType_Type MessageType::RankTitleAck;
const MessageType_Type MessageType::ReqTitleInfo;
const MessageType_Type MessageType::TitleInfoAck;
const MessageType_Type MessageType::ReqElectionTitle;
const MessageType_Type MessageType::ElectionTitleAck;
const MessageType_Type MessageType::ReqLevelUpCamp;
const MessageType_Type MessageType::LevelUpCampAck;
const MessageType_Type MessageType::ReqCampState;
const MessageType_Type MessageType::CampStateAck;
const MessageType_Type MessageType::ReqGetCampOut;
const MessageType_Type MessageType::GetCampOutAck;
const MessageType_Type MessageType::ReqClearCampCD;
const MessageType_Type MessageType::ClearCampCDAck;
const MessageType_Type MessageType::ReqCycleBattle;
const MessageType_Type MessageType::CycleBattleAck;
const MessageType_Type MessageType::ReqRefresshCycle;
const MessageType_Type MessageType::RefresshCycleAck;
const MessageType_Type MessageType::ReqSelectCycleDiff;
const MessageType_Type MessageType::SelectCycleDiffAck;
const MessageType_Type MessageType::ReqCycleBattleInfo;
const MessageType_Type MessageType::CycleBattleInfoAck;
const MessageType_Type MessageType::AdvantureEventStatusChange;
const MessageType_Type MessageType::ReqRecruitHero;
const MessageType_Type MessageType::RecruitHeroAck;
const MessageType_Type MessageType::ReqRecruitedHero;
const MessageType_Type MessageType::RecruitedHeroAck;
const MessageType_Type MessageType::ReqVSBattleBegin;
const MessageType_Type MessageType::VSBattleBeginAck;
const MessageType_Type MessageType::ReqVSBattleReady;
const MessageType_Type MessageType::VSBattleReadyAck;
const MessageType_Type MessageType::ReqVSBattleOpt;
const MessageType_Type MessageType::VSBattleOptAck;
const MessageType_Type MessageType::VSBattleTurn;
const MessageType_Type MessageType::VSBattleEnd;
const MessageType_Type MessageType::ReqBioHeroInfo;
const MessageType_Type MessageType::BioHeroInfoAck;
const MessageType_Type MessageType::ReqBioHeroStepDone;
const MessageType_Type MessageType::BioHeroStepDoneAck;
const MessageType_Type MessageType::ReqAddFriend;
const MessageType_Type MessageType::ReqRemoveFriend;
const MessageType_Type MessageType::ReqFriendsInfo;
const MessageType_Type MessageType::FriendsInfoAck;
const MessageType_Type MessageType::ReqMailInfo;
const MessageType_Type MessageType::MailInfoAck;
const MessageType_Type MessageType::ReqMailDetail;
const MessageType_Type MessageType::MailDetailAck;
const MessageType_Type MessageType::ReqDeleteMail;
const MessageType_Type MessageType::DeleteMailAck;
const MessageType_Type MessageType::ReqGetMailAward;
const MessageType_Type MessageType::GetMailAwardAck;
const MessageType_Type MessageType::ReqRaffleHeroTimes;
const MessageType_Type MessageType::RaffleHeroTimesAck;
const MessageType_Type MessageType::ReqBanquetInfo;
const MessageType_Type MessageType::BanquetInfoAck;
const MessageType_Type MessageType::ReqBanquetHero;
const MessageType_Type MessageType::BanquetHeroAck;
const MessageType_Type MessageType::ReqPrepareBattle;
const MessageType_Type MessageType::PrepareBattleAck;
const MessageType_Type MessageType::RemoveFriendAck;
const MessageType_Type MessageType::ReqTopList;
const MessageType_Type MessageType::TopListAck;
const MessageType_Type MessageType::ReqWorldWar;
const MessageType_Type MessageType::WorldWarAck;
const MessageType_Type MessageType::ReqWorldBattle;
const MessageType_Type MessageType::WorldBattleAck;
const MessageType_Type MessageType::ReqWorldWarTopList;
const MessageType_Type MessageType::WorldWarTopListAck;
const MessageType_Type MessageType::ReqHeroGeneralSoul;
const MessageType_Type MessageType::HeroGeneralSoulAck;
const MessageType_Type MessageType::ReqGeneralSoulExchangeHero;
const MessageType_Type MessageType::GeneralSoulExchangeHeroAck;
const MessageType_Type MessageType::ReqUserLearnVsCD;
const MessageType_Type MessageType::UserLearnVsCDAck;
const MessageType_Type MessageType::ReqTeamInfo;
const MessageType_Type MessageType::TeamInfoAck;
const MessageType_Type MessageType::ReqSetTeam;
const MessageType_Type MessageType::SetTeamAck;
const MessageType_Type MessageType::ReqClusterInfo;
const MessageType_Type MessageType::ClusterInfoAck;
const MessageType_Type MessageType::ReqAllCluster;
const MessageType_Type MessageType::AllClusterAck;
const MessageType_Type MessageType::ReqCreateCluster;
const MessageType_Type MessageType::CreateClusterAck;
const MessageType_Type MessageType::ReqJoinCluster;
const MessageType_Type MessageType::JoinClusterAck;
const MessageType_Type MessageType::ReqSetClusterAttr;
const MessageType_Type MessageType::SetClusterAttrAck;
const MessageType_Type MessageType::ReqExitCluster;
const MessageType_Type MessageType::ExitClusterAck;
const MessageType_Type MessageType::ReqWriteSkillBook;
const MessageType_Type MessageType::WriteSkillBookAck;
const MessageType_Type MessageType::ReqTeamRunPath;
const MessageType_Type MessageType::TeamRunPathAck;
const MessageType_Type MessageType::SetTeamRunPath;
const MessageType_Type MessageType::ReqTeamArrivedTar;
const MessageType_Type MessageType::TeamArrivedTarAck;
const MessageType_Type MessageType::ReqClusterDetailInfo;
const MessageType_Type MessageType::ClusterDetailInfoAck;
const MessageType_Type MessageType::ReqCityItem;
const MessageType_Type MessageType::CityItemAck;
const MessageType_Type MessageType::ReqCityHero;
const MessageType_Type MessageType::CityHeroAck;
const MessageType_Type MessageType::ReqResourceInfo;
const MessageType_Type MessageType::ResourceInfoAck;
const MessageType_Type MessageType::ReqResourceDetailInfo;
const MessageType_Type MessageType::ResourceDetailInfoAck;
const MessageType_Type MessageType::RegInviteJoinCluster;
const MessageType_Type MessageType::InviteJoinClusterAck;
const MessageType_Type MessageType::UserInviteJoinCluster;
const MessageType_Type MessageType::ReqClusterRunPath;
const MessageType_Type MessageType::ClusterRunPathAck;
const MessageType_Type MessageType::SetClusterRunPath;
const MessageType_Type MessageType::ReqClusterArrivedTar;
const MessageType_Type MessageType::ClusterArrivedTarAck;
const MessageType_Type MessageType::ReqEnterWorldWar;
const MessageType_Type MessageType::EnterWorldWarAck;
const MessageType_Type MessageType::ReqWorldWarStatus;
const MessageType_Type MessageType::WorldWarStatusAck;
const MessageType_Type MessageType::ReqWorldWarMove;
const MessageType_Type MessageType::WorldWarMoveAck;
const MessageType_Type MessageType::ReqWorldWarDefence;
const MessageType_Type MessageType::WorldWarDefenceAck;
const MessageType_Type MessageType::ReqWorldWarDefenceTarget;
const MessageType_Type MessageType::WorldWarDefenceTargetAck;
const MessageType_Type MessageType::ReqLeaveWorldWar;
const MessageType_Type MessageType::LeaveWorldWarAck;
const MessageType_Type MessageType::ReqAddHero;
const MessageType_Type MessageType::AddHeroAck;
const MessageType_Type MessageType::ReqAddItem;
const MessageType_Type MessageType::AddItemAck;
const MessageType_Type MessageType::ReqAddMoney;
const MessageType_Type MessageType::AddMoneyAck;
const MessageType_Type MessageType::ReqTest;
const MessageType_Type MessageType::TestAck;
const MessageType_Type MessageType::Type_MIN;
const MessageType_Type MessageType::Type_MAX;
const int MessageType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageType::MessageType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.MessageType)
}

void MessageType::InitAsDefaultInstance() {
}

MessageType::MessageType(const MessageType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.MessageType)
}

void MessageType::SharedCtor() {
  _cached_size_ = 0;
}

MessageType::~MessageType() {
  // @@protoc_insertion_point(destructor:NetMsg.MessageType)
  SharedDtor();
}

void MessageType::SharedDtor() {
}

void MessageType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}

const MessageType& MessageType::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageType> MessageType_default_instance_;

MessageType* MessageType::New(::google::protobuf::Arena* arena) const {
  MessageType* n = new MessageType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.MessageType)
}

bool MessageType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.MessageType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.MessageType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.MessageType)
  return false;
#undef DO_
}

void MessageType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.MessageType)
  // @@protoc_insertion_point(serialize_end:NetMsg.MessageType)
}

::google::protobuf::uint8* MessageType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.MessageType)
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.MessageType)
  return target;
}

size_t MessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.MessageType)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.MessageType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.MessageType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.MessageType)
    UnsafeMergeFrom(*source);
  }
}

void MessageType::MergeFrom(const MessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.MessageType)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageType::UnsafeMergeFrom(const MessageType& from) {
  GOOGLE_DCHECK(&from != this);
}

void MessageType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.MessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageType::CopyFrom(const MessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.MessageType)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageType::IsInitialized() const {

  return true;
}

void MessageType::Swap(MessageType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageType::InternalSwap(MessageType* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageType_descriptor_;
  metadata.reflection = MessageType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageType

inline const MessageType* MessageType::internal_default_instance() {
  return &MessageType_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLogin::kNameFieldNumber;
const int ReqLogin::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLogin::ReqLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqLogin)
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqLogin)
}

void ReqLogin::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqLogin::~ReqLogin() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqLogin)
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqLogin> ReqLogin_default_instance_;

ReqLogin* ReqLogin::New(::google::protobuf::Arena* arena) const {
  ReqLogin* n = new ReqLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqLogin)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqLogin.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqLogin.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqLogin)
  return false;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqLogin)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqLogin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqLogin.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqLogin)
}

::google::protobuf::uint8* ReqLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqLogin)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqLogin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqLogin.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqLogin)
  return target;
}

size_t ReqLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqLogin)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqLogin)
    UnsafeMergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqLogin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqLogin::UnsafeMergeFrom(const ReqLogin& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqLogin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqLogin::IsInitialized() const {

  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLogin::InternalSwap(ReqLogin* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLogin

// optional string name = 1;
void ReqLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqLogin::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqLogin.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqLogin.name)
}
void ReqLogin::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqLogin.name)
}
void ReqLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqLogin.name)
}
::std::string* ReqLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqLogin::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqLogin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqLogin.name)
}

// optional string password = 2;
void ReqLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqLogin::password() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqLogin.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqLogin::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqLogin.password)
}
void ReqLogin::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqLogin.password)
}
void ReqLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqLogin.password)
}
::std::string* ReqLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqLogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqLogin::release_password() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqLogin.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqLogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqLogin.password)
}

inline const ReqLogin* ReqLogin::internal_default_instance() {
  return &ReqLogin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerData::kFirstNameFieldNumber;
const int PlayerData::kLastNameFieldNumber;
const int PlayerData::kSecondNameFieldNumber;
const int PlayerData::kIdFieldNumber;
const int PlayerData::kLevelFieldNumber;
const int PlayerData::kExpFieldNumber;
const int PlayerData::kStaminaFieldNumber;
const int PlayerData::kCoinFieldNumber;
const int PlayerData::kGoldFieldNumber;
const int PlayerData::kVipLevelFieldNumber;
const int PlayerData::kCityIdFieldNumber;
const int PlayerData::kCampCityIdFieldNumber;
const int PlayerData::kForceFieldNumber;
const int PlayerData::kNewGuideFieldNumber;
const int PlayerData::kTitleFieldNumber;
const int PlayerData::kContributionFieldNumber;
const int PlayerData::kReputationFieldNumber;
const int PlayerData::kBattleIdFieldNumber;
const int PlayerData::kRankFieldNumber;
const int PlayerData::kSexFieldNumber;
const int PlayerData::kIconFieldNumber;
const int PlayerData::kSelectHeroFieldNumber;
const int PlayerData::kExploitFieldNumber;
const int PlayerData::kWoodFieldNumber;
const int PlayerData::kStoneFieldNumber;
const int PlayerData::kIronFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerData::PlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.PlayerData)
}

void PlayerData::InitAsDefaultInstance() {
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.PlayerData)
}

void PlayerData::SharedCtor() {
  firstname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&iron_) -
    reinterpret_cast<char*>(&id_) + sizeof(iron_));
  _cached_size_ = 0;
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:NetMsg.PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  firstname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlayerData> PlayerData_default_instance_;

PlayerData* PlayerData::New(::google::protobuf::Arena* arena) const {
  PlayerData* n = new PlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.PlayerData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, coin_);
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(gold_, contribution_);
  ZR_(reputation_, wood_);
  ZR_(stone_, iron_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.PlayerData.firstName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lastName;
        break;
      }

      // optional string lastName = 2;
      case 2: {
        if (tag == 18) {
         parse_lastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.PlayerData.lastName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_secondName;
        break;
      }

      // optional string secondName = 3;
      case 3: {
        if (tag == 26) {
         parse_secondName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.PlayerData.secondName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stamina;
        break;
      }

      // optional uint32 stamina = 7;
      case 7: {
        if (tag == 56) {
         parse_stamina:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamina_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 8;
      case 8: {
        if (tag == 64) {
         parse_coin:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 9;
      case 9: {
        if (tag == 72) {
         parse_gold:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_vipLevel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cityId;
        break;
      }

      // optional int32 cityId = 11;
      case 11: {
        if (tag == 88) {
         parse_cityId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_campCityId;
        break;
      }

      // optional uint32 campCityId = 12;
      case 12: {
        if (tag == 96) {
         parse_campCityId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campcityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_force;
        break;
      }

      // optional uint32 force = 13;
      case 13: {
        if (tag == 104) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_newGuide;
        break;
      }

      // optional uint32 newGuide = 14;
      case 14: {
        if (tag == 112) {
         parse_newGuide:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newguide_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_title;
        break;
      }

      // optional uint32 title = 15;
      case 15: {
        if (tag == 120) {
         parse_title:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_contribution;
        break;
      }

      // optional uint32 contribution = 16;
      case 16: {
        if (tag == 128) {
         parse_contribution:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_reputation;
        break;
      }

      // optional uint32 reputation = 17;
      case 17: {
        if (tag == 136) {
         parse_reputation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reputation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_battleId;
        break;
      }

      // optional uint64 battleId = 18;
      case 18: {
        if (tag == 144) {
         parse_battleId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 19;
      case 19: {
        if (tag == 152) {
         parse_rank:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 20;
      case 20: {
        if (tag == 160) {
         parse_sex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_icon;
        break;
      }

      // optional uint32 icon = 21;
      case 21: {
        if (tag == 168) {
         parse_icon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_selectHero;
        break;
      }

      // optional uint32 selectHero = 22;
      case 22: {
        if (tag == 176) {
         parse_selectHero:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selecthero_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_exploit;
        break;
      }

      // optional uint32 exploit = 23;
      case 23: {
        if (tag == 184) {
         parse_exploit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_wood;
        break;
      }

      // optional uint32 wood = 24;
      case 24: {
        if (tag == 192) {
         parse_wood:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_stone;
        break;
      }

      // optional uint32 stone = 25;
      case 25: {
        if (tag == 200) {
         parse_stone:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stone_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_iron;
        break;
      }

      // optional uint32 iron = 26;
      case 26: {
        if (tag == 208) {
         parse_iron:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.PlayerData)
  // optional string firstName = 1;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.PlayerData.firstName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->firstname(), output);
  }

  // optional string lastName = 2;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.PlayerData.lastName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lastname(), output);
  }

  // optional string secondName = 3;
  if (this->secondname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.PlayerData.secondName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->secondname(), output);
  }

  // optional uint32 id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 exp = 6;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // optional uint32 stamina = 7;
  if (this->stamina() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stamina(), output);
  }

  // optional uint32 coin = 8;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coin(), output);
  }

  // optional uint32 gold = 9;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gold(), output);
  }

  // optional uint32 vipLevel = 10;
  if (this->viplevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->viplevel(), output);
  }

  // optional int32 cityId = 11;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cityid(), output);
  }

  // optional uint32 campCityId = 12;
  if (this->campcityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->campcityid(), output);
  }

  // optional uint32 force = 13;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->force(), output);
  }

  // optional uint32 newGuide = 14;
  if (this->newguide() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->newguide(), output);
  }

  // optional uint32 title = 15;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->title(), output);
  }

  // optional uint32 contribution = 16;
  if (this->contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->contribution(), output);
  }

  // optional uint32 reputation = 17;
  if (this->reputation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->reputation(), output);
  }

  // optional uint64 battleId = 18;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->battleid(), output);
  }

  // optional uint32 rank = 19;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->rank(), output);
  }

  // optional uint32 sex = 20;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sex(), output);
  }

  // optional uint32 icon = 21;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->icon(), output);
  }

  // optional uint32 selectHero = 22;
  if (this->selecthero() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->selecthero(), output);
  }

  // optional uint32 exploit = 23;
  if (this->exploit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->exploit(), output);
  }

  // optional uint32 wood = 24;
  if (this->wood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->wood(), output);
  }

  // optional uint32 stone = 25;
  if (this->stone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->stone(), output);
  }

  // optional uint32 iron = 26;
  if (this->iron() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->iron(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.PlayerData)
}

::google::protobuf::uint8* PlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.PlayerData)
  // optional string firstName = 1;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.PlayerData.firstName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // optional string lastName = 2;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.PlayerData.lastName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastname(), target);
  }

  // optional string secondName = 3;
  if (this->secondname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.PlayerData.secondName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->secondname(), target);
  }

  // optional uint32 id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 exp = 6;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // optional uint32 stamina = 7;
  if (this->stamina() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stamina(), target);
  }

  // optional uint32 coin = 8;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->coin(), target);
  }

  // optional uint32 gold = 9;
  if (this->gold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gold(), target);
  }

  // optional uint32 vipLevel = 10;
  if (this->viplevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->viplevel(), target);
  }

  // optional int32 cityId = 11;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cityid(), target);
  }

  // optional uint32 campCityId = 12;
  if (this->campcityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->campcityid(), target);
  }

  // optional uint32 force = 13;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->force(), target);
  }

  // optional uint32 newGuide = 14;
  if (this->newguide() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->newguide(), target);
  }

  // optional uint32 title = 15;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->title(), target);
  }

  // optional uint32 contribution = 16;
  if (this->contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->contribution(), target);
  }

  // optional uint32 reputation = 17;
  if (this->reputation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->reputation(), target);
  }

  // optional uint64 battleId = 18;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->battleid(), target);
  }

  // optional uint32 rank = 19;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->rank(), target);
  }

  // optional uint32 sex = 20;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sex(), target);
  }

  // optional uint32 icon = 21;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->icon(), target);
  }

  // optional uint32 selectHero = 22;
  if (this->selecthero() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->selecthero(), target);
  }

  // optional uint32 exploit = 23;
  if (this->exploit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->exploit(), target);
  }

  // optional uint32 wood = 24;
  if (this->wood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->wood(), target);
  }

  // optional uint32 stone = 25;
  if (this->stone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->stone(), target);
  }

  // optional uint32 iron = 26;
  if (this->iron() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->iron(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.PlayerData)
  return target;
}

size_t PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.PlayerData)
  size_t total_size = 0;

  // optional string firstName = 1;
  if (this->firstname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstname());
  }

  // optional string lastName = 2;
  if (this->lastname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastname());
  }

  // optional string secondName = 3;
  if (this->secondname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondname());
  }

  // optional uint32 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 exp = 6;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // optional uint32 stamina = 7;
  if (this->stamina() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamina());
  }

  // optional uint32 coin = 8;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // optional uint32 gold = 9;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gold());
  }

  // optional uint32 vipLevel = 10;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->viplevel());
  }

  // optional int32 cityId = 11;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cityid());
  }

  // optional uint32 campCityId = 12;
  if (this->campcityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->campcityid());
  }

  // optional uint32 force = 13;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional uint32 newGuide = 14;
  if (this->newguide() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newguide());
  }

  // optional uint32 title = 15;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 contribution = 16;
  if (this->contribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contribution());
  }

  // optional uint32 reputation = 17;
  if (this->reputation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reputation());
  }

  // optional uint64 battleId = 18;
  if (this->battleid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 rank = 19;
  if (this->rank() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional uint32 sex = 20;
  if (this->sex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sex());
  }

  // optional uint32 icon = 21;
  if (this->icon() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icon());
  }

  // optional uint32 selectHero = 22;
  if (this->selecthero() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selecthero());
  }

  // optional uint32 exploit = 23;
  if (this->exploit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exploit());
  }

  // optional uint32 wood = 24;
  if (this->wood() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wood());
  }

  // optional uint32 stone = 25;
  if (this->stone() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stone());
  }

  // optional uint32 iron = 26;
  if (this->iron() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iron());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.PlayerData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.PlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.PlayerData)
    UnsafeMergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.PlayerData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlayerData::UnsafeMergeFrom(const PlayerData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.firstname().size() > 0) {

    firstname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  if (from.lastname().size() > 0) {

    lastname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastname_);
  }
  if (from.secondname().size() > 0) {

    secondname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondname_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.stamina() != 0) {
    set_stamina(from.stamina());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.viplevel() != 0) {
    set_viplevel(from.viplevel());
  }
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
  if (from.campcityid() != 0) {
    set_campcityid(from.campcityid());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.newguide() != 0) {
    set_newguide(from.newguide());
  }
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.contribution() != 0) {
    set_contribution(from.contribution());
  }
  if (from.reputation() != 0) {
    set_reputation(from.reputation());
  }
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
  if (from.selecthero() != 0) {
    set_selecthero(from.selecthero());
  }
  if (from.exploit() != 0) {
    set_exploit(from.exploit());
  }
  if (from.wood() != 0) {
    set_wood(from.wood());
  }
  if (from.stone() != 0) {
    set_stone(from.stone());
  }
  if (from.iron() != 0) {
    set_iron(from.iron());
  }
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.PlayerData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerData::InternalSwap(PlayerData* other) {
  firstname_.Swap(&other->firstname_);
  lastname_.Swap(&other->lastname_);
  secondname_.Swap(&other->secondname_);
  std::swap(id_, other->id_);
  std::swap(level_, other->level_);
  std::swap(exp_, other->exp_);
  std::swap(stamina_, other->stamina_);
  std::swap(coin_, other->coin_);
  std::swap(gold_, other->gold_);
  std::swap(viplevel_, other->viplevel_);
  std::swap(cityid_, other->cityid_);
  std::swap(campcityid_, other->campcityid_);
  std::swap(force_, other->force_);
  std::swap(newguide_, other->newguide_);
  std::swap(title_, other->title_);
  std::swap(contribution_, other->contribution_);
  std::swap(reputation_, other->reputation_);
  std::swap(battleid_, other->battleid_);
  std::swap(rank_, other->rank_);
  std::swap(sex_, other->sex_);
  std::swap(icon_, other->icon_);
  std::swap(selecthero_, other->selecthero_);
  std::swap(exploit_, other->exploit_);
  std::swap(wood_, other->wood_);
  std::swap(stone_, other->stone_);
  std::swap(iron_, other->iron_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerData

// optional string firstName = 1;
void PlayerData::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerData::firstname() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.firstName)
  return firstname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerData::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.firstName)
}
void PlayerData::set_firstname(const char* value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.PlayerData.firstName)
}
void PlayerData::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.PlayerData.firstName)
}
::std::string* PlayerData::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.PlayerData.firstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerData::release_firstname() {
  // @@protoc_insertion_point(field_release:NetMsg.PlayerData.firstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerData::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.PlayerData.firstName)
}

// optional string lastName = 2;
void PlayerData::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerData::lastname() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.lastName)
  return lastname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerData::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.lastName)
}
void PlayerData::set_lastname(const char* value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.PlayerData.lastName)
}
void PlayerData::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.PlayerData.lastName)
}
::std::string* PlayerData::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.PlayerData.lastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerData::release_lastname() {
  // @@protoc_insertion_point(field_release:NetMsg.PlayerData.lastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerData::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.PlayerData.lastName)
}

// optional string secondName = 3;
void PlayerData::clear_secondname() {
  secondname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerData::secondname() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.secondName)
  return secondname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerData::set_secondname(const ::std::string& value) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.secondName)
}
void PlayerData::set_secondname(const char* value) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.PlayerData.secondName)
}
void PlayerData::set_secondname(const char* value, size_t size) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.PlayerData.secondName)
}
::std::string* PlayerData::mutable_secondname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.PlayerData.secondName)
  return secondname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerData::release_secondname() {
  // @@protoc_insertion_point(field_release:NetMsg.PlayerData.secondName)
  
  return secondname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerData::set_allocated_secondname(::std::string* secondname) {
  if (secondname != NULL) {
    
  } else {
    
  }
  secondname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.PlayerData.secondName)
}

// optional uint32 id = 4;
void PlayerData::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 PlayerData::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.id)
  return id_;
}
void PlayerData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.id)
}

// optional uint32 level = 5;
void PlayerData::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 PlayerData::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.level)
  return level_;
}
void PlayerData::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.level)
}

// optional uint32 exp = 6;
void PlayerData::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 PlayerData::exp() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.exp)
  return exp_;
}
void PlayerData::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.exp)
}

// optional uint32 stamina = 7;
void PlayerData::clear_stamina() {
  stamina_ = 0u;
}
::google::protobuf::uint32 PlayerData::stamina() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.stamina)
  return stamina_;
}
void PlayerData::set_stamina(::google::protobuf::uint32 value) {
  
  stamina_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.stamina)
}

// optional uint32 coin = 8;
void PlayerData::clear_coin() {
  coin_ = 0u;
}
::google::protobuf::uint32 PlayerData::coin() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.coin)
  return coin_;
}
void PlayerData::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.coin)
}

// optional uint32 gold = 9;
void PlayerData::clear_gold() {
  gold_ = 0u;
}
::google::protobuf::uint32 PlayerData::gold() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.gold)
  return gold_;
}
void PlayerData::set_gold(::google::protobuf::uint32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.gold)
}

// optional uint32 vipLevel = 10;
void PlayerData::clear_viplevel() {
  viplevel_ = 0u;
}
::google::protobuf::uint32 PlayerData::viplevel() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.vipLevel)
  return viplevel_;
}
void PlayerData::set_viplevel(::google::protobuf::uint32 value) {
  
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.vipLevel)
}

// optional int32 cityId = 11;
void PlayerData::clear_cityid() {
  cityid_ = 0;
}
::google::protobuf::int32 PlayerData::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.cityId)
  return cityid_;
}
void PlayerData::set_cityid(::google::protobuf::int32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.cityId)
}

// optional uint32 campCityId = 12;
void PlayerData::clear_campcityid() {
  campcityid_ = 0u;
}
::google::protobuf::uint32 PlayerData::campcityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.campCityId)
  return campcityid_;
}
void PlayerData::set_campcityid(::google::protobuf::uint32 value) {
  
  campcityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.campCityId)
}

// optional uint32 force = 13;
void PlayerData::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 PlayerData::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.force)
  return force_;
}
void PlayerData::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.force)
}

// optional uint32 newGuide = 14;
void PlayerData::clear_newguide() {
  newguide_ = 0u;
}
::google::protobuf::uint32 PlayerData::newguide() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.newGuide)
  return newguide_;
}
void PlayerData::set_newguide(::google::protobuf::uint32 value) {
  
  newguide_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.newGuide)
}

// optional uint32 title = 15;
void PlayerData::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 PlayerData::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.title)
  return title_;
}
void PlayerData::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.title)
}

// optional uint32 contribution = 16;
void PlayerData::clear_contribution() {
  contribution_ = 0u;
}
::google::protobuf::uint32 PlayerData::contribution() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.contribution)
  return contribution_;
}
void PlayerData::set_contribution(::google::protobuf::uint32 value) {
  
  contribution_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.contribution)
}

// optional uint32 reputation = 17;
void PlayerData::clear_reputation() {
  reputation_ = 0u;
}
::google::protobuf::uint32 PlayerData::reputation() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.reputation)
  return reputation_;
}
void PlayerData::set_reputation(::google::protobuf::uint32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.reputation)
}

// optional uint64 battleId = 18;
void PlayerData::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PlayerData::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.battleId)
  return battleid_;
}
void PlayerData::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.battleId)
}

// optional uint32 rank = 19;
void PlayerData::clear_rank() {
  rank_ = 0u;
}
::google::protobuf::uint32 PlayerData::rank() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.rank)
  return rank_;
}
void PlayerData::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.rank)
}

// optional uint32 sex = 20;
void PlayerData::clear_sex() {
  sex_ = 0u;
}
::google::protobuf::uint32 PlayerData::sex() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.sex)
  return sex_;
}
void PlayerData::set_sex(::google::protobuf::uint32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.sex)
}

// optional uint32 icon = 21;
void PlayerData::clear_icon() {
  icon_ = 0u;
}
::google::protobuf::uint32 PlayerData::icon() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.icon)
  return icon_;
}
void PlayerData::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.icon)
}

// optional uint32 selectHero = 22;
void PlayerData::clear_selecthero() {
  selecthero_ = 0u;
}
::google::protobuf::uint32 PlayerData::selecthero() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.selectHero)
  return selecthero_;
}
void PlayerData::set_selecthero(::google::protobuf::uint32 value) {
  
  selecthero_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.selectHero)
}

// optional uint32 exploit = 23;
void PlayerData::clear_exploit() {
  exploit_ = 0u;
}
::google::protobuf::uint32 PlayerData::exploit() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.exploit)
  return exploit_;
}
void PlayerData::set_exploit(::google::protobuf::uint32 value) {
  
  exploit_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.exploit)
}

// optional uint32 wood = 24;
void PlayerData::clear_wood() {
  wood_ = 0u;
}
::google::protobuf::uint32 PlayerData::wood() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.wood)
  return wood_;
}
void PlayerData::set_wood(::google::protobuf::uint32 value) {
  
  wood_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.wood)
}

// optional uint32 stone = 25;
void PlayerData::clear_stone() {
  stone_ = 0u;
}
::google::protobuf::uint32 PlayerData::stone() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.stone)
  return stone_;
}
void PlayerData::set_stone(::google::protobuf::uint32 value) {
  
  stone_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.stone)
}

// optional uint32 iron = 26;
void PlayerData::clear_iron() {
  iron_ = 0u;
}
::google::protobuf::uint32 PlayerData::iron() const {
  // @@protoc_insertion_point(field_get:NetMsg.PlayerData.iron)
  return iron_;
}
void PlayerData::set_iron(::google::protobuf::uint32 value) {
  
  iron_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PlayerData.iron)
}

inline const PlayerData* PlayerData::internal_default_instance() {
  return &PlayerData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAck::kErrorFieldNumber;
const int LoginAck::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAck::LoginAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.LoginAck)
}

void LoginAck::InitAsDefaultInstance() {
}

LoginAck::LoginAck(const LoginAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.LoginAck)
}

void LoginAck::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0u;
  _cached_size_ = 0;
}

LoginAck::~LoginAck() {
  // @@protoc_insertion_point(destructor:NetMsg.LoginAck)
  SharedDtor();
}

void LoginAck::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAck_descriptor_;
}

const LoginAck& LoginAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginAck> LoginAck_default_instance_;

LoginAck* LoginAck::New(::google::protobuf::Arena* arena) const {
  LoginAck* n = new LoginAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.LoginAck)
  error_ = 0u;
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.LoginAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }

      // optional string session = 2;
      case 2: {
        if (tag == 18) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.LoginAck.session"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.LoginAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.LoginAck)
  return false;
#undef DO_
}

void LoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.LoginAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional string session = 2;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.LoginAck.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.LoginAck)
}

::google::protobuf::uint8* LoginAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.LoginAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional string session = 2;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.LoginAck.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.LoginAck)
  return target;
}

size_t LoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.LoginAck)
  size_t total_size = 0;

  // optional uint32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional string session = 2;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.LoginAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.LoginAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.LoginAck)
    UnsafeMergeFrom(*source);
  }
}

void LoginAck::MergeFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.LoginAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginAck::UnsafeMergeFrom(const LoginAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
}

void LoginAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAck::CopyFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.LoginAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginAck::IsInitialized() const {

  return true;
}

void LoginAck::Swap(LoginAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAck::InternalSwap(LoginAck* other) {
  std::swap(error_, other->error_);
  session_.Swap(&other->session_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAck_descriptor_;
  metadata.reflection = LoginAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginAck

// optional uint32 error = 1;
void LoginAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 LoginAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.LoginAck.error)
  return error_;
}
void LoginAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.LoginAck.error)
}

// optional string session = 2;
void LoginAck::clear_session() {
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginAck::session() const {
  // @@protoc_insertion_point(field_get:NetMsg.LoginAck.session)
  return session_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginAck::set_session(const ::std::string& value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.LoginAck.session)
}
void LoginAck::set_session(const char* value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.LoginAck.session)
}
void LoginAck::set_session(const char* value, size_t size) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.LoginAck.session)
}
::std::string* LoginAck::mutable_session() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.LoginAck.session)
  return session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginAck::release_session() {
  // @@protoc_insertion_point(field_release:NetMsg.LoginAck.session)
  
  return session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginAck::set_allocated_session(::std::string* session) {
  if (session != NULL) {
    
  } else {
    
  }
  session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.LoginAck.session)
}

inline const LoginAck* LoginAck::internal_default_instance() {
  return &LoginAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionInfoAck::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionInfoAck::VersionInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VersionInfoAck)
}

void VersionInfoAck::InitAsDefaultInstance() {
}

VersionInfoAck::VersionInfoAck(const VersionInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VersionInfoAck)
}

void VersionInfoAck::SharedCtor() {
  clientversion_ = 0;
  _cached_size_ = 0;
}

VersionInfoAck::~VersionInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.VersionInfoAck)
  SharedDtor();
}

void VersionInfoAck::SharedDtor() {
}

void VersionInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionInfoAck_descriptor_;
}

const VersionInfoAck& VersionInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VersionInfoAck> VersionInfoAck_default_instance_;

VersionInfoAck* VersionInfoAck::New(::google::protobuf::Arena* arena) const {
  VersionInfoAck* n = new VersionInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VersionInfoAck)
  clientversion_ = 0;
}

bool VersionInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VersionInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clientVersion = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VersionInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VersionInfoAck)
  return false;
#undef DO_
}

void VersionInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VersionInfoAck)
  // optional int32 clientVersion = 1;
  if (this->clientversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VersionInfoAck)
}

::google::protobuf::uint8* VersionInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VersionInfoAck)
  // optional int32 clientVersion = 1;
  if (this->clientversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientversion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VersionInfoAck)
  return target;
}

size_t VersionInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VersionInfoAck)
  size_t total_size = 0;

  // optional int32 clientVersion = 1;
  if (this->clientversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientversion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VersionInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VersionInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VersionInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VersionInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void VersionInfoAck::MergeFrom(const VersionInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VersionInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VersionInfoAck::UnsafeMergeFrom(const VersionInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.clientversion() != 0) {
    set_clientversion(from.clientversion());
  }
}

void VersionInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VersionInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInfoAck::CopyFrom(const VersionInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VersionInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VersionInfoAck::IsInitialized() const {

  return true;
}

void VersionInfoAck::Swap(VersionInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionInfoAck::InternalSwap(VersionInfoAck* other) {
  std::swap(clientversion_, other->clientversion_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionInfoAck_descriptor_;
  metadata.reflection = VersionInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionInfoAck

// optional int32 clientVersion = 1;
void VersionInfoAck::clear_clientversion() {
  clientversion_ = 0;
}
::google::protobuf::int32 VersionInfoAck::clientversion() const {
  // @@protoc_insertion_point(field_get:NetMsg.VersionInfoAck.clientVersion)
  return clientversion_;
}
void VersionInfoAck::set_clientversion(::google::protobuf::int32 value) {
  
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VersionInfoAck.clientVersion)
}

inline const VersionInfoAck* VersionInfoAck::internal_default_instance() {
  return &VersionInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNamePassAck::kNameFieldNumber;
const int UserNamePassAck::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNamePassAck::UserNamePassAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UserNamePassAck)
}

void UserNamePassAck::InitAsDefaultInstance() {
}

UserNamePassAck::UserNamePassAck(const UserNamePassAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UserNamePassAck)
}

void UserNamePassAck::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserNamePassAck::~UserNamePassAck() {
  // @@protoc_insertion_point(destructor:NetMsg.UserNamePassAck)
  SharedDtor();
}

void UserNamePassAck::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserNamePassAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserNamePassAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserNamePassAck_descriptor_;
}

const UserNamePassAck& UserNamePassAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserNamePassAck> UserNamePassAck_default_instance_;

UserNamePassAck* UserNamePassAck::New(::google::protobuf::Arena* arena) const {
  UserNamePassAck* n = new UserNamePassAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserNamePassAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UserNamePassAck)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserNamePassAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UserNamePassAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.UserNamePassAck.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.UserNamePassAck.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UserNamePassAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UserNamePassAck)
  return false;
#undef DO_
}

void UserNamePassAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UserNamePassAck)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNamePassAck.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNamePassAck.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UserNamePassAck)
}

::google::protobuf::uint8* UserNamePassAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UserNamePassAck)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNamePassAck.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNamePassAck.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UserNamePassAck)
  return target;
}

size_t UserNamePassAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UserNamePassAck)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserNamePassAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UserNamePassAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserNamePassAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNamePassAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UserNamePassAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UserNamePassAck)
    UnsafeMergeFrom(*source);
  }
}

void UserNamePassAck::MergeFrom(const UserNamePassAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UserNamePassAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserNamePassAck::UnsafeMergeFrom(const UserNamePassAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void UserNamePassAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UserNamePassAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNamePassAck::CopyFrom(const UserNamePassAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UserNamePassAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserNamePassAck::IsInitialized() const {

  return true;
}

void UserNamePassAck::Swap(UserNamePassAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserNamePassAck::InternalSwap(UserNamePassAck* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserNamePassAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserNamePassAck_descriptor_;
  metadata.reflection = UserNamePassAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserNamePassAck

// optional string name = 1;
void UserNamePassAck::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserNamePassAck::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserNamePassAck.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNamePassAck::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.UserNamePassAck.name)
}
void UserNamePassAck::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.UserNamePassAck.name)
}
void UserNamePassAck::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.UserNamePassAck.name)
}
::std::string* UserNamePassAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.UserNamePassAck.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserNamePassAck::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.UserNamePassAck.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNamePassAck::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.UserNamePassAck.name)
}

// optional string password = 2;
void UserNamePassAck::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserNamePassAck::password() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserNamePassAck.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNamePassAck::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.UserNamePassAck.password)
}
void UserNamePassAck::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.UserNamePassAck.password)
}
void UserNamePassAck::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.UserNamePassAck.password)
}
::std::string* UserNamePassAck::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.UserNamePassAck.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserNamePassAck::release_password() {
  // @@protoc_insertion_point(field_release:NetMsg.UserNamePassAck.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNamePassAck::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.UserNamePassAck.password)
}

inline const UserNamePassAck* UserNamePassAck::internal_default_instance() {
  return &UserNamePassAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRegister::kNameFieldNumber;
const int ReqRegister::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRegister::ReqRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRegister)
}

void ReqRegister::InitAsDefaultInstance() {
}

ReqRegister::ReqRegister(const ReqRegister& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRegister)
}

void ReqRegister::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqRegister::~ReqRegister() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRegister)
  SharedDtor();
}

void ReqRegister::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRegister_descriptor_;
}

const ReqRegister& ReqRegister::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRegister> ReqRegister_default_instance_;

ReqRegister* ReqRegister::New(::google::protobuf::Arena* arena) const {
  ReqRegister* n = new ReqRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRegister)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqRegister.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqRegister.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRegister)
  return false;
#undef DO_
}

void ReqRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRegister)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqRegister.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqRegister.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRegister)
}

::google::protobuf::uint8* ReqRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRegister)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqRegister.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqRegister.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRegister)
  return target;
}

size_t ReqRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRegister)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRegister)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRegister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRegister)
    UnsafeMergeFrom(*source);
  }
}

void ReqRegister::MergeFrom(const ReqRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRegister)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRegister::UnsafeMergeFrom(const ReqRegister& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void ReqRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegister::CopyFrom(const ReqRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRegister)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRegister::IsInitialized() const {

  return true;
}

void ReqRegister::Swap(ReqRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRegister::InternalSwap(ReqRegister* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRegister_descriptor_;
  metadata.reflection = ReqRegister_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRegister

// optional string name = 1;
void ReqRegister::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRegister::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRegister.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegister::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqRegister.name)
}
void ReqRegister::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqRegister.name)
}
void ReqRegister::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqRegister.name)
}
::std::string* ReqRegister::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqRegister.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegister::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqRegister.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegister::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqRegister.name)
}

// optional string password = 2;
void ReqRegister::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRegister::password() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRegister.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegister::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqRegister.password)
}
void ReqRegister::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqRegister.password)
}
void ReqRegister::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqRegister.password)
}
::std::string* ReqRegister::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqRegister.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegister::release_password() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqRegister.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegister::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqRegister.password)
}

inline const ReqRegister* ReqRegister::internal_default_instance() {
  return &ReqRegister_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterAck::RegisterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RegisterAck)
}

void RegisterAck::InitAsDefaultInstance() {
}

RegisterAck::RegisterAck(const RegisterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RegisterAck)
}

void RegisterAck::SharedCtor() {
  error_ = 0;
  _cached_size_ = 0;
}

RegisterAck::~RegisterAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RegisterAck)
  SharedDtor();
}

void RegisterAck::SharedDtor() {
}

void RegisterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAck_descriptor_;
}

const RegisterAck& RegisterAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegisterAck> RegisterAck_default_instance_;

RegisterAck* RegisterAck::New(::google::protobuf::Arena* arena) const {
  RegisterAck* n = new RegisterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RegisterAck)
  error_ = 0;
}

bool RegisterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RegisterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RegisterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RegisterAck)
  return false;
#undef DO_
}

void RegisterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RegisterAck)
  // optional int32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RegisterAck)
}

::google::protobuf::uint8* RegisterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RegisterAck)
  // optional int32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RegisterAck)
  return target;
}

size_t RegisterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RegisterAck)
  size_t total_size = 0;

  // optional int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RegisterAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RegisterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RegisterAck)
    UnsafeMergeFrom(*source);
  }
}

void RegisterAck::MergeFrom(const RegisterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RegisterAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegisterAck::UnsafeMergeFrom(const RegisterAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void RegisterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RegisterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAck::CopyFrom(const RegisterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RegisterAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegisterAck::IsInitialized() const {

  return true;
}

void RegisterAck::Swap(RegisterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterAck::InternalSwap(RegisterAck* other) {
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterAck_descriptor_;
  metadata.reflection = RegisterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterAck

// optional int32 error = 1;
void RegisterAck::clear_error() {
  error_ = 0;
}
::google::protobuf::int32 RegisterAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.RegisterAck.error)
  return error_;
}
void RegisterAck::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RegisterAck.error)
}

inline const RegisterAck* RegisterAck::internal_default_instance() {
  return &RegisterAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGame::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGame::ReqEnterGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqEnterGame)
}

void ReqEnterGame::InitAsDefaultInstance() {
}

ReqEnterGame::ReqEnterGame(const ReqEnterGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqEnterGame)
}

void ReqEnterGame::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqEnterGame::~ReqEnterGame() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqEnterGame)
  SharedDtor();
}

void ReqEnterGame::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGame_descriptor_;
}

const ReqEnterGame& ReqEnterGame::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqEnterGame> ReqEnterGame_default_instance_;

ReqEnterGame* ReqEnterGame::New(::google::protobuf::Arena* arena) const {
  ReqEnterGame* n = new ReqEnterGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqEnterGame)
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqEnterGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqEnterGame.session"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqEnterGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqEnterGame)
  return false;
#undef DO_
}

void ReqEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqEnterGame)
  // optional string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqEnterGame.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqEnterGame)
}

::google::protobuf::uint8* ReqEnterGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqEnterGame)
  // optional string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqEnterGame.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqEnterGame)
  return target;
}

size_t ReqEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqEnterGame)
  size_t total_size = 0;

  // optional string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqEnterGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqEnterGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqEnterGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqEnterGame)
    UnsafeMergeFrom(*source);
  }
}

void ReqEnterGame::MergeFrom(const ReqEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqEnterGame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqEnterGame::UnsafeMergeFrom(const ReqEnterGame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
}

void ReqEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGame::CopyFrom(const ReqEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqEnterGame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqEnterGame::IsInitialized() const {

  return true;
}

void ReqEnterGame::Swap(ReqEnterGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGame::InternalSwap(ReqEnterGame* other) {
  session_.Swap(&other->session_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGame_descriptor_;
  metadata.reflection = ReqEnterGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqEnterGame

// optional string session = 1;
void ReqEnterGame::clear_session() {
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqEnterGame::session() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqEnterGame.session)
  return session_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqEnterGame::set_session(const ::std::string& value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqEnterGame.session)
}
void ReqEnterGame::set_session(const char* value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqEnterGame.session)
}
void ReqEnterGame::set_session(const char* value, size_t size) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqEnterGame.session)
}
::std::string* ReqEnterGame::mutable_session() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqEnterGame.session)
  return session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqEnterGame::release_session() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqEnterGame.session)
  
  return session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqEnterGame::set_allocated_session(::std::string* session) {
  if (session != NULL) {
    
  } else {
    
  }
  session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqEnterGame.session)
}

inline const ReqEnterGame* ReqEnterGame::internal_default_instance() {
  return &ReqEnterGame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterGameAck::kErrorFieldNumber;
const int EnterGameAck::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterGameAck::EnterGameAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.EnterGameAck)
}

void EnterGameAck::InitAsDefaultInstance() {
  player_ = const_cast< ::NetMsg::PlayerData*>(
      ::NetMsg::PlayerData::internal_default_instance());
}

EnterGameAck::EnterGameAck(const EnterGameAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.EnterGameAck)
}

void EnterGameAck::SharedCtor() {
  player_ = NULL;
  error_ = 0;
  _cached_size_ = 0;
}

EnterGameAck::~EnterGameAck() {
  // @@protoc_insertion_point(destructor:NetMsg.EnterGameAck)
  SharedDtor();
}

void EnterGameAck::SharedDtor() {
  if (this != &EnterGameAck_default_instance_.get()) {
    delete player_;
  }
}

void EnterGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameAck_descriptor_;
}

const EnterGameAck& EnterGameAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EnterGameAck> EnterGameAck_default_instance_;

EnterGameAck* EnterGameAck::New(::google::protobuf::Arena* arena) const {
  EnterGameAck* n = new EnterGameAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.EnterGameAck)
  error_ = 0;
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}

bool EnterGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.EnterGameAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .NetMsg.PlayerData player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.EnterGameAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.EnterGameAck)
  return false;
#undef DO_
}

void EnterGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.EnterGameAck)
  // optional int32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.EnterGameAck)
}

::google::protobuf::uint8* EnterGameAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.EnterGameAck)
  // optional int32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.EnterGameAck)
  return target;
}

size_t EnterGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.EnterGameAck)
  size_t total_size = 0;

  // optional int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.EnterGameAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnterGameAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterGameAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.EnterGameAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.EnterGameAck)
    UnsafeMergeFrom(*source);
  }
}

void EnterGameAck::MergeFrom(const EnterGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.EnterGameAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EnterGameAck::UnsafeMergeFrom(const EnterGameAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.has_player()) {
    mutable_player()->::NetMsg::PlayerData::MergeFrom(from.player());
  }
}

void EnterGameAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.EnterGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameAck::CopyFrom(const EnterGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.EnterGameAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EnterGameAck::IsInitialized() const {

  return true;
}

void EnterGameAck::Swap(EnterGameAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterGameAck::InternalSwap(EnterGameAck* other) {
  std::swap(error_, other->error_);
  std::swap(player_, other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameAck_descriptor_;
  metadata.reflection = EnterGameAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterGameAck

// optional int32 error = 1;
void EnterGameAck::clear_error() {
  error_ = 0;
}
::google::protobuf::int32 EnterGameAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.EnterGameAck.error)
  return error_;
}
void EnterGameAck::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.EnterGameAck.error)
}

// optional .NetMsg.PlayerData player = 2;
bool EnterGameAck::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void EnterGameAck::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::NetMsg::PlayerData& EnterGameAck::player() const {
  // @@protoc_insertion_point(field_get:NetMsg.EnterGameAck.player)
  return player_ != NULL ? *player_
                         : *::NetMsg::PlayerData::internal_default_instance();
}
::NetMsg::PlayerData* EnterGameAck::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::NetMsg::PlayerData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.EnterGameAck.player)
  return player_;
}
::NetMsg::PlayerData* EnterGameAck::release_player() {
  // @@protoc_insertion_point(field_release:NetMsg.EnterGameAck.player)
  
  ::NetMsg::PlayerData* temp = player_;
  player_ = NULL;
  return temp;
}
void EnterGameAck::set_allocated_player(::NetMsg::PlayerData* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.EnterGameAck.player)
}

inline const EnterGameAck* EnterGameAck::internal_default_instance() {
  return &EnterGameAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCreateUser::kNewGuideIdFieldNumber;
const int ReqCreateUser::kFirstNameFieldNumber;
const int ReqCreateUser::kLastNameFieldNumber;
const int ReqCreateUser::kSecondNameFieldNumber;
const int ReqCreateUser::kSexFieldNumber;
const int ReqCreateUser::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCreateUser::ReqCreateUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqCreateUser)
}

void ReqCreateUser::InitAsDefaultInstance() {
}

ReqCreateUser::ReqCreateUser(const ReqCreateUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqCreateUser)
}

void ReqCreateUser::SharedCtor() {
  firstname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&newguideid_, 0, reinterpret_cast<char*>(&icon_) -
    reinterpret_cast<char*>(&newguideid_) + sizeof(icon_));
  _cached_size_ = 0;
}

ReqCreateUser::~ReqCreateUser() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqCreateUser)
  SharedDtor();
}

void ReqCreateUser::SharedDtor() {
  firstname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqCreateUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateUser_descriptor_;
}

const ReqCreateUser& ReqCreateUser::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqCreateUser> ReqCreateUser_default_instance_;

ReqCreateUser* ReqCreateUser::New(::google::protobuf::Arena* arena) const {
  ReqCreateUser* n = new ReqCreateUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCreateUser::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqCreateUser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqCreateUser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqCreateUser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(newguideid_, icon_);
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ReqCreateUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqCreateUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 newGuideId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newguideid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_firstName;
        break;
      }

      // optional string firstName = 2;
      case 2: {
        if (tag == 18) {
         parse_firstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqCreateUser.firstName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lastName;
        break;
      }

      // optional string lastName = 3;
      case 3: {
        if (tag == 26) {
         parse_lastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqCreateUser.lastName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_secondName;
        break;
      }

      // optional string secondName = 4;
      case 4: {
        if (tag == 34) {
         parse_secondName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqCreateUser.secondName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_icon;
        break;
      }

      // optional uint32 icon = 6;
      case 6: {
        if (tag == 48) {
         parse_icon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqCreateUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqCreateUser)
  return false;
#undef DO_
}

void ReqCreateUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqCreateUser)
  // optional uint32 newGuideId = 1;
  if (this->newguideid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newguideid(), output);
  }

  // optional string firstName = 2;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqCreateUser.firstName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstname(), output);
  }

  // optional string lastName = 3;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqCreateUser.lastName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lastname(), output);
  }

  // optional string secondName = 4;
  if (this->secondname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqCreateUser.secondName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secondname(), output);
  }

  // optional uint32 sex = 5;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 icon = 6;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->icon(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqCreateUser)
}

::google::protobuf::uint8* ReqCreateUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqCreateUser)
  // optional uint32 newGuideId = 1;
  if (this->newguideid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->newguideid(), target);
  }

  // optional string firstName = 2;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqCreateUser.firstName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstname(), target);
  }

  // optional string lastName = 3;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqCreateUser.lastName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastname(), target);
  }

  // optional string secondName = 4;
  if (this->secondname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqCreateUser.secondName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->secondname(), target);
  }

  // optional uint32 sex = 5;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 icon = 6;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->icon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqCreateUser)
  return target;
}

size_t ReqCreateUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqCreateUser)
  size_t total_size = 0;

  // optional uint32 newGuideId = 1;
  if (this->newguideid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newguideid());
  }

  // optional string firstName = 2;
  if (this->firstname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstname());
  }

  // optional string lastName = 3;
  if (this->lastname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastname());
  }

  // optional string secondName = 4;
  if (this->secondname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondname());
  }

  // optional uint32 sex = 5;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sex());
  }

  // optional uint32 icon = 6;
  if (this->icon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqCreateUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqCreateUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCreateUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqCreateUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqCreateUser)
    UnsafeMergeFrom(*source);
  }
}

void ReqCreateUser::MergeFrom(const ReqCreateUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqCreateUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqCreateUser::UnsafeMergeFrom(const ReqCreateUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.newguideid() != 0) {
    set_newguideid(from.newguideid());
  }
  if (from.firstname().size() > 0) {

    firstname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  if (from.lastname().size() > 0) {

    lastname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastname_);
  }
  if (from.secondname().size() > 0) {

    secondname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondname_);
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
}

void ReqCreateUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqCreateUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateUser::CopyFrom(const ReqCreateUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqCreateUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqCreateUser::IsInitialized() const {

  return true;
}

void ReqCreateUser::Swap(ReqCreateUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCreateUser::InternalSwap(ReqCreateUser* other) {
  std::swap(newguideid_, other->newguideid_);
  firstname_.Swap(&other->firstname_);
  lastname_.Swap(&other->lastname_);
  secondname_.Swap(&other->secondname_);
  std::swap(sex_, other->sex_);
  std::swap(icon_, other->icon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCreateUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreateUser_descriptor_;
  metadata.reflection = ReqCreateUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCreateUser

// optional uint32 newGuideId = 1;
void ReqCreateUser::clear_newguideid() {
  newguideid_ = 0u;
}
::google::protobuf::uint32 ReqCreateUser::newguideid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCreateUser.newGuideId)
  return newguideid_;
}
void ReqCreateUser::set_newguideid(::google::protobuf::uint32 value) {
  
  newguideid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqCreateUser.newGuideId)
}

// optional string firstName = 2;
void ReqCreateUser::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqCreateUser::firstname() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCreateUser.firstName)
  return firstname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCreateUser::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqCreateUser.firstName)
}
void ReqCreateUser::set_firstname(const char* value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqCreateUser.firstName)
}
void ReqCreateUser::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqCreateUser.firstName)
}
::std::string* ReqCreateUser::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqCreateUser.firstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqCreateUser::release_firstname() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqCreateUser.firstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCreateUser::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqCreateUser.firstName)
}

// optional string lastName = 3;
void ReqCreateUser::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqCreateUser::lastname() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCreateUser.lastName)
  return lastname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCreateUser::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqCreateUser.lastName)
}
void ReqCreateUser::set_lastname(const char* value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqCreateUser.lastName)
}
void ReqCreateUser::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqCreateUser.lastName)
}
::std::string* ReqCreateUser::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqCreateUser.lastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqCreateUser::release_lastname() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqCreateUser.lastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCreateUser::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqCreateUser.lastName)
}

// optional string secondName = 4;
void ReqCreateUser::clear_secondname() {
  secondname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqCreateUser::secondname() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCreateUser.secondName)
  return secondname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCreateUser::set_secondname(const ::std::string& value) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqCreateUser.secondName)
}
void ReqCreateUser::set_secondname(const char* value) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqCreateUser.secondName)
}
void ReqCreateUser::set_secondname(const char* value, size_t size) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqCreateUser.secondName)
}
::std::string* ReqCreateUser::mutable_secondname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqCreateUser.secondName)
  return secondname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqCreateUser::release_secondname() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqCreateUser.secondName)
  
  return secondname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCreateUser::set_allocated_secondname(::std::string* secondname) {
  if (secondname != NULL) {
    
  } else {
    
  }
  secondname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqCreateUser.secondName)
}

// optional uint32 sex = 5;
void ReqCreateUser::clear_sex() {
  sex_ = 0u;
}
::google::protobuf::uint32 ReqCreateUser::sex() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCreateUser.sex)
  return sex_;
}
void ReqCreateUser::set_sex(::google::protobuf::uint32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqCreateUser.sex)
}

// optional uint32 icon = 6;
void ReqCreateUser::clear_icon() {
  icon_ = 0u;
}
::google::protobuf::uint32 ReqCreateUser::icon() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCreateUser.icon)
  return icon_;
}
void ReqCreateUser::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqCreateUser.icon)
}

inline const ReqCreateUser* ReqCreateUser::internal_default_instance() {
  return &ReqCreateUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateUserAck::kErrorFieldNumber;
const int CreateUserAck::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateUserAck::CreateUserAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CreateUserAck)
}

void CreateUserAck::InitAsDefaultInstance() {
  player_ = const_cast< ::NetMsg::PlayerData*>(
      ::NetMsg::PlayerData::internal_default_instance());
}

CreateUserAck::CreateUserAck(const CreateUserAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CreateUserAck)
}

void CreateUserAck::SharedCtor() {
  player_ = NULL;
  error_ = 0;
  _cached_size_ = 0;
}

CreateUserAck::~CreateUserAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CreateUserAck)
  SharedDtor();
}

void CreateUserAck::SharedDtor() {
  if (this != &CreateUserAck_default_instance_.get()) {
    delete player_;
  }
}

void CreateUserAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateUserAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateUserAck_descriptor_;
}

const CreateUserAck& CreateUserAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateUserAck> CreateUserAck_default_instance_;

CreateUserAck* CreateUserAck::New(::google::protobuf::Arena* arena) const {
  CreateUserAck* n = new CreateUserAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateUserAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CreateUserAck)
  error_ = 0;
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}

bool CreateUserAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CreateUserAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .NetMsg.PlayerData player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CreateUserAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CreateUserAck)
  return false;
#undef DO_
}

void CreateUserAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CreateUserAck)
  // optional int32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CreateUserAck)
}

::google::protobuf::uint8* CreateUserAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CreateUserAck)
  // optional int32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CreateUserAck)
  return target;
}

size_t CreateUserAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CreateUserAck)
  size_t total_size = 0;

  // optional int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateUserAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CreateUserAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateUserAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateUserAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CreateUserAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CreateUserAck)
    UnsafeMergeFrom(*source);
  }
}

void CreateUserAck::MergeFrom(const CreateUserAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CreateUserAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateUserAck::UnsafeMergeFrom(const CreateUserAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.has_player()) {
    mutable_player()->::NetMsg::PlayerData::MergeFrom(from.player());
  }
}

void CreateUserAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CreateUserAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserAck::CopyFrom(const CreateUserAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CreateUserAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateUserAck::IsInitialized() const {

  return true;
}

void CreateUserAck::Swap(CreateUserAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateUserAck::InternalSwap(CreateUserAck* other) {
  std::swap(error_, other->error_);
  std::swap(player_, other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateUserAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateUserAck_descriptor_;
  metadata.reflection = CreateUserAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateUserAck

// optional int32 error = 1;
void CreateUserAck::clear_error() {
  error_ = 0;
}
::google::protobuf::int32 CreateUserAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.CreateUserAck.error)
  return error_;
}
void CreateUserAck::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CreateUserAck.error)
}

// optional .NetMsg.PlayerData player = 2;
bool CreateUserAck::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void CreateUserAck::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::NetMsg::PlayerData& CreateUserAck::player() const {
  // @@protoc_insertion_point(field_get:NetMsg.CreateUserAck.player)
  return player_ != NULL ? *player_
                         : *::NetMsg::PlayerData::internal_default_instance();
}
::NetMsg::PlayerData* CreateUserAck::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::NetMsg::PlayerData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.CreateUserAck.player)
  return player_;
}
::NetMsg::PlayerData* CreateUserAck::release_player() {
  // @@protoc_insertion_point(field_release:NetMsg.CreateUserAck.player)
  
  ::NetMsg::PlayerData* temp = player_;
  player_ = NULL;
  return temp;
}
void CreateUserAck::set_allocated_player(::NetMsg::PlayerData* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.CreateUserAck.player)
}

inline const CreateUserAck* CreateUserAck::internal_default_instance() {
  return &CreateUserAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kIdFieldNumber;
const int ServerInfo::kNameFieldNumber;
const int ServerInfo::kIpFieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ServerInfo)
}

void ServerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_) + sizeof(status_));
  _cached_size_ = 0;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerInfo> ServerInfo_default_instance_;

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ServerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, status_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ServerInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ServerInfo.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .NetMsg.ServerStatus status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::NetMsg::ServerStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ServerInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ServerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ServerInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional .NetMsg.ServerStatus status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ServerInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ServerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ServerInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional .NetMsg.ServerStatus status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ServerInfo)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // optional .NetMsg.ServerStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ServerInfo)
    UnsafeMergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ServerInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerInfo::UnsafeMergeFrom(const ServerInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerInfo::IsInitialized() const {

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// optional int32 id = 1;
void ServerInfo::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 ServerInfo::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ServerInfo.id)
  return id_;
}
void ServerInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ServerInfo.id)
}

// optional string name = 2;
void ServerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.ServerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ServerInfo.name)
}
void ServerInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ServerInfo.name)
}
void ServerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ServerInfo.name)
}
::std::string* ServerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ServerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.ServerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ServerInfo.name)
}

// optional string ip = 3;
void ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:NetMsg.ServerInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ServerInfo.ip)
}
void ServerInfo::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ServerInfo.ip)
}
void ServerInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ServerInfo.ip)
}
::std::string* ServerInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ServerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:NetMsg.ServerInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ServerInfo.ip)
}

// optional int32 port = 4;
void ServerInfo::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:NetMsg.ServerInfo.port)
  return port_;
}
void ServerInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ServerInfo.port)
}

// optional .NetMsg.ServerStatus status = 5;
void ServerInfo::clear_status() {
  status_ = 0;
}
::NetMsg::ServerStatus ServerInfo::status() const {
  // @@protoc_insertion_point(field_get:NetMsg.ServerInfo.status)
  return static_cast< ::NetMsg::ServerStatus >(status_);
}
void ServerInfo::set_status(::NetMsg::ServerStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ServerInfo.status)
}

inline const ServerInfo* ServerInfo::internal_default_instance() {
  return &ServerInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerListAck::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerListAck::ServerListAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ServerListAck)
}

void ServerListAck::InitAsDefaultInstance() {
}

ServerListAck::ServerListAck(const ServerListAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ServerListAck)
}

void ServerListAck::SharedCtor() {
  _cached_size_ = 0;
}

ServerListAck::~ServerListAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ServerListAck)
  SharedDtor();
}

void ServerListAck::SharedDtor() {
}

void ServerListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerListAck_descriptor_;
}

const ServerListAck& ServerListAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerListAck> ServerListAck_default_instance_;

ServerListAck* ServerListAck::New(::google::protobuf::Arena* arena) const {
  ServerListAck* n = new ServerListAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ServerListAck)
  info_.Clear();
}

bool ServerListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ServerListAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.ServerInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ServerListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ServerListAck)
  return false;
#undef DO_
}

void ServerListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ServerListAck)
  // repeated .NetMsg.ServerInfo info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ServerListAck)
}

::google::protobuf::uint8* ServerListAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ServerListAck)
  // repeated .NetMsg.ServerInfo info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ServerListAck)
  return target;
}

size_t ServerListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ServerListAck)
  size_t total_size = 0;

  // repeated .NetMsg.ServerInfo info = 1;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ServerListAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerListAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerListAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ServerListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ServerListAck)
    UnsafeMergeFrom(*source);
  }
}

void ServerListAck::MergeFrom(const ServerListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ServerListAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerListAck::UnsafeMergeFrom(const ServerListAck& from) {
  GOOGLE_DCHECK(&from != this);
  info_.MergeFrom(from.info_);
}

void ServerListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ServerListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerListAck::CopyFrom(const ServerListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ServerListAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerListAck::IsInitialized() const {

  return true;
}

void ServerListAck::Swap(ServerListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerListAck::InternalSwap(ServerListAck* other) {
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerListAck_descriptor_;
  metadata.reflection = ServerListAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerListAck

// repeated .NetMsg.ServerInfo info = 1;
int ServerListAck::info_size() const {
  return info_.size();
}
void ServerListAck::clear_info() {
  info_.Clear();
}
const ::NetMsg::ServerInfo& ServerListAck::info(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ServerListAck.info)
  return info_.Get(index);
}
::NetMsg::ServerInfo* ServerListAck::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ServerListAck.info)
  return info_.Mutable(index);
}
::NetMsg::ServerInfo* ServerListAck::add_info() {
  // @@protoc_insertion_point(field_add:NetMsg.ServerListAck.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ServerInfo >*
ServerListAck::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ServerListAck.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ServerInfo >&
ServerListAck::info() const {
  // @@protoc_insertion_point(field_list:NetMsg.ServerListAck.info)
  return info_;
}

inline const ServerListAck* ServerListAck::internal_default_instance() {
  return &ServerListAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqThirdPartyLogin::kIdFieldNumber;
const int ReqThirdPartyLogin::kTockenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqThirdPartyLogin::ReqThirdPartyLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqThirdPartyLogin)
}

void ReqThirdPartyLogin::InitAsDefaultInstance() {
}

ReqThirdPartyLogin::ReqThirdPartyLogin(const ReqThirdPartyLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqThirdPartyLogin)
}

void ReqThirdPartyLogin::SharedCtor() {
  tocken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

ReqThirdPartyLogin::~ReqThirdPartyLogin() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqThirdPartyLogin)
  SharedDtor();
}

void ReqThirdPartyLogin::SharedDtor() {
  tocken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqThirdPartyLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqThirdPartyLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqThirdPartyLogin_descriptor_;
}

const ReqThirdPartyLogin& ReqThirdPartyLogin::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqThirdPartyLogin> ReqThirdPartyLogin_default_instance_;

ReqThirdPartyLogin* ReqThirdPartyLogin::New(::google::protobuf::Arena* arena) const {
  ReqThirdPartyLogin* n = new ReqThirdPartyLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqThirdPartyLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqThirdPartyLogin)
  id_ = 0;
  tocken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqThirdPartyLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqThirdPartyLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tocken;
        break;
      }

      // optional string tocken = 2;
      case 2: {
        if (tag == 18) {
         parse_tocken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tocken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tocken().data(), this->tocken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqThirdPartyLogin.tocken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqThirdPartyLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqThirdPartyLogin)
  return false;
#undef DO_
}

void ReqThirdPartyLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqThirdPartyLogin)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string tocken = 2;
  if (this->tocken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tocken().data(), this->tocken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqThirdPartyLogin.tocken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tocken(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqThirdPartyLogin)
}

::google::protobuf::uint8* ReqThirdPartyLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqThirdPartyLogin)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string tocken = 2;
  if (this->tocken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tocken().data(), this->tocken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqThirdPartyLogin.tocken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tocken(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqThirdPartyLogin)
  return target;
}

size_t ReqThirdPartyLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqThirdPartyLogin)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string tocken = 2;
  if (this->tocken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tocken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqThirdPartyLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqThirdPartyLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqThirdPartyLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqThirdPartyLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqThirdPartyLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqThirdPartyLogin)
    UnsafeMergeFrom(*source);
  }
}

void ReqThirdPartyLogin::MergeFrom(const ReqThirdPartyLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqThirdPartyLogin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqThirdPartyLogin::UnsafeMergeFrom(const ReqThirdPartyLogin& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.tocken().size() > 0) {

    tocken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tocken_);
  }
}

void ReqThirdPartyLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqThirdPartyLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqThirdPartyLogin::CopyFrom(const ReqThirdPartyLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqThirdPartyLogin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqThirdPartyLogin::IsInitialized() const {

  return true;
}

void ReqThirdPartyLogin::Swap(ReqThirdPartyLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqThirdPartyLogin::InternalSwap(ReqThirdPartyLogin* other) {
  std::swap(id_, other->id_);
  tocken_.Swap(&other->tocken_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqThirdPartyLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqThirdPartyLogin_descriptor_;
  metadata.reflection = ReqThirdPartyLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqThirdPartyLogin

// optional int32 id = 1;
void ReqThirdPartyLogin::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 ReqThirdPartyLogin::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqThirdPartyLogin.id)
  return id_;
}
void ReqThirdPartyLogin::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqThirdPartyLogin.id)
}

// optional string tocken = 2;
void ReqThirdPartyLogin::clear_tocken() {
  tocken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqThirdPartyLogin::tocken() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqThirdPartyLogin.tocken)
  return tocken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqThirdPartyLogin::set_tocken(const ::std::string& value) {
  
  tocken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqThirdPartyLogin.tocken)
}
void ReqThirdPartyLogin::set_tocken(const char* value) {
  
  tocken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqThirdPartyLogin.tocken)
}
void ReqThirdPartyLogin::set_tocken(const char* value, size_t size) {
  
  tocken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqThirdPartyLogin.tocken)
}
::std::string* ReqThirdPartyLogin::mutable_tocken() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqThirdPartyLogin.tocken)
  return tocken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqThirdPartyLogin::release_tocken() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqThirdPartyLogin.tocken)
  
  return tocken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqThirdPartyLogin::set_allocated_tocken(::std::string* tocken) {
  if (tocken != NULL) {
    
  } else {
    
  }
  tocken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tocken);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqThirdPartyLogin.tocken)
}

inline const ReqThirdPartyLogin* ReqThirdPartyLogin::internal_default_instance() {
  return &ReqThirdPartyLogin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqOrderId::kProductIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqOrderId::ReqOrderId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqOrderId)
}

void ReqOrderId::InitAsDefaultInstance() {
}

ReqOrderId::ReqOrderId(const ReqOrderId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqOrderId)
}

void ReqOrderId::SharedCtor() {
  productid_ = 0;
  _cached_size_ = 0;
}

ReqOrderId::~ReqOrderId() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqOrderId)
  SharedDtor();
}

void ReqOrderId::SharedDtor() {
}

void ReqOrderId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOrderId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOrderId_descriptor_;
}

const ReqOrderId& ReqOrderId::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqOrderId> ReqOrderId_default_instance_;

ReqOrderId* ReqOrderId::New(::google::protobuf::Arena* arena) const {
  ReqOrderId* n = new ReqOrderId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqOrderId::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqOrderId)
  productid_ = 0;
}

bool ReqOrderId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqOrderId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 productId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqOrderId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqOrderId)
  return false;
#undef DO_
}

void ReqOrderId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqOrderId)
  // optional int32 productId = 1;
  if (this->productid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->productid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqOrderId)
}

::google::protobuf::uint8* ReqOrderId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqOrderId)
  // optional int32 productId = 1;
  if (this->productid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->productid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqOrderId)
  return target;
}

size_t ReqOrderId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqOrderId)
  size_t total_size = 0;

  // optional int32 productId = 1;
  if (this->productid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->productid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOrderId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqOrderId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqOrderId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqOrderId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqOrderId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqOrderId)
    UnsafeMergeFrom(*source);
  }
}

void ReqOrderId::MergeFrom(const ReqOrderId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqOrderId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqOrderId::UnsafeMergeFrom(const ReqOrderId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.productid() != 0) {
    set_productid(from.productid());
  }
}

void ReqOrderId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqOrderId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOrderId::CopyFrom(const ReqOrderId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqOrderId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqOrderId::IsInitialized() const {

  return true;
}

void ReqOrderId::Swap(ReqOrderId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqOrderId::InternalSwap(ReqOrderId* other) {
  std::swap(productid_, other->productid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqOrderId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOrderId_descriptor_;
  metadata.reflection = ReqOrderId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqOrderId

// optional int32 productId = 1;
void ReqOrderId::clear_productid() {
  productid_ = 0;
}
::google::protobuf::int32 ReqOrderId::productid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqOrderId.productId)
  return productid_;
}
void ReqOrderId::set_productid(::google::protobuf::int32 value) {
  
  productid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqOrderId.productId)
}

inline const ReqOrderId* ReqOrderId::internal_default_instance() {
  return &ReqOrderId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderIdAck::kOrderIdFieldNumber;
const int OrderIdAck::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderIdAck::OrderIdAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.OrderIdAck)
}

void OrderIdAck::InitAsDefaultInstance() {
}

OrderIdAck::OrderIdAck(const OrderIdAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.OrderIdAck)
}

void OrderIdAck::SharedCtor() {
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OrderIdAck::~OrderIdAck() {
  // @@protoc_insertion_point(destructor:NetMsg.OrderIdAck)
  SharedDtor();
}

void OrderIdAck::SharedDtor() {
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderIdAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderIdAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderIdAck_descriptor_;
}

const OrderIdAck& OrderIdAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OrderIdAck> OrderIdAck_default_instance_;

OrderIdAck* OrderIdAck::New(::google::protobuf::Arena* arena) const {
  OrderIdAck* n = new OrderIdAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderIdAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.OrderIdAck)
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OrderIdAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.OrderIdAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orderId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.OrderIdAck.orderId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ext;
        break;
      }

      // optional string ext = 2;
      case 2: {
        if (tag == 18) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.OrderIdAck.ext"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.OrderIdAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.OrderIdAck)
  return false;
#undef DO_
}

void OrderIdAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.OrderIdAck)
  // optional string orderId = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.OrderIdAck.orderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // optional string ext = 2;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.OrderIdAck.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ext(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.OrderIdAck)
}

::google::protobuf::uint8* OrderIdAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.OrderIdAck)
  // optional string orderId = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.OrderIdAck.orderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // optional string ext = 2;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.OrderIdAck.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.OrderIdAck)
  return target;
}

size_t OrderIdAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.OrderIdAck)
  size_t total_size = 0;

  // optional string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // optional string ext = 2;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderIdAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.OrderIdAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OrderIdAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderIdAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.OrderIdAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.OrderIdAck)
    UnsafeMergeFrom(*source);
  }
}

void OrderIdAck::MergeFrom(const OrderIdAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.OrderIdAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OrderIdAck::UnsafeMergeFrom(const OrderIdAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
}

void OrderIdAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.OrderIdAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderIdAck::CopyFrom(const OrderIdAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.OrderIdAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OrderIdAck::IsInitialized() const {

  return true;
}

void OrderIdAck::Swap(OrderIdAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderIdAck::InternalSwap(OrderIdAck* other) {
  orderid_.Swap(&other->orderid_);
  ext_.Swap(&other->ext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderIdAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderIdAck_descriptor_;
  metadata.reflection = OrderIdAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderIdAck

// optional string orderId = 1;
void OrderIdAck::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OrderIdAck::orderid() const {
  // @@protoc_insertion_point(field_get:NetMsg.OrderIdAck.orderId)
  return orderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderIdAck::set_orderid(const ::std::string& value) {
  
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.OrderIdAck.orderId)
}
void OrderIdAck::set_orderid(const char* value) {
  
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.OrderIdAck.orderId)
}
void OrderIdAck::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.OrderIdAck.orderId)
}
::std::string* OrderIdAck::mutable_orderid() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.OrderIdAck.orderId)
  return orderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderIdAck::release_orderid() {
  // @@protoc_insertion_point(field_release:NetMsg.OrderIdAck.orderId)
  
  return orderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderIdAck::set_allocated_orderid(::std::string* orderid) {
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.OrderIdAck.orderId)
}

// optional string ext = 2;
void OrderIdAck::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OrderIdAck::ext() const {
  // @@protoc_insertion_point(field_get:NetMsg.OrderIdAck.ext)
  return ext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderIdAck::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.OrderIdAck.ext)
}
void OrderIdAck::set_ext(const char* value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.OrderIdAck.ext)
}
void OrderIdAck::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.OrderIdAck.ext)
}
::std::string* OrderIdAck::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.OrderIdAck.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderIdAck::release_ext() {
  // @@protoc_insertion_point(field_release:NetMsg.OrderIdAck.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderIdAck::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.OrderIdAck.ext)
}

inline const OrderIdAck* OrderIdAck::internal_default_instance() {
  return &OrderIdAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* UpdatePlayerAck_UpdateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePlayerAck_UpdateType_descriptor_;
}
bool UpdatePlayerAck_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateNick;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateLevel;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateExp;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateStamina;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateCoin;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateGold;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateVipLevel;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateCityId;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateCampCityId;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateForce;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateNewGuide;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateTitle;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateContribution;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateReputation;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateRank;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateExploit;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateWood;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateStone;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateIron;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateType_MIN;
const UpdatePlayerAck_UpdateType UpdatePlayerAck::UpdateType_MAX;
const int UpdatePlayerAck::UpdateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePlayerAck::kMaskFieldNumber;
const int UpdatePlayerAck::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePlayerAck::UpdatePlayerAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UpdatePlayerAck)
}

void UpdatePlayerAck::InitAsDefaultInstance() {
  player_ = const_cast< ::NetMsg::PlayerData*>(
      ::NetMsg::PlayerData::internal_default_instance());
}

UpdatePlayerAck::UpdatePlayerAck(const UpdatePlayerAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UpdatePlayerAck)
}

void UpdatePlayerAck::SharedCtor() {
  player_ = NULL;
  mask_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

UpdatePlayerAck::~UpdatePlayerAck() {
  // @@protoc_insertion_point(destructor:NetMsg.UpdatePlayerAck)
  SharedDtor();
}

void UpdatePlayerAck::SharedDtor() {
  if (this != &UpdatePlayerAck_default_instance_.get()) {
    delete player_;
  }
}

void UpdatePlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePlayerAck_descriptor_;
}

const UpdatePlayerAck& UpdatePlayerAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdatePlayerAck> UpdatePlayerAck_default_instance_;

UpdatePlayerAck* UpdatePlayerAck::New(::google::protobuf::Arena* arena) const {
  UpdatePlayerAck* n = new UpdatePlayerAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdatePlayerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UpdatePlayerAck)
  mask_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}

bool UpdatePlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UpdatePlayerAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mask = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mask_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .NetMsg.PlayerData player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UpdatePlayerAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UpdatePlayerAck)
  return false;
#undef DO_
}

void UpdatePlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UpdatePlayerAck)
  // optional uint64 mask = 1;
  if (this->mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mask(), output);
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UpdatePlayerAck)
}

::google::protobuf::uint8* UpdatePlayerAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UpdatePlayerAck)
  // optional uint64 mask = 1;
  if (this->mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mask(), target);
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UpdatePlayerAck)
  return target;
}

size_t UpdatePlayerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UpdatePlayerAck)
  size_t total_size = 0;

  // optional uint64 mask = 1;
  if (this->mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mask());
  }

  // optional .NetMsg.PlayerData player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UpdatePlayerAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdatePlayerAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdatePlayerAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UpdatePlayerAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UpdatePlayerAck)
    UnsafeMergeFrom(*source);
  }
}

void UpdatePlayerAck::MergeFrom(const UpdatePlayerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UpdatePlayerAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdatePlayerAck::UnsafeMergeFrom(const UpdatePlayerAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mask() != 0) {
    set_mask(from.mask());
  }
  if (from.has_player()) {
    mutable_player()->::NetMsg::PlayerData::MergeFrom(from.player());
  }
}

void UpdatePlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UpdatePlayerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerAck::CopyFrom(const UpdatePlayerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UpdatePlayerAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdatePlayerAck::IsInitialized() const {

  return true;
}

void UpdatePlayerAck::Swap(UpdatePlayerAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePlayerAck::InternalSwap(UpdatePlayerAck* other) {
  std::swap(mask_, other->mask_);
  std::swap(player_, other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdatePlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePlayerAck_descriptor_;
  metadata.reflection = UpdatePlayerAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdatePlayerAck

// optional uint64 mask = 1;
void UpdatePlayerAck::clear_mask() {
  mask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UpdatePlayerAck::mask() const {
  // @@protoc_insertion_point(field_get:NetMsg.UpdatePlayerAck.mask)
  return mask_;
}
void UpdatePlayerAck::set_mask(::google::protobuf::uint64 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UpdatePlayerAck.mask)
}

// optional .NetMsg.PlayerData player = 2;
bool UpdatePlayerAck::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void UpdatePlayerAck::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::NetMsg::PlayerData& UpdatePlayerAck::player() const {
  // @@protoc_insertion_point(field_get:NetMsg.UpdatePlayerAck.player)
  return player_ != NULL ? *player_
                         : *::NetMsg::PlayerData::internal_default_instance();
}
::NetMsg::PlayerData* UpdatePlayerAck::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::NetMsg::PlayerData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.UpdatePlayerAck.player)
  return player_;
}
::NetMsg::PlayerData* UpdatePlayerAck::release_player() {
  // @@protoc_insertion_point(field_release:NetMsg.UpdatePlayerAck.player)
  
  ::NetMsg::PlayerData* temp = player_;
  player_ = NULL;
  return temp;
}
void UpdatePlayerAck::set_allocated_player(::NetMsg::PlayerData* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.UpdatePlayerAck.player)
}

inline const UpdatePlayerAck* UpdatePlayerAck::internal_default_instance() {
  return &UpdatePlayerAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqChat::kChatTypeFieldNumber;
const int ReqChat::kToUserIdFieldNumber;
const int ReqChat::kToNickFieldNumber;
const int ReqChat::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqChat::ReqChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqChat)
}

void ReqChat::InitAsDefaultInstance() {
}

ReqChat::ReqChat(const ReqChat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqChat)
}

void ReqChat::SharedCtor() {
  tonick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chattype_, 0, reinterpret_cast<char*>(&touserid_) -
    reinterpret_cast<char*>(&chattype_) + sizeof(touserid_));
  _cached_size_ = 0;
}

ReqChat::~ReqChat() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqChat)
  SharedDtor();
}

void ReqChat::SharedDtor() {
  tonick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChat_descriptor_;
}

const ReqChat& ReqChat::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqChat> ReqChat_default_instance_;

ReqChat* ReqChat::New(::google::protobuf::Arena* arena) const {
  ReqChat* n = new ReqChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqChat::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqChat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqChat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqChat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(chattype_, touserid_);
  tonick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ReqChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chatType = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chattype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_toUserId;
        break;
      }

      // optional uint32 toUserId = 2;
      case 2: {
        if (tag == 16) {
         parse_toUserId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touserid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toNick;
        break;
      }

      // optional string toNick = 3;
      case 3: {
        if (tag == 26) {
         parse_toNick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonick().data(), this->tonick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqChat.toNick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqChat.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqChat)
  return false;
#undef DO_
}

void ReqChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqChat)
  // optional uint32 chatType = 1;
  if (this->chattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chattype(), output);
  }

  // optional uint32 toUserId = 2;
  if (this->touserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->touserid(), output);
  }

  // optional string toNick = 3;
  if (this->tonick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonick().data(), this->tonick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqChat.toNick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tonick(), output);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqChat.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqChat)
}

::google::protobuf::uint8* ReqChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqChat)
  // optional uint32 chatType = 1;
  if (this->chattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chattype(), target);
  }

  // optional uint32 toUserId = 2;
  if (this->touserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->touserid(), target);
  }

  // optional string toNick = 3;
  if (this->tonick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonick().data(), this->tonick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqChat.toNick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tonick(), target);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqChat.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqChat)
  return target;
}

size_t ReqChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqChat)
  size_t total_size = 0;

  // optional uint32 chatType = 1;
  if (this->chattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chattype());
  }

  // optional uint32 toUserId = 2;
  if (this->touserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->touserid());
  }

  // optional string toNick = 3;
  if (this->tonick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonick());
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqChat)
    UnsafeMergeFrom(*source);
  }
}

void ReqChat::MergeFrom(const ReqChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqChat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqChat::UnsafeMergeFrom(const ReqChat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.chattype() != 0) {
    set_chattype(from.chattype());
  }
  if (from.touserid() != 0) {
    set_touserid(from.touserid());
  }
  if (from.tonick().size() > 0) {

    tonick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonick_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ReqChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChat::CopyFrom(const ReqChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqChat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqChat::IsInitialized() const {

  return true;
}

void ReqChat::Swap(ReqChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqChat::InternalSwap(ReqChat* other) {
  std::swap(chattype_, other->chattype_);
  std::swap(touserid_, other->touserid_);
  tonick_.Swap(&other->tonick_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChat_descriptor_;
  metadata.reflection = ReqChat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqChat

// optional uint32 chatType = 1;
void ReqChat::clear_chattype() {
  chattype_ = 0u;
}
::google::protobuf::uint32 ReqChat::chattype() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqChat.chatType)
  return chattype_;
}
void ReqChat::set_chattype(::google::protobuf::uint32 value) {
  
  chattype_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqChat.chatType)
}

// optional uint32 toUserId = 2;
void ReqChat::clear_touserid() {
  touserid_ = 0u;
}
::google::protobuf::uint32 ReqChat::touserid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqChat.toUserId)
  return touserid_;
}
void ReqChat::set_touserid(::google::protobuf::uint32 value) {
  
  touserid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqChat.toUserId)
}

// optional string toNick = 3;
void ReqChat::clear_tonick() {
  tonick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqChat::tonick() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqChat.toNick)
  return tonick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqChat::set_tonick(const ::std::string& value) {
  
  tonick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqChat.toNick)
}
void ReqChat::set_tonick(const char* value) {
  
  tonick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqChat.toNick)
}
void ReqChat::set_tonick(const char* value, size_t size) {
  
  tonick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqChat.toNick)
}
::std::string* ReqChat::mutable_tonick() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqChat.toNick)
  return tonick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqChat::release_tonick() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqChat.toNick)
  
  return tonick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqChat::set_allocated_tonick(::std::string* tonick) {
  if (tonick != NULL) {
    
  } else {
    
  }
  tonick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonick);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqChat.toNick)
}

// optional string msg = 4;
void ReqChat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqChat::msg() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqChat.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqChat::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqChat.msg)
}
void ReqChat::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqChat.msg)
}
void ReqChat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqChat.msg)
}
::std::string* ReqChat::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqChat.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqChat::release_msg() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqChat.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqChat::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqChat.msg)
}

inline const ReqChat* ReqChat::internal_default_instance() {
  return &ReqChat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatAck::kChatTypeFieldNumber;
const int ChatAck::kFromUserIdFieldNumber;
const int ChatAck::kFromNickFieldNumber;
const int ChatAck::kToUserIdFieldNumber;
const int ChatAck::kToNickFieldNumber;
const int ChatAck::kMsgFieldNumber;
const int ChatAck::kErrorFieldNumber;
const int ChatAck::kSendTimeFieldNumber;
const int ChatAck::kFromForceFieldNumber;
const int ChatAck::kFromUserIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatAck::ChatAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ChatAck)
}

void ChatAck::InitAsDefaultInstance() {
}

ChatAck::ChatAck(const ChatAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ChatAck)
}

void ChatAck::SharedCtor() {
  fromnick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chattype_, 0, reinterpret_cast<char*>(&fromusericon_) -
    reinterpret_cast<char*>(&chattype_) + sizeof(fromusericon_));
  _cached_size_ = 0;
}

ChatAck::~ChatAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ChatAck)
  SharedDtor();
}

void ChatAck::SharedDtor() {
  fromnick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatAck_descriptor_;
}

const ChatAck& ChatAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChatAck> ChatAck_default_instance_;

ChatAck* ChatAck::New(::google::protobuf::Arena* arena) const {
  ChatAck* n = new ChatAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ChatAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChatAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(chattype_, sendtime_);
  fromnick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(fromforce_, fromusericon_);

#undef ZR_HELPER_
#undef ZR_

}

bool ChatAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ChatAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chatType = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chattype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromUserId;
        break;
      }

      // optional uint32 fromUserId = 2;
      case 2: {
        if (tag == 16) {
         parse_fromUserId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromuserid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fromNick;
        break;
      }

      // optional string fromNick = 3;
      case 3: {
        if (tag == 26) {
         parse_fromNick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromnick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromnick().data(), this->fromnick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ChatAck.fromNick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_toUserId;
        break;
      }

      // optional uint32 toUserId = 4;
      case 4: {
        if (tag == 32) {
         parse_toUserId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touserid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_toNick;
        break;
      }

      // optional string toNick = 5;
      case 5: {
        if (tag == 42) {
         parse_toNick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonick().data(), this->tonick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ChatAck.toNick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg;
        break;
      }

      // optional string msg = 6;
      case 6: {
        if (tag == 50) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ChatAck.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_error;
        break;
      }

      // optional uint32 error = 7;
      case 7: {
        if (tag == 56) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sendTime;
        break;
      }

      // optional uint32 sendTime = 8;
      case 8: {
        if (tag == 64) {
         parse_sendTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fromForce;
        break;
      }

      // optional uint32 fromForce = 9;
      case 9: {
        if (tag == 72) {
         parse_fromForce:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromforce_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fromUserIcon;
        break;
      }

      // optional uint32 fromUserIcon = 10;
      case 10: {
        if (tag == 80) {
         parse_fromUserIcon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromusericon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ChatAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ChatAck)
  return false;
#undef DO_
}

void ChatAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ChatAck)
  // optional uint32 chatType = 1;
  if (this->chattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chattype(), output);
  }

  // optional uint32 fromUserId = 2;
  if (this->fromuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fromuserid(), output);
  }

  // optional string fromNick = 3;
  if (this->fromnick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromnick().data(), this->fromnick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ChatAck.fromNick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fromnick(), output);
  }

  // optional uint32 toUserId = 4;
  if (this->touserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->touserid(), output);
  }

  // optional string toNick = 5;
  if (this->tonick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonick().data(), this->tonick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ChatAck.toNick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tonick(), output);
  }

  // optional string msg = 6;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ChatAck.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->msg(), output);
  }

  // optional uint32 error = 7;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->error(), output);
  }

  // optional uint32 sendTime = 8;
  if (this->sendtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sendtime(), output);
  }

  // optional uint32 fromForce = 9;
  if (this->fromforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fromforce(), output);
  }

  // optional uint32 fromUserIcon = 10;
  if (this->fromusericon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fromusericon(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ChatAck)
}

::google::protobuf::uint8* ChatAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ChatAck)
  // optional uint32 chatType = 1;
  if (this->chattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chattype(), target);
  }

  // optional uint32 fromUserId = 2;
  if (this->fromuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fromuserid(), target);
  }

  // optional string fromNick = 3;
  if (this->fromnick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromnick().data(), this->fromnick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ChatAck.fromNick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromnick(), target);
  }

  // optional uint32 toUserId = 4;
  if (this->touserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->touserid(), target);
  }

  // optional string toNick = 5;
  if (this->tonick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonick().data(), this->tonick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ChatAck.toNick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tonick(), target);
  }

  // optional string msg = 6;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ChatAck.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg(), target);
  }

  // optional uint32 error = 7;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->error(), target);
  }

  // optional uint32 sendTime = 8;
  if (this->sendtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sendtime(), target);
  }

  // optional uint32 fromForce = 9;
  if (this->fromforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fromforce(), target);
  }

  // optional uint32 fromUserIcon = 10;
  if (this->fromusericon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fromusericon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ChatAck)
  return target;
}

size_t ChatAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ChatAck)
  size_t total_size = 0;

  // optional uint32 chatType = 1;
  if (this->chattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chattype());
  }

  // optional uint32 fromUserId = 2;
  if (this->fromuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fromuserid());
  }

  // optional string fromNick = 3;
  if (this->fromnick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromnick());
  }

  // optional uint32 toUserId = 4;
  if (this->touserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->touserid());
  }

  // optional string toNick = 5;
  if (this->tonick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonick());
  }

  // optional string msg = 6;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // optional uint32 error = 7;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint32 sendTime = 8;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendtime());
  }

  // optional uint32 fromForce = 9;
  if (this->fromforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fromforce());
  }

  // optional uint32 fromUserIcon = 10;
  if (this->fromusericon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fromusericon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ChatAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChatAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ChatAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ChatAck)
    UnsafeMergeFrom(*source);
  }
}

void ChatAck::MergeFrom(const ChatAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ChatAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChatAck::UnsafeMergeFrom(const ChatAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.chattype() != 0) {
    set_chattype(from.chattype());
  }
  if (from.fromuserid() != 0) {
    set_fromuserid(from.fromuserid());
  }
  if (from.fromnick().size() > 0) {

    fromnick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromnick_);
  }
  if (from.touserid() != 0) {
    set_touserid(from.touserid());
  }
  if (from.tonick().size() > 0) {

    tonick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonick_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.sendtime() != 0) {
    set_sendtime(from.sendtime());
  }
  if (from.fromforce() != 0) {
    set_fromforce(from.fromforce());
  }
  if (from.fromusericon() != 0) {
    set_fromusericon(from.fromusericon());
  }
}

void ChatAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ChatAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatAck::CopyFrom(const ChatAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ChatAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChatAck::IsInitialized() const {

  return true;
}

void ChatAck::Swap(ChatAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatAck::InternalSwap(ChatAck* other) {
  std::swap(chattype_, other->chattype_);
  std::swap(fromuserid_, other->fromuserid_);
  fromnick_.Swap(&other->fromnick_);
  std::swap(touserid_, other->touserid_);
  tonick_.Swap(&other->tonick_);
  msg_.Swap(&other->msg_);
  std::swap(error_, other->error_);
  std::swap(sendtime_, other->sendtime_);
  std::swap(fromforce_, other->fromforce_);
  std::swap(fromusericon_, other->fromusericon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatAck_descriptor_;
  metadata.reflection = ChatAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatAck

// optional uint32 chatType = 1;
void ChatAck::clear_chattype() {
  chattype_ = 0u;
}
::google::protobuf::uint32 ChatAck::chattype() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.chatType)
  return chattype_;
}
void ChatAck::set_chattype(::google::protobuf::uint32 value) {
  
  chattype_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.chatType)
}

// optional uint32 fromUserId = 2;
void ChatAck::clear_fromuserid() {
  fromuserid_ = 0u;
}
::google::protobuf::uint32 ChatAck::fromuserid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.fromUserId)
  return fromuserid_;
}
void ChatAck::set_fromuserid(::google::protobuf::uint32 value) {
  
  fromuserid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.fromUserId)
}

// optional string fromNick = 3;
void ChatAck::clear_fromnick() {
  fromnick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChatAck::fromnick() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.fromNick)
  return fromnick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatAck::set_fromnick(const ::std::string& value) {
  
  fromnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.fromNick)
}
void ChatAck::set_fromnick(const char* value) {
  
  fromnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ChatAck.fromNick)
}
void ChatAck::set_fromnick(const char* value, size_t size) {
  
  fromnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ChatAck.fromNick)
}
::std::string* ChatAck::mutable_fromnick() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ChatAck.fromNick)
  return fromnick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatAck::release_fromnick() {
  // @@protoc_insertion_point(field_release:NetMsg.ChatAck.fromNick)
  
  return fromnick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatAck::set_allocated_fromnick(::std::string* fromnick) {
  if (fromnick != NULL) {
    
  } else {
    
  }
  fromnick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromnick);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ChatAck.fromNick)
}

// optional uint32 toUserId = 4;
void ChatAck::clear_touserid() {
  touserid_ = 0u;
}
::google::protobuf::uint32 ChatAck::touserid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.toUserId)
  return touserid_;
}
void ChatAck::set_touserid(::google::protobuf::uint32 value) {
  
  touserid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.toUserId)
}

// optional string toNick = 5;
void ChatAck::clear_tonick() {
  tonick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChatAck::tonick() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.toNick)
  return tonick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatAck::set_tonick(const ::std::string& value) {
  
  tonick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.toNick)
}
void ChatAck::set_tonick(const char* value) {
  
  tonick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ChatAck.toNick)
}
void ChatAck::set_tonick(const char* value, size_t size) {
  
  tonick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ChatAck.toNick)
}
::std::string* ChatAck::mutable_tonick() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ChatAck.toNick)
  return tonick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatAck::release_tonick() {
  // @@protoc_insertion_point(field_release:NetMsg.ChatAck.toNick)
  
  return tonick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatAck::set_allocated_tonick(::std::string* tonick) {
  if (tonick != NULL) {
    
  } else {
    
  }
  tonick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonick);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ChatAck.toNick)
}

// optional string msg = 6;
void ChatAck::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChatAck::msg() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatAck::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.msg)
}
void ChatAck::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ChatAck.msg)
}
void ChatAck::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ChatAck.msg)
}
::std::string* ChatAck::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ChatAck.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatAck::release_msg() {
  // @@protoc_insertion_point(field_release:NetMsg.ChatAck.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatAck::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ChatAck.msg)
}

// optional uint32 error = 7;
void ChatAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 ChatAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.error)
  return error_;
}
void ChatAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.error)
}

// optional uint32 sendTime = 8;
void ChatAck::clear_sendtime() {
  sendtime_ = 0u;
}
::google::protobuf::uint32 ChatAck::sendtime() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.sendTime)
  return sendtime_;
}
void ChatAck::set_sendtime(::google::protobuf::uint32 value) {
  
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.sendTime)
}

// optional uint32 fromForce = 9;
void ChatAck::clear_fromforce() {
  fromforce_ = 0u;
}
::google::protobuf::uint32 ChatAck::fromforce() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.fromForce)
  return fromforce_;
}
void ChatAck::set_fromforce(::google::protobuf::uint32 value) {
  
  fromforce_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.fromForce)
}

// optional uint32 fromUserIcon = 10;
void ChatAck::clear_fromusericon() {
  fromusericon_ = 0u;
}
::google::protobuf::uint32 ChatAck::fromusericon() const {
  // @@protoc_insertion_point(field_get:NetMsg.ChatAck.fromUserIcon)
  return fromusericon_;
}
void ChatAck::set_fromusericon(::google::protobuf::uint32 value) {
  
  fromusericon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ChatAck.fromUserIcon)
}

inline const ChatAck* ChatAck::internal_default_instance() {
  return &ChatAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNickAck::kFirstNameFieldNumber;
const int UserNickAck::kLastNameFieldNumber;
const int UserNickAck::kSecondNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNickAck::UserNickAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UserNickAck)
}

void UserNickAck::InitAsDefaultInstance() {
}

UserNickAck::UserNickAck(const UserNickAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UserNickAck)
}

void UserNickAck::SharedCtor() {
  firstname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserNickAck::~UserNickAck() {
  // @@protoc_insertion_point(destructor:NetMsg.UserNickAck)
  SharedDtor();
}

void UserNickAck::SharedDtor() {
  firstname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserNickAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserNickAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserNickAck_descriptor_;
}

const UserNickAck& UserNickAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserNickAck> UserNickAck_default_instance_;

UserNickAck* UserNickAck::New(::google::protobuf::Arena* arena) const {
  UserNickAck* n = new UserNickAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserNickAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UserNickAck)
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserNickAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UserNickAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.UserNickAck.firstName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lastName;
        break;
      }

      // optional string lastName = 2;
      case 2: {
        if (tag == 18) {
         parse_lastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.UserNickAck.lastName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_secondName;
        break;
      }

      // optional string secondName = 3;
      case 3: {
        if (tag == 26) {
         parse_secondName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.UserNickAck.secondName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UserNickAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UserNickAck)
  return false;
#undef DO_
}

void UserNickAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UserNickAck)
  // optional string firstName = 1;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNickAck.firstName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->firstname(), output);
  }

  // optional string lastName = 2;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNickAck.lastName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lastname(), output);
  }

  // optional string secondName = 3;
  if (this->secondname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNickAck.secondName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->secondname(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UserNickAck)
}

::google::protobuf::uint8* UserNickAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UserNickAck)
  // optional string firstName = 1;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNickAck.firstName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // optional string lastName = 2;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNickAck.lastName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastname(), target);
  }

  // optional string secondName = 3;
  if (this->secondname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserNickAck.secondName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->secondname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UserNickAck)
  return target;
}

size_t UserNickAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UserNickAck)
  size_t total_size = 0;

  // optional string firstName = 1;
  if (this->firstname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstname());
  }

  // optional string lastName = 2;
  if (this->lastname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastname());
  }

  // optional string secondName = 3;
  if (this->secondname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserNickAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UserNickAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserNickAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNickAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UserNickAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UserNickAck)
    UnsafeMergeFrom(*source);
  }
}

void UserNickAck::MergeFrom(const UserNickAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UserNickAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserNickAck::UnsafeMergeFrom(const UserNickAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.firstname().size() > 0) {

    firstname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  if (from.lastname().size() > 0) {

    lastname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastname_);
  }
  if (from.secondname().size() > 0) {

    secondname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondname_);
  }
}

void UserNickAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UserNickAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNickAck::CopyFrom(const UserNickAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UserNickAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserNickAck::IsInitialized() const {

  return true;
}

void UserNickAck::Swap(UserNickAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserNickAck::InternalSwap(UserNickAck* other) {
  firstname_.Swap(&other->firstname_);
  lastname_.Swap(&other->lastname_);
  secondname_.Swap(&other->secondname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserNickAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserNickAck_descriptor_;
  metadata.reflection = UserNickAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserNickAck

// optional string firstName = 1;
void UserNickAck::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserNickAck::firstname() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserNickAck.firstName)
  return firstname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNickAck::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.UserNickAck.firstName)
}
void UserNickAck::set_firstname(const char* value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.UserNickAck.firstName)
}
void UserNickAck::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.UserNickAck.firstName)
}
::std::string* UserNickAck::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.UserNickAck.firstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserNickAck::release_firstname() {
  // @@protoc_insertion_point(field_release:NetMsg.UserNickAck.firstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNickAck::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.UserNickAck.firstName)
}

// optional string lastName = 2;
void UserNickAck::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserNickAck::lastname() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserNickAck.lastName)
  return lastname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNickAck::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.UserNickAck.lastName)
}
void UserNickAck::set_lastname(const char* value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.UserNickAck.lastName)
}
void UserNickAck::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.UserNickAck.lastName)
}
::std::string* UserNickAck::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.UserNickAck.lastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserNickAck::release_lastname() {
  // @@protoc_insertion_point(field_release:NetMsg.UserNickAck.lastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNickAck::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.UserNickAck.lastName)
}

// optional string secondName = 3;
void UserNickAck::clear_secondname() {
  secondname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserNickAck::secondname() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserNickAck.secondName)
  return secondname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNickAck::set_secondname(const ::std::string& value) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.UserNickAck.secondName)
}
void UserNickAck::set_secondname(const char* value) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.UserNickAck.secondName)
}
void UserNickAck::set_secondname(const char* value, size_t size) {
  
  secondname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.UserNickAck.secondName)
}
::std::string* UserNickAck::mutable_secondname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.UserNickAck.secondName)
  return secondname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserNickAck::release_secondname() {
  // @@protoc_insertion_point(field_release:NetMsg.UserNickAck.secondName)
  
  return secondname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserNickAck::set_allocated_secondname(::std::string* secondname) {
  if (secondname != NULL) {
    
  } else {
    
  }
  secondname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.UserNickAck.secondName)
}

inline const UserNickAck* UserNickAck::internal_default_instance() {
  return &UserNickAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillInfo::kUidFieldNumber;
const int SkillInfo::kSkillIdFieldNumber;
const int SkillInfo::kSkillExpFieldNumber;
const int SkillInfo::kSkillLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillInfo::SkillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SkillInfo)
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SkillInfo)
}

void SkillInfo::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&skilllevel_) -
    reinterpret_cast<char*>(&uid_) + sizeof(skilllevel_));
  _cached_size_ = 0;
}

SkillInfo::~SkillInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.SkillInfo)
  SharedDtor();
}

void SkillInfo::SharedDtor() {
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SkillInfo> SkillInfo_default_instance_;

SkillInfo* SkillInfo::New(::google::protobuf::Arena* arena) const {
  SkillInfo* n = new SkillInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SkillInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SkillInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SkillInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, skilllevel_);

#undef ZR_HELPER_
#undef ZR_

}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional uint32 skillId = 2;
      case 2: {
        if (tag == 16) {
         parse_skillId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillExp;
        break;
      }

      // optional uint32 skillExp = 3;
      case 3: {
        if (tag == 24) {
         parse_skillExp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillexp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillLevel;
        break;
      }

      // optional uint32 skillLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_skillLevel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllevel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SkillInfo)
  return false;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SkillInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 skillId = 2;
  if (this->skillid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 skillExp = 3;
  if (this->skillexp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillexp(), output);
  }

  // optional uint32 skillLevel = 4;
  if (this->skilllevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skilllevel(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SkillInfo)
}

::google::protobuf::uint8* SkillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SkillInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 skillId = 2;
  if (this->skillid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 skillExp = 3;
  if (this->skillexp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillexp(), target);
  }

  // optional uint32 skillLevel = 4;
  if (this->skilllevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skilllevel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SkillInfo)
  return target;
}

size_t SkillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SkillInfo)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional uint32 skillId = 2;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skillid());
  }

  // optional uint32 skillExp = 3;
  if (this->skillexp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skillexp());
  }

  // optional uint32 skillLevel = 4;
  if (this->skilllevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skilllevel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SkillInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SkillInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SkillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SkillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SkillInfo)
    UnsafeMergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SkillInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SkillInfo::UnsafeMergeFrom(const SkillInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.skillid() != 0) {
    set_skillid(from.skillid());
  }
  if (from.skillexp() != 0) {
    set_skillexp(from.skillexp());
  }
  if (from.skilllevel() != 0) {
    set_skilllevel(from.skilllevel());
  }
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SkillInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SkillInfo::IsInitialized() const {

  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillInfo::InternalSwap(SkillInfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(skillid_, other->skillid_);
  std::swap(skillexp_, other->skillexp_);
  std::swap(skilllevel_, other->skilllevel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkillInfo

// optional uint64 uid = 1;
void SkillInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SkillInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SkillInfo.uid)
  return uid_;
}
void SkillInfo::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SkillInfo.uid)
}

// optional uint32 skillId = 2;
void SkillInfo::clear_skillid() {
  skillid_ = 0u;
}
::google::protobuf::uint32 SkillInfo::skillid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SkillInfo.skillId)
  return skillid_;
}
void SkillInfo::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SkillInfo.skillId)
}

// optional uint32 skillExp = 3;
void SkillInfo::clear_skillexp() {
  skillexp_ = 0u;
}
::google::protobuf::uint32 SkillInfo::skillexp() const {
  // @@protoc_insertion_point(field_get:NetMsg.SkillInfo.skillExp)
  return skillexp_;
}
void SkillInfo::set_skillexp(::google::protobuf::uint32 value) {
  
  skillexp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SkillInfo.skillExp)
}

// optional uint32 skillLevel = 4;
void SkillInfo::clear_skilllevel() {
  skilllevel_ = 0u;
}
::google::protobuf::uint32 SkillInfo::skilllevel() const {
  // @@protoc_insertion_point(field_get:NetMsg.SkillInfo.skillLevel)
  return skilllevel_;
}
void SkillInfo::set_skilllevel(::google::protobuf::uint32 value) {
  
  skilllevel_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SkillInfo.skillLevel)
}

inline const SkillInfo* SkillInfo::internal_default_instance() {
  return &SkillInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroAttr::kExpFieldNumber;
const int HeroAttr::kLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroAttr::HeroAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroAttr)
}

void HeroAttr::InitAsDefaultInstance() {
}

HeroAttr::HeroAttr(const HeroAttr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroAttr)
}

void HeroAttr::SharedCtor() {
  ::memset(&exp_, 0, reinterpret_cast<char*>(&lv_) -
    reinterpret_cast<char*>(&exp_) + sizeof(lv_));
  _cached_size_ = 0;
}

HeroAttr::~HeroAttr() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroAttr)
  SharedDtor();
}

void HeroAttr::SharedDtor() {
}

void HeroAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroAttr_descriptor_;
}

const HeroAttr& HeroAttr::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroAttr> HeroAttr_default_instance_;

HeroAttr* HeroAttr::New(::google::protobuf::Arena* arena) const {
  HeroAttr* n = new HeroAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroAttr)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeroAttr, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeroAttr*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(exp_, lv_);

#undef ZR_HELPER_
#undef ZR_

}

bool HeroAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exp = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (tag == 16) {
         parse_lv:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroAttr)
  return false;
#undef DO_
}

void HeroAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroAttr)
  // optional uint32 exp = 1;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }

  // optional uint32 lv = 2;
  if (this->lv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroAttr)
}

::google::protobuf::uint8* HeroAttr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroAttr)
  // optional uint32 exp = 1;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }

  // optional uint32 lv = 2;
  if (this->lv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroAttr)
  return target;
}

size_t HeroAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroAttr)
  size_t total_size = 0;

  // optional uint32 exp = 1;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // optional uint32 lv = 2;
  if (this->lv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroAttr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroAttr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroAttr)
    UnsafeMergeFrom(*source);
  }
}

void HeroAttr::MergeFrom(const HeroAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroAttr)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroAttr::UnsafeMergeFrom(const HeroAttr& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.lv() != 0) {
    set_lv(from.lv());
  }
}

void HeroAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroAttr::CopyFrom(const HeroAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroAttr)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroAttr::IsInitialized() const {

  return true;
}

void HeroAttr::Swap(HeroAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroAttr::InternalSwap(HeroAttr* other) {
  std::swap(exp_, other->exp_);
  std::swap(lv_, other->lv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroAttr_descriptor_;
  metadata.reflection = HeroAttr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroAttr

// optional uint32 exp = 1;
void HeroAttr::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 HeroAttr::exp() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroAttr.exp)
  return exp_;
}
void HeroAttr::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroAttr.exp)
}

// optional uint32 lv = 2;
void HeroAttr::clear_lv() {
  lv_ = 0u;
}
::google::protobuf::uint32 HeroAttr::lv() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroAttr.lv)
  return lv_;
}
void HeroAttr::set_lv(::google::protobuf::uint32 value) {
  
  lv_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroAttr.lv)
}

inline const HeroAttr* HeroAttr::internal_default_instance() {
  return &HeroAttr_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroInfo::kUdidFieldNumber;
const int HeroInfo::kIdFieldNumber;
const int HeroInfo::kLevelFieldNumber;
const int HeroInfo::kStarLevelFieldNumber;
const int HeroInfo::kExtraStrengthFieldNumber;
const int HeroInfo::kExtraLeadershipFieldNumber;
const int HeroInfo::kExtraWisdomFieldNumber;
const int HeroInfo::kExtraCharmFieldNumber;
const int HeroInfo::kExtraLuckFieldNumber;
const int HeroInfo::kCdTimeFieldNumber;
const int HeroInfo::kExpFieldNumber;
const int HeroInfo::kSkillsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroInfo::HeroInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroInfo)
}

void HeroInfo::InitAsDefaultInstance() {
  extrastrength_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  extraleadership_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  extrawisdom_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  extracharm_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  extraluck_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
}

HeroInfo::HeroInfo(const HeroInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroInfo)
}

void HeroInfo::SharedCtor() {
  extrastrength_ = NULL;
  extraleadership_ = NULL;
  extrawisdom_ = NULL;
  extracharm_ = NULL;
  extraluck_ = NULL;
  ::memset(&udid_, 0, reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&udid_) + sizeof(exp_));
  _cached_size_ = 0;
}

HeroInfo::~HeroInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroInfo)
  SharedDtor();
}

void HeroInfo::SharedDtor() {
  if (this != &HeroInfo_default_instance_.get()) {
    delete extrastrength_;
    delete extraleadership_;
    delete extrawisdom_;
    delete extracharm_;
    delete extraluck_;
  }
}

void HeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroInfo_descriptor_;
}

const HeroInfo& HeroInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroInfo> HeroInfo_default_instance_;

HeroInfo* HeroInfo::New(::google::protobuf::Arena* arena) const {
  HeroInfo* n = new HeroInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeroInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeroInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(udid_, starlevel_);
  if (GetArenaNoVirtual() == NULL && extrastrength_ != NULL) delete extrastrength_;
  extrastrength_ = NULL;
  if (GetArenaNoVirtual() == NULL && extraleadership_ != NULL) delete extraleadership_;
  extraleadership_ = NULL;
  if (GetArenaNoVirtual() == NULL && extrawisdom_ != NULL) delete extrawisdom_;
  extrawisdom_ = NULL;
  if (GetArenaNoVirtual() == NULL && extracharm_ != NULL) delete extracharm_;
  extracharm_ = NULL;
  ZR_(cdtime_, exp_);
  if (GetArenaNoVirtual() == NULL && extraluck_ != NULL) delete extraluck_;
  extraluck_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  skills_.Clear();
}

bool HeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 udid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &udid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starLevel;
        break;
      }

      // optional uint32 starLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_starLevel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extraStrength;
        break;
      }

      // optional .NetMsg.HeroAttr extraStrength = 5;
      case 5: {
        if (tag == 42) {
         parse_extraStrength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extrastrength()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_extraLeadership;
        break;
      }

      // optional .NetMsg.HeroAttr extraLeadership = 6;
      case 6: {
        if (tag == 50) {
         parse_extraLeadership:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extraleadership()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_extraWisdom;
        break;
      }

      // optional .NetMsg.HeroAttr extraWisdom = 7;
      case 7: {
        if (tag == 58) {
         parse_extraWisdom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extrawisdom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_extraCharm;
        break;
      }

      // optional .NetMsg.HeroAttr extraCharm = 8;
      case 8: {
        if (tag == 66) {
         parse_extraCharm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extracharm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_extraLuck;
        break;
      }

      // optional .NetMsg.HeroAttr extraLuck = 9;
      case 9: {
        if (tag == 74) {
         parse_extraLuck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extraluck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cdTime;
        break;
      }

      // optional uint32 cdTime = 10;
      case 10: {
        if (tag == 80) {
         parse_cdTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 11;
      case 11: {
        if (tag == 88) {
         parse_exp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_skills;
        break;
      }

      // repeated .NetMsg.SkillInfo skills = 12;
      case 12: {
        if (tag == 98) {
         parse_skills:
          DO_(input->IncrementRecursionDepth());
         parse_loop_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_skills;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroInfo)
  return false;
#undef DO_
}

void HeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroInfo)
  // optional uint64 udid = 1;
  if (this->udid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->udid(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 starLevel = 4;
  if (this->starlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starlevel(), output);
  }

  // optional .NetMsg.HeroAttr extraStrength = 5;
  if (this->has_extrastrength()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->extrastrength_, output);
  }

  // optional .NetMsg.HeroAttr extraLeadership = 6;
  if (this->has_extraleadership()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->extraleadership_, output);
  }

  // optional .NetMsg.HeroAttr extraWisdom = 7;
  if (this->has_extrawisdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->extrawisdom_, output);
  }

  // optional .NetMsg.HeroAttr extraCharm = 8;
  if (this->has_extracharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->extracharm_, output);
  }

  // optional .NetMsg.HeroAttr extraLuck = 9;
  if (this->has_extraluck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->extraluck_, output);
  }

  // optional uint32 cdTime = 10;
  if (this->cdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cdtime(), output);
  }

  // optional uint32 exp = 11;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->exp(), output);
  }

  // repeated .NetMsg.SkillInfo skills = 12;
  for (unsigned int i = 0, n = this->skills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skills(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroInfo)
}

::google::protobuf::uint8* HeroInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroInfo)
  // optional uint64 udid = 1;
  if (this->udid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->udid(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 starLevel = 4;
  if (this->starlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starlevel(), target);
  }

  // optional .NetMsg.HeroAttr extraStrength = 5;
  if (this->has_extrastrength()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->extrastrength_, false, target);
  }

  // optional .NetMsg.HeroAttr extraLeadership = 6;
  if (this->has_extraleadership()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->extraleadership_, false, target);
  }

  // optional .NetMsg.HeroAttr extraWisdom = 7;
  if (this->has_extrawisdom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->extrawisdom_, false, target);
  }

  // optional .NetMsg.HeroAttr extraCharm = 8;
  if (this->has_extracharm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->extracharm_, false, target);
  }

  // optional .NetMsg.HeroAttr extraLuck = 9;
  if (this->has_extraluck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->extraluck_, false, target);
  }

  // optional uint32 cdTime = 10;
  if (this->cdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cdtime(), target);
  }

  // optional uint32 exp = 11;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->exp(), target);
  }

  // repeated .NetMsg.SkillInfo skills = 12;
  for (unsigned int i = 0, n = this->skills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->skills(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroInfo)
  return target;
}

size_t HeroInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroInfo)
  size_t total_size = 0;

  // optional uint64 udid = 1;
  if (this->udid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->udid());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 starLevel = 4;
  if (this->starlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->starlevel());
  }

  // optional .NetMsg.HeroAttr extraStrength = 5;
  if (this->has_extrastrength()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extrastrength_);
  }

  // optional .NetMsg.HeroAttr extraLeadership = 6;
  if (this->has_extraleadership()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extraleadership_);
  }

  // optional .NetMsg.HeroAttr extraWisdom = 7;
  if (this->has_extrawisdom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extrawisdom_);
  }

  // optional .NetMsg.HeroAttr extraCharm = 8;
  if (this->has_extracharm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extracharm_);
  }

  // optional .NetMsg.HeroAttr extraLuck = 9;
  if (this->has_extraluck()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extraluck_);
  }

  // optional uint32 cdTime = 10;
  if (this->cdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cdtime());
  }

  // optional uint32 exp = 11;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // repeated .NetMsg.SkillInfo skills = 12;
  {
    unsigned int count = this->skills_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skills(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroInfo)
    UnsafeMergeFrom(*source);
  }
}

void HeroInfo::MergeFrom(const HeroInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroInfo::UnsafeMergeFrom(const HeroInfo& from) {
  GOOGLE_DCHECK(&from != this);
  skills_.MergeFrom(from.skills_);
  if (from.udid() != 0) {
    set_udid(from.udid());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.starlevel() != 0) {
    set_starlevel(from.starlevel());
  }
  if (from.has_extrastrength()) {
    mutable_extrastrength()->::NetMsg::HeroAttr::MergeFrom(from.extrastrength());
  }
  if (from.has_extraleadership()) {
    mutable_extraleadership()->::NetMsg::HeroAttr::MergeFrom(from.extraleadership());
  }
  if (from.has_extrawisdom()) {
    mutable_extrawisdom()->::NetMsg::HeroAttr::MergeFrom(from.extrawisdom());
  }
  if (from.has_extracharm()) {
    mutable_extracharm()->::NetMsg::HeroAttr::MergeFrom(from.extracharm());
  }
  if (from.has_extraluck()) {
    mutable_extraluck()->::NetMsg::HeroAttr::MergeFrom(from.extraluck());
  }
  if (from.cdtime() != 0) {
    set_cdtime(from.cdtime());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
}

void HeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroInfo::CopyFrom(const HeroInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroInfo::IsInitialized() const {

  return true;
}

void HeroInfo::Swap(HeroInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroInfo::InternalSwap(HeroInfo* other) {
  std::swap(udid_, other->udid_);
  std::swap(id_, other->id_);
  std::swap(level_, other->level_);
  std::swap(starlevel_, other->starlevel_);
  std::swap(extrastrength_, other->extrastrength_);
  std::swap(extraleadership_, other->extraleadership_);
  std::swap(extrawisdom_, other->extrawisdom_);
  std::swap(extracharm_, other->extracharm_);
  std::swap(extraluck_, other->extraluck_);
  std::swap(cdtime_, other->cdtime_);
  std::swap(exp_, other->exp_);
  skills_.UnsafeArenaSwap(&other->skills_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroInfo_descriptor_;
  metadata.reflection = HeroInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroInfo

// optional uint64 udid = 1;
void HeroInfo::clear_udid() {
  udid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HeroInfo::udid() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.udid)
  return udid_;
}
void HeroInfo::set_udid(::google::protobuf::uint64 value) {
  
  udid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroInfo.udid)
}

// optional uint32 id = 2;
void HeroInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 HeroInfo::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.id)
  return id_;
}
void HeroInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroInfo.id)
}

// optional uint32 level = 3;
void HeroInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 HeroInfo::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.level)
  return level_;
}
void HeroInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroInfo.level)
}

// optional uint32 starLevel = 4;
void HeroInfo::clear_starlevel() {
  starlevel_ = 0u;
}
::google::protobuf::uint32 HeroInfo::starlevel() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.starLevel)
  return starlevel_;
}
void HeroInfo::set_starlevel(::google::protobuf::uint32 value) {
  
  starlevel_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroInfo.starLevel)
}

// optional .NetMsg.HeroAttr extraStrength = 5;
bool HeroInfo::has_extrastrength() const {
  return this != internal_default_instance() && extrastrength_ != NULL;
}
void HeroInfo::clear_extrastrength() {
  if (GetArenaNoVirtual() == NULL && extrastrength_ != NULL) delete extrastrength_;
  extrastrength_ = NULL;
}
const ::NetMsg::HeroAttr& HeroInfo::extrastrength() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.extraStrength)
  return extrastrength_ != NULL ? *extrastrength_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroInfo::mutable_extrastrength() {
  
  if (extrastrength_ == NULL) {
    extrastrength_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroInfo.extraStrength)
  return extrastrength_;
}
::NetMsg::HeroAttr* HeroInfo::release_extrastrength() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroInfo.extraStrength)
  
  ::NetMsg::HeroAttr* temp = extrastrength_;
  extrastrength_ = NULL;
  return temp;
}
void HeroInfo::set_allocated_extrastrength(::NetMsg::HeroAttr* extrastrength) {
  delete extrastrength_;
  extrastrength_ = extrastrength;
  if (extrastrength) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroInfo.extraStrength)
}

// optional .NetMsg.HeroAttr extraLeadership = 6;
bool HeroInfo::has_extraleadership() const {
  return this != internal_default_instance() && extraleadership_ != NULL;
}
void HeroInfo::clear_extraleadership() {
  if (GetArenaNoVirtual() == NULL && extraleadership_ != NULL) delete extraleadership_;
  extraleadership_ = NULL;
}
const ::NetMsg::HeroAttr& HeroInfo::extraleadership() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.extraLeadership)
  return extraleadership_ != NULL ? *extraleadership_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroInfo::mutable_extraleadership() {
  
  if (extraleadership_ == NULL) {
    extraleadership_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroInfo.extraLeadership)
  return extraleadership_;
}
::NetMsg::HeroAttr* HeroInfo::release_extraleadership() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroInfo.extraLeadership)
  
  ::NetMsg::HeroAttr* temp = extraleadership_;
  extraleadership_ = NULL;
  return temp;
}
void HeroInfo::set_allocated_extraleadership(::NetMsg::HeroAttr* extraleadership) {
  delete extraleadership_;
  extraleadership_ = extraleadership;
  if (extraleadership) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroInfo.extraLeadership)
}

// optional .NetMsg.HeroAttr extraWisdom = 7;
bool HeroInfo::has_extrawisdom() const {
  return this != internal_default_instance() && extrawisdom_ != NULL;
}
void HeroInfo::clear_extrawisdom() {
  if (GetArenaNoVirtual() == NULL && extrawisdom_ != NULL) delete extrawisdom_;
  extrawisdom_ = NULL;
}
const ::NetMsg::HeroAttr& HeroInfo::extrawisdom() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.extraWisdom)
  return extrawisdom_ != NULL ? *extrawisdom_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroInfo::mutable_extrawisdom() {
  
  if (extrawisdom_ == NULL) {
    extrawisdom_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroInfo.extraWisdom)
  return extrawisdom_;
}
::NetMsg::HeroAttr* HeroInfo::release_extrawisdom() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroInfo.extraWisdom)
  
  ::NetMsg::HeroAttr* temp = extrawisdom_;
  extrawisdom_ = NULL;
  return temp;
}
void HeroInfo::set_allocated_extrawisdom(::NetMsg::HeroAttr* extrawisdom) {
  delete extrawisdom_;
  extrawisdom_ = extrawisdom;
  if (extrawisdom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroInfo.extraWisdom)
}

// optional .NetMsg.HeroAttr extraCharm = 8;
bool HeroInfo::has_extracharm() const {
  return this != internal_default_instance() && extracharm_ != NULL;
}
void HeroInfo::clear_extracharm() {
  if (GetArenaNoVirtual() == NULL && extracharm_ != NULL) delete extracharm_;
  extracharm_ = NULL;
}
const ::NetMsg::HeroAttr& HeroInfo::extracharm() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.extraCharm)
  return extracharm_ != NULL ? *extracharm_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroInfo::mutable_extracharm() {
  
  if (extracharm_ == NULL) {
    extracharm_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroInfo.extraCharm)
  return extracharm_;
}
::NetMsg::HeroAttr* HeroInfo::release_extracharm() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroInfo.extraCharm)
  
  ::NetMsg::HeroAttr* temp = extracharm_;
  extracharm_ = NULL;
  return temp;
}
void HeroInfo::set_allocated_extracharm(::NetMsg::HeroAttr* extracharm) {
  delete extracharm_;
  extracharm_ = extracharm;
  if (extracharm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroInfo.extraCharm)
}

// optional .NetMsg.HeroAttr extraLuck = 9;
bool HeroInfo::has_extraluck() const {
  return this != internal_default_instance() && extraluck_ != NULL;
}
void HeroInfo::clear_extraluck() {
  if (GetArenaNoVirtual() == NULL && extraluck_ != NULL) delete extraluck_;
  extraluck_ = NULL;
}
const ::NetMsg::HeroAttr& HeroInfo::extraluck() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.extraLuck)
  return extraluck_ != NULL ? *extraluck_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroInfo::mutable_extraluck() {
  
  if (extraluck_ == NULL) {
    extraluck_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroInfo.extraLuck)
  return extraluck_;
}
::NetMsg::HeroAttr* HeroInfo::release_extraluck() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroInfo.extraLuck)
  
  ::NetMsg::HeroAttr* temp = extraluck_;
  extraluck_ = NULL;
  return temp;
}
void HeroInfo::set_allocated_extraluck(::NetMsg::HeroAttr* extraluck) {
  delete extraluck_;
  extraluck_ = extraluck;
  if (extraluck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroInfo.extraLuck)
}

// optional uint32 cdTime = 10;
void HeroInfo::clear_cdtime() {
  cdtime_ = 0u;
}
::google::protobuf::uint32 HeroInfo::cdtime() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.cdTime)
  return cdtime_;
}
void HeroInfo::set_cdtime(::google::protobuf::uint32 value) {
  
  cdtime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroInfo.cdTime)
}

// optional uint32 exp = 11;
void HeroInfo::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 HeroInfo::exp() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.exp)
  return exp_;
}
void HeroInfo::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroInfo.exp)
}

// repeated .NetMsg.SkillInfo skills = 12;
int HeroInfo::skills_size() const {
  return skills_.size();
}
void HeroInfo::clear_skills() {
  skills_.Clear();
}
const ::NetMsg::SkillInfo& HeroInfo::skills(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroInfo.skills)
  return skills_.Get(index);
}
::NetMsg::SkillInfo* HeroInfo::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroInfo.skills)
  return skills_.Mutable(index);
}
::NetMsg::SkillInfo* HeroInfo::add_skills() {
  // @@protoc_insertion_point(field_add:NetMsg.HeroInfo.skills)
  return skills_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::SkillInfo >*
HeroInfo::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.HeroInfo.skills)
  return &skills_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::SkillInfo >&
HeroInfo::skills() const {
  // @@protoc_insertion_point(field_list:NetMsg.HeroInfo.skills)
  return skills_;
}

inline const HeroInfo* HeroInfo::internal_default_instance() {
  return &HeroInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroAck::kHerosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroAck::HeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroAck)
}

void HeroAck::InitAsDefaultInstance() {
}

HeroAck::HeroAck(const HeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroAck)
}

void HeroAck::SharedCtor() {
  _cached_size_ = 0;
}

HeroAck::~HeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroAck)
  SharedDtor();
}

void HeroAck::SharedDtor() {
}

void HeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroAck_descriptor_;
}

const HeroAck& HeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroAck> HeroAck_default_instance_;

HeroAck* HeroAck::New(::google::protobuf::Arena* arena) const {
  HeroAck* n = new HeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroAck)
  heros_.Clear();
}

bool HeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.HeroInfo heros = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_heros;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroAck)
  return false;
#undef DO_
}

void HeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroAck)
  // repeated .NetMsg.HeroInfo heros = 1;
  for (unsigned int i = 0, n = this->heros_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroAck)
}

::google::protobuf::uint8* HeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroAck)
  // repeated .NetMsg.HeroInfo heros = 1;
  for (unsigned int i = 0, n = this->heros_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->heros(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroAck)
  return target;
}

size_t HeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroAck)
  size_t total_size = 0;

  // repeated .NetMsg.HeroInfo heros = 1;
  {
    unsigned int count = this->heros_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heros(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroAck)
    UnsafeMergeFrom(*source);
  }
}

void HeroAck::MergeFrom(const HeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroAck::UnsafeMergeFrom(const HeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  heros_.MergeFrom(from.heros_);
}

void HeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroAck::CopyFrom(const HeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroAck::IsInitialized() const {

  return true;
}

void HeroAck::Swap(HeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroAck::InternalSwap(HeroAck* other) {
  heros_.UnsafeArenaSwap(&other->heros_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroAck_descriptor_;
  metadata.reflection = HeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroAck

// repeated .NetMsg.HeroInfo heros = 1;
int HeroAck::heros_size() const {
  return heros_.size();
}
void HeroAck::clear_heros() {
  heros_.Clear();
}
const ::NetMsg::HeroInfo& HeroAck::heros(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroAck.heros)
  return heros_.Get(index);
}
::NetMsg::HeroInfo* HeroAck::mutable_heros(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroAck.heros)
  return heros_.Mutable(index);
}
::NetMsg::HeroInfo* HeroAck::add_heros() {
  // @@protoc_insertion_point(field_add:NetMsg.HeroAck.heros)
  return heros_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::HeroInfo >*
HeroAck::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.HeroAck.heros)
  return &heros_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::HeroInfo >&
HeroAck::heros() const {
  // @@protoc_insertion_point(field_list:NetMsg.HeroAck.heros)
  return heros_;
}

inline const HeroAck* HeroAck::internal_default_instance() {
  return &HeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemInfo::kUidFieldNumber;
const int ItemInfo::kIdFieldNumber;
const int ItemInfo::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemInfo::ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ItemInfo)
}

void ItemInfo::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&uid_) + sizeof(num_));
  _cached_size_ = 0;
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ItemInfo> ItemInfo_default_instance_;

ItemInfo* ItemInfo::New(::google::protobuf::Arena* arena) const {
  ItemInfo* n = new ItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ItemInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ItemInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ItemInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ItemInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ItemInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ItemInfo)
  return target;
}

size_t ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ItemInfo)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ItemInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ItemInfo)
    UnsafeMergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ItemInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ItemInfo::UnsafeMergeFrom(const ItemInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ItemInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemInfo::InternalSwap(ItemInfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(id_, other->id_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemInfo

// optional uint64 uid = 1;
void ItemInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ItemInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ItemInfo.uid)
  return uid_;
}
void ItemInfo::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ItemInfo.uid)
}

// optional uint32 id = 2;
void ItemInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ItemInfo::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ItemInfo.id)
  return id_;
}
void ItemInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ItemInfo.id)
}

// optional uint32 num = 3;
void ItemInfo::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 ItemInfo::num() const {
  // @@protoc_insertion_point(field_get:NetMsg.ItemInfo.num)
  return num_;
}
void ItemInfo::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ItemInfo.num)
}

inline const ItemInfo* ItemInfo::internal_default_instance() {
  return &ItemInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemAck::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemAck::ItemAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ItemAck)
}

void ItemAck::InitAsDefaultInstance() {
}

ItemAck::ItemAck(const ItemAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ItemAck)
}

void ItemAck::SharedCtor() {
  _cached_size_ = 0;
}

ItemAck::~ItemAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ItemAck)
  SharedDtor();
}

void ItemAck::SharedDtor() {
}

void ItemAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemAck_descriptor_;
}

const ItemAck& ItemAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ItemAck> ItemAck_default_instance_;

ItemAck* ItemAck::New(::google::protobuf::Arena* arena) const {
  ItemAck* n = new ItemAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ItemAck)
  items_.Clear();
}

bool ItemAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ItemAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.ItemInfo items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ItemAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ItemAck)
  return false;
#undef DO_
}

void ItemAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ItemAck)
  // repeated .NetMsg.ItemInfo items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ItemAck)
}

::google::protobuf::uint8* ItemAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ItemAck)
  // repeated .NetMsg.ItemInfo items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ItemAck)
  return target;
}

size_t ItemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ItemAck)
  size_t total_size = 0;

  // repeated .NetMsg.ItemInfo items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ItemAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ItemAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ItemAck)
    UnsafeMergeFrom(*source);
  }
}

void ItemAck::MergeFrom(const ItemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ItemAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ItemAck::UnsafeMergeFrom(const ItemAck& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
}

void ItemAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemAck::CopyFrom(const ItemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ItemAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ItemAck::IsInitialized() const {

  return true;
}

void ItemAck::Swap(ItemAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemAck::InternalSwap(ItemAck* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemAck_descriptor_;
  metadata.reflection = ItemAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemAck

// repeated .NetMsg.ItemInfo items = 1;
int ItemAck::items_size() const {
  return items_.size();
}
void ItemAck::clear_items() {
  items_.Clear();
}
const ::NetMsg::ItemInfo& ItemAck::items(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ItemAck.items)
  return items_.Get(index);
}
::NetMsg::ItemInfo* ItemAck::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ItemAck.items)
  return items_.Mutable(index);
}
::NetMsg::ItemInfo* ItemAck::add_items() {
  // @@protoc_insertion_point(field_add:NetMsg.ItemAck.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ItemInfo >*
ItemAck::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ItemAck.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ItemInfo >&
ItemAck::items() const {
  // @@protoc_insertion_point(field_list:NetMsg.ItemAck.items)
  return items_;
}

inline const ItemAck* ItemAck::internal_default_instance() {
  return &ItemAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSkill::kHeroUidFieldNumber;
const int UpdateSkill::kSkillsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSkill::UpdateSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UpdateSkill)
}

void UpdateSkill::InitAsDefaultInstance() {
}

UpdateSkill::UpdateSkill(const UpdateSkill& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UpdateSkill)
}

void UpdateSkill::SharedCtor() {
  herouid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

UpdateSkill::~UpdateSkill() {
  // @@protoc_insertion_point(destructor:NetMsg.UpdateSkill)
  SharedDtor();
}

void UpdateSkill::SharedDtor() {
}

void UpdateSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSkill_descriptor_;
}

const UpdateSkill& UpdateSkill::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateSkill> UpdateSkill_default_instance_;

UpdateSkill* UpdateSkill::New(::google::protobuf::Arena* arena) const {
  UpdateSkill* n = new UpdateSkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UpdateSkill)
  herouid_ = GOOGLE_ULONGLONG(0);
  skills_.Clear();
}

bool UpdateSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UpdateSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroUid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &herouid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skills;
        break;
      }

      // repeated .NetMsg.SkillInfo skills = 2;
      case 2: {
        if (tag == 18) {
         parse_skills:
          DO_(input->IncrementRecursionDepth());
         parse_loop_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_skills;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UpdateSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UpdateSkill)
  return false;
#undef DO_
}

void UpdateSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UpdateSkill)
  // optional uint64 heroUid = 1;
  if (this->herouid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->herouid(), output);
  }

  // repeated .NetMsg.SkillInfo skills = 2;
  for (unsigned int i = 0, n = this->skills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skills(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UpdateSkill)
}

::google::protobuf::uint8* UpdateSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UpdateSkill)
  // optional uint64 heroUid = 1;
  if (this->herouid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->herouid(), target);
  }

  // repeated .NetMsg.SkillInfo skills = 2;
  for (unsigned int i = 0, n = this->skills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->skills(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UpdateSkill)
  return target;
}

size_t UpdateSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UpdateSkill)
  size_t total_size = 0;

  // optional uint64 heroUid = 1;
  if (this->herouid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->herouid());
  }

  // repeated .NetMsg.SkillInfo skills = 2;
  {
    unsigned int count = this->skills_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skills(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UpdateSkill)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UpdateSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UpdateSkill)
    UnsafeMergeFrom(*source);
  }
}

void UpdateSkill::MergeFrom(const UpdateSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UpdateSkill)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateSkill::UnsafeMergeFrom(const UpdateSkill& from) {
  GOOGLE_DCHECK(&from != this);
  skills_.MergeFrom(from.skills_);
  if (from.herouid() != 0) {
    set_herouid(from.herouid());
  }
}

void UpdateSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UpdateSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSkill::CopyFrom(const UpdateSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UpdateSkill)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateSkill::IsInitialized() const {

  return true;
}

void UpdateSkill::Swap(UpdateSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSkill::InternalSwap(UpdateSkill* other) {
  std::swap(herouid_, other->herouid_);
  skills_.UnsafeArenaSwap(&other->skills_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSkill_descriptor_;
  metadata.reflection = UpdateSkill_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateSkill

// optional uint64 heroUid = 1;
void UpdateSkill::clear_herouid() {
  herouid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UpdateSkill::herouid() const {
  // @@protoc_insertion_point(field_get:NetMsg.UpdateSkill.heroUid)
  return herouid_;
}
void UpdateSkill::set_herouid(::google::protobuf::uint64 value) {
  
  herouid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UpdateSkill.heroUid)
}

// repeated .NetMsg.SkillInfo skills = 2;
int UpdateSkill::skills_size() const {
  return skills_.size();
}
void UpdateSkill::clear_skills() {
  skills_.Clear();
}
const ::NetMsg::SkillInfo& UpdateSkill::skills(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.UpdateSkill.skills)
  return skills_.Get(index);
}
::NetMsg::SkillInfo* UpdateSkill::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.UpdateSkill.skills)
  return skills_.Mutable(index);
}
::NetMsg::SkillInfo* UpdateSkill::add_skills() {
  // @@protoc_insertion_point(field_add:NetMsg.UpdateSkill.skills)
  return skills_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::SkillInfo >*
UpdateSkill::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.UpdateSkill.skills)
  return &skills_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::SkillInfo >&
UpdateSkill::skills() const {
  // @@protoc_insertion_point(field_list:NetMsg.UpdateSkill.skills)
  return skills_;
}

inline const UpdateSkill* UpdateSkill::internal_default_instance() {
  return &UpdateSkill_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNewGuide::kStepFieldNumber;
const int SetNewGuide::kAddDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNewGuide::SetNewGuide()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SetNewGuide)
}

void SetNewGuide::InitAsDefaultInstance() {
}

SetNewGuide::SetNewGuide(const SetNewGuide& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SetNewGuide)
}

void SetNewGuide::SharedCtor() {
  ::memset(&step_, 0, reinterpret_cast<char*>(&adddata_) -
    reinterpret_cast<char*>(&step_) + sizeof(adddata_));
  _cached_size_ = 0;
}

SetNewGuide::~SetNewGuide() {
  // @@protoc_insertion_point(destructor:NetMsg.SetNewGuide)
  SharedDtor();
}

void SetNewGuide::SharedDtor() {
}

void SetNewGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNewGuide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetNewGuide_descriptor_;
}

const SetNewGuide& SetNewGuide::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetNewGuide> SetNewGuide_default_instance_;

SetNewGuide* SetNewGuide::New(::google::protobuf::Arena* arena) const {
  SetNewGuide* n = new SetNewGuide;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNewGuide::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SetNewGuide)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetNewGuide, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetNewGuide*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(step_, adddata_);

#undef ZR_HELPER_
#undef ZR_

}

bool SetNewGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SetNewGuide)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 step = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addData;
        break;
      }

      // optional uint32 addData = 2;
      case 2: {
        if (tag == 16) {
         parse_addData:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SetNewGuide)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SetNewGuide)
  return false;
#undef DO_
}

void SetNewGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SetNewGuide)
  // optional uint32 step = 1;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }

  // optional uint32 addData = 2;
  if (this->adddata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->adddata(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SetNewGuide)
}

::google::protobuf::uint8* SetNewGuide::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SetNewGuide)
  // optional uint32 step = 1;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }

  // optional uint32 addData = 2;
  if (this->adddata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->adddata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SetNewGuide)
  return target;
}

size_t SetNewGuide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SetNewGuide)
  size_t total_size = 0;

  // optional uint32 step = 1;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->step());
  }

  // optional uint32 addData = 2;
  if (this->adddata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adddata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNewGuide::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SetNewGuide)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetNewGuide* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetNewGuide>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SetNewGuide)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SetNewGuide)
    UnsafeMergeFrom(*source);
  }
}

void SetNewGuide::MergeFrom(const SetNewGuide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SetNewGuide)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetNewGuide::UnsafeMergeFrom(const SetNewGuide& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.step() != 0) {
    set_step(from.step());
  }
  if (from.adddata() != 0) {
    set_adddata(from.adddata());
  }
}

void SetNewGuide::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SetNewGuide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNewGuide::CopyFrom(const SetNewGuide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SetNewGuide)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetNewGuide::IsInitialized() const {

  return true;
}

void SetNewGuide::Swap(SetNewGuide* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNewGuide::InternalSwap(SetNewGuide* other) {
  std::swap(step_, other->step_);
  std::swap(adddata_, other->adddata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetNewGuide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetNewGuide_descriptor_;
  metadata.reflection = SetNewGuide_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNewGuide

// optional uint32 step = 1;
void SetNewGuide::clear_step() {
  step_ = 0u;
}
::google::protobuf::uint32 SetNewGuide::step() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetNewGuide.step)
  return step_;
}
void SetNewGuide::set_step(::google::protobuf::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetNewGuide.step)
}

// optional uint32 addData = 2;
void SetNewGuide::clear_adddata() {
  adddata_ = 0u;
}
::google::protobuf::uint32 SetNewGuide::adddata() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetNewGuide.addData)
  return adddata_;
}
void SetNewGuide::set_adddata(::google::protobuf::uint32 value) {
  
  adddata_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetNewGuide.addData)
}

inline const SetNewGuide* SetNewGuide::internal_default_instance() {
  return &SetNewGuide_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathInfo::kStartPathFieldNumber;
const int PathInfo::kStartPerFieldNumber;
const int PathInfo::kEndPathFieldNumber;
const int PathInfo::kEndPerFieldNumber;
const int PathInfo::kCurPathFieldNumber;
const int PathInfo::kCurPerFieldNumber;
const int PathInfo::kCurWayPointIndFieldNumber;
const int PathInfo::kWayPointFieldNumber;
const int PathInfo::kRunTargetFieldNumber;
const int PathInfo::kTargetIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathInfo::PathInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.PathInfo)
}

void PathInfo::InitAsDefaultInstance() {
}

PathInfo::PathInfo(const PathInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.PathInfo)
}

void PathInfo::SharedCtor() {
  ::memset(&startpath_, 0, reinterpret_cast<char*>(&targetid_) -
    reinterpret_cast<char*>(&startpath_) + sizeof(targetid_));
  _cached_size_ = 0;
}

PathInfo::~PathInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.PathInfo)
  SharedDtor();
}

void PathInfo::SharedDtor() {
}

void PathInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathInfo_descriptor_;
}

const PathInfo& PathInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PathInfo> PathInfo_default_instance_;

PathInfo* PathInfo::New(::google::protobuf::Arena* arena) const {
  PathInfo* n = new PathInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.PathInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(startpath_, curwaypointind_);
  ZR_(runtarget_, targetid_);

#undef ZR_HELPER_
#undef ZR_

  waypoint_.Clear();
}

bool PathInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.PathInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 startPath = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_startPer;
        break;
      }

      // optional float startPer = 2;
      case 2: {
        if (tag == 21) {
         parse_startPer:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startper_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endPath;
        break;
      }

      // optional uint32 endPath = 3;
      case 3: {
        if (tag == 24) {
         parse_endPath:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endpath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_endPer;
        break;
      }

      // optional float endPer = 4;
      case 4: {
        if (tag == 37) {
         parse_endPer:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endper_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_curPath;
        break;
      }

      // optional uint32 curPath = 5;
      case 5: {
        if (tag == 40) {
         parse_curPath:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_curPer;
        break;
      }

      // optional float curPer = 6;
      case 6: {
        if (tag == 53) {
         parse_curPer:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curper_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_curWayPointInd;
        break;
      }

      // optional uint32 curWayPointInd = 7;
      case 7: {
        if (tag == 56) {
         parse_curWayPointInd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curwaypointind_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wayPoint;
        break;
      }

      // repeated uint32 wayPoint = 8;
      case 8: {
        if (tag == 66) {
         parse_wayPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_waypoint())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_waypoint())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_runTarget;
        break;
      }

      // optional .NetMsg.RunTargetType runTarget = 9;
      case 9: {
        if (tag == 72) {
         parse_runTarget:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_runtarget(static_cast< ::NetMsg::RunTargetType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_targetID;
        break;
      }

      // optional uint64 targetID = 10;
      case 10: {
        if (tag == 80) {
         parse_targetID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.PathInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.PathInfo)
  return false;
#undef DO_
}

void PathInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.PathInfo)
  // optional uint32 startPath = 1;
  if (this->startpath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startpath(), output);
  }

  // optional float startPer = 2;
  if (this->startper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->startper(), output);
  }

  // optional uint32 endPath = 3;
  if (this->endpath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endpath(), output);
  }

  // optional float endPer = 4;
  if (this->endper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->endper(), output);
  }

  // optional uint32 curPath = 5;
  if (this->curpath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curpath(), output);
  }

  // optional float curPer = 6;
  if (this->curper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->curper(), output);
  }

  // optional uint32 curWayPointInd = 7;
  if (this->curwaypointind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curwaypointind(), output);
  }

  // repeated uint32 wayPoint = 8;
  if (this->waypoint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waypoint_cached_byte_size_);
  }
  for (int i = 0; i < this->waypoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->waypoint(i), output);
  }

  // optional .NetMsg.RunTargetType runTarget = 9;
  if (this->runtarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->runtarget(), output);
  }

  // optional uint64 targetID = 10;
  if (this->targetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->targetid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.PathInfo)
}

::google::protobuf::uint8* PathInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.PathInfo)
  // optional uint32 startPath = 1;
  if (this->startpath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startpath(), target);
  }

  // optional float startPer = 2;
  if (this->startper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->startper(), target);
  }

  // optional uint32 endPath = 3;
  if (this->endpath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endpath(), target);
  }

  // optional float endPer = 4;
  if (this->endper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->endper(), target);
  }

  // optional uint32 curPath = 5;
  if (this->curpath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curpath(), target);
  }

  // optional float curPer = 6;
  if (this->curper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->curper(), target);
  }

  // optional uint32 curWayPointInd = 7;
  if (this->curwaypointind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curwaypointind(), target);
  }

  // repeated uint32 wayPoint = 8;
  if (this->waypoint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _waypoint_cached_byte_size_, target);
  }
  for (int i = 0; i < this->waypoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->waypoint(i), target);
  }

  // optional .NetMsg.RunTargetType runTarget = 9;
  if (this->runtarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->runtarget(), target);
  }

  // optional uint64 targetID = 10;
  if (this->targetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->targetid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.PathInfo)
  return target;
}

size_t PathInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.PathInfo)
  size_t total_size = 0;

  // optional uint32 startPath = 1;
  if (this->startpath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpath());
  }

  // optional float startPer = 2;
  if (this->startper() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 endPath = 3;
  if (this->endpath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endpath());
  }

  // optional float endPer = 4;
  if (this->endper() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 curPath = 5;
  if (this->curpath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curpath());
  }

  // optional float curPer = 6;
  if (this->curper() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 curWayPointInd = 7;
  if (this->curwaypointind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curwaypointind());
  }

  // optional .NetMsg.RunTargetType runTarget = 9;
  if (this->runtarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->runtarget());
  }

  // optional uint64 targetID = 10;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->targetid());
  }

  // repeated uint32 wayPoint = 8;
  {
    size_t data_size = 0;
    unsigned int count = this->waypoint_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->waypoint(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _waypoint_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.PathInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PathInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.PathInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.PathInfo)
    UnsafeMergeFrom(*source);
  }
}

void PathInfo::MergeFrom(const PathInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.PathInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PathInfo::UnsafeMergeFrom(const PathInfo& from) {
  GOOGLE_DCHECK(&from != this);
  waypoint_.UnsafeMergeFrom(from.waypoint_);
  if (from.startpath() != 0) {
    set_startpath(from.startpath());
  }
  if (from.startper() != 0) {
    set_startper(from.startper());
  }
  if (from.endpath() != 0) {
    set_endpath(from.endpath());
  }
  if (from.endper() != 0) {
    set_endper(from.endper());
  }
  if (from.curpath() != 0) {
    set_curpath(from.curpath());
  }
  if (from.curper() != 0) {
    set_curper(from.curper());
  }
  if (from.curwaypointind() != 0) {
    set_curwaypointind(from.curwaypointind());
  }
  if (from.runtarget() != 0) {
    set_runtarget(from.runtarget());
  }
  if (from.targetid() != 0) {
    set_targetid(from.targetid());
  }
}

void PathInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.PathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathInfo::CopyFrom(const PathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.PathInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PathInfo::IsInitialized() const {

  return true;
}

void PathInfo::Swap(PathInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathInfo::InternalSwap(PathInfo* other) {
  std::swap(startpath_, other->startpath_);
  std::swap(startper_, other->startper_);
  std::swap(endpath_, other->endpath_);
  std::swap(endper_, other->endper_);
  std::swap(curpath_, other->curpath_);
  std::swap(curper_, other->curper_);
  std::swap(curwaypointind_, other->curwaypointind_);
  waypoint_.UnsafeArenaSwap(&other->waypoint_);
  std::swap(runtarget_, other->runtarget_);
  std::swap(targetid_, other->targetid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathInfo_descriptor_;
  metadata.reflection = PathInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathInfo

// optional uint32 startPath = 1;
void PathInfo::clear_startpath() {
  startpath_ = 0u;
}
::google::protobuf::uint32 PathInfo::startpath() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.startPath)
  return startpath_;
}
void PathInfo::set_startpath(::google::protobuf::uint32 value) {
  
  startpath_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.startPath)
}

// optional float startPer = 2;
void PathInfo::clear_startper() {
  startper_ = 0;
}
float PathInfo::startper() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.startPer)
  return startper_;
}
void PathInfo::set_startper(float value) {
  
  startper_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.startPer)
}

// optional uint32 endPath = 3;
void PathInfo::clear_endpath() {
  endpath_ = 0u;
}
::google::protobuf::uint32 PathInfo::endpath() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.endPath)
  return endpath_;
}
void PathInfo::set_endpath(::google::protobuf::uint32 value) {
  
  endpath_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.endPath)
}

// optional float endPer = 4;
void PathInfo::clear_endper() {
  endper_ = 0;
}
float PathInfo::endper() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.endPer)
  return endper_;
}
void PathInfo::set_endper(float value) {
  
  endper_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.endPer)
}

// optional uint32 curPath = 5;
void PathInfo::clear_curpath() {
  curpath_ = 0u;
}
::google::protobuf::uint32 PathInfo::curpath() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.curPath)
  return curpath_;
}
void PathInfo::set_curpath(::google::protobuf::uint32 value) {
  
  curpath_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.curPath)
}

// optional float curPer = 6;
void PathInfo::clear_curper() {
  curper_ = 0;
}
float PathInfo::curper() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.curPer)
  return curper_;
}
void PathInfo::set_curper(float value) {
  
  curper_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.curPer)
}

// optional uint32 curWayPointInd = 7;
void PathInfo::clear_curwaypointind() {
  curwaypointind_ = 0u;
}
::google::protobuf::uint32 PathInfo::curwaypointind() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.curWayPointInd)
  return curwaypointind_;
}
void PathInfo::set_curwaypointind(::google::protobuf::uint32 value) {
  
  curwaypointind_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.curWayPointInd)
}

// repeated uint32 wayPoint = 8;
int PathInfo::waypoint_size() const {
  return waypoint_.size();
}
void PathInfo::clear_waypoint() {
  waypoint_.Clear();
}
::google::protobuf::uint32 PathInfo::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.wayPoint)
  return waypoint_.Get(index);
}
void PathInfo::set_waypoint(int index, ::google::protobuf::uint32 value) {
  waypoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.wayPoint)
}
void PathInfo::add_waypoint(::google::protobuf::uint32 value) {
  waypoint_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.PathInfo.wayPoint)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PathInfo::waypoint() const {
  // @@protoc_insertion_point(field_list:NetMsg.PathInfo.wayPoint)
  return waypoint_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PathInfo::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.PathInfo.wayPoint)
  return &waypoint_;
}

// optional .NetMsg.RunTargetType runTarget = 9;
void PathInfo::clear_runtarget() {
  runtarget_ = 0;
}
::NetMsg::RunTargetType PathInfo::runtarget() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.runTarget)
  return static_cast< ::NetMsg::RunTargetType >(runtarget_);
}
void PathInfo::set_runtarget(::NetMsg::RunTargetType value) {
  
  runtarget_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.runTarget)
}

// optional uint64 targetID = 10;
void PathInfo::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PathInfo::targetid() const {
  // @@protoc_insertion_point(field_get:NetMsg.PathInfo.targetID)
  return targetid_;
}
void PathInfo::set_targetid(::google::protobuf::uint64 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PathInfo.targetID)
}

inline const PathInfo* PathInfo::internal_default_instance() {
  return &PathInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunPathAck::kPathFieldNumber;
const int RunPathAck::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunPathAck::RunPathAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RunPathAck)
}

void RunPathAck::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::PathInfo*>(
      ::NetMsg::PathInfo::internal_default_instance());
}

RunPathAck::RunPathAck(const RunPathAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RunPathAck)
}

void RunPathAck::SharedCtor() {
  path_ = NULL;
  state_ = 0;
  _cached_size_ = 0;
}

RunPathAck::~RunPathAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RunPathAck)
  SharedDtor();
}

void RunPathAck::SharedDtor() {
  if (this != &RunPathAck_default_instance_.get()) {
    delete path_;
  }
}

void RunPathAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunPathAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunPathAck_descriptor_;
}

const RunPathAck& RunPathAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunPathAck> RunPathAck_default_instance_;

RunPathAck* RunPathAck::New(::google::protobuf::Arena* arena) const {
  RunPathAck* n = new RunPathAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunPathAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RunPathAck)
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  state_ = 0;
}

bool RunPathAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RunPathAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.PathInfo path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .NetMsg.RunState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::NetMsg::RunState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RunPathAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RunPathAck)
  return false;
#undef DO_
}

void RunPathAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RunPathAck)
  // optional .NetMsg.PathInfo path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // optional .NetMsg.RunState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RunPathAck)
}

::google::protobuf::uint8* RunPathAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RunPathAck)
  // optional .NetMsg.PathInfo path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // optional .NetMsg.RunState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RunPathAck)
  return target;
}

size_t RunPathAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RunPathAck)
  size_t total_size = 0;

  // optional .NetMsg.PathInfo path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional .NetMsg.RunState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunPathAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RunPathAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunPathAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunPathAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RunPathAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RunPathAck)
    UnsafeMergeFrom(*source);
  }
}

void RunPathAck::MergeFrom(const RunPathAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RunPathAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunPathAck::UnsafeMergeFrom(const RunPathAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_path()) {
    mutable_path()->::NetMsg::PathInfo::MergeFrom(from.path());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void RunPathAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RunPathAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPathAck::CopyFrom(const RunPathAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RunPathAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunPathAck::IsInitialized() const {

  return true;
}

void RunPathAck::Swap(RunPathAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunPathAck::InternalSwap(RunPathAck* other) {
  std::swap(path_, other->path_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunPathAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunPathAck_descriptor_;
  metadata.reflection = RunPathAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunPathAck

// optional .NetMsg.PathInfo path = 1;
bool RunPathAck::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void RunPathAck::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::PathInfo& RunPathAck::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.RunPathAck.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::PathInfo::internal_default_instance();
}
::NetMsg::PathInfo* RunPathAck::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::PathInfo;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.RunPathAck.path)
  return path_;
}
::NetMsg::PathInfo* RunPathAck::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.RunPathAck.path)
  
  ::NetMsg::PathInfo* temp = path_;
  path_ = NULL;
  return temp;
}
void RunPathAck::set_allocated_path(::NetMsg::PathInfo* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.RunPathAck.path)
}

// optional .NetMsg.RunState state = 2;
void RunPathAck::clear_state() {
  state_ = 0;
}
::NetMsg::RunState RunPathAck::state() const {
  // @@protoc_insertion_point(field_get:NetMsg.RunPathAck.state)
  return static_cast< ::NetMsg::RunState >(state_);
}
void RunPathAck::set_state(::NetMsg::RunState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RunPathAck.state)
}

inline const RunPathAck* RunPathAck::internal_default_instance() {
  return &RunPathAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRunPath::kPathFieldNumber;
const int SetRunPath::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRunPath::SetRunPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SetRunPath)
}

void SetRunPath::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::PathInfo*>(
      ::NetMsg::PathInfo::internal_default_instance());
}

SetRunPath::SetRunPath(const SetRunPath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SetRunPath)
}

void SetRunPath::SharedCtor() {
  path_ = NULL;
  state_ = 0;
  _cached_size_ = 0;
}

SetRunPath::~SetRunPath() {
  // @@protoc_insertion_point(destructor:NetMsg.SetRunPath)
  SharedDtor();
}

void SetRunPath::SharedDtor() {
  if (this != &SetRunPath_default_instance_.get()) {
    delete path_;
  }
}

void SetRunPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRunPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRunPath_descriptor_;
}

const SetRunPath& SetRunPath::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetRunPath> SetRunPath_default_instance_;

SetRunPath* SetRunPath::New(::google::protobuf::Arena* arena) const {
  SetRunPath* n = new SetRunPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRunPath::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SetRunPath)
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  state_ = 0;
}

bool SetRunPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SetRunPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.PathInfo path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .NetMsg.RunState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::NetMsg::RunState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SetRunPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SetRunPath)
  return false;
#undef DO_
}

void SetRunPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SetRunPath)
  // optional .NetMsg.PathInfo path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // optional .NetMsg.RunState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SetRunPath)
}

::google::protobuf::uint8* SetRunPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SetRunPath)
  // optional .NetMsg.PathInfo path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // optional .NetMsg.RunState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SetRunPath)
  return target;
}

size_t SetRunPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SetRunPath)
  size_t total_size = 0;

  // optional .NetMsg.PathInfo path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional .NetMsg.RunState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRunPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SetRunPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetRunPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRunPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SetRunPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SetRunPath)
    UnsafeMergeFrom(*source);
  }
}

void SetRunPath::MergeFrom(const SetRunPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SetRunPath)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetRunPath::UnsafeMergeFrom(const SetRunPath& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_path()) {
    mutable_path()->::NetMsg::PathInfo::MergeFrom(from.path());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SetRunPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SetRunPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRunPath::CopyFrom(const SetRunPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SetRunPath)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetRunPath::IsInitialized() const {

  return true;
}

void SetRunPath::Swap(SetRunPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRunPath::InternalSwap(SetRunPath* other) {
  std::swap(path_, other->path_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRunPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRunPath_descriptor_;
  metadata.reflection = SetRunPath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRunPath

// optional .NetMsg.PathInfo path = 1;
bool SetRunPath::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void SetRunPath::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::PathInfo& SetRunPath::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetRunPath.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::PathInfo::internal_default_instance();
}
::NetMsg::PathInfo* SetRunPath::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::PathInfo;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.SetRunPath.path)
  return path_;
}
::NetMsg::PathInfo* SetRunPath::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.SetRunPath.path)
  
  ::NetMsg::PathInfo* temp = path_;
  path_ = NULL;
  return temp;
}
void SetRunPath::set_allocated_path(::NetMsg::PathInfo* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.SetRunPath.path)
}

// optional .NetMsg.RunState state = 2;
void SetRunPath::clear_state() {
  state_ = 0;
}
::NetMsg::RunState SetRunPath::state() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetRunPath.state)
  return static_cast< ::NetMsg::RunState >(state_);
}
void SetRunPath::set_state(::NetMsg::RunState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetRunPath.state)
}

inline const SetRunPath* SetRunPath::internal_default_instance() {
  return &SetRunPath_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArrivedCity::kCityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArrivedCity::ArrivedCity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ArrivedCity)
}

void ArrivedCity::InitAsDefaultInstance() {
}

ArrivedCity::ArrivedCity(const ArrivedCity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ArrivedCity)
}

void ArrivedCity::SharedCtor() {
  cityid_ = 0;
  _cached_size_ = 0;
}

ArrivedCity::~ArrivedCity() {
  // @@protoc_insertion_point(destructor:NetMsg.ArrivedCity)
  SharedDtor();
}

void ArrivedCity::SharedDtor() {
}

void ArrivedCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrivedCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrivedCity_descriptor_;
}

const ArrivedCity& ArrivedCity::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ArrivedCity> ArrivedCity_default_instance_;

ArrivedCity* ArrivedCity::New(::google::protobuf::Arena* arena) const {
  ArrivedCity* n = new ArrivedCity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArrivedCity::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ArrivedCity)
  cityid_ = 0;
}

bool ArrivedCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ArrivedCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cityId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ArrivedCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ArrivedCity)
  return false;
#undef DO_
}

void ArrivedCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ArrivedCity)
  // optional int32 cityId = 1;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ArrivedCity)
}

::google::protobuf::uint8* ArrivedCity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ArrivedCity)
  // optional int32 cityId = 1;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ArrivedCity)
  return target;
}

size_t ArrivedCity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ArrivedCity)
  size_t total_size = 0;

  // optional int32 cityId = 1;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cityid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrivedCity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ArrivedCity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArrivedCity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArrivedCity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ArrivedCity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ArrivedCity)
    UnsafeMergeFrom(*source);
  }
}

void ArrivedCity::MergeFrom(const ArrivedCity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ArrivedCity)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ArrivedCity::UnsafeMergeFrom(const ArrivedCity& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
}

void ArrivedCity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ArrivedCity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrivedCity::CopyFrom(const ArrivedCity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ArrivedCity)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ArrivedCity::IsInitialized() const {

  return true;
}

void ArrivedCity::Swap(ArrivedCity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArrivedCity::InternalSwap(ArrivedCity* other) {
  std::swap(cityid_, other->cityid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArrivedCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrivedCity_descriptor_;
  metadata.reflection = ArrivedCity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArrivedCity

// optional int32 cityId = 1;
void ArrivedCity::clear_cityid() {
  cityid_ = 0;
}
::google::protobuf::int32 ArrivedCity::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ArrivedCity.cityId)
  return cityid_;
}
void ArrivedCity::set_cityid(::google::protobuf::int32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ArrivedCity.cityId)
}

inline const ArrivedCity* ArrivedCity::internal_default_instance() {
  return &ArrivedCity_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Formation::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Formation::Formation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Formation)
}

void Formation::InitAsDefaultInstance() {
}

Formation::Formation(const Formation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.Formation)
}

void Formation::SharedCtor() {
  _cached_size_ = 0;
}

Formation::~Formation() {
  // @@protoc_insertion_point(destructor:NetMsg.Formation)
  SharedDtor();
}

void Formation::SharedDtor() {
}

void Formation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Formation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Formation_descriptor_;
}

const Formation& Formation::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Formation> Formation_default_instance_;

Formation* Formation::New(::google::protobuf::Arena* arena) const {
  Formation* n = new Formation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Formation::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Formation)
  heroid_.Clear();
}

bool Formation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Formation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 heroId = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heroid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_heroid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Formation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Formation)
  return false;
#undef DO_
}

void Formation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Formation)
  // repeated uint64 heroId = 1;
  if (this->heroid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heroid_cached_byte_size_);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->heroid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.Formation)
}

::google::protobuf::uint8* Formation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Formation)
  // repeated uint64 heroId = 1;
  if (this->heroid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heroid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->heroid(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Formation)
  return target;
}

size_t Formation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Formation)
  size_t total_size = 0;

  // repeated uint64 heroId = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->heroid_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heroid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heroid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Formation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Formation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Formation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Formation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Formation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Formation)
    UnsafeMergeFrom(*source);
  }
}

void Formation::MergeFrom(const Formation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Formation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Formation::UnsafeMergeFrom(const Formation& from) {
  GOOGLE_DCHECK(&from != this);
  heroid_.UnsafeMergeFrom(from.heroid_);
}

void Formation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Formation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Formation::CopyFrom(const Formation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Formation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Formation::IsInitialized() const {

  return true;
}

void Formation::Swap(Formation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Formation::InternalSwap(Formation* other) {
  heroid_.UnsafeArenaSwap(&other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Formation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Formation_descriptor_;
  metadata.reflection = Formation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Formation

// repeated uint64 heroId = 1;
int Formation::heroid_size() const {
  return heroid_.size();
}
void Formation::clear_heroid() {
  heroid_.Clear();
}
::google::protobuf::uint64 Formation::heroid(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.Formation.heroId)
  return heroid_.Get(index);
}
void Formation::set_heroid(int index, ::google::protobuf::uint64 value) {
  heroid_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.Formation.heroId)
}
void Formation::add_heroid(::google::protobuf::uint64 value) {
  heroid_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.Formation.heroId)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Formation::heroid() const {
  // @@protoc_insertion_point(field_list:NetMsg.Formation.heroId)
  return heroid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Formation::mutable_heroid() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.Formation.heroId)
  return &heroid_;
}

inline const Formation* Formation::internal_default_instance() {
  return &Formation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroFormationAck::kFormationFieldNumber;
const int HeroFormationAck::kCurFormationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroFormationAck::HeroFormationAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroFormationAck)
}

void HeroFormationAck::InitAsDefaultInstance() {
}

HeroFormationAck::HeroFormationAck(const HeroFormationAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroFormationAck)
}

void HeroFormationAck::SharedCtor() {
  curformation_ = 0u;
  _cached_size_ = 0;
}

HeroFormationAck::~HeroFormationAck() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroFormationAck)
  SharedDtor();
}

void HeroFormationAck::SharedDtor() {
}

void HeroFormationAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroFormationAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroFormationAck_descriptor_;
}

const HeroFormationAck& HeroFormationAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroFormationAck> HeroFormationAck_default_instance_;

HeroFormationAck* HeroFormationAck::New(::google::protobuf::Arena* arena) const {
  HeroFormationAck* n = new HeroFormationAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroFormationAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroFormationAck)
  curformation_ = 0u;
  formation_.Clear();
}

bool HeroFormationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroFormationAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.Formation formation = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_formation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_formation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_formation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_curFormation;
        break;
      }

      // optional uint32 curFormation = 2;
      case 2: {
        if (tag == 16) {
         parse_curFormation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curformation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroFormationAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroFormationAck)
  return false;
#undef DO_
}

void HeroFormationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroFormationAck)
  // repeated .NetMsg.Formation formation = 1;
  for (unsigned int i = 0, n = this->formation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formation(i), output);
  }

  // optional uint32 curFormation = 2;
  if (this->curformation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curformation(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroFormationAck)
}

::google::protobuf::uint8* HeroFormationAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroFormationAck)
  // repeated .NetMsg.Formation formation = 1;
  for (unsigned int i = 0, n = this->formation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->formation(i), false, target);
  }

  // optional uint32 curFormation = 2;
  if (this->curformation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curformation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroFormationAck)
  return target;
}

size_t HeroFormationAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroFormationAck)
  size_t total_size = 0;

  // optional uint32 curFormation = 2;
  if (this->curformation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curformation());
  }

  // repeated .NetMsg.Formation formation = 1;
  {
    unsigned int count = this->formation_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroFormationAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroFormationAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroFormationAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroFormationAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroFormationAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroFormationAck)
    UnsafeMergeFrom(*source);
  }
}

void HeroFormationAck::MergeFrom(const HeroFormationAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroFormationAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroFormationAck::UnsafeMergeFrom(const HeroFormationAck& from) {
  GOOGLE_DCHECK(&from != this);
  formation_.MergeFrom(from.formation_);
  if (from.curformation() != 0) {
    set_curformation(from.curformation());
  }
}

void HeroFormationAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroFormationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroFormationAck::CopyFrom(const HeroFormationAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroFormationAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroFormationAck::IsInitialized() const {

  return true;
}

void HeroFormationAck::Swap(HeroFormationAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroFormationAck::InternalSwap(HeroFormationAck* other) {
  formation_.UnsafeArenaSwap(&other->formation_);
  std::swap(curformation_, other->curformation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroFormationAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroFormationAck_descriptor_;
  metadata.reflection = HeroFormationAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroFormationAck

// repeated .NetMsg.Formation formation = 1;
int HeroFormationAck::formation_size() const {
  return formation_.size();
}
void HeroFormationAck::clear_formation() {
  formation_.Clear();
}
const ::NetMsg::Formation& HeroFormationAck::formation(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroFormationAck.formation)
  return formation_.Get(index);
}
::NetMsg::Formation* HeroFormationAck::mutable_formation(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroFormationAck.formation)
  return formation_.Mutable(index);
}
::NetMsg::Formation* HeroFormationAck::add_formation() {
  // @@protoc_insertion_point(field_add:NetMsg.HeroFormationAck.formation)
  return formation_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::Formation >*
HeroFormationAck::mutable_formation() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.HeroFormationAck.formation)
  return &formation_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::Formation >&
HeroFormationAck::formation() const {
  // @@protoc_insertion_point(field_list:NetMsg.HeroFormationAck.formation)
  return formation_;
}

// optional uint32 curFormation = 2;
void HeroFormationAck::clear_curformation() {
  curformation_ = 0u;
}
::google::protobuf::uint32 HeroFormationAck::curformation() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroFormationAck.curFormation)
  return curformation_;
}
void HeroFormationAck::set_curformation(::google::protobuf::uint32 value) {
  
  curformation_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroFormationAck.curFormation)
}

inline const HeroFormationAck* HeroFormationAck::internal_default_instance() {
  return &HeroFormationAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetHeroFormation::kFormationFieldNumber;
const int SetHeroFormation::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetHeroFormation::SetHeroFormation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SetHeroFormation)
}

void SetHeroFormation::InitAsDefaultInstance() {
  formation_ = const_cast< ::NetMsg::Formation*>(
      ::NetMsg::Formation::internal_default_instance());
}

SetHeroFormation::SetHeroFormation(const SetHeroFormation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SetHeroFormation)
}

void SetHeroFormation::SharedCtor() {
  formation_ = NULL;
  pos_ = 0u;
  _cached_size_ = 0;
}

SetHeroFormation::~SetHeroFormation() {
  // @@protoc_insertion_point(destructor:NetMsg.SetHeroFormation)
  SharedDtor();
}

void SetHeroFormation::SharedDtor() {
  if (this != &SetHeroFormation_default_instance_.get()) {
    delete formation_;
  }
}

void SetHeroFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetHeroFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetHeroFormation_descriptor_;
}

const SetHeroFormation& SetHeroFormation::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetHeroFormation> SetHeroFormation_default_instance_;

SetHeroFormation* SetHeroFormation::New(::google::protobuf::Arena* arena) const {
  SetHeroFormation* n = new SetHeroFormation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetHeroFormation::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SetHeroFormation)
  if (GetArenaNoVirtual() == NULL && formation_ != NULL) delete formation_;
  formation_ = NULL;
  pos_ = 0u;
}

bool SetHeroFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SetHeroFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.Formation formation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SetHeroFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SetHeroFormation)
  return false;
#undef DO_
}

void SetHeroFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SetHeroFormation)
  // optional .NetMsg.Formation formation = 1;
  if (this->has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->formation_, output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SetHeroFormation)
}

::google::protobuf::uint8* SetHeroFormation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SetHeroFormation)
  // optional .NetMsg.Formation formation = 1;
  if (this->has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->formation_, false, target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SetHeroFormation)
  return target;
}

size_t SetHeroFormation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SetHeroFormation)
  size_t total_size = 0;

  // optional .NetMsg.Formation formation = 1;
  if (this->has_formation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->formation_);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetHeroFormation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SetHeroFormation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetHeroFormation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetHeroFormation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SetHeroFormation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SetHeroFormation)
    UnsafeMergeFrom(*source);
  }
}

void SetHeroFormation::MergeFrom(const SetHeroFormation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SetHeroFormation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetHeroFormation::UnsafeMergeFrom(const SetHeroFormation& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_formation()) {
    mutable_formation()->::NetMsg::Formation::MergeFrom(from.formation());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void SetHeroFormation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SetHeroFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetHeroFormation::CopyFrom(const SetHeroFormation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SetHeroFormation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetHeroFormation::IsInitialized() const {

  return true;
}

void SetHeroFormation::Swap(SetHeroFormation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetHeroFormation::InternalSwap(SetHeroFormation* other) {
  std::swap(formation_, other->formation_);
  std::swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetHeroFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetHeroFormation_descriptor_;
  metadata.reflection = SetHeroFormation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetHeroFormation

// optional .NetMsg.Formation formation = 1;
bool SetHeroFormation::has_formation() const {
  return this != internal_default_instance() && formation_ != NULL;
}
void SetHeroFormation::clear_formation() {
  if (GetArenaNoVirtual() == NULL && formation_ != NULL) delete formation_;
  formation_ = NULL;
}
const ::NetMsg::Formation& SetHeroFormation::formation() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetHeroFormation.formation)
  return formation_ != NULL ? *formation_
                         : *::NetMsg::Formation::internal_default_instance();
}
::NetMsg::Formation* SetHeroFormation::mutable_formation() {
  
  if (formation_ == NULL) {
    formation_ = new ::NetMsg::Formation;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.SetHeroFormation.formation)
  return formation_;
}
::NetMsg::Formation* SetHeroFormation::release_formation() {
  // @@protoc_insertion_point(field_release:NetMsg.SetHeroFormation.formation)
  
  ::NetMsg::Formation* temp = formation_;
  formation_ = NULL;
  return temp;
}
void SetHeroFormation::set_allocated_formation(::NetMsg::Formation* formation) {
  delete formation_;
  formation_ = formation;
  if (formation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.SetHeroFormation.formation)
}

// optional uint32 pos = 2;
void SetHeroFormation::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 SetHeroFormation::pos() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetHeroFormation.pos)
  return pos_;
}
void SetHeroFormation::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetHeroFormation.pos)
}

inline const SetHeroFormation* SetHeroFormation::internal_default_instance() {
  return &SetHeroFormation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCityInfo::kCityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCityInfo::ReqCityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqCityInfo)
}

void ReqCityInfo::InitAsDefaultInstance() {
}

ReqCityInfo::ReqCityInfo(const ReqCityInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqCityInfo)
}

void ReqCityInfo::SharedCtor() {
  cityid_ = 0u;
  _cached_size_ = 0;
}

ReqCityInfo::~ReqCityInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqCityInfo)
  SharedDtor();
}

void ReqCityInfo::SharedDtor() {
}

void ReqCityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCityInfo_descriptor_;
}

const ReqCityInfo& ReqCityInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqCityInfo> ReqCityInfo_default_instance_;

ReqCityInfo* ReqCityInfo::New(::google::protobuf::Arena* arena) const {
  ReqCityInfo* n = new ReqCityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqCityInfo)
  cityid_ = 0u;
}

bool ReqCityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqCityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqCityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqCityInfo)
  return false;
#undef DO_
}

void ReqCityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqCityInfo)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqCityInfo)
}

::google::protobuf::uint8* ReqCityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqCityInfo)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqCityInfo)
  return target;
}

size_t ReqCityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqCityInfo)
  size_t total_size = 0;

  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqCityInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqCityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqCityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqCityInfo)
    UnsafeMergeFrom(*source);
  }
}

void ReqCityInfo::MergeFrom(const ReqCityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqCityInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqCityInfo::UnsafeMergeFrom(const ReqCityInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
}

void ReqCityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqCityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCityInfo::CopyFrom(const ReqCityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqCityInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqCityInfo::IsInitialized() const {

  return true;
}

void ReqCityInfo::Swap(ReqCityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCityInfo::InternalSwap(ReqCityInfo* other) {
  std::swap(cityid_, other->cityid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCityInfo_descriptor_;
  metadata.reflection = ReqCityInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCityInfo

// optional uint32 cityId = 1;
void ReqCityInfo::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 ReqCityInfo::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCityInfo.cityId)
  return cityid_;
}
void ReqCityInfo::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqCityInfo.cityId)
}

inline const ReqCityInfo* ReqCityInfo::internal_default_instance() {
  return &ReqCityInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CityItemInfo::kItemIdFieldNumber;
const int CityItemInfo::kItemNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CityItemInfo::CityItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CityItemInfo)
}

void CityItemInfo::InitAsDefaultInstance() {
}

CityItemInfo::CityItemInfo(const CityItemInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CityItemInfo)
}

void CityItemInfo::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&itemnum_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(itemnum_));
  _cached_size_ = 0;
}

CityItemInfo::~CityItemInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.CityItemInfo)
  SharedDtor();
}

void CityItemInfo::SharedDtor() {
}

void CityItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityItemInfo_descriptor_;
}

const CityItemInfo& CityItemInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CityItemInfo> CityItemInfo_default_instance_;

CityItemInfo* CityItemInfo::New(::google::protobuf::Arena* arena) const {
  CityItemInfo* n = new CityItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CityItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CityItemInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CityItemInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CityItemInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, itemnum_);

#undef ZR_HELPER_
#undef ZR_

}

bool CityItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CityItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // optional uint32 itemNum = 2;
      case 2: {
        if (tag == 16) {
         parse_itemNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CityItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CityItemInfo)
  return false;
#undef DO_
}

void CityItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CityItemInfo)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 itemNum = 2;
  if (this->itemnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CityItemInfo)
}

::google::protobuf::uint8* CityItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CityItemInfo)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 itemNum = 2;
  if (this->itemnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CityItemInfo)
  return target;
}

size_t CityItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CityItemInfo)
  size_t total_size = 0;

  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemid());
  }

  // optional uint32 itemNum = 2;
  if (this->itemnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CityItemInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CityItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CityItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CityItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CityItemInfo)
    UnsafeMergeFrom(*source);
  }
}

void CityItemInfo::MergeFrom(const CityItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CityItemInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CityItemInfo::UnsafeMergeFrom(const CityItemInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.itemnum() != 0) {
    set_itemnum(from.itemnum());
  }
}

void CityItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CityItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityItemInfo::CopyFrom(const CityItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CityItemInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CityItemInfo::IsInitialized() const {

  return true;
}

void CityItemInfo::Swap(CityItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CityItemInfo::InternalSwap(CityItemInfo* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(itemnum_, other->itemnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CityItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityItemInfo_descriptor_;
  metadata.reflection = CityItemInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CityItemInfo

// optional uint32 itemId = 1;
void CityItemInfo::clear_itemid() {
  itemid_ = 0u;
}
::google::protobuf::uint32 CityItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityItemInfo.itemId)
  return itemid_;
}
void CityItemInfo::set_itemid(::google::protobuf::uint32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityItemInfo.itemId)
}

// optional uint32 itemNum = 2;
void CityItemInfo::clear_itemnum() {
  itemnum_ = 0u;
}
::google::protobuf::uint32 CityItemInfo::itemnum() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityItemInfo.itemNum)
  return itemnum_;
}
void CityItemInfo::set_itemnum(::google::protobuf::uint32 value) {
  
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityItemInfo.itemNum)
}

inline const CityItemInfo* CityItemInfo::internal_default_instance() {
  return &CityItemInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CityHeroInfo::kHeroIdFieldNumber;
const int CityHeroInfo::kHeroNameFieldNumber;
const int CityHeroInfo::kHeroLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CityHeroInfo::CityHeroInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CityHeroInfo)
}

void CityHeroInfo::InitAsDefaultInstance() {
}

CityHeroInfo::CityHeroInfo(const CityHeroInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CityHeroInfo)
}

void CityHeroInfo::SharedCtor() {
  heroname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&herolevel_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(herolevel_));
  _cached_size_ = 0;
}

CityHeroInfo::~CityHeroInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.CityHeroInfo)
  SharedDtor();
}

void CityHeroInfo::SharedDtor() {
  heroname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CityHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityHeroInfo_descriptor_;
}

const CityHeroInfo& CityHeroInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CityHeroInfo> CityHeroInfo_default_instance_;

CityHeroInfo* CityHeroInfo::New(::google::protobuf::Arena* arena) const {
  CityHeroInfo* n = new CityHeroInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CityHeroInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CityHeroInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CityHeroInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CityHeroInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, herolevel_);
  heroname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CityHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CityHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroName;
        break;
      }

      // optional string heroName = 2;
      case 2: {
        if (tag == 18) {
         parse_heroName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heroname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->heroname().data(), this->heroname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.CityHeroInfo.heroName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heroLevel;
        break;
      }

      // optional uint32 heroLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_heroLevel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herolevel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CityHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CityHeroInfo)
  return false;
#undef DO_
}

void CityHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CityHeroInfo)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional string heroName = 2;
  if (this->heroname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heroname().data(), this->heroname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.CityHeroInfo.heroName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->heroname(), output);
  }

  // optional uint32 heroLevel = 3;
  if (this->herolevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->herolevel(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CityHeroInfo)
}

::google::protobuf::uint8* CityHeroInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CityHeroInfo)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional string heroName = 2;
  if (this->heroname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heroname().data(), this->heroname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.CityHeroInfo.heroName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->heroname(), target);
  }

  // optional uint32 heroLevel = 3;
  if (this->herolevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->herolevel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CityHeroInfo)
  return target;
}

size_t CityHeroInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CityHeroInfo)
  size_t total_size = 0;

  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroid());
  }

  // optional string heroName = 2;
  if (this->heroname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heroname());
  }

  // optional uint32 heroLevel = 3;
  if (this->herolevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->herolevel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CityHeroInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CityHeroInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CityHeroInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CityHeroInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CityHeroInfo)
    UnsafeMergeFrom(*source);
  }
}

void CityHeroInfo::MergeFrom(const CityHeroInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CityHeroInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CityHeroInfo::UnsafeMergeFrom(const CityHeroInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.heroname().size() > 0) {

    heroname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heroname_);
  }
  if (from.herolevel() != 0) {
    set_herolevel(from.herolevel());
  }
}

void CityHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CityHeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityHeroInfo::CopyFrom(const CityHeroInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CityHeroInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CityHeroInfo::IsInitialized() const {

  return true;
}

void CityHeroInfo::Swap(CityHeroInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CityHeroInfo::InternalSwap(CityHeroInfo* other) {
  std::swap(heroid_, other->heroid_);
  heroname_.Swap(&other->heroname_);
  std::swap(herolevel_, other->herolevel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CityHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityHeroInfo_descriptor_;
  metadata.reflection = CityHeroInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CityHeroInfo

// optional uint32 heroId = 1;
void CityHeroInfo::clear_heroid() {
  heroid_ = 0u;
}
::google::protobuf::uint32 CityHeroInfo::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityHeroInfo.heroId)
  return heroid_;
}
void CityHeroInfo::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityHeroInfo.heroId)
}

// optional string heroName = 2;
void CityHeroInfo::clear_heroname() {
  heroname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CityHeroInfo::heroname() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityHeroInfo.heroName)
  return heroname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CityHeroInfo::set_heroname(const ::std::string& value) {
  
  heroname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.CityHeroInfo.heroName)
}
void CityHeroInfo::set_heroname(const char* value) {
  
  heroname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.CityHeroInfo.heroName)
}
void CityHeroInfo::set_heroname(const char* value, size_t size) {
  
  heroname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.CityHeroInfo.heroName)
}
::std::string* CityHeroInfo::mutable_heroname() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.CityHeroInfo.heroName)
  return heroname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CityHeroInfo::release_heroname() {
  // @@protoc_insertion_point(field_release:NetMsg.CityHeroInfo.heroName)
  
  return heroname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CityHeroInfo::set_allocated_heroname(::std::string* heroname) {
  if (heroname != NULL) {
    
  } else {
    
  }
  heroname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heroname);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.CityHeroInfo.heroName)
}

// optional uint32 heroLevel = 3;
void CityHeroInfo::clear_herolevel() {
  herolevel_ = 0u;
}
::google::protobuf::uint32 CityHeroInfo::herolevel() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityHeroInfo.heroLevel)
  return herolevel_;
}
void CityHeroInfo::set_herolevel(::google::protobuf::uint32 value) {
  
  herolevel_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityHeroInfo.heroLevel)
}

inline const CityHeroInfo* CityHeroInfo::internal_default_instance() {
  return &CityHeroInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CityInfoAck::kCityIdFieldNumber;
const int CityInfoAck::kGovernorFieldNumber;
const int CityInfoAck::kAgricultureFieldNumber;
const int CityInfoAck::kBusinessFieldNumber;
const int CityInfoAck::kMilitaryFieldNumber;
const int CityInfoAck::kForceFieldNumber;
const int CityInfoAck::kHeroClassFieldNumber;
const int CityInfoAck::kMoneyFieldNumber;
const int CityInfoAck::kProvisionsFieldNumber;
const int CityInfoAck::kMoneyDeltaFieldNumber;
const int CityInfoAck::kProvisionsDeltaFieldNumber;
const int CityInfoAck::kCultureDevelopmentFieldNumber;
const int CityInfoAck::kReserverFieldNumber;
const int CityInfoAck::kInfantryFieldNumber;
const int CityInfoAck::kArcherFieldNumber;
const int CityInfoAck::kCavalryFieldNumber;
const int CityInfoAck::kSwordShieldFieldNumber;
const int CityInfoAck::kCrossbowManFieldNumber;
const int CityInfoAck::kElephantFieldNumber;
const int CityInfoAck::kInfantryWoundedFieldNumber;
const int CityInfoAck::kArcherWoundedFieldNumber;
const int CityInfoAck::kCavalryWoundedFieldNumber;
const int CityInfoAck::kSwordShieldWoundedFieldNumber;
const int CityInfoAck::kCrossbowManWoundedFieldNumber;
const int CityInfoAck::kElephantWoundedFieldNumber;
const int CityInfoAck::kPopulationFieldNumber;
const int CityInfoAck::kPopulationSpeedFieldNumber;
const int CityInfoAck::kLoyaltyFieldNumber;
const int CityInfoAck::kDurabilityFieldNumber;
const int CityInfoAck::kItemInfoFieldNumber;
const int CityInfoAck::kHeroInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CityInfoAck::CityInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CityInfoAck)
}

void CityInfoAck::InitAsDefaultInstance() {
}

CityInfoAck::CityInfoAck(const CityInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CityInfoAck)
}

void CityInfoAck::SharedCtor() {
  ::memset(&cityid_, 0, reinterpret_cast<char*>(&durability_) -
    reinterpret_cast<char*>(&cityid_) + sizeof(durability_));
  _cached_size_ = 0;
}

CityInfoAck::~CityInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CityInfoAck)
  SharedDtor();
}

void CityInfoAck::SharedDtor() {
}

void CityInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityInfoAck_descriptor_;
}

const CityInfoAck& CityInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CityInfoAck> CityInfoAck_default_instance_;

CityInfoAck* CityInfoAck::New(::google::protobuf::Arena* arena) const {
  CityInfoAck* n = new CityInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CityInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CityInfoAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CityInfoAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CityInfoAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cityid_, money_);
  ZR_(provisions_, cavalry_);
  ZR_(swordshield_, crossbowmanwounded_);
  ZR_(elephantwounded_, durability_);

#undef ZR_HELPER_
#undef ZR_

  heroclass_.Clear();
  iteminfo_.Clear();
  heroinfo_.Clear();
}

bool CityInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CityInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_governor;
        break;
      }

      // optional uint32 governor = 2;
      case 2: {
        if (tag == 16) {
         parse_governor:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &governor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_agriculture;
        break;
      }

      // optional uint32 agriculture = 3;
      case 3: {
        if (tag == 24) {
         parse_agriculture:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agriculture_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_business;
        break;
      }

      // optional uint32 business = 4;
      case 4: {
        if (tag == 32) {
         parse_business:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &business_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_military;
        break;
      }

      // optional uint32 military = 5;
      case 5: {
        if (tag == 40) {
         parse_military:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_force;
        break;
      }

      // optional uint32 force = 6;
      case 6: {
        if (tag == 48) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_heroClass;
        break;
      }

      // repeated uint32 heroClass = 7;
      case 7: {
        if (tag == 58) {
         parse_heroClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroclass())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_heroclass())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Money;
        break;
      }

      // optional uint32 Money = 8;
      case 8: {
        if (tag == 64) {
         parse_Money:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Provisions;
        break;
      }

      // optional uint32 Provisions = 9;
      case 9: {
        if (tag == 72) {
         parse_Provisions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &provisions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MoneyDelta;
        break;
      }

      // optional uint32 MoneyDelta = 10;
      case 10: {
        if (tag == 80) {
         parse_MoneyDelta:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydelta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ProvisionsDelta;
        break;
      }

      // optional uint32 ProvisionsDelta = 11;
      case 11: {
        if (tag == 88) {
         parse_ProvisionsDelta:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &provisionsdelta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_CultureDevelopment;
        break;
      }

      // optional uint32 CultureDevelopment = 12;
      case 12: {
        if (tag == 96) {
         parse_CultureDevelopment:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &culturedevelopment_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Reserver;
        break;
      }

      // optional uint32 Reserver = 13;
      case 13: {
        if (tag == 104) {
         parse_Reserver:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserver_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Infantry;
        break;
      }

      // optional uint32 Infantry = 14;
      case 14: {
        if (tag == 112) {
         parse_Infantry:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &infantry_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Archer;
        break;
      }

      // optional uint32 Archer = 15;
      case 15: {
        if (tag == 120) {
         parse_Archer:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &archer_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_Cavalry;
        break;
      }

      // optional uint32 Cavalry = 16;
      case 16: {
        if (tag == 128) {
         parse_Cavalry:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavalry_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_SwordShield;
        break;
      }

      // optional uint32 SwordShield = 17;
      case 17: {
        if (tag == 136) {
         parse_SwordShield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swordshield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_CrossbowMan;
        break;
      }

      // optional uint32 CrossbowMan = 18;
      case 18: {
        if (tag == 144) {
         parse_CrossbowMan:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crossbowman_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_Elephant;
        break;
      }

      // optional uint32 Elephant = 19;
      case 19: {
        if (tag == 152) {
         parse_Elephant:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elephant_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_InfantryWounded;
        break;
      }

      // optional uint32 InfantryWounded = 20;
      case 20: {
        if (tag == 160) {
         parse_InfantryWounded:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &infantrywounded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ArcherWounded;
        break;
      }

      // optional uint32 ArcherWounded = 21;
      case 21: {
        if (tag == 168) {
         parse_ArcherWounded:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &archerwounded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_CavalryWounded;
        break;
      }

      // optional uint32 CavalryWounded = 22;
      case 22: {
        if (tag == 176) {
         parse_CavalryWounded:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavalrywounded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_SwordShieldWounded;
        break;
      }

      // optional uint32 SwordShieldWounded = 23;
      case 23: {
        if (tag == 184) {
         parse_SwordShieldWounded:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swordshieldwounded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_CrossbowManWounded;
        break;
      }

      // optional uint32 CrossbowManWounded = 24;
      case 24: {
        if (tag == 192) {
         parse_CrossbowManWounded:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crossbowmanwounded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_ElephantWounded;
        break;
      }

      // optional uint32 ElephantWounded = 25;
      case 25: {
        if (tag == 200) {
         parse_ElephantWounded:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elephantwounded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_Population;
        break;
      }

      // optional uint32 Population = 26;
      case 26: {
        if (tag == 208) {
         parse_Population:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &population_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_PopulationSpeed;
        break;
      }

      // optional uint32 PopulationSpeed = 27;
      case 27: {
        if (tag == 216) {
         parse_PopulationSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &populationspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_Loyalty;
        break;
      }

      // optional uint32 Loyalty = 28;
      case 28: {
        if (tag == 224) {
         parse_Loyalty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loyalty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_Durability;
        break;
      }

      // optional uint32 Durability = 29;
      case 29: {
        if (tag == 232) {
         parse_Durability:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durability_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_itemInfo;
        break;
      }

      // repeated .NetMsg.CityItemInfo itemInfo = 30;
      case 30: {
        if (tag == 242) {
         parse_itemInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_itemInfo;
        if (input->ExpectTag(250)) goto parse_loop_heroInfo;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .NetMsg.CityHeroInfo heroInfo = 31;
      case 31: {
        if (tag == 250) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_heroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_heroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_loop_heroInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CityInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CityInfoAck)
  return false;
#undef DO_
}

void CityInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CityInfoAck)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 governor = 2;
  if (this->governor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->governor(), output);
  }

  // optional uint32 agriculture = 3;
  if (this->agriculture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->agriculture(), output);
  }

  // optional uint32 business = 4;
  if (this->business() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->business(), output);
  }

  // optional uint32 military = 5;
  if (this->military() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->military(), output);
  }

  // optional uint32 force = 6;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->force(), output);
  }

  // repeated uint32 heroClass = 7;
  if (this->heroclass_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heroclass_cached_byte_size_);
  }
  for (int i = 0; i < this->heroclass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->heroclass(i), output);
  }

  // optional uint32 Money = 8;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->money(), output);
  }

  // optional uint32 Provisions = 9;
  if (this->provisions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->provisions(), output);
  }

  // optional uint32 MoneyDelta = 10;
  if (this->moneydelta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->moneydelta(), output);
  }

  // optional uint32 ProvisionsDelta = 11;
  if (this->provisionsdelta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->provisionsdelta(), output);
  }

  // optional uint32 CultureDevelopment = 12;
  if (this->culturedevelopment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->culturedevelopment(), output);
  }

  // optional uint32 Reserver = 13;
  if (this->reserver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->reserver(), output);
  }

  // optional uint32 Infantry = 14;
  if (this->infantry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->infantry(), output);
  }

  // optional uint32 Archer = 15;
  if (this->archer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->archer(), output);
  }

  // optional uint32 Cavalry = 16;
  if (this->cavalry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->cavalry(), output);
  }

  // optional uint32 SwordShield = 17;
  if (this->swordshield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->swordshield(), output);
  }

  // optional uint32 CrossbowMan = 18;
  if (this->crossbowman() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->crossbowman(), output);
  }

  // optional uint32 Elephant = 19;
  if (this->elephant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->elephant(), output);
  }

  // optional uint32 InfantryWounded = 20;
  if (this->infantrywounded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->infantrywounded(), output);
  }

  // optional uint32 ArcherWounded = 21;
  if (this->archerwounded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->archerwounded(), output);
  }

  // optional uint32 CavalryWounded = 22;
  if (this->cavalrywounded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->cavalrywounded(), output);
  }

  // optional uint32 SwordShieldWounded = 23;
  if (this->swordshieldwounded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->swordshieldwounded(), output);
  }

  // optional uint32 CrossbowManWounded = 24;
  if (this->crossbowmanwounded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->crossbowmanwounded(), output);
  }

  // optional uint32 ElephantWounded = 25;
  if (this->elephantwounded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->elephantwounded(), output);
  }

  // optional uint32 Population = 26;
  if (this->population() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->population(), output);
  }

  // optional uint32 PopulationSpeed = 27;
  if (this->populationspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->populationspeed(), output);
  }

  // optional uint32 Loyalty = 28;
  if (this->loyalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->loyalty(), output);
  }

  // optional uint32 Durability = 29;
  if (this->durability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->durability(), output);
  }

  // repeated .NetMsg.CityItemInfo itemInfo = 30;
  for (unsigned int i = 0, n = this->iteminfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->iteminfo(i), output);
  }

  // repeated .NetMsg.CityHeroInfo heroInfo = 31;
  for (unsigned int i = 0, n = this->heroinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->heroinfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CityInfoAck)
}

::google::protobuf::uint8* CityInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CityInfoAck)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 governor = 2;
  if (this->governor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->governor(), target);
  }

  // optional uint32 agriculture = 3;
  if (this->agriculture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->agriculture(), target);
  }

  // optional uint32 business = 4;
  if (this->business() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->business(), target);
  }

  // optional uint32 military = 5;
  if (this->military() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->military(), target);
  }

  // optional uint32 force = 6;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->force(), target);
  }

  // repeated uint32 heroClass = 7;
  if (this->heroclass_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heroclass_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heroclass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->heroclass(i), target);
  }

  // optional uint32 Money = 8;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->money(), target);
  }

  // optional uint32 Provisions = 9;
  if (this->provisions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->provisions(), target);
  }

  // optional uint32 MoneyDelta = 10;
  if (this->moneydelta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->moneydelta(), target);
  }

  // optional uint32 ProvisionsDelta = 11;
  if (this->provisionsdelta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->provisionsdelta(), target);
  }

  // optional uint32 CultureDevelopment = 12;
  if (this->culturedevelopment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->culturedevelopment(), target);
  }

  // optional uint32 Reserver = 13;
  if (this->reserver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->reserver(), target);
  }

  // optional uint32 Infantry = 14;
  if (this->infantry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->infantry(), target);
  }

  // optional uint32 Archer = 15;
  if (this->archer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->archer(), target);
  }

  // optional uint32 Cavalry = 16;
  if (this->cavalry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->cavalry(), target);
  }

  // optional uint32 SwordShield = 17;
  if (this->swordshield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->swordshield(), target);
  }

  // optional uint32 CrossbowMan = 18;
  if (this->crossbowman() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->crossbowman(), target);
  }

  // optional uint32 Elephant = 19;
  if (this->elephant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->elephant(), target);
  }

  // optional uint32 InfantryWounded = 20;
  if (this->infantrywounded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->infantrywounded(), target);
  }

  // optional uint32 ArcherWounded = 21;
  if (this->archerwounded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->archerwounded(), target);
  }

  // optional uint32 CavalryWounded = 22;
  if (this->cavalrywounded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->cavalrywounded(), target);
  }

  // optional uint32 SwordShieldWounded = 23;
  if (this->swordshieldwounded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->swordshieldwounded(), target);
  }

  // optional uint32 CrossbowManWounded = 24;
  if (this->crossbowmanwounded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->crossbowmanwounded(), target);
  }

  // optional uint32 ElephantWounded = 25;
  if (this->elephantwounded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->elephantwounded(), target);
  }

  // optional uint32 Population = 26;
  if (this->population() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->population(), target);
  }

  // optional uint32 PopulationSpeed = 27;
  if (this->populationspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->populationspeed(), target);
  }

  // optional uint32 Loyalty = 28;
  if (this->loyalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->loyalty(), target);
  }

  // optional uint32 Durability = 29;
  if (this->durability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->durability(), target);
  }

  // repeated .NetMsg.CityItemInfo itemInfo = 30;
  for (unsigned int i = 0, n = this->iteminfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, this->iteminfo(i), false, target);
  }

  // repeated .NetMsg.CityHeroInfo heroInfo = 31;
  for (unsigned int i = 0, n = this->heroinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, this->heroinfo(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CityInfoAck)
  return target;
}

size_t CityInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CityInfoAck)
  size_t total_size = 0;

  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  // optional uint32 governor = 2;
  if (this->governor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->governor());
  }

  // optional uint32 agriculture = 3;
  if (this->agriculture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agriculture());
  }

  // optional uint32 business = 4;
  if (this->business() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->business());
  }

  // optional uint32 military = 5;
  if (this->military() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->military());
  }

  // optional uint32 force = 6;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional uint32 Money = 8;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->money());
  }

  // optional uint32 Provisions = 9;
  if (this->provisions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->provisions());
  }

  // optional uint32 MoneyDelta = 10;
  if (this->moneydelta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneydelta());
  }

  // optional uint32 ProvisionsDelta = 11;
  if (this->provisionsdelta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->provisionsdelta());
  }

  // optional uint32 CultureDevelopment = 12;
  if (this->culturedevelopment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->culturedevelopment());
  }

  // optional uint32 Reserver = 13;
  if (this->reserver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reserver());
  }

  // optional uint32 Infantry = 14;
  if (this->infantry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->infantry());
  }

  // optional uint32 Archer = 15;
  if (this->archer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->archer());
  }

  // optional uint32 Cavalry = 16;
  if (this->cavalry() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cavalry());
  }

  // optional uint32 SwordShield = 17;
  if (this->swordshield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->swordshield());
  }

  // optional uint32 CrossbowMan = 18;
  if (this->crossbowman() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crossbowman());
  }

  // optional uint32 Elephant = 19;
  if (this->elephant() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->elephant());
  }

  // optional uint32 InfantryWounded = 20;
  if (this->infantrywounded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->infantrywounded());
  }

  // optional uint32 ArcherWounded = 21;
  if (this->archerwounded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->archerwounded());
  }

  // optional uint32 CavalryWounded = 22;
  if (this->cavalrywounded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cavalrywounded());
  }

  // optional uint32 SwordShieldWounded = 23;
  if (this->swordshieldwounded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->swordshieldwounded());
  }

  // optional uint32 CrossbowManWounded = 24;
  if (this->crossbowmanwounded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crossbowmanwounded());
  }

  // optional uint32 ElephantWounded = 25;
  if (this->elephantwounded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->elephantwounded());
  }

  // optional uint32 Population = 26;
  if (this->population() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->population());
  }

  // optional uint32 PopulationSpeed = 27;
  if (this->populationspeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->populationspeed());
  }

  // optional uint32 Loyalty = 28;
  if (this->loyalty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->loyalty());
  }

  // optional uint32 Durability = 29;
  if (this->durability() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->durability());
  }

  // repeated uint32 heroClass = 7;
  {
    size_t data_size = 0;
    unsigned int count = this->heroclass_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroclass(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heroclass_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .NetMsg.CityItemInfo itemInfo = 30;
  {
    unsigned int count = this->iteminfo_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo(i));
    }
  }

  // repeated .NetMsg.CityHeroInfo heroInfo = 31;
  {
    unsigned int count = this->heroinfo_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroinfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CityInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CityInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CityInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CityInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CityInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void CityInfoAck::MergeFrom(const CityInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CityInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CityInfoAck::UnsafeMergeFrom(const CityInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  heroclass_.UnsafeMergeFrom(from.heroclass_);
  iteminfo_.MergeFrom(from.iteminfo_);
  heroinfo_.MergeFrom(from.heroinfo_);
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
  if (from.governor() != 0) {
    set_governor(from.governor());
  }
  if (from.agriculture() != 0) {
    set_agriculture(from.agriculture());
  }
  if (from.business() != 0) {
    set_business(from.business());
  }
  if (from.military() != 0) {
    set_military(from.military());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.provisions() != 0) {
    set_provisions(from.provisions());
  }
  if (from.moneydelta() != 0) {
    set_moneydelta(from.moneydelta());
  }
  if (from.provisionsdelta() != 0) {
    set_provisionsdelta(from.provisionsdelta());
  }
  if (from.culturedevelopment() != 0) {
    set_culturedevelopment(from.culturedevelopment());
  }
  if (from.reserver() != 0) {
    set_reserver(from.reserver());
  }
  if (from.infantry() != 0) {
    set_infantry(from.infantry());
  }
  if (from.archer() != 0) {
    set_archer(from.archer());
  }
  if (from.cavalry() != 0) {
    set_cavalry(from.cavalry());
  }
  if (from.swordshield() != 0) {
    set_swordshield(from.swordshield());
  }
  if (from.crossbowman() != 0) {
    set_crossbowman(from.crossbowman());
  }
  if (from.elephant() != 0) {
    set_elephant(from.elephant());
  }
  if (from.infantrywounded() != 0) {
    set_infantrywounded(from.infantrywounded());
  }
  if (from.archerwounded() != 0) {
    set_archerwounded(from.archerwounded());
  }
  if (from.cavalrywounded() != 0) {
    set_cavalrywounded(from.cavalrywounded());
  }
  if (from.swordshieldwounded() != 0) {
    set_swordshieldwounded(from.swordshieldwounded());
  }
  if (from.crossbowmanwounded() != 0) {
    set_crossbowmanwounded(from.crossbowmanwounded());
  }
  if (from.elephantwounded() != 0) {
    set_elephantwounded(from.elephantwounded());
  }
  if (from.population() != 0) {
    set_population(from.population());
  }
  if (from.populationspeed() != 0) {
    set_populationspeed(from.populationspeed());
  }
  if (from.loyalty() != 0) {
    set_loyalty(from.loyalty());
  }
  if (from.durability() != 0) {
    set_durability(from.durability());
  }
}

void CityInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CityInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityInfoAck::CopyFrom(const CityInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CityInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CityInfoAck::IsInitialized() const {

  return true;
}

void CityInfoAck::Swap(CityInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CityInfoAck::InternalSwap(CityInfoAck* other) {
  std::swap(cityid_, other->cityid_);
  std::swap(governor_, other->governor_);
  std::swap(agriculture_, other->agriculture_);
  std::swap(business_, other->business_);
  std::swap(military_, other->military_);
  std::swap(force_, other->force_);
  heroclass_.UnsafeArenaSwap(&other->heroclass_);
  std::swap(money_, other->money_);
  std::swap(provisions_, other->provisions_);
  std::swap(moneydelta_, other->moneydelta_);
  std::swap(provisionsdelta_, other->provisionsdelta_);
  std::swap(culturedevelopment_, other->culturedevelopment_);
  std::swap(reserver_, other->reserver_);
  std::swap(infantry_, other->infantry_);
  std::swap(archer_, other->archer_);
  std::swap(cavalry_, other->cavalry_);
  std::swap(swordshield_, other->swordshield_);
  std::swap(crossbowman_, other->crossbowman_);
  std::swap(elephant_, other->elephant_);
  std::swap(infantrywounded_, other->infantrywounded_);
  std::swap(archerwounded_, other->archerwounded_);
  std::swap(cavalrywounded_, other->cavalrywounded_);
  std::swap(swordshieldwounded_, other->swordshieldwounded_);
  std::swap(crossbowmanwounded_, other->crossbowmanwounded_);
  std::swap(elephantwounded_, other->elephantwounded_);
  std::swap(population_, other->population_);
  std::swap(populationspeed_, other->populationspeed_);
  std::swap(loyalty_, other->loyalty_);
  std::swap(durability_, other->durability_);
  iteminfo_.UnsafeArenaSwap(&other->iteminfo_);
  heroinfo_.UnsafeArenaSwap(&other->heroinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CityInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityInfoAck_descriptor_;
  metadata.reflection = CityInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CityInfoAck

// optional uint32 cityId = 1;
void CityInfoAck::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.cityId)
  return cityid_;
}
void CityInfoAck::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.cityId)
}

// optional uint32 governor = 2;
void CityInfoAck::clear_governor() {
  governor_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::governor() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.governor)
  return governor_;
}
void CityInfoAck::set_governor(::google::protobuf::uint32 value) {
  
  governor_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.governor)
}

// optional uint32 agriculture = 3;
void CityInfoAck::clear_agriculture() {
  agriculture_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::agriculture() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.agriculture)
  return agriculture_;
}
void CityInfoAck::set_agriculture(::google::protobuf::uint32 value) {
  
  agriculture_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.agriculture)
}

// optional uint32 business = 4;
void CityInfoAck::clear_business() {
  business_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::business() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.business)
  return business_;
}
void CityInfoAck::set_business(::google::protobuf::uint32 value) {
  
  business_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.business)
}

// optional uint32 military = 5;
void CityInfoAck::clear_military() {
  military_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::military() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.military)
  return military_;
}
void CityInfoAck::set_military(::google::protobuf::uint32 value) {
  
  military_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.military)
}

// optional uint32 force = 6;
void CityInfoAck::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.force)
  return force_;
}
void CityInfoAck::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.force)
}

// repeated uint32 heroClass = 7;
int CityInfoAck::heroclass_size() const {
  return heroclass_.size();
}
void CityInfoAck::clear_heroclass() {
  heroclass_.Clear();
}
::google::protobuf::uint32 CityInfoAck::heroclass(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.heroClass)
  return heroclass_.Get(index);
}
void CityInfoAck::set_heroclass(int index, ::google::protobuf::uint32 value) {
  heroclass_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.heroClass)
}
void CityInfoAck::add_heroclass(::google::protobuf::uint32 value) {
  heroclass_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.CityInfoAck.heroClass)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CityInfoAck::heroclass() const {
  // @@protoc_insertion_point(field_list:NetMsg.CityInfoAck.heroClass)
  return heroclass_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CityInfoAck::mutable_heroclass() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.CityInfoAck.heroClass)
  return &heroclass_;
}

// optional uint32 Money = 8;
void CityInfoAck::clear_money() {
  money_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::money() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Money)
  return money_;
}
void CityInfoAck::set_money(::google::protobuf::uint32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Money)
}

// optional uint32 Provisions = 9;
void CityInfoAck::clear_provisions() {
  provisions_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::provisions() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Provisions)
  return provisions_;
}
void CityInfoAck::set_provisions(::google::protobuf::uint32 value) {
  
  provisions_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Provisions)
}

// optional uint32 MoneyDelta = 10;
void CityInfoAck::clear_moneydelta() {
  moneydelta_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::moneydelta() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.MoneyDelta)
  return moneydelta_;
}
void CityInfoAck::set_moneydelta(::google::protobuf::uint32 value) {
  
  moneydelta_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.MoneyDelta)
}

// optional uint32 ProvisionsDelta = 11;
void CityInfoAck::clear_provisionsdelta() {
  provisionsdelta_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::provisionsdelta() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.ProvisionsDelta)
  return provisionsdelta_;
}
void CityInfoAck::set_provisionsdelta(::google::protobuf::uint32 value) {
  
  provisionsdelta_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.ProvisionsDelta)
}

// optional uint32 CultureDevelopment = 12;
void CityInfoAck::clear_culturedevelopment() {
  culturedevelopment_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::culturedevelopment() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.CultureDevelopment)
  return culturedevelopment_;
}
void CityInfoAck::set_culturedevelopment(::google::protobuf::uint32 value) {
  
  culturedevelopment_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.CultureDevelopment)
}

// optional uint32 Reserver = 13;
void CityInfoAck::clear_reserver() {
  reserver_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::reserver() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Reserver)
  return reserver_;
}
void CityInfoAck::set_reserver(::google::protobuf::uint32 value) {
  
  reserver_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Reserver)
}

// optional uint32 Infantry = 14;
void CityInfoAck::clear_infantry() {
  infantry_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::infantry() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Infantry)
  return infantry_;
}
void CityInfoAck::set_infantry(::google::protobuf::uint32 value) {
  
  infantry_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Infantry)
}

// optional uint32 Archer = 15;
void CityInfoAck::clear_archer() {
  archer_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::archer() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Archer)
  return archer_;
}
void CityInfoAck::set_archer(::google::protobuf::uint32 value) {
  
  archer_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Archer)
}

// optional uint32 Cavalry = 16;
void CityInfoAck::clear_cavalry() {
  cavalry_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::cavalry() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Cavalry)
  return cavalry_;
}
void CityInfoAck::set_cavalry(::google::protobuf::uint32 value) {
  
  cavalry_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Cavalry)
}

// optional uint32 SwordShield = 17;
void CityInfoAck::clear_swordshield() {
  swordshield_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::swordshield() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.SwordShield)
  return swordshield_;
}
void CityInfoAck::set_swordshield(::google::protobuf::uint32 value) {
  
  swordshield_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.SwordShield)
}

// optional uint32 CrossbowMan = 18;
void CityInfoAck::clear_crossbowman() {
  crossbowman_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::crossbowman() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.CrossbowMan)
  return crossbowman_;
}
void CityInfoAck::set_crossbowman(::google::protobuf::uint32 value) {
  
  crossbowman_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.CrossbowMan)
}

// optional uint32 Elephant = 19;
void CityInfoAck::clear_elephant() {
  elephant_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::elephant() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Elephant)
  return elephant_;
}
void CityInfoAck::set_elephant(::google::protobuf::uint32 value) {
  
  elephant_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Elephant)
}

// optional uint32 InfantryWounded = 20;
void CityInfoAck::clear_infantrywounded() {
  infantrywounded_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::infantrywounded() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.InfantryWounded)
  return infantrywounded_;
}
void CityInfoAck::set_infantrywounded(::google::protobuf::uint32 value) {
  
  infantrywounded_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.InfantryWounded)
}

// optional uint32 ArcherWounded = 21;
void CityInfoAck::clear_archerwounded() {
  archerwounded_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::archerwounded() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.ArcherWounded)
  return archerwounded_;
}
void CityInfoAck::set_archerwounded(::google::protobuf::uint32 value) {
  
  archerwounded_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.ArcherWounded)
}

// optional uint32 CavalryWounded = 22;
void CityInfoAck::clear_cavalrywounded() {
  cavalrywounded_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::cavalrywounded() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.CavalryWounded)
  return cavalrywounded_;
}
void CityInfoAck::set_cavalrywounded(::google::protobuf::uint32 value) {
  
  cavalrywounded_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.CavalryWounded)
}

// optional uint32 SwordShieldWounded = 23;
void CityInfoAck::clear_swordshieldwounded() {
  swordshieldwounded_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::swordshieldwounded() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.SwordShieldWounded)
  return swordshieldwounded_;
}
void CityInfoAck::set_swordshieldwounded(::google::protobuf::uint32 value) {
  
  swordshieldwounded_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.SwordShieldWounded)
}

// optional uint32 CrossbowManWounded = 24;
void CityInfoAck::clear_crossbowmanwounded() {
  crossbowmanwounded_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::crossbowmanwounded() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.CrossbowManWounded)
  return crossbowmanwounded_;
}
void CityInfoAck::set_crossbowmanwounded(::google::protobuf::uint32 value) {
  
  crossbowmanwounded_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.CrossbowManWounded)
}

// optional uint32 ElephantWounded = 25;
void CityInfoAck::clear_elephantwounded() {
  elephantwounded_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::elephantwounded() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.ElephantWounded)
  return elephantwounded_;
}
void CityInfoAck::set_elephantwounded(::google::protobuf::uint32 value) {
  
  elephantwounded_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.ElephantWounded)
}

// optional uint32 Population = 26;
void CityInfoAck::clear_population() {
  population_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::population() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Population)
  return population_;
}
void CityInfoAck::set_population(::google::protobuf::uint32 value) {
  
  population_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Population)
}

// optional uint32 PopulationSpeed = 27;
void CityInfoAck::clear_populationspeed() {
  populationspeed_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::populationspeed() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.PopulationSpeed)
  return populationspeed_;
}
void CityInfoAck::set_populationspeed(::google::protobuf::uint32 value) {
  
  populationspeed_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.PopulationSpeed)
}

// optional uint32 Loyalty = 28;
void CityInfoAck::clear_loyalty() {
  loyalty_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::loyalty() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Loyalty)
  return loyalty_;
}
void CityInfoAck::set_loyalty(::google::protobuf::uint32 value) {
  
  loyalty_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Loyalty)
}

// optional uint32 Durability = 29;
void CityInfoAck::clear_durability() {
  durability_ = 0u;
}
::google::protobuf::uint32 CityInfoAck::durability() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.Durability)
  return durability_;
}
void CityInfoAck::set_durability(::google::protobuf::uint32 value) {
  
  durability_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityInfoAck.Durability)
}

// repeated .NetMsg.CityItemInfo itemInfo = 30;
int CityInfoAck::iteminfo_size() const {
  return iteminfo_.size();
}
void CityInfoAck::clear_iteminfo() {
  iteminfo_.Clear();
}
const ::NetMsg::CityItemInfo& CityInfoAck::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.itemInfo)
  return iteminfo_.Get(index);
}
::NetMsg::CityItemInfo* CityInfoAck::mutable_iteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.CityInfoAck.itemInfo)
  return iteminfo_.Mutable(index);
}
::NetMsg::CityItemInfo* CityInfoAck::add_iteminfo() {
  // @@protoc_insertion_point(field_add:NetMsg.CityInfoAck.itemInfo)
  return iteminfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::CityItemInfo >*
CityInfoAck::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.CityInfoAck.itemInfo)
  return &iteminfo_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::CityItemInfo >&
CityInfoAck::iteminfo() const {
  // @@protoc_insertion_point(field_list:NetMsg.CityInfoAck.itemInfo)
  return iteminfo_;
}

// repeated .NetMsg.CityHeroInfo heroInfo = 31;
int CityInfoAck::heroinfo_size() const {
  return heroinfo_.size();
}
void CityInfoAck::clear_heroinfo() {
  heroinfo_.Clear();
}
const ::NetMsg::CityHeroInfo& CityInfoAck::heroinfo(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.CityInfoAck.heroInfo)
  return heroinfo_.Get(index);
}
::NetMsg::CityHeroInfo* CityInfoAck::mutable_heroinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.CityInfoAck.heroInfo)
  return heroinfo_.Mutable(index);
}
::NetMsg::CityHeroInfo* CityInfoAck::add_heroinfo() {
  // @@protoc_insertion_point(field_add:NetMsg.CityInfoAck.heroInfo)
  return heroinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::CityHeroInfo >*
CityInfoAck::mutable_heroinfo() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.CityInfoAck.heroInfo)
  return &heroinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::CityHeroInfo >&
CityInfoAck::heroinfo() const {
  // @@protoc_insertion_point(field_list:NetMsg.CityInfoAck.heroInfo)
  return heroinfo_;
}

inline const CityInfoAck* CityInfoAck::internal_default_instance() {
  return &CityInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AwardItem::kTypeFieldNumber;
const int AwardItem::kIdFieldNumber;
const int AwardItem::kNumFieldNumber;
const int AwardItem::kHeroIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AwardItem::AwardItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AwardItem)
}

void AwardItem::InitAsDefaultInstance() {
}

AwardItem::AwardItem(const AwardItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AwardItem)
}

void AwardItem::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&type_) + sizeof(num_));
  _cached_size_ = 0;
}

AwardItem::~AwardItem() {
  // @@protoc_insertion_point(destructor:NetMsg.AwardItem)
  SharedDtor();
}

void AwardItem::SharedDtor() {
}

void AwardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AwardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwardItem_descriptor_;
}

const AwardItem& AwardItem::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AwardItem> AwardItem_default_instance_;

AwardItem* AwardItem::New(::google::protobuf::Arena* arena) const {
  AwardItem* n = new AwardItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AwardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AwardItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AwardItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AwardItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, num_);

#undef ZR_HELPER_
#undef ZR_

  heroids_.Clear();
}

bool AwardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AwardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_heroIds;
        break;
      }

      // repeated uint64 heroIds = 4;
      case 4: {
        if (tag == 34) {
         parse_heroIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heroids())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34, input, this->mutable_heroids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AwardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AwardItem)
  return false;
#undef DO_
}

void AwardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AwardItem)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // repeated uint64 heroIds = 4;
  if (this->heroids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heroids_cached_byte_size_);
  }
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->heroids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AwardItem)
}

::google::protobuf::uint8* AwardItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AwardItem)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // repeated uint64 heroIds = 4;
  if (this->heroids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heroids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->heroids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AwardItem)
  return target;
}

size_t AwardItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AwardItem)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  // repeated uint64 heroIds = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->heroids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heroids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heroids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwardItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AwardItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AwardItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AwardItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AwardItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AwardItem)
    UnsafeMergeFrom(*source);
  }
}

void AwardItem::MergeFrom(const AwardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AwardItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AwardItem::UnsafeMergeFrom(const AwardItem& from) {
  GOOGLE_DCHECK(&from != this);
  heroids_.UnsafeMergeFrom(from.heroids_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void AwardItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardItem::CopyFrom(const AwardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AwardItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AwardItem::IsInitialized() const {

  return true;
}

void AwardItem::Swap(AwardItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AwardItem::InternalSwap(AwardItem* other) {
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(num_, other->num_);
  heroids_.UnsafeArenaSwap(&other->heroids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AwardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AwardItem_descriptor_;
  metadata.reflection = AwardItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AwardItem

// optional uint32 type = 1;
void AwardItem::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 AwardItem::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.AwardItem.type)
  return type_;
}
void AwardItem::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AwardItem.type)
}

// optional uint32 id = 2;
void AwardItem::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 AwardItem::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.AwardItem.id)
  return id_;
}
void AwardItem::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AwardItem.id)
}

// optional uint32 num = 3;
void AwardItem::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 AwardItem::num() const {
  // @@protoc_insertion_point(field_get:NetMsg.AwardItem.num)
  return num_;
}
void AwardItem::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AwardItem.num)
}

// repeated uint64 heroIds = 4;
int AwardItem::heroids_size() const {
  return heroids_.size();
}
void AwardItem::clear_heroids() {
  heroids_.Clear();
}
::google::protobuf::uint64 AwardItem::heroids(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.AwardItem.heroIds)
  return heroids_.Get(index);
}
void AwardItem::set_heroids(int index, ::google::protobuf::uint64 value) {
  heroids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.AwardItem.heroIds)
}
void AwardItem::add_heroids(::google::protobuf::uint64 value) {
  heroids_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.AwardItem.heroIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AwardItem::heroids() const {
  // @@protoc_insertion_point(field_list:NetMsg.AwardItem.heroIds)
  return heroids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AwardItem::mutable_heroids() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.AwardItem.heroIds)
  return &heroids_;
}

inline const AwardItem* AwardItem::internal_default_instance() {
  return &AwardItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Award::kItemsFieldNumber;
const int Award::kAwardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Award::Award()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Award)
}

void Award::InitAsDefaultInstance() {
}

Award::Award(const Award& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.Award)
}

void Award::SharedCtor() {
  awardid_ = 0u;
  _cached_size_ = 0;
}

Award::~Award() {
  // @@protoc_insertion_point(destructor:NetMsg.Award)
  SharedDtor();
}

void Award::SharedDtor() {
}

void Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Award_descriptor_;
}

const Award& Award::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Award> Award_default_instance_;

Award* Award::New(::google::protobuf::Arena* arena) const {
  Award* n = new Award;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Award::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Award)
  awardid_ = 0u;
  items_.Clear();
}

bool Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Award)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.AwardItem items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_awardId;
        break;
      }

      // optional uint32 awardId = 2;
      case 2: {
        if (tag == 16) {
         parse_awardId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Award)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Award)
  return false;
#undef DO_
}

void Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Award)
  // repeated .NetMsg.AwardItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional uint32 awardId = 2;
  if (this->awardid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awardid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.Award)
}

::google::protobuf::uint8* Award::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Award)
  // repeated .NetMsg.AwardItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  // optional uint32 awardId = 2;
  if (this->awardid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->awardid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Award)
  return target;
}

size_t Award::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Award)
  size_t total_size = 0;

  // optional uint32 awardId = 2;
  if (this->awardid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->awardid());
  }

  // repeated .NetMsg.AwardItem items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Award::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Award)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Award* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Award>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Award)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Award)
    UnsafeMergeFrom(*source);
  }
}

void Award::MergeFrom(const Award& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Award)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Award::UnsafeMergeFrom(const Award& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
  if (from.awardid() != 0) {
    set_awardid(from.awardid());
  }
}

void Award::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Award)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Award::CopyFrom(const Award& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Award)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Award::IsInitialized() const {

  return true;
}

void Award::Swap(Award* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Award::InternalSwap(Award* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(awardid_, other->awardid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Award_descriptor_;
  metadata.reflection = Award_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Award

// repeated .NetMsg.AwardItem items = 1;
int Award::items_size() const {
  return items_.size();
}
void Award::clear_items() {
  items_.Clear();
}
const ::NetMsg::AwardItem& Award::items(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.Award.items)
  return items_.Get(index);
}
::NetMsg::AwardItem* Award::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.Award.items)
  return items_.Mutable(index);
}
::NetMsg::AwardItem* Award::add_items() {
  // @@protoc_insertion_point(field_add:NetMsg.Award.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::AwardItem >*
Award::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.Award.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::AwardItem >&
Award::items() const {
  // @@protoc_insertion_point(field_list:NetMsg.Award.items)
  return items_;
}

// optional uint32 awardId = 2;
void Award::clear_awardid() {
  awardid_ = 0u;
}
::google::protobuf::uint32 Award::awardid() const {
  // @@protoc_insertion_point(field_get:NetMsg.Award.awardId)
  return awardid_;
}
void Award::set_awardid(::google::protobuf::uint32 value) {
  
  awardid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Award.awardId)
}

inline const Award* Award::internal_default_instance() {
  return &Award_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestConsAgriculture::kTitleFieldNumber;
const int QuestConsAgriculture::kCityIdFieldNumber;
const int QuestConsAgriculture::kCurTargetFieldNumber;
const int QuestConsAgriculture::kTargetFieldNumber;
const int QuestConsAgriculture::kPlaceFieldNumber;
const int QuestConsAgriculture::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestConsAgriculture::QuestConsAgriculture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestConsAgriculture)
}

void QuestConsAgriculture::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

QuestConsAgriculture::QuestConsAgriculture(const QuestConsAgriculture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestConsAgriculture)
}

void QuestConsAgriculture::SharedCtor() {
  award_ = NULL;
  ::memset(&title_, 0, reinterpret_cast<char*>(&place_) -
    reinterpret_cast<char*>(&title_) + sizeof(place_));
  _cached_size_ = 0;
}

QuestConsAgriculture::~QuestConsAgriculture() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestConsAgriculture)
  SharedDtor();
}

void QuestConsAgriculture::SharedDtor() {
  if (this != &QuestConsAgriculture_default_instance_.get()) {
    delete award_;
  }
}

void QuestConsAgriculture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestConsAgriculture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestConsAgriculture_descriptor_;
}

const QuestConsAgriculture& QuestConsAgriculture::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestConsAgriculture> QuestConsAgriculture_default_instance_;

QuestConsAgriculture* QuestConsAgriculture::New(::google::protobuf::Arena* arena) const {
  QuestConsAgriculture* n = new QuestConsAgriculture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestConsAgriculture::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestConsAgriculture)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestConsAgriculture, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestConsAgriculture*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, place_);
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestConsAgriculture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestConsAgriculture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // optional uint32 cityId = 2;
      case 2: {
        if (tag == 16) {
         parse_cityId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curTarget;
        break;
      }

      // optional uint32 curTarget = 3;
      case 3: {
        if (tag == 24) {
         parse_curTarget:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtarget_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // optional uint32 target = 4;
      case 4: {
        if (tag == 32) {
         parse_target:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_place;
        break;
      }

      // optional uint32 place = 5;
      case 5: {
        if (tag == 40) {
         parse_place:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 6;
      case 6: {
        if (tag == 50) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestConsAgriculture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestConsAgriculture)
  return false;
#undef DO_
}

void QuestConsAgriculture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestConsAgriculture)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curtarget(), output);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->place(), output);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestConsAgriculture)
}

::google::protobuf::uint8* QuestConsAgriculture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestConsAgriculture)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curtarget(), target);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->place(), target);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestConsAgriculture)
  return target;
}

size_t QuestConsAgriculture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestConsAgriculture)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curtarget());
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->place());
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestConsAgriculture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestConsAgriculture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestConsAgriculture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestConsAgriculture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestConsAgriculture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestConsAgriculture)
    UnsafeMergeFrom(*source);
  }
}

void QuestConsAgriculture::MergeFrom(const QuestConsAgriculture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestConsAgriculture)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestConsAgriculture::UnsafeMergeFrom(const QuestConsAgriculture& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
  if (from.curtarget() != 0) {
    set_curtarget(from.curtarget());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.place() != 0) {
    set_place(from.place());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void QuestConsAgriculture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestConsAgriculture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestConsAgriculture::CopyFrom(const QuestConsAgriculture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestConsAgriculture)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestConsAgriculture::IsInitialized() const {

  return true;
}

void QuestConsAgriculture::Swap(QuestConsAgriculture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestConsAgriculture::InternalSwap(QuestConsAgriculture* other) {
  std::swap(title_, other->title_);
  std::swap(cityid_, other->cityid_);
  std::swap(curtarget_, other->curtarget_);
  std::swap(target_, other->target_);
  std::swap(place_, other->place_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestConsAgriculture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestConsAgriculture_descriptor_;
  metadata.reflection = QuestConsAgriculture_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestConsAgriculture

// optional uint32 title = 1;
void QuestConsAgriculture::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 QuestConsAgriculture::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsAgriculture.title)
  return title_;
}
void QuestConsAgriculture::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsAgriculture.title)
}

// optional uint32 cityId = 2;
void QuestConsAgriculture::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 QuestConsAgriculture::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsAgriculture.cityId)
  return cityid_;
}
void QuestConsAgriculture::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsAgriculture.cityId)
}

// optional uint32 curTarget = 3;
void QuestConsAgriculture::clear_curtarget() {
  curtarget_ = 0u;
}
::google::protobuf::uint32 QuestConsAgriculture::curtarget() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsAgriculture.curTarget)
  return curtarget_;
}
void QuestConsAgriculture::set_curtarget(::google::protobuf::uint32 value) {
  
  curtarget_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsAgriculture.curTarget)
}

// optional uint32 target = 4;
void QuestConsAgriculture::clear_target() {
  target_ = 0u;
}
::google::protobuf::uint32 QuestConsAgriculture::target() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsAgriculture.target)
  return target_;
}
void QuestConsAgriculture::set_target(::google::protobuf::uint32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsAgriculture.target)
}

// optional uint32 place = 5;
void QuestConsAgriculture::clear_place() {
  place_ = 0u;
}
::google::protobuf::uint32 QuestConsAgriculture::place() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsAgriculture.place)
  return place_;
}
void QuestConsAgriculture::set_place(::google::protobuf::uint32 value) {
  
  place_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsAgriculture.place)
}

// optional .NetMsg.Award award = 6;
bool QuestConsAgriculture::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void QuestConsAgriculture::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& QuestConsAgriculture::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsAgriculture.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* QuestConsAgriculture::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestConsAgriculture.award)
  return award_;
}
::NetMsg::Award* QuestConsAgriculture::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestConsAgriculture.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void QuestConsAgriculture::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestConsAgriculture.award)
}

inline const QuestConsAgriculture* QuestConsAgriculture::internal_default_instance() {
  return &QuestConsAgriculture_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestConsBusiness::kTitleFieldNumber;
const int QuestConsBusiness::kCityIdFieldNumber;
const int QuestConsBusiness::kCurTargetFieldNumber;
const int QuestConsBusiness::kTargetFieldNumber;
const int QuestConsBusiness::kPlaceFieldNumber;
const int QuestConsBusiness::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestConsBusiness::QuestConsBusiness()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestConsBusiness)
}

void QuestConsBusiness::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

QuestConsBusiness::QuestConsBusiness(const QuestConsBusiness& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestConsBusiness)
}

void QuestConsBusiness::SharedCtor() {
  award_ = NULL;
  ::memset(&title_, 0, reinterpret_cast<char*>(&place_) -
    reinterpret_cast<char*>(&title_) + sizeof(place_));
  _cached_size_ = 0;
}

QuestConsBusiness::~QuestConsBusiness() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestConsBusiness)
  SharedDtor();
}

void QuestConsBusiness::SharedDtor() {
  if (this != &QuestConsBusiness_default_instance_.get()) {
    delete award_;
  }
}

void QuestConsBusiness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestConsBusiness::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestConsBusiness_descriptor_;
}

const QuestConsBusiness& QuestConsBusiness::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestConsBusiness> QuestConsBusiness_default_instance_;

QuestConsBusiness* QuestConsBusiness::New(::google::protobuf::Arena* arena) const {
  QuestConsBusiness* n = new QuestConsBusiness;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestConsBusiness::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestConsBusiness)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestConsBusiness, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestConsBusiness*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, place_);
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestConsBusiness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestConsBusiness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // optional uint32 cityId = 2;
      case 2: {
        if (tag == 16) {
         parse_cityId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curTarget;
        break;
      }

      // optional uint32 curTarget = 3;
      case 3: {
        if (tag == 24) {
         parse_curTarget:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtarget_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // optional uint32 target = 4;
      case 4: {
        if (tag == 32) {
         parse_target:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_place;
        break;
      }

      // optional uint32 place = 5;
      case 5: {
        if (tag == 40) {
         parse_place:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 6;
      case 6: {
        if (tag == 50) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestConsBusiness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestConsBusiness)
  return false;
#undef DO_
}

void QuestConsBusiness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestConsBusiness)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curtarget(), output);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->place(), output);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestConsBusiness)
}

::google::protobuf::uint8* QuestConsBusiness::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestConsBusiness)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curtarget(), target);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->place(), target);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestConsBusiness)
  return target;
}

size_t QuestConsBusiness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestConsBusiness)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curtarget());
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->place());
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestConsBusiness::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestConsBusiness)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestConsBusiness* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestConsBusiness>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestConsBusiness)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestConsBusiness)
    UnsafeMergeFrom(*source);
  }
}

void QuestConsBusiness::MergeFrom(const QuestConsBusiness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestConsBusiness)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestConsBusiness::UnsafeMergeFrom(const QuestConsBusiness& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
  if (from.curtarget() != 0) {
    set_curtarget(from.curtarget());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.place() != 0) {
    set_place(from.place());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void QuestConsBusiness::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestConsBusiness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestConsBusiness::CopyFrom(const QuestConsBusiness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestConsBusiness)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestConsBusiness::IsInitialized() const {

  return true;
}

void QuestConsBusiness::Swap(QuestConsBusiness* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestConsBusiness::InternalSwap(QuestConsBusiness* other) {
  std::swap(title_, other->title_);
  std::swap(cityid_, other->cityid_);
  std::swap(curtarget_, other->curtarget_);
  std::swap(target_, other->target_);
  std::swap(place_, other->place_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestConsBusiness::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestConsBusiness_descriptor_;
  metadata.reflection = QuestConsBusiness_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestConsBusiness

// optional uint32 title = 1;
void QuestConsBusiness::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 QuestConsBusiness::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsBusiness.title)
  return title_;
}
void QuestConsBusiness::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsBusiness.title)
}

// optional uint32 cityId = 2;
void QuestConsBusiness::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 QuestConsBusiness::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsBusiness.cityId)
  return cityid_;
}
void QuestConsBusiness::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsBusiness.cityId)
}

// optional uint32 curTarget = 3;
void QuestConsBusiness::clear_curtarget() {
  curtarget_ = 0u;
}
::google::protobuf::uint32 QuestConsBusiness::curtarget() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsBusiness.curTarget)
  return curtarget_;
}
void QuestConsBusiness::set_curtarget(::google::protobuf::uint32 value) {
  
  curtarget_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsBusiness.curTarget)
}

// optional uint32 target = 4;
void QuestConsBusiness::clear_target() {
  target_ = 0u;
}
::google::protobuf::uint32 QuestConsBusiness::target() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsBusiness.target)
  return target_;
}
void QuestConsBusiness::set_target(::google::protobuf::uint32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsBusiness.target)
}

// optional uint32 place = 5;
void QuestConsBusiness::clear_place() {
  place_ = 0u;
}
::google::protobuf::uint32 QuestConsBusiness::place() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsBusiness.place)
  return place_;
}
void QuestConsBusiness::set_place(::google::protobuf::uint32 value) {
  
  place_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsBusiness.place)
}

// optional .NetMsg.Award award = 6;
bool QuestConsBusiness::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void QuestConsBusiness::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& QuestConsBusiness::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsBusiness.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* QuestConsBusiness::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestConsBusiness.award)
  return award_;
}
::NetMsg::Award* QuestConsBusiness::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestConsBusiness.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void QuestConsBusiness::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestConsBusiness.award)
}

inline const QuestConsBusiness* QuestConsBusiness::internal_default_instance() {
  return &QuestConsBusiness_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestConsMilitary::kTitleFieldNumber;
const int QuestConsMilitary::kCityIdFieldNumber;
const int QuestConsMilitary::kCurTargetFieldNumber;
const int QuestConsMilitary::kTargetFieldNumber;
const int QuestConsMilitary::kPlaceFieldNumber;
const int QuestConsMilitary::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestConsMilitary::QuestConsMilitary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestConsMilitary)
}

void QuestConsMilitary::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

QuestConsMilitary::QuestConsMilitary(const QuestConsMilitary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestConsMilitary)
}

void QuestConsMilitary::SharedCtor() {
  award_ = NULL;
  ::memset(&title_, 0, reinterpret_cast<char*>(&place_) -
    reinterpret_cast<char*>(&title_) + sizeof(place_));
  _cached_size_ = 0;
}

QuestConsMilitary::~QuestConsMilitary() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestConsMilitary)
  SharedDtor();
}

void QuestConsMilitary::SharedDtor() {
  if (this != &QuestConsMilitary_default_instance_.get()) {
    delete award_;
  }
}

void QuestConsMilitary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestConsMilitary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestConsMilitary_descriptor_;
}

const QuestConsMilitary& QuestConsMilitary::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestConsMilitary> QuestConsMilitary_default_instance_;

QuestConsMilitary* QuestConsMilitary::New(::google::protobuf::Arena* arena) const {
  QuestConsMilitary* n = new QuestConsMilitary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestConsMilitary::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestConsMilitary)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestConsMilitary, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestConsMilitary*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, place_);
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestConsMilitary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestConsMilitary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // optional uint32 cityId = 2;
      case 2: {
        if (tag == 16) {
         parse_cityId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curTarget;
        break;
      }

      // optional uint32 curTarget = 3;
      case 3: {
        if (tag == 24) {
         parse_curTarget:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtarget_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // optional uint32 target = 4;
      case 4: {
        if (tag == 32) {
         parse_target:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_place;
        break;
      }

      // optional uint32 place = 5;
      case 5: {
        if (tag == 40) {
         parse_place:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 6;
      case 6: {
        if (tag == 50) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestConsMilitary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestConsMilitary)
  return false;
#undef DO_
}

void QuestConsMilitary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestConsMilitary)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curtarget(), output);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->place(), output);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestConsMilitary)
}

::google::protobuf::uint8* QuestConsMilitary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestConsMilitary)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curtarget(), target);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->place(), target);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestConsMilitary)
  return target;
}

size_t QuestConsMilitary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestConsMilitary)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curtarget());
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->place());
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestConsMilitary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestConsMilitary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestConsMilitary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestConsMilitary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestConsMilitary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestConsMilitary)
    UnsafeMergeFrom(*source);
  }
}

void QuestConsMilitary::MergeFrom(const QuestConsMilitary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestConsMilitary)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestConsMilitary::UnsafeMergeFrom(const QuestConsMilitary& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
  if (from.curtarget() != 0) {
    set_curtarget(from.curtarget());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.place() != 0) {
    set_place(from.place());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void QuestConsMilitary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestConsMilitary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestConsMilitary::CopyFrom(const QuestConsMilitary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestConsMilitary)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestConsMilitary::IsInitialized() const {

  return true;
}

void QuestConsMilitary::Swap(QuestConsMilitary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestConsMilitary::InternalSwap(QuestConsMilitary* other) {
  std::swap(title_, other->title_);
  std::swap(cityid_, other->cityid_);
  std::swap(curtarget_, other->curtarget_);
  std::swap(target_, other->target_);
  std::swap(place_, other->place_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestConsMilitary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestConsMilitary_descriptor_;
  metadata.reflection = QuestConsMilitary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestConsMilitary

// optional uint32 title = 1;
void QuestConsMilitary::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 QuestConsMilitary::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsMilitary.title)
  return title_;
}
void QuestConsMilitary::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsMilitary.title)
}

// optional uint32 cityId = 2;
void QuestConsMilitary::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 QuestConsMilitary::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsMilitary.cityId)
  return cityid_;
}
void QuestConsMilitary::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsMilitary.cityId)
}

// optional uint32 curTarget = 3;
void QuestConsMilitary::clear_curtarget() {
  curtarget_ = 0u;
}
::google::protobuf::uint32 QuestConsMilitary::curtarget() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsMilitary.curTarget)
  return curtarget_;
}
void QuestConsMilitary::set_curtarget(::google::protobuf::uint32 value) {
  
  curtarget_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsMilitary.curTarget)
}

// optional uint32 target = 4;
void QuestConsMilitary::clear_target() {
  target_ = 0u;
}
::google::protobuf::uint32 QuestConsMilitary::target() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsMilitary.target)
  return target_;
}
void QuestConsMilitary::set_target(::google::protobuf::uint32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsMilitary.target)
}

// optional uint32 place = 5;
void QuestConsMilitary::clear_place() {
  place_ = 0u;
}
::google::protobuf::uint32 QuestConsMilitary::place() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsMilitary.place)
  return place_;
}
void QuestConsMilitary::set_place(::google::protobuf::uint32 value) {
  
  place_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConsMilitary.place)
}

// optional .NetMsg.Award award = 6;
bool QuestConsMilitary::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void QuestConsMilitary::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& QuestConsMilitary::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConsMilitary.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* QuestConsMilitary::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestConsMilitary.award)
  return award_;
}
::NetMsg::Award* QuestConsMilitary::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestConsMilitary.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void QuestConsMilitary::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestConsMilitary.award)
}

inline const QuestConsMilitary* QuestConsMilitary::internal_default_instance() {
  return &QuestConsMilitary_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestBattle::kEnemyPathFieldNumber;
const int QuestBattle::kPercentFieldNumber;
const int QuestBattle::kBattleIdFieldNumber;
const int QuestBattle::kEnemyTeamFieldNumber;
const int QuestBattle::kLeftTimeFieldNumber;
const int QuestBattle::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestBattle::QuestBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestBattle)
}

void QuestBattle::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

QuestBattle::QuestBattle(const QuestBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestBattle)
}

void QuestBattle::SharedCtor() {
  award_ = NULL;
  ::memset(&enemypath_, 0, reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&enemypath_) + sizeof(lefttime_));
  _cached_size_ = 0;
}

QuestBattle::~QuestBattle() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestBattle)
  SharedDtor();
}

void QuestBattle::SharedDtor() {
  if (this != &QuestBattle_default_instance_.get()) {
    delete award_;
  }
}

void QuestBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestBattle_descriptor_;
}

const QuestBattle& QuestBattle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestBattle> QuestBattle_default_instance_;

QuestBattle* QuestBattle::New(::google::protobuf::Arena* arena) const {
  QuestBattle* n = new QuestBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestBattle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestBattle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestBattle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enemypath_, lefttime_);
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemyPath = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemypath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_percent;
        break;
      }

      // optional float percent = 2;
      case 2: {
        if (tag == 21) {
         parse_percent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battleId;
        break;
      }

      // optional uint64 battleId = 3;
      case 3: {
        if (tag == 24) {
         parse_battleId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enemyTeam;
        break;
      }

      // optional uint32 enemyTeam = 4;
      case 4: {
        if (tag == 32) {
         parse_enemyTeam:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyteam_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 5;
      case 5: {
        if (tag == 40) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 6;
      case 6: {
        if (tag == 50) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestBattle)
  return false;
#undef DO_
}

void QuestBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestBattle)
  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemypath(), output);
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percent(), output);
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleid(), output);
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enemyteam(), output);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lefttime(), output);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestBattle)
}

::google::protobuf::uint8* QuestBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestBattle)
  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemypath(), target);
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->percent(), target);
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleid(), target);
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enemyteam(), target);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lefttime(), target);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestBattle)
  return target;
}

size_t QuestBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestBattle)
  size_t total_size = 0;

  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemypath());
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    total_size += 1 + 4;
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemyteam());
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestBattle)
    UnsafeMergeFrom(*source);
  }
}

void QuestBattle::MergeFrom(const QuestBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestBattle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestBattle::UnsafeMergeFrom(const QuestBattle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enemypath() != 0) {
    set_enemypath(from.enemypath());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.enemyteam() != 0) {
    set_enemyteam(from.enemyteam());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void QuestBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestBattle::CopyFrom(const QuestBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestBattle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestBattle::IsInitialized() const {

  return true;
}

void QuestBattle::Swap(QuestBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestBattle::InternalSwap(QuestBattle* other) {
  std::swap(enemypath_, other->enemypath_);
  std::swap(percent_, other->percent_);
  std::swap(battleid_, other->battleid_);
  std::swap(enemyteam_, other->enemyteam_);
  std::swap(lefttime_, other->lefttime_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestBattle_descriptor_;
  metadata.reflection = QuestBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestBattle

// optional uint32 enemyPath = 1;
void QuestBattle::clear_enemypath() {
  enemypath_ = 0u;
}
::google::protobuf::uint32 QuestBattle::enemypath() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestBattle.enemyPath)
  return enemypath_;
}
void QuestBattle::set_enemypath(::google::protobuf::uint32 value) {
  
  enemypath_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestBattle.enemyPath)
}

// optional float percent = 2;
void QuestBattle::clear_percent() {
  percent_ = 0;
}
float QuestBattle::percent() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestBattle.percent)
  return percent_;
}
void QuestBattle::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestBattle.percent)
}

// optional uint64 battleId = 3;
void QuestBattle::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuestBattle::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestBattle.battleId)
  return battleid_;
}
void QuestBattle::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestBattle.battleId)
}

// optional uint32 enemyTeam = 4;
void QuestBattle::clear_enemyteam() {
  enemyteam_ = 0u;
}
::google::protobuf::uint32 QuestBattle::enemyteam() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestBattle.enemyTeam)
  return enemyteam_;
}
void QuestBattle::set_enemyteam(::google::protobuf::uint32 value) {
  
  enemyteam_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestBattle.enemyTeam)
}

// optional uint32 leftTime = 5;
void QuestBattle::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 QuestBattle::lefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestBattle.leftTime)
  return lefttime_;
}
void QuestBattle::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestBattle.leftTime)
}

// optional .NetMsg.Award award = 6;
bool QuestBattle::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void QuestBattle::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& QuestBattle::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestBattle.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* QuestBattle::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestBattle.award)
  return award_;
}
::NetMsg::Award* QuestBattle::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestBattle.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void QuestBattle::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestBattle.award)
}

inline const QuestBattle* QuestBattle::internal_default_instance() {
  return &QuestBattle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestVisit::kHeroClassFieldNumber;
const int QuestVisit::kCityFieldNumber;
const int QuestVisit::kPlaceFieldNumber;
const int QuestVisit::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestVisit::QuestVisit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestVisit)
}

void QuestVisit::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

QuestVisit::QuestVisit(const QuestVisit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestVisit)
}

void QuestVisit::SharedCtor() {
  award_ = NULL;
  ::memset(&heroclass_, 0, reinterpret_cast<char*>(&place_) -
    reinterpret_cast<char*>(&heroclass_) + sizeof(place_));
  _cached_size_ = 0;
}

QuestVisit::~QuestVisit() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestVisit)
  SharedDtor();
}

void QuestVisit::SharedDtor() {
  if (this != &QuestVisit_default_instance_.get()) {
    delete award_;
  }
}

void QuestVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestVisit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestVisit_descriptor_;
}

const QuestVisit& QuestVisit::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestVisit> QuestVisit_default_instance_;

QuestVisit* QuestVisit::New(::google::protobuf::Arena* arena) const {
  QuestVisit* n = new QuestVisit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestVisit::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestVisit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestVisit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestVisit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroclass_, place_);
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_city;
        break;
      }

      // optional uint32 city = 2;
      case 2: {
        if (tag == 16) {
         parse_city:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_place;
        break;
      }

      // optional uint32 place = 3;
      case 3: {
        if (tag == 24) {
         parse_place:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 4;
      case 4: {
        if (tag == 34) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestVisit)
  return false;
#undef DO_
}

void QuestVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestVisit)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // optional uint32 city = 2;
  if (this->city() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city(), output);
  }

  // optional uint32 place = 3;
  if (this->place() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->place(), output);
  }

  // optional .NetMsg.Award award = 4;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestVisit)
}

::google::protobuf::uint8* QuestVisit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestVisit)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // optional uint32 city = 2;
  if (this->city() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city(), target);
  }

  // optional uint32 place = 3;
  if (this->place() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->place(), target);
  }

  // optional .NetMsg.Award award = 4;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestVisit)
  return target;
}

size_t QuestVisit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestVisit)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 city = 2;
  if (this->city() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city());
  }

  // optional uint32 place = 3;
  if (this->place() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->place());
  }

  // optional .NetMsg.Award award = 4;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestVisit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestVisit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestVisit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestVisit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestVisit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestVisit)
    UnsafeMergeFrom(*source);
  }
}

void QuestVisit::MergeFrom(const QuestVisit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestVisit)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestVisit::UnsafeMergeFrom(const QuestVisit& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.city() != 0) {
    set_city(from.city());
  }
  if (from.place() != 0) {
    set_place(from.place());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void QuestVisit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestVisit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestVisit::CopyFrom(const QuestVisit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestVisit)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestVisit::IsInitialized() const {

  return true;
}

void QuestVisit::Swap(QuestVisit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestVisit::InternalSwap(QuestVisit* other) {
  std::swap(heroclass_, other->heroclass_);
  std::swap(city_, other->city_);
  std::swap(place_, other->place_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestVisit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestVisit_descriptor_;
  metadata.reflection = QuestVisit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestVisit

// optional uint32 heroClass = 1;
void QuestVisit::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 QuestVisit::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestVisit.heroClass)
  return heroclass_;
}
void QuestVisit::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestVisit.heroClass)
}

// optional uint32 city = 2;
void QuestVisit::clear_city() {
  city_ = 0u;
}
::google::protobuf::uint32 QuestVisit::city() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestVisit.city)
  return city_;
}
void QuestVisit::set_city(::google::protobuf::uint32 value) {
  
  city_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestVisit.city)
}

// optional uint32 place = 3;
void QuestVisit::clear_place() {
  place_ = 0u;
}
::google::protobuf::uint32 QuestVisit::place() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestVisit.place)
  return place_;
}
void QuestVisit::set_place(::google::protobuf::uint32 value) {
  
  place_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestVisit.place)
}

// optional .NetMsg.Award award = 4;
bool QuestVisit::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void QuestVisit::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& QuestVisit::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestVisit.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* QuestVisit::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestVisit.award)
  return award_;
}
::NetMsg::Award* QuestVisit::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestVisit.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void QuestVisit::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestVisit.award)
}

inline const QuestVisit* QuestVisit::internal_default_instance() {
  return &QuestVisit_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestConscription::kTitleFieldNumber;
const int QuestConscription::kCityIdFieldNumber;
const int QuestConscription::kCurTargetFieldNumber;
const int QuestConscription::kTargetFieldNumber;
const int QuestConscription::kPlaceFieldNumber;
const int QuestConscription::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestConscription::QuestConscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestConscription)
}

void QuestConscription::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

QuestConscription::QuestConscription(const QuestConscription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestConscription)
}

void QuestConscription::SharedCtor() {
  award_ = NULL;
  ::memset(&title_, 0, reinterpret_cast<char*>(&place_) -
    reinterpret_cast<char*>(&title_) + sizeof(place_));
  _cached_size_ = 0;
}

QuestConscription::~QuestConscription() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestConscription)
  SharedDtor();
}

void QuestConscription::SharedDtor() {
  if (this != &QuestConscription_default_instance_.get()) {
    delete award_;
  }
}

void QuestConscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestConscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestConscription_descriptor_;
}

const QuestConscription& QuestConscription::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestConscription> QuestConscription_default_instance_;

QuestConscription* QuestConscription::New(::google::protobuf::Arena* arena) const {
  QuestConscription* n = new QuestConscription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestConscription::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestConscription)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestConscription, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestConscription*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, place_);
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestConscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestConscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // optional uint32 cityId = 2;
      case 2: {
        if (tag == 16) {
         parse_cityId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curTarget;
        break;
      }

      // optional uint32 curTarget = 3;
      case 3: {
        if (tag == 24) {
         parse_curTarget:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtarget_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // optional uint32 target = 4;
      case 4: {
        if (tag == 32) {
         parse_target:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_place;
        break;
      }

      // optional uint32 place = 5;
      case 5: {
        if (tag == 40) {
         parse_place:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 6;
      case 6: {
        if (tag == 50) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestConscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestConscription)
  return false;
#undef DO_
}

void QuestConscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestConscription)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curtarget(), output);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->place(), output);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestConscription)
}

::google::protobuf::uint8* QuestConscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestConscription)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curtarget(), target);
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->place(), target);
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestConscription)
  return target;
}

size_t QuestConscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestConscription)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 cityId = 2;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  // optional uint32 curTarget = 3;
  if (this->curtarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curtarget());
  }

  // optional uint32 target = 4;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());
  }

  // optional uint32 place = 5;
  if (this->place() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->place());
  }

  // optional .NetMsg.Award award = 6;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestConscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestConscription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestConscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestConscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestConscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestConscription)
    UnsafeMergeFrom(*source);
  }
}

void QuestConscription::MergeFrom(const QuestConscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestConscription)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestConscription::UnsafeMergeFrom(const QuestConscription& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
  if (from.curtarget() != 0) {
    set_curtarget(from.curtarget());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.place() != 0) {
    set_place(from.place());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void QuestConscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestConscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestConscription::CopyFrom(const QuestConscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestConscription)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestConscription::IsInitialized() const {

  return true;
}

void QuestConscription::Swap(QuestConscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestConscription::InternalSwap(QuestConscription* other) {
  std::swap(title_, other->title_);
  std::swap(cityid_, other->cityid_);
  std::swap(curtarget_, other->curtarget_);
  std::swap(target_, other->target_);
  std::swap(place_, other->place_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestConscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestConscription_descriptor_;
  metadata.reflection = QuestConscription_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestConscription

// optional uint32 title = 1;
void QuestConscription::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 QuestConscription::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConscription.title)
  return title_;
}
void QuestConscription::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConscription.title)
}

// optional uint32 cityId = 2;
void QuestConscription::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 QuestConscription::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConscription.cityId)
  return cityid_;
}
void QuestConscription::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConscription.cityId)
}

// optional uint32 curTarget = 3;
void QuestConscription::clear_curtarget() {
  curtarget_ = 0u;
}
::google::protobuf::uint32 QuestConscription::curtarget() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConscription.curTarget)
  return curtarget_;
}
void QuestConscription::set_curtarget(::google::protobuf::uint32 value) {
  
  curtarget_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConscription.curTarget)
}

// optional uint32 target = 4;
void QuestConscription::clear_target() {
  target_ = 0u;
}
::google::protobuf::uint32 QuestConscription::target() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConscription.target)
  return target_;
}
void QuestConscription::set_target(::google::protobuf::uint32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConscription.target)
}

// optional uint32 place = 5;
void QuestConscription::clear_place() {
  place_ = 0u;
}
::google::protobuf::uint32 QuestConscription::place() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConscription.place)
  return place_;
}
void QuestConscription::set_place(::google::protobuf::uint32 value) {
  
  place_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestConscription.place)
}

// optional .NetMsg.Award award = 6;
bool QuestConscription::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void QuestConscription::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& QuestConscription::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestConscription.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* QuestConscription::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestConscription.award)
  return award_;
}
::NetMsg::Award* QuestConscription::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestConscription.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void QuestConscription::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestConscription.award)
}

inline const QuestConscription* QuestConscription::internal_default_instance() {
  return &QuestConscription_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestDiscovery::kTitleFieldNumber;
const int QuestDiscovery::kCityFieldNumber;
const int QuestDiscovery::kPlaceFieldNumber;
const int QuestDiscovery::kEnemyPathFieldNumber;
const int QuestDiscovery::kPercentFieldNumber;
const int QuestDiscovery::kTypeFieldNumber;
const int QuestDiscovery::kItemFieldNumber;
const int QuestDiscovery::kHeroFieldNumber;
const int QuestDiscovery::kNameFieldNumber;
const int QuestDiscovery::kLevelFieldNumber;
const int QuestDiscovery::kStarLevelFieldNumber;
const int QuestDiscovery::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestDiscovery::QuestDiscovery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestDiscovery)
}

void QuestDiscovery::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

QuestDiscovery::QuestDiscovery(const QuestDiscovery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestDiscovery)
}

void QuestDiscovery::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  award_ = NULL;
  ::memset(&title_, 0, reinterpret_cast<char*>(&starlevel_) -
    reinterpret_cast<char*>(&title_) + sizeof(starlevel_));
  _cached_size_ = 0;
}

QuestDiscovery::~QuestDiscovery() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestDiscovery)
  SharedDtor();
}

void QuestDiscovery::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &QuestDiscovery_default_instance_.get()) {
    delete award_;
  }
}

void QuestDiscovery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestDiscovery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestDiscovery_descriptor_;
}

const QuestDiscovery& QuestDiscovery::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestDiscovery> QuestDiscovery_default_instance_;

QuestDiscovery* QuestDiscovery::New(::google::protobuf::Arena* arena) const {
  QuestDiscovery* n = new QuestDiscovery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestDiscovery::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestDiscovery)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestDiscovery, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestDiscovery*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, hero_);
  ZR_(level_, starlevel_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestDiscovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestDiscovery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_city;
        break;
      }

      // optional uint32 city = 2;
      case 2: {
        if (tag == 16) {
         parse_city:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_place;
        break;
      }

      // optional uint32 place = 3;
      case 3: {
        if (tag == 24) {
         parse_place:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enemyPath;
        break;
      }

      // optional uint32 enemyPath = 4;
      case 4: {
        if (tag == 32) {
         parse_enemyPath:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemypath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_percent;
        break;
      }

      // optional float percent = 5;
      case 5: {
        if (tag == 45) {
         parse_percent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .NetMsg.QuestDiscoveryFinishedType type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::QuestDiscoveryFinishedType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_item;
        break;
      }

      // optional uint32 item = 7;
      case 7: {
        if (tag == 56) {
         parse_item:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hero;
        break;
      }

      // optional uint32 hero = 8;
      case 8: {
        if (tag == 64) {
         parse_hero:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.QuestDiscovery.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional uint32 level = 10;
      case 10: {
        if (tag == 80) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_starLevel;
        break;
      }

      // optional uint32 starLevel = 11;
      case 11: {
        if (tag == 88) {
         parse_starLevel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 12;
      case 12: {
        if (tag == 98) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestDiscovery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestDiscovery)
  return false;
#undef DO_
}

void QuestDiscovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestDiscovery)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 city = 2;
  if (this->city() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city(), output);
  }

  // optional uint32 place = 3;
  if (this->place() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->place(), output);
  }

  // optional uint32 enemyPath = 4;
  if (this->enemypath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enemypath(), output);
  }

  // optional float percent = 5;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->percent(), output);
  }

  // optional .NetMsg.QuestDiscoveryFinishedType type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional uint32 item = 7;
  if (this->item() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item(), output);
  }

  // optional uint32 hero = 8;
  if (this->hero() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hero(), output);
  }

  // optional string name = 9;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.QuestDiscovery.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // optional uint32 level = 10;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level(), output);
  }

  // optional uint32 starLevel = 11;
  if (this->starlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->starlevel(), output);
  }

  // optional .NetMsg.Award award = 12;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestDiscovery)
}

::google::protobuf::uint8* QuestDiscovery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestDiscovery)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 city = 2;
  if (this->city() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city(), target);
  }

  // optional uint32 place = 3;
  if (this->place() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->place(), target);
  }

  // optional uint32 enemyPath = 4;
  if (this->enemypath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enemypath(), target);
  }

  // optional float percent = 5;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->percent(), target);
  }

  // optional .NetMsg.QuestDiscoveryFinishedType type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional uint32 item = 7;
  if (this->item() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item(), target);
  }

  // optional uint32 hero = 8;
  if (this->hero() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hero(), target);
  }

  // optional string name = 9;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.QuestDiscovery.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional uint32 level = 10;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level(), target);
  }

  // optional uint32 starLevel = 11;
  if (this->starlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->starlevel(), target);
  }

  // optional .NetMsg.Award award = 12;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestDiscovery)
  return target;
}

size_t QuestDiscovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestDiscovery)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 city = 2;
  if (this->city() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city());
  }

  // optional uint32 place = 3;
  if (this->place() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->place());
  }

  // optional uint32 enemyPath = 4;
  if (this->enemypath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemypath());
  }

  // optional float percent = 5;
  if (this->percent() != 0) {
    total_size += 1 + 4;
  }

  // optional .NetMsg.QuestDiscoveryFinishedType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 item = 7;
  if (this->item() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item());
  }

  // optional uint32 hero = 8;
  if (this->hero() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hero());
  }

  // optional string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 level = 10;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 starLevel = 11;
  if (this->starlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->starlevel());
  }

  // optional .NetMsg.Award award = 12;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestDiscovery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestDiscovery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestDiscovery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestDiscovery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestDiscovery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestDiscovery)
    UnsafeMergeFrom(*source);
  }
}

void QuestDiscovery::MergeFrom(const QuestDiscovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestDiscovery)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestDiscovery::UnsafeMergeFrom(const QuestDiscovery& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.city() != 0) {
    set_city(from.city());
  }
  if (from.place() != 0) {
    set_place(from.place());
  }
  if (from.enemypath() != 0) {
    set_enemypath(from.enemypath());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.item() != 0) {
    set_item(from.item());
  }
  if (from.hero() != 0) {
    set_hero(from.hero());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.starlevel() != 0) {
    set_starlevel(from.starlevel());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void QuestDiscovery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestDiscovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestDiscovery::CopyFrom(const QuestDiscovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestDiscovery)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestDiscovery::IsInitialized() const {

  return true;
}

void QuestDiscovery::Swap(QuestDiscovery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestDiscovery::InternalSwap(QuestDiscovery* other) {
  std::swap(title_, other->title_);
  std::swap(city_, other->city_);
  std::swap(place_, other->place_);
  std::swap(enemypath_, other->enemypath_);
  std::swap(percent_, other->percent_);
  std::swap(type_, other->type_);
  std::swap(item_, other->item_);
  std::swap(hero_, other->hero_);
  name_.Swap(&other->name_);
  std::swap(level_, other->level_);
  std::swap(starlevel_, other->starlevel_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestDiscovery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestDiscovery_descriptor_;
  metadata.reflection = QuestDiscovery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestDiscovery

// optional uint32 title = 1;
void QuestDiscovery::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.title)
  return title_;
}
void QuestDiscovery::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.title)
}

// optional uint32 city = 2;
void QuestDiscovery::clear_city() {
  city_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::city() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.city)
  return city_;
}
void QuestDiscovery::set_city(::google::protobuf::uint32 value) {
  
  city_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.city)
}

// optional uint32 place = 3;
void QuestDiscovery::clear_place() {
  place_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::place() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.place)
  return place_;
}
void QuestDiscovery::set_place(::google::protobuf::uint32 value) {
  
  place_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.place)
}

// optional uint32 enemyPath = 4;
void QuestDiscovery::clear_enemypath() {
  enemypath_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::enemypath() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.enemyPath)
  return enemypath_;
}
void QuestDiscovery::set_enemypath(::google::protobuf::uint32 value) {
  
  enemypath_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.enemyPath)
}

// optional float percent = 5;
void QuestDiscovery::clear_percent() {
  percent_ = 0;
}
float QuestDiscovery::percent() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.percent)
  return percent_;
}
void QuestDiscovery::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.percent)
}

// optional .NetMsg.QuestDiscoveryFinishedType type = 6;
void QuestDiscovery::clear_type() {
  type_ = 0;
}
::NetMsg::QuestDiscoveryFinishedType QuestDiscovery::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.type)
  return static_cast< ::NetMsg::QuestDiscoveryFinishedType >(type_);
}
void QuestDiscovery::set_type(::NetMsg::QuestDiscoveryFinishedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.type)
}

// optional uint32 item = 7;
void QuestDiscovery::clear_item() {
  item_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::item() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.item)
  return item_;
}
void QuestDiscovery::set_item(::google::protobuf::uint32 value) {
  
  item_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.item)
}

// optional uint32 hero = 8;
void QuestDiscovery::clear_hero() {
  hero_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::hero() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.hero)
  return hero_;
}
void QuestDiscovery::set_hero(::google::protobuf::uint32 value) {
  
  hero_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.hero)
}

// optional string name = 9;
void QuestDiscovery::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuestDiscovery::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuestDiscovery::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.name)
}
void QuestDiscovery::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.QuestDiscovery.name)
}
void QuestDiscovery::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.QuestDiscovery.name)
}
::std::string* QuestDiscovery::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestDiscovery.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuestDiscovery::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestDiscovery.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuestDiscovery::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestDiscovery.name)
}

// optional uint32 level = 10;
void QuestDiscovery::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.level)
  return level_;
}
void QuestDiscovery::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.level)
}

// optional uint32 starLevel = 11;
void QuestDiscovery::clear_starlevel() {
  starlevel_ = 0u;
}
::google::protobuf::uint32 QuestDiscovery::starlevel() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.starLevel)
  return starlevel_;
}
void QuestDiscovery::set_starlevel(::google::protobuf::uint32 value) {
  
  starlevel_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestDiscovery.starLevel)
}

// optional .NetMsg.Award award = 12;
bool QuestDiscovery::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void QuestDiscovery::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& QuestDiscovery::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestDiscovery.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* QuestDiscovery::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestDiscovery.award)
  return award_;
}
::NetMsg::Award* QuestDiscovery::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestDiscovery.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void QuestDiscovery::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestDiscovery.award)
}

inline const QuestDiscovery* QuestDiscovery::internal_default_instance() {
  return &QuestDiscovery_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestListAck::kQuestListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestListAck::QuestListAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestListAck)
}

void QuestListAck::InitAsDefaultInstance() {
}

QuestListAck::QuestListAck(const QuestListAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestListAck)
}

void QuestListAck::SharedCtor() {
  _cached_size_ = 0;
}

QuestListAck::~QuestListAck() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestListAck)
  SharedDtor();
}

void QuestListAck::SharedDtor() {
}

void QuestListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestListAck_descriptor_;
}

const QuestListAck& QuestListAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestListAck> QuestListAck_default_instance_;

QuestListAck* QuestListAck::New(::google::protobuf::Arena* arena) const {
  QuestListAck* n = new QuestListAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestListAck)
  questlist_.Clear();
}

bool QuestListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestListAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 questList = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_questlist())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_questlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestListAck)
  return false;
#undef DO_
}

void QuestListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestListAck)
  // repeated uint64 questList = 1;
  if (this->questlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_questlist_cached_byte_size_);
  }
  for (int i = 0; i < this->questlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->questlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestListAck)
}

::google::protobuf::uint8* QuestListAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestListAck)
  // repeated uint64 questList = 1;
  if (this->questlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _questlist_cached_byte_size_, target);
  }
  for (int i = 0; i < this->questlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->questlist(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestListAck)
  return target;
}

size_t QuestListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestListAck)
  size_t total_size = 0;

  // repeated uint64 questList = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->questlist_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->questlist(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _questlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestListAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestListAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestListAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestListAck)
    UnsafeMergeFrom(*source);
  }
}

void QuestListAck::MergeFrom(const QuestListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestListAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestListAck::UnsafeMergeFrom(const QuestListAck& from) {
  GOOGLE_DCHECK(&from != this);
  questlist_.UnsafeMergeFrom(from.questlist_);
}

void QuestListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestListAck::CopyFrom(const QuestListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestListAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestListAck::IsInitialized() const {

  return true;
}

void QuestListAck::Swap(QuestListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestListAck::InternalSwap(QuestListAck* other) {
  questlist_.UnsafeArenaSwap(&other->questlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestListAck_descriptor_;
  metadata.reflection = QuestListAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestListAck

// repeated uint64 questList = 1;
int QuestListAck::questlist_size() const {
  return questlist_.size();
}
void QuestListAck::clear_questlist() {
  questlist_.Clear();
}
::google::protobuf::uint64 QuestListAck::questlist(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestListAck.questList)
  return questlist_.Get(index);
}
void QuestListAck::set_questlist(int index, ::google::protobuf::uint64 value) {
  questlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.QuestListAck.questList)
}
void QuestListAck::add_questlist(::google::protobuf::uint64 value) {
  questlist_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.QuestListAck.questList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QuestListAck::questlist() const {
  // @@protoc_insertion_point(field_list:NetMsg.QuestListAck.questList)
  return questlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QuestListAck::mutable_questlist() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.QuestListAck.questList)
  return &questlist_;
}

inline const QuestListAck* QuestListAck::internal_default_instance() {
  return &QuestListAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestData::kAgricultureFieldNumber;
const int QuestData::kBusinessFieldNumber;
const int QuestData::kConsMillFieldNumber;
const int QuestData::kBattleFieldNumber;
const int QuestData::kVisitFieldNumber;
const int QuestData::kConscriptionFieldNumber;
const int QuestData::kDiscoveryFieldNumber;
const int QuestData::kDialogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestData::QuestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestData)
}

void QuestData::InitAsDefaultInstance() {
  QuestData_default_oneof_instance_->agriculture_ = const_cast< ::NetMsg::QuestConsAgriculture*>(
      ::NetMsg::QuestConsAgriculture::internal_default_instance());
  QuestData_default_oneof_instance_->business_ = const_cast< ::NetMsg::QuestConsBusiness*>(
      ::NetMsg::QuestConsBusiness::internal_default_instance());
  QuestData_default_oneof_instance_->consmill_ = const_cast< ::NetMsg::QuestConsMilitary*>(
      ::NetMsg::QuestConsMilitary::internal_default_instance());
  QuestData_default_oneof_instance_->battle_ = const_cast< ::NetMsg::QuestBattle*>(
      ::NetMsg::QuestBattle::internal_default_instance());
  QuestData_default_oneof_instance_->visit_ = const_cast< ::NetMsg::QuestVisit*>(
      ::NetMsg::QuestVisit::internal_default_instance());
  QuestData_default_oneof_instance_->conscription_ = const_cast< ::NetMsg::QuestConscription*>(
      ::NetMsg::QuestConscription::internal_default_instance());
  QuestData_default_oneof_instance_->discovery_ = const_cast< ::NetMsg::QuestDiscovery*>(
      ::NetMsg::QuestDiscovery::internal_default_instance());
}

QuestData::QuestData(const QuestData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestData)
}

void QuestData::SharedCtor() {
  dialog_ = 0u;
  clear_has_info();
  _cached_size_ = 0;
}

QuestData::~QuestData() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestData)
  SharedDtor();
}

void QuestData::SharedDtor() {
  if (has_info()) {
    clear_info();
  }
}

void QuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestData_descriptor_;
}

const QuestData& QuestData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestData> QuestData_default_instance_;

QuestData* QuestData::New(::google::protobuf::Arena* arena) const {
  QuestData* n = new QuestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestData::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:NetMsg.QuestData)
  switch (info_case()) {
    case kAgriculture: {
      delete info_.agriculture_;
      break;
    }
    case kBusiness: {
      delete info_.business_;
      break;
    }
    case kConsMill: {
      delete info_.consmill_;
      break;
    }
    case kBattle: {
      delete info_.battle_;
      break;
    }
    case kVisit: {
      delete info_.visit_;
      break;
    }
    case kConscription: {
      delete info_.conscription_;
      break;
    }
    case kDiscovery: {
      delete info_.discovery_;
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_NOT_SET;
}


void QuestData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestData)
  dialog_ = 0u;
  clear_info();
}

bool QuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.QuestConsAgriculture agriculture = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agriculture()));
        } else {
          goto handle_unusual;
        }
        goto after_discovery;
        break;
      }

      // optional .NetMsg.QuestConsBusiness business = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_business()));
        } else {
          goto handle_unusual;
        }
        goto after_discovery;
        break;
      }

      // optional .NetMsg.QuestConsMilitary consMill = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consmill()));
        } else {
          goto handle_unusual;
        }
        goto after_discovery;
        break;
      }

      // optional .NetMsg.QuestBattle battle = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_unusual;
        }
        goto after_discovery;
        break;
      }

      // optional .NetMsg.QuestVisit visit = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visit()));
        } else {
          goto handle_unusual;
        }
        goto after_discovery;
        break;
      }

      // optional .NetMsg.QuestConscription conscription = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conscription()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_discovery;
        break;
      }

      // optional .NetMsg.QuestDiscovery discovery = 7;
      case 7: {
        if (tag == 58) {
         parse_discovery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discovery()));
        } else {
          goto handle_unusual;
        }
       after_discovery:
        if (input->ExpectTag(240)) goto parse_dialog;
        break;
      }

      // optional uint32 dialog = 30;
      case 30: {
        if (tag == 240) {
         parse_dialog:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dialog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestData)
  return false;
#undef DO_
}

void QuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestData)
  // optional .NetMsg.QuestConsAgriculture agriculture = 1;
  if (has_agriculture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *info_.agriculture_, output);
  }

  // optional .NetMsg.QuestConsBusiness business = 2;
  if (has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *info_.business_, output);
  }

  // optional .NetMsg.QuestConsMilitary consMill = 3;
  if (has_consmill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *info_.consmill_, output);
  }

  // optional .NetMsg.QuestBattle battle = 4;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *info_.battle_, output);
  }

  // optional .NetMsg.QuestVisit visit = 5;
  if (has_visit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *info_.visit_, output);
  }

  // optional .NetMsg.QuestConscription conscription = 6;
  if (has_conscription()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *info_.conscription_, output);
  }

  // optional .NetMsg.QuestDiscovery discovery = 7;
  if (has_discovery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *info_.discovery_, output);
  }

  // optional uint32 dialog = 30;
  if (this->dialog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->dialog(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestData)
}

::google::protobuf::uint8* QuestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestData)
  // optional .NetMsg.QuestConsAgriculture agriculture = 1;
  if (has_agriculture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *info_.agriculture_, false, target);
  }

  // optional .NetMsg.QuestConsBusiness business = 2;
  if (has_business()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *info_.business_, false, target);
  }

  // optional .NetMsg.QuestConsMilitary consMill = 3;
  if (has_consmill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *info_.consmill_, false, target);
  }

  // optional .NetMsg.QuestBattle battle = 4;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *info_.battle_, false, target);
  }

  // optional .NetMsg.QuestVisit visit = 5;
  if (has_visit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *info_.visit_, false, target);
  }

  // optional .NetMsg.QuestConscription conscription = 6;
  if (has_conscription()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *info_.conscription_, false, target);
  }

  // optional .NetMsg.QuestDiscovery discovery = 7;
  if (has_discovery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *info_.discovery_, false, target);
  }

  // optional uint32 dialog = 30;
  if (this->dialog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->dialog(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestData)
  return target;
}

size_t QuestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestData)
  size_t total_size = 0;

  // optional uint32 dialog = 30;
  if (this->dialog() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dialog());
  }

  switch (info_case()) {
    // optional .NetMsg.QuestConsAgriculture agriculture = 1;
    case kAgriculture: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.agriculture_);
      break;
    }
    // optional .NetMsg.QuestConsBusiness business = 2;
    case kBusiness: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.business_);
      break;
    }
    // optional .NetMsg.QuestConsMilitary consMill = 3;
    case kConsMill: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.consmill_);
      break;
    }
    // optional .NetMsg.QuestBattle battle = 4;
    case kBattle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.battle_);
      break;
    }
    // optional .NetMsg.QuestVisit visit = 5;
    case kVisit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.visit_);
      break;
    }
    // optional .NetMsg.QuestConscription conscription = 6;
    case kConscription: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.conscription_);
      break;
    }
    // optional .NetMsg.QuestDiscovery discovery = 7;
    case kDiscovery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.discovery_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestData)
    UnsafeMergeFrom(*source);
  }
}

void QuestData::MergeFrom(const QuestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestData::UnsafeMergeFrom(const QuestData& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.info_case()) {
    case kAgriculture: {
      mutable_agriculture()->::NetMsg::QuestConsAgriculture::MergeFrom(from.agriculture());
      break;
    }
    case kBusiness: {
      mutable_business()->::NetMsg::QuestConsBusiness::MergeFrom(from.business());
      break;
    }
    case kConsMill: {
      mutable_consmill()->::NetMsg::QuestConsMilitary::MergeFrom(from.consmill());
      break;
    }
    case kBattle: {
      mutable_battle()->::NetMsg::QuestBattle::MergeFrom(from.battle());
      break;
    }
    case kVisit: {
      mutable_visit()->::NetMsg::QuestVisit::MergeFrom(from.visit());
      break;
    }
    case kConscription: {
      mutable_conscription()->::NetMsg::QuestConscription::MergeFrom(from.conscription());
      break;
    }
    case kDiscovery: {
      mutable_discovery()->::NetMsg::QuestDiscovery::MergeFrom(from.discovery());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  if (from.dialog() != 0) {
    set_dialog(from.dialog());
  }
}

void QuestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestData::CopyFrom(const QuestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestData::IsInitialized() const {

  return true;
}

void QuestData::Swap(QuestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestData::InternalSwap(QuestData* other) {
  std::swap(dialog_, other->dialog_);
  std::swap(info_, other->info_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestData_descriptor_;
  metadata.reflection = QuestData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestData

// optional .NetMsg.QuestConsAgriculture agriculture = 1;
bool QuestData::has_agriculture() const {
  return info_case() == kAgriculture;
}
void QuestData::set_has_agriculture() {
  _oneof_case_[0] = kAgriculture;
}
void QuestData::clear_agriculture() {
  if (has_agriculture()) {
    delete info_.agriculture_;
    clear_has_info();
  }
}
 const ::NetMsg::QuestConsAgriculture& QuestData::agriculture() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.agriculture)
  return has_agriculture()
      ? *info_.agriculture_
      : ::NetMsg::QuestConsAgriculture::default_instance();
}
::NetMsg::QuestConsAgriculture* QuestData::mutable_agriculture() {
  if (!has_agriculture()) {
    clear_info();
    set_has_agriculture();
    info_.agriculture_ = new ::NetMsg::QuestConsAgriculture;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestData.agriculture)
  return info_.agriculture_;
}
::NetMsg::QuestConsAgriculture* QuestData::release_agriculture() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestData.agriculture)
  if (has_agriculture()) {
    clear_has_info();
    ::NetMsg::QuestConsAgriculture* temp = info_.agriculture_;
    info_.agriculture_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QuestData::set_allocated_agriculture(::NetMsg::QuestConsAgriculture* agriculture) {
  clear_info();
  if (agriculture) {
    set_has_agriculture();
    info_.agriculture_ = agriculture;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestData.agriculture)
}

// optional .NetMsg.QuestConsBusiness business = 2;
bool QuestData::has_business() const {
  return info_case() == kBusiness;
}
void QuestData::set_has_business() {
  _oneof_case_[0] = kBusiness;
}
void QuestData::clear_business() {
  if (has_business()) {
    delete info_.business_;
    clear_has_info();
  }
}
 const ::NetMsg::QuestConsBusiness& QuestData::business() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.business)
  return has_business()
      ? *info_.business_
      : ::NetMsg::QuestConsBusiness::default_instance();
}
::NetMsg::QuestConsBusiness* QuestData::mutable_business() {
  if (!has_business()) {
    clear_info();
    set_has_business();
    info_.business_ = new ::NetMsg::QuestConsBusiness;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestData.business)
  return info_.business_;
}
::NetMsg::QuestConsBusiness* QuestData::release_business() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestData.business)
  if (has_business()) {
    clear_has_info();
    ::NetMsg::QuestConsBusiness* temp = info_.business_;
    info_.business_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QuestData::set_allocated_business(::NetMsg::QuestConsBusiness* business) {
  clear_info();
  if (business) {
    set_has_business();
    info_.business_ = business;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestData.business)
}

// optional .NetMsg.QuestConsMilitary consMill = 3;
bool QuestData::has_consmill() const {
  return info_case() == kConsMill;
}
void QuestData::set_has_consmill() {
  _oneof_case_[0] = kConsMill;
}
void QuestData::clear_consmill() {
  if (has_consmill()) {
    delete info_.consmill_;
    clear_has_info();
  }
}
 const ::NetMsg::QuestConsMilitary& QuestData::consmill() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.consMill)
  return has_consmill()
      ? *info_.consmill_
      : ::NetMsg::QuestConsMilitary::default_instance();
}
::NetMsg::QuestConsMilitary* QuestData::mutable_consmill() {
  if (!has_consmill()) {
    clear_info();
    set_has_consmill();
    info_.consmill_ = new ::NetMsg::QuestConsMilitary;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestData.consMill)
  return info_.consmill_;
}
::NetMsg::QuestConsMilitary* QuestData::release_consmill() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestData.consMill)
  if (has_consmill()) {
    clear_has_info();
    ::NetMsg::QuestConsMilitary* temp = info_.consmill_;
    info_.consmill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QuestData::set_allocated_consmill(::NetMsg::QuestConsMilitary* consmill) {
  clear_info();
  if (consmill) {
    set_has_consmill();
    info_.consmill_ = consmill;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestData.consMill)
}

// optional .NetMsg.QuestBattle battle = 4;
bool QuestData::has_battle() const {
  return info_case() == kBattle;
}
void QuestData::set_has_battle() {
  _oneof_case_[0] = kBattle;
}
void QuestData::clear_battle() {
  if (has_battle()) {
    delete info_.battle_;
    clear_has_info();
  }
}
 const ::NetMsg::QuestBattle& QuestData::battle() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.battle)
  return has_battle()
      ? *info_.battle_
      : ::NetMsg::QuestBattle::default_instance();
}
::NetMsg::QuestBattle* QuestData::mutable_battle() {
  if (!has_battle()) {
    clear_info();
    set_has_battle();
    info_.battle_ = new ::NetMsg::QuestBattle;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestData.battle)
  return info_.battle_;
}
::NetMsg::QuestBattle* QuestData::release_battle() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestData.battle)
  if (has_battle()) {
    clear_has_info();
    ::NetMsg::QuestBattle* temp = info_.battle_;
    info_.battle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QuestData::set_allocated_battle(::NetMsg::QuestBattle* battle) {
  clear_info();
  if (battle) {
    set_has_battle();
    info_.battle_ = battle;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestData.battle)
}

// optional .NetMsg.QuestVisit visit = 5;
bool QuestData::has_visit() const {
  return info_case() == kVisit;
}
void QuestData::set_has_visit() {
  _oneof_case_[0] = kVisit;
}
void QuestData::clear_visit() {
  if (has_visit()) {
    delete info_.visit_;
    clear_has_info();
  }
}
 const ::NetMsg::QuestVisit& QuestData::visit() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.visit)
  return has_visit()
      ? *info_.visit_
      : ::NetMsg::QuestVisit::default_instance();
}
::NetMsg::QuestVisit* QuestData::mutable_visit() {
  if (!has_visit()) {
    clear_info();
    set_has_visit();
    info_.visit_ = new ::NetMsg::QuestVisit;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestData.visit)
  return info_.visit_;
}
::NetMsg::QuestVisit* QuestData::release_visit() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestData.visit)
  if (has_visit()) {
    clear_has_info();
    ::NetMsg::QuestVisit* temp = info_.visit_;
    info_.visit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QuestData::set_allocated_visit(::NetMsg::QuestVisit* visit) {
  clear_info();
  if (visit) {
    set_has_visit();
    info_.visit_ = visit;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestData.visit)
}

// optional .NetMsg.QuestConscription conscription = 6;
bool QuestData::has_conscription() const {
  return info_case() == kConscription;
}
void QuestData::set_has_conscription() {
  _oneof_case_[0] = kConscription;
}
void QuestData::clear_conscription() {
  if (has_conscription()) {
    delete info_.conscription_;
    clear_has_info();
  }
}
 const ::NetMsg::QuestConscription& QuestData::conscription() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.conscription)
  return has_conscription()
      ? *info_.conscription_
      : ::NetMsg::QuestConscription::default_instance();
}
::NetMsg::QuestConscription* QuestData::mutable_conscription() {
  if (!has_conscription()) {
    clear_info();
    set_has_conscription();
    info_.conscription_ = new ::NetMsg::QuestConscription;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestData.conscription)
  return info_.conscription_;
}
::NetMsg::QuestConscription* QuestData::release_conscription() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestData.conscription)
  if (has_conscription()) {
    clear_has_info();
    ::NetMsg::QuestConscription* temp = info_.conscription_;
    info_.conscription_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QuestData::set_allocated_conscription(::NetMsg::QuestConscription* conscription) {
  clear_info();
  if (conscription) {
    set_has_conscription();
    info_.conscription_ = conscription;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestData.conscription)
}

// optional .NetMsg.QuestDiscovery discovery = 7;
bool QuestData::has_discovery() const {
  return info_case() == kDiscovery;
}
void QuestData::set_has_discovery() {
  _oneof_case_[0] = kDiscovery;
}
void QuestData::clear_discovery() {
  if (has_discovery()) {
    delete info_.discovery_;
    clear_has_info();
  }
}
 const ::NetMsg::QuestDiscovery& QuestData::discovery() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.discovery)
  return has_discovery()
      ? *info_.discovery_
      : ::NetMsg::QuestDiscovery::default_instance();
}
::NetMsg::QuestDiscovery* QuestData::mutable_discovery() {
  if (!has_discovery()) {
    clear_info();
    set_has_discovery();
    info_.discovery_ = new ::NetMsg::QuestDiscovery;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestData.discovery)
  return info_.discovery_;
}
::NetMsg::QuestDiscovery* QuestData::release_discovery() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestData.discovery)
  if (has_discovery()) {
    clear_has_info();
    ::NetMsg::QuestDiscovery* temp = info_.discovery_;
    info_.discovery_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QuestData::set_allocated_discovery(::NetMsg::QuestDiscovery* discovery) {
  clear_info();
  if (discovery) {
    set_has_discovery();
    info_.discovery_ = discovery;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestData.discovery)
}

// optional uint32 dialog = 30;
void QuestData::clear_dialog() {
  dialog_ = 0u;
}
::google::protobuf::uint32 QuestData::dialog() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestData.dialog)
  return dialog_;
}
void QuestData::set_dialog(::google::protobuf::uint32 value) {
  
  dialog_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestData.dialog)
}

bool QuestData::has_info() const {
  return info_case() != INFO_NOT_SET;
}
void QuestData::clear_has_info() {
  _oneof_case_[0] = INFO_NOT_SET;
}
QuestData::InfoCase QuestData::info_case() const {
  return QuestData::InfoCase(_oneof_case_[0]);
}
inline const QuestData* QuestData::internal_default_instance() {
  return &QuestData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqQuestInfo::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqQuestInfo::ReqQuestInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqQuestInfo)
}

void ReqQuestInfo::InitAsDefaultInstance() {
}

ReqQuestInfo::ReqQuestInfo(const ReqQuestInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqQuestInfo)
}

void ReqQuestInfo::SharedCtor() {
  uid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqQuestInfo::~ReqQuestInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqQuestInfo)
  SharedDtor();
}

void ReqQuestInfo::SharedDtor() {
}

void ReqQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqQuestInfo_descriptor_;
}

const ReqQuestInfo& ReqQuestInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqQuestInfo> ReqQuestInfo_default_instance_;

ReqQuestInfo* ReqQuestInfo::New(::google::protobuf::Arena* arena) const {
  ReqQuestInfo* n = new ReqQuestInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqQuestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqQuestInfo)
  uid_ = GOOGLE_ULONGLONG(0);
}

bool ReqQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqQuestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqQuestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqQuestInfo)
  return false;
#undef DO_
}

void ReqQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqQuestInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqQuestInfo)
}

::google::protobuf::uint8* ReqQuestInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqQuestInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqQuestInfo)
  return target;
}

size_t ReqQuestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqQuestInfo)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqQuestInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqQuestInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqQuestInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqQuestInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqQuestInfo)
    UnsafeMergeFrom(*source);
  }
}

void ReqQuestInfo::MergeFrom(const ReqQuestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqQuestInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqQuestInfo::UnsafeMergeFrom(const ReqQuestInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqQuestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuestInfo::CopyFrom(const ReqQuestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqQuestInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqQuestInfo::IsInitialized() const {

  return true;
}

void ReqQuestInfo::Swap(ReqQuestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqQuestInfo::InternalSwap(ReqQuestInfo* other) {
  std::swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqQuestInfo_descriptor_;
  metadata.reflection = ReqQuestInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqQuestInfo

// optional uint64 uid = 1;
void ReqQuestInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqQuestInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqQuestInfo.uid)
  return uid_;
}
void ReqQuestInfo::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqQuestInfo.uid)
}

inline const ReqQuestInfo* ReqQuestInfo::internal_default_instance() {
  return &ReqQuestInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestInfoAck::kUidFieldNumber;
const int QuestInfoAck::kTypeFieldNumber;
const int QuestInfoAck::kDataFieldNumber;
const int QuestInfoAck::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestInfoAck::QuestInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.QuestInfoAck)
}

void QuestInfoAck::InitAsDefaultInstance() {
  data_ = const_cast< ::NetMsg::QuestData*>(
      ::NetMsg::QuestData::internal_default_instance());
}

QuestInfoAck::QuestInfoAck(const QuestInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.QuestInfoAck)
}

void QuestInfoAck::SharedCtor() {
  data_ = NULL;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&uid_) + sizeof(state_));
  _cached_size_ = 0;
}

QuestInfoAck::~QuestInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.QuestInfoAck)
  SharedDtor();
}

void QuestInfoAck::SharedDtor() {
  if (this != &QuestInfoAck_default_instance_.get()) {
    delete data_;
  }
}

void QuestInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestInfoAck_descriptor_;
}

const QuestInfoAck& QuestInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuestInfoAck> QuestInfoAck_default_instance_;

QuestInfoAck* QuestInfoAck::New(::google::protobuf::Arena* arena) const {
  QuestInfoAck* n = new QuestInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.QuestInfoAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuestInfoAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuestInfoAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, state_);
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuestInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.QuestInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .NetMsg.QuestType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::QuestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .NetMsg.QuestData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .NetMsg.QuestState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::NetMsg::QuestState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.QuestInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.QuestInfoAck)
  return false;
#undef DO_
}

void QuestInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.QuestInfoAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .NetMsg.QuestType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .NetMsg.QuestData data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // optional .NetMsg.QuestState state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.QuestInfoAck)
}

::google::protobuf::uint8* QuestInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.QuestInfoAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .NetMsg.QuestType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .NetMsg.QuestData data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // optional .NetMsg.QuestState state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.QuestInfoAck)
  return target;
}

size_t QuestInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.QuestInfoAck)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional .NetMsg.QuestType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .NetMsg.QuestData data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .NetMsg.QuestState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.QuestInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.QuestInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.QuestInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void QuestInfoAck::MergeFrom(const QuestInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.QuestInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuestInfoAck::UnsafeMergeFrom(const QuestInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_data()) {
    mutable_data()->::NetMsg::QuestData::MergeFrom(from.data());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void QuestInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.QuestInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestInfoAck::CopyFrom(const QuestInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.QuestInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuestInfoAck::IsInitialized() const {

  return true;
}

void QuestInfoAck::Swap(QuestInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestInfoAck::InternalSwap(QuestInfoAck* other) {
  std::swap(uid_, other->uid_);
  std::swap(type_, other->type_);
  std::swap(data_, other->data_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestInfoAck_descriptor_;
  metadata.reflection = QuestInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestInfoAck

// optional uint64 uid = 1;
void QuestInfoAck::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuestInfoAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestInfoAck.uid)
  return uid_;
}
void QuestInfoAck::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestInfoAck.uid)
}

// optional .NetMsg.QuestType type = 2;
void QuestInfoAck::clear_type() {
  type_ = 0;
}
::NetMsg::QuestType QuestInfoAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestInfoAck.type)
  return static_cast< ::NetMsg::QuestType >(type_);
}
void QuestInfoAck::set_type(::NetMsg::QuestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestInfoAck.type)
}

// optional .NetMsg.QuestData data = 3;
bool QuestInfoAck::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void QuestInfoAck::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::NetMsg::QuestData& QuestInfoAck::data() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestInfoAck.data)
  return data_ != NULL ? *data_
                         : *::NetMsg::QuestData::internal_default_instance();
}
::NetMsg::QuestData* QuestInfoAck::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::NetMsg::QuestData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.QuestInfoAck.data)
  return data_;
}
::NetMsg::QuestData* QuestInfoAck::release_data() {
  // @@protoc_insertion_point(field_release:NetMsg.QuestInfoAck.data)
  
  ::NetMsg::QuestData* temp = data_;
  data_ = NULL;
  return temp;
}
void QuestInfoAck::set_allocated_data(::NetMsg::QuestData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.QuestInfoAck.data)
}

// optional .NetMsg.QuestState state = 4;
void QuestInfoAck::clear_state() {
  state_ = 0;
}
::NetMsg::QuestState QuestInfoAck::state() const {
  // @@protoc_insertion_point(field_get:NetMsg.QuestInfoAck.state)
  return static_cast< ::NetMsg::QuestState >(state_);
}
void QuestInfoAck::set_state(::NetMsg::QuestState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.QuestInfoAck.state)
}

inline const QuestInfoAck* QuestInfoAck::internal_default_instance() {
  return &QuestInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GiveAward::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GiveAward::GiveAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.GiveAward)
}

void GiveAward::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

GiveAward::GiveAward(const GiveAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.GiveAward)
}

void GiveAward::SharedCtor() {
  award_ = NULL;
  _cached_size_ = 0;
}

GiveAward::~GiveAward() {
  // @@protoc_insertion_point(destructor:NetMsg.GiveAward)
  SharedDtor();
}

void GiveAward::SharedDtor() {
  if (this != &GiveAward_default_instance_.get()) {
    delete award_;
  }
}

void GiveAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveAward_descriptor_;
}

const GiveAward& GiveAward::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GiveAward> GiveAward_default_instance_;

GiveAward* GiveAward::New(::google::protobuf::Arena* arena) const {
  GiveAward* n = new GiveAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GiveAward::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.GiveAward)
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}

bool GiveAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.GiveAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.Award award = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.GiveAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.GiveAward)
  return false;
#undef DO_
}

void GiveAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.GiveAward)
  // optional .NetMsg.Award award = 1;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.GiveAward)
}

::google::protobuf::uint8* GiveAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.GiveAward)
  // optional .NetMsg.Award award = 1;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.GiveAward)
  return target;
}

size_t GiveAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.GiveAward)
  size_t total_size = 0;

  // optional .NetMsg.Award award = 1;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.GiveAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GiveAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GiveAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.GiveAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.GiveAward)
    UnsafeMergeFrom(*source);
  }
}

void GiveAward::MergeFrom(const GiveAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.GiveAward)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GiveAward::UnsafeMergeFrom(const GiveAward& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void GiveAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.GiveAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveAward::CopyFrom(const GiveAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.GiveAward)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GiveAward::IsInitialized() const {

  return true;
}

void GiveAward::Swap(GiveAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GiveAward::InternalSwap(GiveAward* other) {
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GiveAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveAward_descriptor_;
  metadata.reflection = GiveAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GiveAward

// optional .NetMsg.Award award = 1;
bool GiveAward::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void GiveAward::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& GiveAward::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.GiveAward.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* GiveAward::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.GiveAward.award)
  return award_;
}
::NetMsg::Award* GiveAward::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.GiveAward.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void GiveAward::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.GiveAward.award)
}

inline const GiveAward* GiveAward::internal_default_instance() {
  return &GiveAward_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqDoQuest::kQuestIdFieldNumber;
const int ReqDoQuest::kHeroIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqDoQuest::ReqDoQuest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqDoQuest)
}

void ReqDoQuest::InitAsDefaultInstance() {
}

ReqDoQuest::ReqDoQuest(const ReqDoQuest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqDoQuest)
}

void ReqDoQuest::SharedCtor() {
  questid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqDoQuest::~ReqDoQuest() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqDoQuest)
  SharedDtor();
}

void ReqDoQuest::SharedDtor() {
}

void ReqDoQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDoQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDoQuest_descriptor_;
}

const ReqDoQuest& ReqDoQuest::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqDoQuest> ReqDoQuest_default_instance_;

ReqDoQuest* ReqDoQuest::New(::google::protobuf::Arena* arena) const {
  ReqDoQuest* n = new ReqDoQuest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqDoQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqDoQuest)
  questid_ = GOOGLE_ULONGLONG(0);
  heroids_.Clear();
}

bool ReqDoQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqDoQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 questId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroIds;
        break;
      }

      // repeated uint64 heroIds = 2;
      case 2: {
        if (tag == 18) {
         parse_heroIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heroids())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_heroids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqDoQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqDoQuest)
  return false;
#undef DO_
}

void ReqDoQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqDoQuest)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->questid(), output);
  }

  // repeated uint64 heroIds = 2;
  if (this->heroids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heroids_cached_byte_size_);
  }
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->heroids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqDoQuest)
}

::google::protobuf::uint8* ReqDoQuest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqDoQuest)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->questid(), target);
  }

  // repeated uint64 heroIds = 2;
  if (this->heroids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heroids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->heroids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqDoQuest)
  return target;
}

size_t ReqDoQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqDoQuest)
  size_t total_size = 0;

  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->questid());
  }

  // repeated uint64 heroIds = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->heroids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heroids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heroids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDoQuest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqDoQuest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqDoQuest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqDoQuest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqDoQuest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqDoQuest)
    UnsafeMergeFrom(*source);
  }
}

void ReqDoQuest::MergeFrom(const ReqDoQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqDoQuest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqDoQuest::UnsafeMergeFrom(const ReqDoQuest& from) {
  GOOGLE_DCHECK(&from != this);
  heroids_.UnsafeMergeFrom(from.heroids_);
  if (from.questid() != 0) {
    set_questid(from.questid());
  }
}

void ReqDoQuest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqDoQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDoQuest::CopyFrom(const ReqDoQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqDoQuest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqDoQuest::IsInitialized() const {

  return true;
}

void ReqDoQuest::Swap(ReqDoQuest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqDoQuest::InternalSwap(ReqDoQuest* other) {
  std::swap(questid_, other->questid_);
  heroids_.UnsafeArenaSwap(&other->heroids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqDoQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDoQuest_descriptor_;
  metadata.reflection = ReqDoQuest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqDoQuest

// optional uint64 questId = 1;
void ReqDoQuest::clear_questid() {
  questid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqDoQuest::questid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqDoQuest.questId)
  return questid_;
}
void ReqDoQuest::set_questid(::google::protobuf::uint64 value) {
  
  questid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqDoQuest.questId)
}

// repeated uint64 heroIds = 2;
int ReqDoQuest::heroids_size() const {
  return heroids_.size();
}
void ReqDoQuest::clear_heroids() {
  heroids_.Clear();
}
::google::protobuf::uint64 ReqDoQuest::heroids(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqDoQuest.heroIds)
  return heroids_.Get(index);
}
void ReqDoQuest::set_heroids(int index, ::google::protobuf::uint64 value) {
  heroids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqDoQuest.heroIds)
}
void ReqDoQuest::add_heroids(::google::protobuf::uint64 value) {
  heroids_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.ReqDoQuest.heroIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ReqDoQuest::heroids() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqDoQuest.heroIds)
  return heroids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ReqDoQuest::mutable_heroids() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqDoQuest.heroIds)
  return &heroids_;
}

inline const ReqDoQuest* ReqDoQuest::internal_default_instance() {
  return &ReqDoQuest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoQuestAward::kHeroIdFieldNumber;
const int DoQuestAward::kAwardTypeFieldNumber;
const int DoQuestAward::kAwardnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoQuestAward::DoQuestAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.DoQuestAward)
}

void DoQuestAward::InitAsDefaultInstance() {
}

DoQuestAward::DoQuestAward(const DoQuestAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.DoQuestAward)
}

void DoQuestAward::SharedCtor() {
  heroid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DoQuestAward::~DoQuestAward() {
  // @@protoc_insertion_point(destructor:NetMsg.DoQuestAward)
  SharedDtor();
}

void DoQuestAward::SharedDtor() {
}

void DoQuestAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoQuestAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoQuestAward_descriptor_;
}

const DoQuestAward& DoQuestAward::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DoQuestAward> DoQuestAward_default_instance_;

DoQuestAward* DoQuestAward::New(::google::protobuf::Arena* arena) const {
  DoQuestAward* n = new DoQuestAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoQuestAward::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.DoQuestAward)
  heroid_ = GOOGLE_ULONGLONG(0);
  awardtype_.Clear();
  awardnum_.Clear();
}

bool DoQuestAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.DoQuestAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_awardType;
        break;
      }

      // repeated uint32 awardType = 2;
      case 2: {
        if (tag == 18) {
         parse_awardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awardtype())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_awardtype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_awardnum;
        break;
      }

      // repeated uint32 awardnum = 3;
      case 3: {
        if (tag == 26) {
         parse_awardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awardnum())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_awardnum())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.DoQuestAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.DoQuestAward)
  return false;
#undef DO_
}

void DoQuestAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.DoQuestAward)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // repeated uint32 awardType = 2;
  if (this->awardtype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_awardtype_cached_byte_size_);
  }
  for (int i = 0; i < this->awardtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->awardtype(i), output);
  }

  // repeated uint32 awardnum = 3;
  if (this->awardnum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_awardnum_cached_byte_size_);
  }
  for (int i = 0; i < this->awardnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->awardnum(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.DoQuestAward)
}

::google::protobuf::uint8* DoQuestAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.DoQuestAward)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // repeated uint32 awardType = 2;
  if (this->awardtype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _awardtype_cached_byte_size_, target);
  }
  for (int i = 0; i < this->awardtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->awardtype(i), target);
  }

  // repeated uint32 awardnum = 3;
  if (this->awardnum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _awardnum_cached_byte_size_, target);
  }
  for (int i = 0; i < this->awardnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->awardnum(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.DoQuestAward)
  return target;
}

size_t DoQuestAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.DoQuestAward)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // repeated uint32 awardType = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->awardtype_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awardtype(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _awardtype_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 awardnum = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->awardnum_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awardnum(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _awardnum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoQuestAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.DoQuestAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DoQuestAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoQuestAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.DoQuestAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.DoQuestAward)
    UnsafeMergeFrom(*source);
  }
}

void DoQuestAward::MergeFrom(const DoQuestAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.DoQuestAward)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DoQuestAward::UnsafeMergeFrom(const DoQuestAward& from) {
  GOOGLE_DCHECK(&from != this);
  awardtype_.UnsafeMergeFrom(from.awardtype_);
  awardnum_.UnsafeMergeFrom(from.awardnum_);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void DoQuestAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.DoQuestAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoQuestAward::CopyFrom(const DoQuestAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.DoQuestAward)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DoQuestAward::IsInitialized() const {

  return true;
}

void DoQuestAward::Swap(DoQuestAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoQuestAward::InternalSwap(DoQuestAward* other) {
  std::swap(heroid_, other->heroid_);
  awardtype_.UnsafeArenaSwap(&other->awardtype_);
  awardnum_.UnsafeArenaSwap(&other->awardnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoQuestAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoQuestAward_descriptor_;
  metadata.reflection = DoQuestAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoQuestAward

// optional uint64 heroId = 1;
void DoQuestAward::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DoQuestAward::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.DoQuestAward.heroId)
  return heroid_;
}
void DoQuestAward::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.DoQuestAward.heroId)
}

// repeated uint32 awardType = 2;
int DoQuestAward::awardtype_size() const {
  return awardtype_.size();
}
void DoQuestAward::clear_awardtype() {
  awardtype_.Clear();
}
::google::protobuf::uint32 DoQuestAward::awardtype(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.DoQuestAward.awardType)
  return awardtype_.Get(index);
}
void DoQuestAward::set_awardtype(int index, ::google::protobuf::uint32 value) {
  awardtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.DoQuestAward.awardType)
}
void DoQuestAward::add_awardtype(::google::protobuf::uint32 value) {
  awardtype_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.DoQuestAward.awardType)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DoQuestAward::awardtype() const {
  // @@protoc_insertion_point(field_list:NetMsg.DoQuestAward.awardType)
  return awardtype_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DoQuestAward::mutable_awardtype() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.DoQuestAward.awardType)
  return &awardtype_;
}

// repeated uint32 awardnum = 3;
int DoQuestAward::awardnum_size() const {
  return awardnum_.size();
}
void DoQuestAward::clear_awardnum() {
  awardnum_.Clear();
}
::google::protobuf::uint32 DoQuestAward::awardnum(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.DoQuestAward.awardnum)
  return awardnum_.Get(index);
}
void DoQuestAward::set_awardnum(int index, ::google::protobuf::uint32 value) {
  awardnum_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.DoQuestAward.awardnum)
}
void DoQuestAward::add_awardnum(::google::protobuf::uint32 value) {
  awardnum_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.DoQuestAward.awardnum)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DoQuestAward::awardnum() const {
  // @@protoc_insertion_point(field_list:NetMsg.DoQuestAward.awardnum)
  return awardnum_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DoQuestAward::mutable_awardnum() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.DoQuestAward.awardnum)
  return &awardnum_;
}

inline const DoQuestAward* DoQuestAward::internal_default_instance() {
  return &DoQuestAward_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoQuestAck::kQuestIdFieldNumber;
const int DoQuestAck::kErrorFieldNumber;
const int DoQuestAck::kEffectFieldNumber;
const int DoQuestAck::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoQuestAck::DoQuestAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.DoQuestAck)
}

void DoQuestAck::InitAsDefaultInstance() {
}

DoQuestAck::DoQuestAck(const DoQuestAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.DoQuestAck)
}

void DoQuestAck::SharedCtor() {
  ::memset(&questid_, 0, reinterpret_cast<char*>(&effect_) -
    reinterpret_cast<char*>(&questid_) + sizeof(effect_));
  _cached_size_ = 0;
}

DoQuestAck::~DoQuestAck() {
  // @@protoc_insertion_point(destructor:NetMsg.DoQuestAck)
  SharedDtor();
}

void DoQuestAck::SharedDtor() {
}

void DoQuestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoQuestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoQuestAck_descriptor_;
}

const DoQuestAck& DoQuestAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DoQuestAck> DoQuestAck_default_instance_;

DoQuestAck* DoQuestAck::New(::google::protobuf::Arena* arena) const {
  DoQuestAck* n = new DoQuestAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoQuestAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.DoQuestAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DoQuestAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DoQuestAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(questid_, effect_);

#undef ZR_HELPER_
#undef ZR_

  award_.Clear();
}

bool DoQuestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.DoQuestAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 questId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effect;
        break;
      }

      // optional uint32 effect = 3;
      case 3: {
        if (tag == 24) {
         parse_effect:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_award;
        break;
      }

      // repeated .NetMsg.DoQuestAward award = 4;
      case 4: {
        if (tag == 34) {
         parse_award:
          DO_(input->IncrementRecursionDepth());
         parse_loop_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_award;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.DoQuestAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.DoQuestAck)
  return false;
#undef DO_
}

void DoQuestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.DoQuestAck)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->questid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // optional uint32 effect = 3;
  if (this->effect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effect(), output);
  }

  // repeated .NetMsg.DoQuestAward award = 4;
  for (unsigned int i = 0, n = this->award_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->award(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.DoQuestAck)
}

::google::protobuf::uint8* DoQuestAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.DoQuestAck)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->questid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // optional uint32 effect = 3;
  if (this->effect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effect(), target);
  }

  // repeated .NetMsg.DoQuestAward award = 4;
  for (unsigned int i = 0, n = this->award_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->award(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.DoQuestAck)
  return target;
}

size_t DoQuestAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.DoQuestAck)
  size_t total_size = 0;

  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->questid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint32 effect = 3;
  if (this->effect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect());
  }

  // repeated .NetMsg.DoQuestAward award = 4;
  {
    unsigned int count = this->award_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoQuestAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.DoQuestAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DoQuestAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoQuestAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.DoQuestAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.DoQuestAck)
    UnsafeMergeFrom(*source);
  }
}

void DoQuestAck::MergeFrom(const DoQuestAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.DoQuestAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DoQuestAck::UnsafeMergeFrom(const DoQuestAck& from) {
  GOOGLE_DCHECK(&from != this);
  award_.MergeFrom(from.award_);
  if (from.questid() != 0) {
    set_questid(from.questid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.effect() != 0) {
    set_effect(from.effect());
  }
}

void DoQuestAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.DoQuestAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoQuestAck::CopyFrom(const DoQuestAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.DoQuestAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DoQuestAck::IsInitialized() const {

  return true;
}

void DoQuestAck::Swap(DoQuestAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoQuestAck::InternalSwap(DoQuestAck* other) {
  std::swap(questid_, other->questid_);
  std::swap(error_, other->error_);
  std::swap(effect_, other->effect_);
  award_.UnsafeArenaSwap(&other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoQuestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoQuestAck_descriptor_;
  metadata.reflection = DoQuestAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoQuestAck

// optional uint64 questId = 1;
void DoQuestAck::clear_questid() {
  questid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DoQuestAck::questid() const {
  // @@protoc_insertion_point(field_get:NetMsg.DoQuestAck.questId)
  return questid_;
}
void DoQuestAck::set_questid(::google::protobuf::uint64 value) {
  
  questid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.DoQuestAck.questId)
}

// optional uint32 error = 2;
void DoQuestAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 DoQuestAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.DoQuestAck.error)
  return error_;
}
void DoQuestAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.DoQuestAck.error)
}

// optional uint32 effect = 3;
void DoQuestAck::clear_effect() {
  effect_ = 0u;
}
::google::protobuf::uint32 DoQuestAck::effect() const {
  // @@protoc_insertion_point(field_get:NetMsg.DoQuestAck.effect)
  return effect_;
}
void DoQuestAck::set_effect(::google::protobuf::uint32 value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.DoQuestAck.effect)
}

// repeated .NetMsg.DoQuestAward award = 4;
int DoQuestAck::award_size() const {
  return award_.size();
}
void DoQuestAck::clear_award() {
  award_.Clear();
}
const ::NetMsg::DoQuestAward& DoQuestAck::award(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.DoQuestAck.award)
  return award_.Get(index);
}
::NetMsg::DoQuestAward* DoQuestAck::mutable_award(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.DoQuestAck.award)
  return award_.Mutable(index);
}
::NetMsg::DoQuestAward* DoQuestAck::add_award() {
  // @@protoc_insertion_point(field_add:NetMsg.DoQuestAck.award)
  return award_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::DoQuestAward >*
DoQuestAck::mutable_award() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.DoQuestAck.award)
  return &award_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::DoQuestAward >&
DoQuestAck::award() const {
  // @@protoc_insertion_point(field_list:NetMsg.DoQuestAck.award)
  return award_;
}

inline const DoQuestAck* DoQuestAck::internal_default_instance() {
  return &DoQuestAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSubmitQuest::kQuestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSubmitQuest::ReqSubmitQuest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqSubmitQuest)
}

void ReqSubmitQuest::InitAsDefaultInstance() {
}

ReqSubmitQuest::ReqSubmitQuest(const ReqSubmitQuest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqSubmitQuest)
}

void ReqSubmitQuest::SharedCtor() {
  questid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqSubmitQuest::~ReqSubmitQuest() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqSubmitQuest)
  SharedDtor();
}

void ReqSubmitQuest::SharedDtor() {
}

void ReqSubmitQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubmitQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubmitQuest_descriptor_;
}

const ReqSubmitQuest& ReqSubmitQuest::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqSubmitQuest> ReqSubmitQuest_default_instance_;

ReqSubmitQuest* ReqSubmitQuest::New(::google::protobuf::Arena* arena) const {
  ReqSubmitQuest* n = new ReqSubmitQuest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSubmitQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqSubmitQuest)
  questid_ = GOOGLE_ULONGLONG(0);
}

bool ReqSubmitQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqSubmitQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 questId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqSubmitQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqSubmitQuest)
  return false;
#undef DO_
}

void ReqSubmitQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqSubmitQuest)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->questid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqSubmitQuest)
}

::google::protobuf::uint8* ReqSubmitQuest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqSubmitQuest)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->questid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqSubmitQuest)
  return target;
}

size_t ReqSubmitQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqSubmitQuest)
  size_t total_size = 0;

  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->questid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubmitQuest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqSubmitQuest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqSubmitQuest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSubmitQuest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqSubmitQuest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqSubmitQuest)
    UnsafeMergeFrom(*source);
  }
}

void ReqSubmitQuest::MergeFrom(const ReqSubmitQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqSubmitQuest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqSubmitQuest::UnsafeMergeFrom(const ReqSubmitQuest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.questid() != 0) {
    set_questid(from.questid());
  }
}

void ReqSubmitQuest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqSubmitQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubmitQuest::CopyFrom(const ReqSubmitQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqSubmitQuest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqSubmitQuest::IsInitialized() const {

  return true;
}

void ReqSubmitQuest::Swap(ReqSubmitQuest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSubmitQuest::InternalSwap(ReqSubmitQuest* other) {
  std::swap(questid_, other->questid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSubmitQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubmitQuest_descriptor_;
  metadata.reflection = ReqSubmitQuest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSubmitQuest

// optional uint64 questId = 1;
void ReqSubmitQuest::clear_questid() {
  questid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqSubmitQuest::questid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqSubmitQuest.questId)
  return questid_;
}
void ReqSubmitQuest::set_questid(::google::protobuf::uint64 value) {
  
  questid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqSubmitQuest.questId)
}

inline const ReqSubmitQuest* ReqSubmitQuest::internal_default_instance() {
  return &ReqSubmitQuest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitQuestAck::kErrorFieldNumber;
const int SubmitQuestAck::kQuestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitQuestAck::SubmitQuestAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SubmitQuestAck)
}

void SubmitQuestAck::InitAsDefaultInstance() {
}

SubmitQuestAck::SubmitQuestAck(const SubmitQuestAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SubmitQuestAck)
}

void SubmitQuestAck::SharedCtor() {
  ::memset(&questid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&questid_) + sizeof(error_));
  _cached_size_ = 0;
}

SubmitQuestAck::~SubmitQuestAck() {
  // @@protoc_insertion_point(destructor:NetMsg.SubmitQuestAck)
  SharedDtor();
}

void SubmitQuestAck::SharedDtor() {
}

void SubmitQuestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitQuestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitQuestAck_descriptor_;
}

const SubmitQuestAck& SubmitQuestAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubmitQuestAck> SubmitQuestAck_default_instance_;

SubmitQuestAck* SubmitQuestAck::New(::google::protobuf::Arena* arena) const {
  SubmitQuestAck* n = new SubmitQuestAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmitQuestAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SubmitQuestAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubmitQuestAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubmitQuestAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(questid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool SubmitQuestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SubmitQuestAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questId;
        break;
      }

      // optional uint64 questId = 2;
      case 2: {
        if (tag == 16) {
         parse_questId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SubmitQuestAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SubmitQuestAck)
  return false;
#undef DO_
}

void SubmitQuestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SubmitQuestAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint64 questId = 2;
  if (this->questid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->questid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SubmitQuestAck)
}

::google::protobuf::uint8* SubmitQuestAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SubmitQuestAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint64 questId = 2;
  if (this->questid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->questid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SubmitQuestAck)
  return target;
}

size_t SubmitQuestAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SubmitQuestAck)
  size_t total_size = 0;

  // optional uint32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint64 questId = 2;
  if (this->questid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->questid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitQuestAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SubmitQuestAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubmitQuestAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitQuestAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SubmitQuestAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SubmitQuestAck)
    UnsafeMergeFrom(*source);
  }
}

void SubmitQuestAck::MergeFrom(const SubmitQuestAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SubmitQuestAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubmitQuestAck::UnsafeMergeFrom(const SubmitQuestAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.questid() != 0) {
    set_questid(from.questid());
  }
}

void SubmitQuestAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SubmitQuestAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitQuestAck::CopyFrom(const SubmitQuestAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SubmitQuestAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubmitQuestAck::IsInitialized() const {

  return true;
}

void SubmitQuestAck::Swap(SubmitQuestAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitQuestAck::InternalSwap(SubmitQuestAck* other) {
  std::swap(error_, other->error_);
  std::swap(questid_, other->questid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmitQuestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitQuestAck_descriptor_;
  metadata.reflection = SubmitQuestAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmitQuestAck

// optional uint32 error = 1;
void SubmitQuestAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 SubmitQuestAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.SubmitQuestAck.error)
  return error_;
}
void SubmitQuestAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SubmitQuestAck.error)
}

// optional uint64 questId = 2;
void SubmitQuestAck::clear_questid() {
  questid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SubmitQuestAck::questid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SubmitQuestAck.questId)
  return questid_;
}
void SubmitQuestAck::set_questid(::google::protobuf::uint64 value) {
  
  questid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SubmitQuestAck.questId)
}

inline const SubmitQuestAck* SubmitQuestAck::internal_default_instance() {
  return &SubmitQuestAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAcceptQuest::kQuestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAcceptQuest::ReqAcceptQuest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqAcceptQuest)
}

void ReqAcceptQuest::InitAsDefaultInstance() {
}

ReqAcceptQuest::ReqAcceptQuest(const ReqAcceptQuest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqAcceptQuest)
}

void ReqAcceptQuest::SharedCtor() {
  questid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqAcceptQuest::~ReqAcceptQuest() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqAcceptQuest)
  SharedDtor();
}

void ReqAcceptQuest::SharedDtor() {
}

void ReqAcceptQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAcceptQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAcceptQuest_descriptor_;
}

const ReqAcceptQuest& ReqAcceptQuest::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqAcceptQuest> ReqAcceptQuest_default_instance_;

ReqAcceptQuest* ReqAcceptQuest::New(::google::protobuf::Arena* arena) const {
  ReqAcceptQuest* n = new ReqAcceptQuest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAcceptQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqAcceptQuest)
  questid_ = GOOGLE_ULONGLONG(0);
}

bool ReqAcceptQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqAcceptQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 questId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqAcceptQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqAcceptQuest)
  return false;
#undef DO_
}

void ReqAcceptQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqAcceptQuest)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->questid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqAcceptQuest)
}

::google::protobuf::uint8* ReqAcceptQuest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqAcceptQuest)
  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->questid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqAcceptQuest)
  return target;
}

size_t ReqAcceptQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqAcceptQuest)
  size_t total_size = 0;

  // optional uint64 questId = 1;
  if (this->questid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->questid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAcceptQuest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqAcceptQuest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqAcceptQuest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAcceptQuest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqAcceptQuest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqAcceptQuest)
    UnsafeMergeFrom(*source);
  }
}

void ReqAcceptQuest::MergeFrom(const ReqAcceptQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqAcceptQuest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqAcceptQuest::UnsafeMergeFrom(const ReqAcceptQuest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.questid() != 0) {
    set_questid(from.questid());
  }
}

void ReqAcceptQuest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqAcceptQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptQuest::CopyFrom(const ReqAcceptQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqAcceptQuest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqAcceptQuest::IsInitialized() const {

  return true;
}

void ReqAcceptQuest::Swap(ReqAcceptQuest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAcceptQuest::InternalSwap(ReqAcceptQuest* other) {
  std::swap(questid_, other->questid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAcceptQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAcceptQuest_descriptor_;
  metadata.reflection = ReqAcceptQuest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAcceptQuest

// optional uint64 questId = 1;
void ReqAcceptQuest::clear_questid() {
  questid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqAcceptQuest::questid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAcceptQuest.questId)
  return questid_;
}
void ReqAcceptQuest::set_questid(::google::protobuf::uint64 value) {
  
  questid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAcceptQuest.questId)
}

inline const ReqAcceptQuest* ReqAcceptQuest::internal_default_instance() {
  return &ReqAcceptQuest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptQuestAck::kErrorFieldNumber;
const int AcceptQuestAck::kQuestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptQuestAck::AcceptQuestAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AcceptQuestAck)
}

void AcceptQuestAck::InitAsDefaultInstance() {
}

AcceptQuestAck::AcceptQuestAck(const AcceptQuestAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AcceptQuestAck)
}

void AcceptQuestAck::SharedCtor() {
  ::memset(&questid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&questid_) + sizeof(error_));
  _cached_size_ = 0;
}

AcceptQuestAck::~AcceptQuestAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AcceptQuestAck)
  SharedDtor();
}

void AcceptQuestAck::SharedDtor() {
}

void AcceptQuestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptQuestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptQuestAck_descriptor_;
}

const AcceptQuestAck& AcceptQuestAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AcceptQuestAck> AcceptQuestAck_default_instance_;

AcceptQuestAck* AcceptQuestAck::New(::google::protobuf::Arena* arena) const {
  AcceptQuestAck* n = new AcceptQuestAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptQuestAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AcceptQuestAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AcceptQuestAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AcceptQuestAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(questid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool AcceptQuestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AcceptQuestAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questId;
        break;
      }

      // optional uint64 questId = 2;
      case 2: {
        if (tag == 16) {
         parse_questId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AcceptQuestAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AcceptQuestAck)
  return false;
#undef DO_
}

void AcceptQuestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AcceptQuestAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint64 questId = 2;
  if (this->questid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->questid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AcceptQuestAck)
}

::google::protobuf::uint8* AcceptQuestAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AcceptQuestAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint64 questId = 2;
  if (this->questid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->questid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AcceptQuestAck)
  return target;
}

size_t AcceptQuestAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AcceptQuestAck)
  size_t total_size = 0;

  // optional uint32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint64 questId = 2;
  if (this->questid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->questid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptQuestAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AcceptQuestAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcceptQuestAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptQuestAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AcceptQuestAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AcceptQuestAck)
    UnsafeMergeFrom(*source);
  }
}

void AcceptQuestAck::MergeFrom(const AcceptQuestAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AcceptQuestAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AcceptQuestAck::UnsafeMergeFrom(const AcceptQuestAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.questid() != 0) {
    set_questid(from.questid());
  }
}

void AcceptQuestAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AcceptQuestAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptQuestAck::CopyFrom(const AcceptQuestAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AcceptQuestAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AcceptQuestAck::IsInitialized() const {

  return true;
}

void AcceptQuestAck::Swap(AcceptQuestAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptQuestAck::InternalSwap(AcceptQuestAck* other) {
  std::swap(error_, other->error_);
  std::swap(questid_, other->questid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptQuestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptQuestAck_descriptor_;
  metadata.reflection = AcceptQuestAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptQuestAck

// optional uint32 error = 1;
void AcceptQuestAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 AcceptQuestAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.AcceptQuestAck.error)
  return error_;
}
void AcceptQuestAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AcceptQuestAck.error)
}

// optional uint64 questId = 2;
void AcceptQuestAck::clear_questid() {
  questid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AcceptQuestAck::questid() const {
  // @@protoc_insertion_point(field_get:NetMsg.AcceptQuestAck.questId)
  return questid_;
}
void AcceptQuestAck::set_questid(::google::protobuf::uint64 value) {
  
  questid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AcceptQuestAck.questId)
}

inline const AcceptQuestAck* AcceptQuestAck::internal_default_instance() {
  return &AcceptQuestAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAddHero::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAddHero::ReqAddHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqAddHero)
}

void ReqAddHero::InitAsDefaultInstance() {
}

ReqAddHero::ReqAddHero(const ReqAddHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqAddHero)
}

void ReqAddHero::SharedCtor() {
  heroid_ = 0u;
  _cached_size_ = 0;
}

ReqAddHero::~ReqAddHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqAddHero)
  SharedDtor();
}

void ReqAddHero::SharedDtor() {
}

void ReqAddHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAddHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAddHero_descriptor_;
}

const ReqAddHero& ReqAddHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqAddHero> ReqAddHero_default_instance_;

ReqAddHero* ReqAddHero::New(::google::protobuf::Arena* arena) const {
  ReqAddHero* n = new ReqAddHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAddHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqAddHero)
  heroid_ = 0u;
}

bool ReqAddHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqAddHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqAddHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqAddHero)
  return false;
#undef DO_
}

void ReqAddHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqAddHero)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqAddHero)
}

::google::protobuf::uint8* ReqAddHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqAddHero)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqAddHero)
  return target;
}

size_t ReqAddHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqAddHero)
  size_t total_size = 0;

  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAddHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqAddHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqAddHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAddHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqAddHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqAddHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqAddHero::MergeFrom(const ReqAddHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqAddHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqAddHero::UnsafeMergeFrom(const ReqAddHero& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void ReqAddHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqAddHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddHero::CopyFrom(const ReqAddHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqAddHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqAddHero::IsInitialized() const {

  return true;
}

void ReqAddHero::Swap(ReqAddHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAddHero::InternalSwap(ReqAddHero* other) {
  std::swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAddHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAddHero_descriptor_;
  metadata.reflection = ReqAddHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAddHero

// optional uint32 heroId = 1;
void ReqAddHero::clear_heroid() {
  heroid_ = 0u;
}
::google::protobuf::uint32 ReqAddHero::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAddHero.heroId)
  return heroid_;
}
void ReqAddHero::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAddHero.heroId)
}

inline const ReqAddHero* ReqAddHero::internal_default_instance() {
  return &ReqAddHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddHeroAck::kErrorFieldNumber;
const int AddHeroAck::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddHeroAck::AddHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AddHeroAck)
}

void AddHeroAck::InitAsDefaultInstance() {
}

AddHeroAck::AddHeroAck(const AddHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AddHeroAck)
}

void AddHeroAck::SharedCtor() {
  ::memset(&error_, 0, reinterpret_cast<char*>(&heroid_) -
    reinterpret_cast<char*>(&error_) + sizeof(heroid_));
  _cached_size_ = 0;
}

AddHeroAck::~AddHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AddHeroAck)
  SharedDtor();
}

void AddHeroAck::SharedDtor() {
}

void AddHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddHeroAck_descriptor_;
}

const AddHeroAck& AddHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddHeroAck> AddHeroAck_default_instance_;

AddHeroAck* AddHeroAck::New(::google::protobuf::Arena* arena) const {
  AddHeroAck* n = new AddHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AddHeroAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddHeroAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddHeroAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(error_, heroid_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AddHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroId;
        break;
      }

      // optional uint32 heroId = 2;
      case 2: {
        if (tag == 16) {
         parse_heroId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AddHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AddHeroAck)
  return false;
#undef DO_
}

void AddHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AddHeroAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint32 heroId = 2;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AddHeroAck)
}

::google::protobuf::uint8* AddHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AddHeroAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint32 heroId = 2;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AddHeroAck)
  return target;
}

size_t AddHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AddHeroAck)
  size_t total_size = 0;

  // optional uint32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint32 heroId = 2;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AddHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AddHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AddHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void AddHeroAck::MergeFrom(const AddHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AddHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddHeroAck::UnsafeMergeFrom(const AddHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void AddHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AddHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddHeroAck::CopyFrom(const AddHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AddHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddHeroAck::IsInitialized() const {

  return true;
}

void AddHeroAck::Swap(AddHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddHeroAck::InternalSwap(AddHeroAck* other) {
  std::swap(error_, other->error_);
  std::swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddHeroAck_descriptor_;
  metadata.reflection = AddHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddHeroAck

// optional uint32 error = 1;
void AddHeroAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 AddHeroAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.AddHeroAck.error)
  return error_;
}
void AddHeroAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AddHeroAck.error)
}

// optional uint32 heroId = 2;
void AddHeroAck::clear_heroid() {
  heroid_ = 0u;
}
::google::protobuf::uint32 AddHeroAck::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.AddHeroAck.heroId)
  return heroid_;
}
void AddHeroAck::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AddHeroAck.heroId)
}

inline const AddHeroAck* AddHeroAck::internal_default_instance() {
  return &AddHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqClearHeroCD::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqClearHeroCD::ReqClearHeroCD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqClearHeroCD)
}

void ReqClearHeroCD::InitAsDefaultInstance() {
}

ReqClearHeroCD::ReqClearHeroCD(const ReqClearHeroCD& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqClearHeroCD)
}

void ReqClearHeroCD::SharedCtor() {
  heroid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqClearHeroCD::~ReqClearHeroCD() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqClearHeroCD)
  SharedDtor();
}

void ReqClearHeroCD::SharedDtor() {
}

void ReqClearHeroCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClearHeroCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClearHeroCD_descriptor_;
}

const ReqClearHeroCD& ReqClearHeroCD::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqClearHeroCD> ReqClearHeroCD_default_instance_;

ReqClearHeroCD* ReqClearHeroCD::New(::google::protobuf::Arena* arena) const {
  ReqClearHeroCD* n = new ReqClearHeroCD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqClearHeroCD::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqClearHeroCD)
  heroid_ = GOOGLE_ULONGLONG(0);
}

bool ReqClearHeroCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqClearHeroCD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqClearHeroCD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqClearHeroCD)
  return false;
#undef DO_
}

void ReqClearHeroCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqClearHeroCD)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqClearHeroCD)
}

::google::protobuf::uint8* ReqClearHeroCD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqClearHeroCD)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqClearHeroCD)
  return target;
}

size_t ReqClearHeroCD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqClearHeroCD)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClearHeroCD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqClearHeroCD)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqClearHeroCD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqClearHeroCD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqClearHeroCD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqClearHeroCD)
    UnsafeMergeFrom(*source);
  }
}

void ReqClearHeroCD::MergeFrom(const ReqClearHeroCD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqClearHeroCD)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqClearHeroCD::UnsafeMergeFrom(const ReqClearHeroCD& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void ReqClearHeroCD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqClearHeroCD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClearHeroCD::CopyFrom(const ReqClearHeroCD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqClearHeroCD)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqClearHeroCD::IsInitialized() const {

  return true;
}

void ReqClearHeroCD::Swap(ReqClearHeroCD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqClearHeroCD::InternalSwap(ReqClearHeroCD* other) {
  std::swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqClearHeroCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClearHeroCD_descriptor_;
  metadata.reflection = ReqClearHeroCD_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqClearHeroCD

// optional uint64 heroId = 1;
void ReqClearHeroCD::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqClearHeroCD::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqClearHeroCD.heroId)
  return heroid_;
}
void ReqClearHeroCD::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqClearHeroCD.heroId)
}

inline const ReqClearHeroCD* ReqClearHeroCD::internal_default_instance() {
  return &ReqClearHeroCD_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearHeroCDAck::kErrorFieldNumber;
const int ClearHeroCDAck::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearHeroCDAck::ClearHeroCDAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClearHeroCDAck)
}

void ClearHeroCDAck::InitAsDefaultInstance() {
}

ClearHeroCDAck::ClearHeroCDAck(const ClearHeroCDAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClearHeroCDAck)
}

void ClearHeroCDAck::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(error_));
  _cached_size_ = 0;
}

ClearHeroCDAck::~ClearHeroCDAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ClearHeroCDAck)
  SharedDtor();
}

void ClearHeroCDAck::SharedDtor() {
}

void ClearHeroCDAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearHeroCDAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearHeroCDAck_descriptor_;
}

const ClearHeroCDAck& ClearHeroCDAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClearHeroCDAck> ClearHeroCDAck_default_instance_;

ClearHeroCDAck* ClearHeroCDAck::New(::google::protobuf::Arena* arena) const {
  ClearHeroCDAck* n = new ClearHeroCDAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearHeroCDAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClearHeroCDAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClearHeroCDAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClearHeroCDAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool ClearHeroCDAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClearHeroCDAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroId;
        break;
      }

      // optional uint64 heroId = 2;
      case 2: {
        if (tag == 16) {
         parse_heroId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClearHeroCDAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClearHeroCDAck)
  return false;
#undef DO_
}

void ClearHeroCDAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClearHeroCDAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint64 heroId = 2;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->heroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClearHeroCDAck)
}

::google::protobuf::uint8* ClearHeroCDAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClearHeroCDAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint64 heroId = 2;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->heroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClearHeroCDAck)
  return target;
}

size_t ClearHeroCDAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClearHeroCDAck)
  size_t total_size = 0;

  // optional uint32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint64 heroId = 2;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearHeroCDAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClearHeroCDAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClearHeroCDAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearHeroCDAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClearHeroCDAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClearHeroCDAck)
    UnsafeMergeFrom(*source);
  }
}

void ClearHeroCDAck::MergeFrom(const ClearHeroCDAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClearHeroCDAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClearHeroCDAck::UnsafeMergeFrom(const ClearHeroCDAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void ClearHeroCDAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClearHeroCDAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearHeroCDAck::CopyFrom(const ClearHeroCDAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClearHeroCDAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClearHeroCDAck::IsInitialized() const {

  return true;
}

void ClearHeroCDAck::Swap(ClearHeroCDAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearHeroCDAck::InternalSwap(ClearHeroCDAck* other) {
  std::swap(error_, other->error_);
  std::swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearHeroCDAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearHeroCDAck_descriptor_;
  metadata.reflection = ClearHeroCDAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearHeroCDAck

// optional uint32 error = 1;
void ClearHeroCDAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 ClearHeroCDAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClearHeroCDAck.error)
  return error_;
}
void ClearHeroCDAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClearHeroCDAck.error)
}

// optional uint64 heroId = 2;
void ClearHeroCDAck::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClearHeroCDAck::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClearHeroCDAck.heroId)
  return heroid_;
}
void ClearHeroCDAck::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClearHeroCDAck.heroId)
}

inline const ClearHeroCDAck* ClearHeroCDAck::internal_default_instance() {
  return &ClearHeroCDAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefreshQuestAck::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshQuestAck::RefreshQuestAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RefreshQuestAck)
}

void RefreshQuestAck::InitAsDefaultInstance() {
}

RefreshQuestAck::RefreshQuestAck(const RefreshQuestAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RefreshQuestAck)
}

void RefreshQuestAck::SharedCtor() {
  success_ = false;
  _cached_size_ = 0;
}

RefreshQuestAck::~RefreshQuestAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RefreshQuestAck)
  SharedDtor();
}

void RefreshQuestAck::SharedDtor() {
}

void RefreshQuestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshQuestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshQuestAck_descriptor_;
}

const RefreshQuestAck& RefreshQuestAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RefreshQuestAck> RefreshQuestAck_default_instance_;

RefreshQuestAck* RefreshQuestAck::New(::google::protobuf::Arena* arena) const {
  RefreshQuestAck* n = new RefreshQuestAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefreshQuestAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RefreshQuestAck)
  success_ = false;
}

bool RefreshQuestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RefreshQuestAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RefreshQuestAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RefreshQuestAck)
  return false;
#undef DO_
}

void RefreshQuestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RefreshQuestAck)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RefreshQuestAck)
}

::google::protobuf::uint8* RefreshQuestAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RefreshQuestAck)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RefreshQuestAck)
  return target;
}

size_t RefreshQuestAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RefreshQuestAck)
  size_t total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshQuestAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RefreshQuestAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RefreshQuestAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefreshQuestAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RefreshQuestAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RefreshQuestAck)
    UnsafeMergeFrom(*source);
  }
}

void RefreshQuestAck::MergeFrom(const RefreshQuestAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RefreshQuestAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RefreshQuestAck::UnsafeMergeFrom(const RefreshQuestAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void RefreshQuestAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RefreshQuestAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshQuestAck::CopyFrom(const RefreshQuestAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RefreshQuestAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RefreshQuestAck::IsInitialized() const {

  return true;
}

void RefreshQuestAck::Swap(RefreshQuestAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshQuestAck::InternalSwap(RefreshQuestAck* other) {
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefreshQuestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshQuestAck_descriptor_;
  metadata.reflection = RefreshQuestAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RefreshQuestAck

// optional bool success = 1;
void RefreshQuestAck::clear_success() {
  success_ = false;
}
bool RefreshQuestAck::success() const {
  // @@protoc_insertion_point(field_get:NetMsg.RefreshQuestAck.success)
  return success_;
}
void RefreshQuestAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RefreshQuestAck.success)
}

inline const RefreshQuestAck* RefreshQuestAck::internal_default_instance() {
  return &RefreshQuestAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleEnemy::kIdFieldNumber;
const int BattleEnemy::kStarFieldNumber;
const int BattleEnemy::kPromotionFieldNumber;
const int BattleEnemy::kLevelFieldNumber;
const int BattleEnemy::kFormationFieldNumber;
const int BattleEnemy::kSkillFieldNumber;
const int BattleEnemy::kSkillLevelFieldNumber;
const int BattleEnemy::kHeroHpFieldNumber;
const int BattleEnemy::kSoldierHpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleEnemy::BattleEnemy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BattleEnemy)
}

void BattleEnemy::InitAsDefaultInstance() {
}

BattleEnemy::BattleEnemy(const BattleEnemy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BattleEnemy)
}

void BattleEnemy::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&soldierhp_) -
    reinterpret_cast<char*>(&id_) + sizeof(soldierhp_));
  _cached_size_ = 0;
}

BattleEnemy::~BattleEnemy() {
  // @@protoc_insertion_point(destructor:NetMsg.BattleEnemy)
  SharedDtor();
}

void BattleEnemy::SharedDtor() {
}

void BattleEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleEnemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleEnemy_descriptor_;
}

const BattleEnemy& BattleEnemy::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BattleEnemy> BattleEnemy_default_instance_;

BattleEnemy* BattleEnemy::New(::google::protobuf::Arena* arena) const {
  BattleEnemy* n = new BattleEnemy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattleEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BattleEnemy)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BattleEnemy, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BattleEnemy*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, herohp_);
  soldierhp_ = 0;

#undef ZR_HELPER_
#undef ZR_

  skill_.Clear();
  skilllevel_.Clear();
}

bool BattleEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BattleEnemy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_promotion;
        break;
      }

      // optional uint32 promotion = 3;
      case 3: {
        if (tag == 24) {
         parse_promotion:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promotion_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_formation;
        break;
      }

      // optional uint32 formation = 5;
      case 5: {
        if (tag == 40) {
         parse_formation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        break;
      }

      // repeated uint32 skill = 6;
      case 6: {
        if (tag == 50) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_skillLevel;
        break;
      }

      // repeated uint32 skillLevel = 7;
      case 7: {
        if (tag == 58) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllevel())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_skilllevel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_heroHp;
        break;
      }

      // optional float heroHp = 8;
      case 8: {
        if (tag == 69) {
         parse_heroHp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &herohp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_soldierHp;
        break;
      }

      // optional float soldierHp = 9;
      case 9: {
        if (tag == 77) {
         parse_soldierHp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &soldierhp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BattleEnemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BattleEnemy)
  return false;
#undef DO_
}

void BattleEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BattleEnemy)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // optional uint32 promotion = 3;
  if (this->promotion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->promotion(), output);
  }

  // optional uint32 level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 formation = 5;
  if (this->formation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->formation(), output);
  }

  // repeated uint32 skill = 6;
  if (this->skill_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_skill_cached_byte_size_);
  }
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill(i), output);
  }

  // repeated uint32 skillLevel = 7;
  if (this->skilllevel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_skilllevel_cached_byte_size_);
  }
  for (int i = 0; i < this->skilllevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skilllevel(i), output);
  }

  // optional float heroHp = 8;
  if (this->herohp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->herohp(), output);
  }

  // optional float soldierHp = 9;
  if (this->soldierhp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->soldierhp(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BattleEnemy)
}

::google::protobuf::uint8* BattleEnemy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BattleEnemy)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // optional uint32 promotion = 3;
  if (this->promotion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->promotion(), target);
  }

  // optional uint32 level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 formation = 5;
  if (this->formation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->formation(), target);
  }

  // repeated uint32 skill = 6;
  if (this->skill_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _skill_cached_byte_size_, target);
  }
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill(i), target);
  }

  // repeated uint32 skillLevel = 7;
  if (this->skilllevel_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _skilllevel_cached_byte_size_, target);
  }
  for (int i = 0; i < this->skilllevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skilllevel(i), target);
  }

  // optional float heroHp = 8;
  if (this->herohp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->herohp(), target);
  }

  // optional float soldierHp = 9;
  if (this->soldierhp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->soldierhp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BattleEnemy)
  return target;
}

size_t BattleEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BattleEnemy)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->star());
  }

  // optional uint32 promotion = 3;
  if (this->promotion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->promotion());
  }

  // optional uint32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 formation = 5;
  if (this->formation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->formation());
  }

  // optional float heroHp = 8;
  if (this->herohp() != 0) {
    total_size += 1 + 4;
  }

  // optional float soldierHp = 9;
  if (this->soldierhp() != 0) {
    total_size += 1 + 4;
  }

  // repeated uint32 skill = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->skill_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skill(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 skillLevel = 7;
  {
    size_t data_size = 0;
    unsigned int count = this->skilllevel_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllevel(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skilllevel_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleEnemy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BattleEnemy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BattleEnemy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleEnemy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BattleEnemy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BattleEnemy)
    UnsafeMergeFrom(*source);
  }
}

void BattleEnemy::MergeFrom(const BattleEnemy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BattleEnemy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BattleEnemy::UnsafeMergeFrom(const BattleEnemy& from) {
  GOOGLE_DCHECK(&from != this);
  skill_.UnsafeMergeFrom(from.skill_);
  skilllevel_.UnsafeMergeFrom(from.skilllevel_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.star() != 0) {
    set_star(from.star());
  }
  if (from.promotion() != 0) {
    set_promotion(from.promotion());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.formation() != 0) {
    set_formation(from.formation());
  }
  if (from.herohp() != 0) {
    set_herohp(from.herohp());
  }
  if (from.soldierhp() != 0) {
    set_soldierhp(from.soldierhp());
  }
}

void BattleEnemy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BattleEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEnemy::CopyFrom(const BattleEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BattleEnemy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BattleEnemy::IsInitialized() const {

  return true;
}

void BattleEnemy::Swap(BattleEnemy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleEnemy::InternalSwap(BattleEnemy* other) {
  std::swap(id_, other->id_);
  std::swap(star_, other->star_);
  std::swap(promotion_, other->promotion_);
  std::swap(level_, other->level_);
  std::swap(formation_, other->formation_);
  skill_.UnsafeArenaSwap(&other->skill_);
  skilllevel_.UnsafeArenaSwap(&other->skilllevel_);
  std::swap(herohp_, other->herohp_);
  std::swap(soldierhp_, other->soldierhp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattleEnemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleEnemy_descriptor_;
  metadata.reflection = BattleEnemy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattleEnemy

// optional uint32 id = 1;
void BattleEnemy::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 BattleEnemy::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.id)
  return id_;
}
void BattleEnemy::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.id)
}

// optional uint32 star = 2;
void BattleEnemy::clear_star() {
  star_ = 0u;
}
::google::protobuf::uint32 BattleEnemy::star() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.star)
  return star_;
}
void BattleEnemy::set_star(::google::protobuf::uint32 value) {
  
  star_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.star)
}

// optional uint32 promotion = 3;
void BattleEnemy::clear_promotion() {
  promotion_ = 0u;
}
::google::protobuf::uint32 BattleEnemy::promotion() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.promotion)
  return promotion_;
}
void BattleEnemy::set_promotion(::google::protobuf::uint32 value) {
  
  promotion_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.promotion)
}

// optional uint32 level = 4;
void BattleEnemy::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 BattleEnemy::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.level)
  return level_;
}
void BattleEnemy::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.level)
}

// optional uint32 formation = 5;
void BattleEnemy::clear_formation() {
  formation_ = 0u;
}
::google::protobuf::uint32 BattleEnemy::formation() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.formation)
  return formation_;
}
void BattleEnemy::set_formation(::google::protobuf::uint32 value) {
  
  formation_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.formation)
}

// repeated uint32 skill = 6;
int BattleEnemy::skill_size() const {
  return skill_.size();
}
void BattleEnemy::clear_skill() {
  skill_.Clear();
}
::google::protobuf::uint32 BattleEnemy::skill(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.skill)
  return skill_.Get(index);
}
void BattleEnemy::set_skill(int index, ::google::protobuf::uint32 value) {
  skill_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.skill)
}
void BattleEnemy::add_skill(::google::protobuf::uint32 value) {
  skill_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.BattleEnemy.skill)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattleEnemy::skill() const {
  // @@protoc_insertion_point(field_list:NetMsg.BattleEnemy.skill)
  return skill_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattleEnemy::mutable_skill() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BattleEnemy.skill)
  return &skill_;
}

// repeated uint32 skillLevel = 7;
int BattleEnemy::skilllevel_size() const {
  return skilllevel_.size();
}
void BattleEnemy::clear_skilllevel() {
  skilllevel_.Clear();
}
::google::protobuf::uint32 BattleEnemy::skilllevel(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.skillLevel)
  return skilllevel_.Get(index);
}
void BattleEnemy::set_skilllevel(int index, ::google::protobuf::uint32 value) {
  skilllevel_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.skillLevel)
}
void BattleEnemy::add_skilllevel(::google::protobuf::uint32 value) {
  skilllevel_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.BattleEnemy.skillLevel)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattleEnemy::skilllevel() const {
  // @@protoc_insertion_point(field_list:NetMsg.BattleEnemy.skillLevel)
  return skilllevel_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattleEnemy::mutable_skilllevel() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BattleEnemy.skillLevel)
  return &skilllevel_;
}

// optional float heroHp = 8;
void BattleEnemy::clear_herohp() {
  herohp_ = 0;
}
float BattleEnemy::herohp() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.heroHp)
  return herohp_;
}
void BattleEnemy::set_herohp(float value) {
  
  herohp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.heroHp)
}

// optional float soldierHp = 9;
void BattleEnemy::clear_soldierhp() {
  soldierhp_ = 0;
}
float BattleEnemy::soldierhp() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEnemy.soldierHp)
  return soldierhp_;
}
void BattleEnemy::set_soldierhp(float value) {
  
  soldierhp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEnemy.soldierHp)
}

inline const BattleEnemy* BattleEnemy::internal_default_instance() {
  return &BattleEnemy_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBattle::kBattleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBattle::ReqBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqBattle)
}

void ReqBattle::InitAsDefaultInstance() {
}

ReqBattle::ReqBattle(const ReqBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqBattle)
}

void ReqBattle::SharedCtor() {
  battleid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqBattle::~ReqBattle() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqBattle)
  SharedDtor();
}

void ReqBattle::SharedDtor() {
}

void ReqBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBattle_descriptor_;
}

const ReqBattle& ReqBattle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqBattle> ReqBattle_default_instance_;

ReqBattle* ReqBattle::New(::google::protobuf::Arena* arena) const {
  ReqBattle* n = new ReqBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqBattle)
  battleid_ = GOOGLE_ULONGLONG(0);
}

bool ReqBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqBattle)
  return false;
#undef DO_
}

void ReqBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqBattle)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqBattle)
}

::google::protobuf::uint8* ReqBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqBattle)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqBattle)
  return target;
}

size_t ReqBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqBattle)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqBattle)
    UnsafeMergeFrom(*source);
  }
}

void ReqBattle::MergeFrom(const ReqBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqBattle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqBattle::UnsafeMergeFrom(const ReqBattle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
}

void ReqBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattle::CopyFrom(const ReqBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqBattle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqBattle::IsInitialized() const {

  return true;
}

void ReqBattle::Swap(ReqBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBattle::InternalSwap(ReqBattle* other) {
  std::swap(battleid_, other->battleid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBattle_descriptor_;
  metadata.reflection = ReqBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBattle

// optional uint64 battleId = 1;
void ReqBattle::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqBattle::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBattle.battleId)
  return battleid_;
}
void ReqBattle::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBattle.battleId)
}

inline const ReqBattle* ReqBattle::internal_default_instance() {
  return &ReqBattle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleAck::kBattleIdFieldNumber;
const int BattleAck::kEnemysFieldNumber;
const int BattleAck::kTeamIdFieldNumber;
const int BattleAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleAck::BattleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BattleAck)
}

void BattleAck::InitAsDefaultInstance() {
}

BattleAck::BattleAck(const BattleAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BattleAck)
}

void BattleAck::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(error_));
  _cached_size_ = 0;
}

BattleAck::~BattleAck() {
  // @@protoc_insertion_point(destructor:NetMsg.BattleAck)
  SharedDtor();
}

void BattleAck::SharedDtor() {
}

void BattleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleAck_descriptor_;
}

const BattleAck& BattleAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BattleAck> BattleAck_default_instance_;

BattleAck* BattleAck::New(::google::protobuf::Arena* arena) const {
  BattleAck* n = new BattleAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BattleAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BattleAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BattleAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, error_);

#undef ZR_HELPER_
#undef ZR_

  enemys_.Clear();
}

bool BattleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BattleAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enemys;
        break;
      }

      // repeated .NetMsg.BattleEnemy enemys = 2;
      case 2: {
        if (tag == 18) {
         parse_enemys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_enemys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_enemys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_teamId;
        break;
      }

      // optional uint32 teamId = 3;
      case 3: {
        if (tag == 24) {
         parse_teamId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional uint32 error = 4;
      case 4: {
        if (tag == 32) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BattleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BattleAck)
  return false;
#undef DO_
}

void BattleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BattleAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // repeated .NetMsg.BattleEnemy enemys = 2;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemys(i), output);
  }

  // optional uint32 teamId = 3;
  if (this->teamid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BattleAck)
}

::google::protobuf::uint8* BattleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BattleAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // repeated .NetMsg.BattleEnemy enemys = 2;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->enemys(i), false, target);
  }

  // optional uint32 teamId = 3;
  if (this->teamid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BattleAck)
  return target;
}

size_t BattleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BattleAck)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 teamId = 3;
  if (this->teamid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->teamid());
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.BattleEnemy enemys = 2;
  {
    unsigned int count = this->enemys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BattleAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BattleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BattleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BattleAck)
    UnsafeMergeFrom(*source);
  }
}

void BattleAck::MergeFrom(const BattleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BattleAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BattleAck::UnsafeMergeFrom(const BattleAck& from) {
  GOOGLE_DCHECK(&from != this);
  enemys_.MergeFrom(from.enemys_);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.teamid() != 0) {
    set_teamid(from.teamid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void BattleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleAck::CopyFrom(const BattleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BattleAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BattleAck::IsInitialized() const {

  return true;
}

void BattleAck::Swap(BattleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleAck::InternalSwap(BattleAck* other) {
  std::swap(battleid_, other->battleid_);
  enemys_.UnsafeArenaSwap(&other->enemys_);
  std::swap(teamid_, other->teamid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleAck_descriptor_;
  metadata.reflection = BattleAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattleAck

// optional uint64 battleId = 1;
void BattleAck::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BattleAck::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleAck.battleId)
  return battleid_;
}
void BattleAck::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleAck.battleId)
}

// repeated .NetMsg.BattleEnemy enemys = 2;
int BattleAck::enemys_size() const {
  return enemys_.size();
}
void BattleAck::clear_enemys() {
  enemys_.Clear();
}
const ::NetMsg::BattleEnemy& BattleAck::enemys(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleAck.enemys)
  return enemys_.Get(index);
}
::NetMsg::BattleEnemy* BattleAck::mutable_enemys(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.BattleAck.enemys)
  return enemys_.Mutable(index);
}
::NetMsg::BattleEnemy* BattleAck::add_enemys() {
  // @@protoc_insertion_point(field_add:NetMsg.BattleAck.enemys)
  return enemys_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::BattleEnemy >*
BattleAck::mutable_enemys() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BattleAck.enemys)
  return &enemys_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::BattleEnemy >&
BattleAck::enemys() const {
  // @@protoc_insertion_point(field_list:NetMsg.BattleAck.enemys)
  return enemys_;
}

// optional uint32 teamId = 3;
void BattleAck::clear_teamid() {
  teamid_ = 0u;
}
::google::protobuf::uint32 BattleAck::teamid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleAck.teamId)
  return teamid_;
}
void BattleAck::set_teamid(::google::protobuf::uint32 value) {
  
  teamid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleAck.teamId)
}

// optional uint32 error = 4;
void BattleAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 BattleAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleAck.error)
  return error_;
}
void BattleAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleAck.error)
}

inline const BattleAck* BattleAck::internal_default_instance() {
  return &BattleAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPrepareBattle::kEnemyTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPrepareBattle::ReqPrepareBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqPrepareBattle)
}

void ReqPrepareBattle::InitAsDefaultInstance() {
}

ReqPrepareBattle::ReqPrepareBattle(const ReqPrepareBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqPrepareBattle)
}

void ReqPrepareBattle::SharedCtor() {
  enemyteam_ = 0u;
  _cached_size_ = 0;
}

ReqPrepareBattle::~ReqPrepareBattle() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqPrepareBattle)
  SharedDtor();
}

void ReqPrepareBattle::SharedDtor() {
}

void ReqPrepareBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPrepareBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPrepareBattle_descriptor_;
}

const ReqPrepareBattle& ReqPrepareBattle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqPrepareBattle> ReqPrepareBattle_default_instance_;

ReqPrepareBattle* ReqPrepareBattle::New(::google::protobuf::Arena* arena) const {
  ReqPrepareBattle* n = new ReqPrepareBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqPrepareBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqPrepareBattle)
  enemyteam_ = 0u;
}

bool ReqPrepareBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqPrepareBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemyTeam = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyteam_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqPrepareBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqPrepareBattle)
  return false;
#undef DO_
}

void ReqPrepareBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqPrepareBattle)
  // optional uint32 enemyTeam = 1;
  if (this->enemyteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyteam(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqPrepareBattle)
}

::google::protobuf::uint8* ReqPrepareBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqPrepareBattle)
  // optional uint32 enemyTeam = 1;
  if (this->enemyteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyteam(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqPrepareBattle)
  return target;
}

size_t ReqPrepareBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqPrepareBattle)
  size_t total_size = 0;

  // optional uint32 enemyTeam = 1;
  if (this->enemyteam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemyteam());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPrepareBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqPrepareBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqPrepareBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPrepareBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqPrepareBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqPrepareBattle)
    UnsafeMergeFrom(*source);
  }
}

void ReqPrepareBattle::MergeFrom(const ReqPrepareBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqPrepareBattle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqPrepareBattle::UnsafeMergeFrom(const ReqPrepareBattle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enemyteam() != 0) {
    set_enemyteam(from.enemyteam());
  }
}

void ReqPrepareBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqPrepareBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPrepareBattle::CopyFrom(const ReqPrepareBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqPrepareBattle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqPrepareBattle::IsInitialized() const {

  return true;
}

void ReqPrepareBattle::Swap(ReqPrepareBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPrepareBattle::InternalSwap(ReqPrepareBattle* other) {
  std::swap(enemyteam_, other->enemyteam_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqPrepareBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPrepareBattle_descriptor_;
  metadata.reflection = ReqPrepareBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqPrepareBattle

// optional uint32 enemyTeam = 1;
void ReqPrepareBattle::clear_enemyteam() {
  enemyteam_ = 0u;
}
::google::protobuf::uint32 ReqPrepareBattle::enemyteam() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqPrepareBattle.enemyTeam)
  return enemyteam_;
}
void ReqPrepareBattle::set_enemyteam(::google::protobuf::uint32 value) {
  
  enemyteam_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqPrepareBattle.enemyTeam)
}

inline const ReqPrepareBattle* ReqPrepareBattle::internal_default_instance() {
  return &ReqPrepareBattle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareBattleAck::kBattleIdFieldNumber;
const int PrepareBattleAck::kEnemysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareBattleAck::PrepareBattleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.PrepareBattleAck)
}

void PrepareBattleAck::InitAsDefaultInstance() {
}

PrepareBattleAck::PrepareBattleAck(const PrepareBattleAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.PrepareBattleAck)
}

void PrepareBattleAck::SharedCtor() {
  battleid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PrepareBattleAck::~PrepareBattleAck() {
  // @@protoc_insertion_point(destructor:NetMsg.PrepareBattleAck)
  SharedDtor();
}

void PrepareBattleAck::SharedDtor() {
}

void PrepareBattleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareBattleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareBattleAck_descriptor_;
}

const PrepareBattleAck& PrepareBattleAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrepareBattleAck> PrepareBattleAck_default_instance_;

PrepareBattleAck* PrepareBattleAck::New(::google::protobuf::Arena* arena) const {
  PrepareBattleAck* n = new PrepareBattleAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareBattleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.PrepareBattleAck)
  battleid_ = GOOGLE_ULONGLONG(0);
  enemys_.Clear();
}

bool PrepareBattleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.PrepareBattleAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enemys;
        break;
      }

      // repeated .NetMsg.BattleEnemy enemys = 2;
      case 2: {
        if (tag == 18) {
         parse_enemys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_enemys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_enemys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.PrepareBattleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.PrepareBattleAck)
  return false;
#undef DO_
}

void PrepareBattleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.PrepareBattleAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // repeated .NetMsg.BattleEnemy enemys = 2;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.PrepareBattleAck)
}

::google::protobuf::uint8* PrepareBattleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.PrepareBattleAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // repeated .NetMsg.BattleEnemy enemys = 2;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->enemys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.PrepareBattleAck)
  return target;
}

size_t PrepareBattleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.PrepareBattleAck)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // repeated .NetMsg.BattleEnemy enemys = 2;
  {
    unsigned int count = this->enemys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareBattleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.PrepareBattleAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrepareBattleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareBattleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.PrepareBattleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.PrepareBattleAck)
    UnsafeMergeFrom(*source);
  }
}

void PrepareBattleAck::MergeFrom(const PrepareBattleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.PrepareBattleAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrepareBattleAck::UnsafeMergeFrom(const PrepareBattleAck& from) {
  GOOGLE_DCHECK(&from != this);
  enemys_.MergeFrom(from.enemys_);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
}

void PrepareBattleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.PrepareBattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareBattleAck::CopyFrom(const PrepareBattleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.PrepareBattleAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrepareBattleAck::IsInitialized() const {

  return true;
}

void PrepareBattleAck::Swap(PrepareBattleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareBattleAck::InternalSwap(PrepareBattleAck* other) {
  std::swap(battleid_, other->battleid_);
  enemys_.UnsafeArenaSwap(&other->enemys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareBattleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareBattleAck_descriptor_;
  metadata.reflection = PrepareBattleAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareBattleAck

// optional uint64 battleId = 1;
void PrepareBattleAck::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PrepareBattleAck::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.PrepareBattleAck.battleId)
  return battleid_;
}
void PrepareBattleAck::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.PrepareBattleAck.battleId)
}

// repeated .NetMsg.BattleEnemy enemys = 2;
int PrepareBattleAck::enemys_size() const {
  return enemys_.size();
}
void PrepareBattleAck::clear_enemys() {
  enemys_.Clear();
}
const ::NetMsg::BattleEnemy& PrepareBattleAck::enemys(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.PrepareBattleAck.enemys)
  return enemys_.Get(index);
}
::NetMsg::BattleEnemy* PrepareBattleAck::mutable_enemys(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.PrepareBattleAck.enemys)
  return enemys_.Mutable(index);
}
::NetMsg::BattleEnemy* PrepareBattleAck::add_enemys() {
  // @@protoc_insertion_point(field_add:NetMsg.PrepareBattleAck.enemys)
  return enemys_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::BattleEnemy >*
PrepareBattleAck::mutable_enemys() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.PrepareBattleAck.enemys)
  return &enemys_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::BattleEnemy >&
PrepareBattleAck::enemys() const {
  // @@protoc_insertion_point(field_list:NetMsg.PrepareBattleAck.enemys)
  return enemys_;
}

inline const PrepareBattleAck* PrepareBattleAck::internal_default_instance() {
  return &PrepareBattleAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverBattle::kBattleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverBattle::RecoverBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RecoverBattle)
}

void RecoverBattle::InitAsDefaultInstance() {
}

RecoverBattle::RecoverBattle(const RecoverBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RecoverBattle)
}

void RecoverBattle::SharedCtor() {
  battleid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RecoverBattle::~RecoverBattle() {
  // @@protoc_insertion_point(destructor:NetMsg.RecoverBattle)
  SharedDtor();
}

void RecoverBattle::SharedDtor() {
}

void RecoverBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverBattle_descriptor_;
}

const RecoverBattle& RecoverBattle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RecoverBattle> RecoverBattle_default_instance_;

RecoverBattle* RecoverBattle::New(::google::protobuf::Arena* arena) const {
  RecoverBattle* n = new RecoverBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecoverBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RecoverBattle)
  battleid_ = GOOGLE_ULONGLONG(0);
}

bool RecoverBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RecoverBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RecoverBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RecoverBattle)
  return false;
#undef DO_
}

void RecoverBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RecoverBattle)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RecoverBattle)
}

::google::protobuf::uint8* RecoverBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RecoverBattle)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RecoverBattle)
  return target;
}

size_t RecoverBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RecoverBattle)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RecoverBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecoverBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecoverBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RecoverBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RecoverBattle)
    UnsafeMergeFrom(*source);
  }
}

void RecoverBattle::MergeFrom(const RecoverBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RecoverBattle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RecoverBattle::UnsafeMergeFrom(const RecoverBattle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
}

void RecoverBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RecoverBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverBattle::CopyFrom(const RecoverBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RecoverBattle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RecoverBattle::IsInitialized() const {

  return true;
}

void RecoverBattle::Swap(RecoverBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverBattle::InternalSwap(RecoverBattle* other) {
  std::swap(battleid_, other->battleid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecoverBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverBattle_descriptor_;
  metadata.reflection = RecoverBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecoverBattle

// optional uint64 battleId = 1;
void RecoverBattle::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RecoverBattle::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.RecoverBattle.battleId)
  return battleid_;
}
void RecoverBattle::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RecoverBattle.battleId)
}

inline const RecoverBattle* RecoverBattle::internal_default_instance() {
  return &RecoverBattle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBattleEnd::kBattleIdFieldNumber;
const int ReqBattleEnd::kVictoryFieldNumber;
const int ReqBattleEnd::kEnemysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBattleEnd::ReqBattleEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqBattleEnd)
}

void ReqBattleEnd::InitAsDefaultInstance() {
}

ReqBattleEnd::ReqBattleEnd(const ReqBattleEnd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqBattleEnd)
}

void ReqBattleEnd::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&victory_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(victory_));
  _cached_size_ = 0;
}

ReqBattleEnd::~ReqBattleEnd() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqBattleEnd)
  SharedDtor();
}

void ReqBattleEnd::SharedDtor() {
}

void ReqBattleEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBattleEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBattleEnd_descriptor_;
}

const ReqBattleEnd& ReqBattleEnd::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqBattleEnd> ReqBattleEnd_default_instance_;

ReqBattleEnd* ReqBattleEnd::New(::google::protobuf::Arena* arena) const {
  ReqBattleEnd* n = new ReqBattleEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBattleEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqBattleEnd)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqBattleEnd, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqBattleEnd*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, victory_);

#undef ZR_HELPER_
#undef ZR_

  enemys_.Clear();
}

bool ReqBattleEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqBattleEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_victory;
        break;
      }

      // optional bool victory = 2;
      case 2: {
        if (tag == 16) {
         parse_victory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_enemys;
        break;
      }

      // repeated .NetMsg.BattleEnemy enemys = 3;
      case 3: {
        if (tag == 26) {
         parse_enemys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_enemys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_enemys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqBattleEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqBattleEnd)
  return false;
#undef DO_
}

void ReqBattleEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqBattleEnd)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional bool victory = 2;
  if (this->victory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->victory(), output);
  }

  // repeated .NetMsg.BattleEnemy enemys = 3;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqBattleEnd)
}

::google::protobuf::uint8* ReqBattleEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqBattleEnd)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional bool victory = 2;
  if (this->victory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->victory(), target);
  }

  // repeated .NetMsg.BattleEnemy enemys = 3;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->enemys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqBattleEnd)
  return target;
}

size_t ReqBattleEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqBattleEnd)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional bool victory = 2;
  if (this->victory() != 0) {
    total_size += 1 + 1;
  }

  // repeated .NetMsg.BattleEnemy enemys = 3;
  {
    unsigned int count = this->enemys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBattleEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqBattleEnd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqBattleEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBattleEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqBattleEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqBattleEnd)
    UnsafeMergeFrom(*source);
  }
}

void ReqBattleEnd::MergeFrom(const ReqBattleEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqBattleEnd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqBattleEnd::UnsafeMergeFrom(const ReqBattleEnd& from) {
  GOOGLE_DCHECK(&from != this);
  enemys_.MergeFrom(from.enemys_);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.victory() != 0) {
    set_victory(from.victory());
  }
}

void ReqBattleEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqBattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattleEnd::CopyFrom(const ReqBattleEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqBattleEnd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqBattleEnd::IsInitialized() const {

  return true;
}

void ReqBattleEnd::Swap(ReqBattleEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBattleEnd::InternalSwap(ReqBattleEnd* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(victory_, other->victory_);
  enemys_.UnsafeArenaSwap(&other->enemys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBattleEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBattleEnd_descriptor_;
  metadata.reflection = ReqBattleEnd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBattleEnd

// optional uint64 battleId = 1;
void ReqBattleEnd::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqBattleEnd::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBattleEnd.battleId)
  return battleid_;
}
void ReqBattleEnd::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBattleEnd.battleId)
}

// optional bool victory = 2;
void ReqBattleEnd::clear_victory() {
  victory_ = false;
}
bool ReqBattleEnd::victory() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBattleEnd.victory)
  return victory_;
}
void ReqBattleEnd::set_victory(bool value) {
  
  victory_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBattleEnd.victory)
}

// repeated .NetMsg.BattleEnemy enemys = 3;
int ReqBattleEnd::enemys_size() const {
  return enemys_.size();
}
void ReqBattleEnd::clear_enemys() {
  enemys_.Clear();
}
const ::NetMsg::BattleEnemy& ReqBattleEnd::enemys(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBattleEnd.enemys)
  return enemys_.Get(index);
}
::NetMsg::BattleEnemy* ReqBattleEnd::mutable_enemys(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqBattleEnd.enemys)
  return enemys_.Mutable(index);
}
::NetMsg::BattleEnemy* ReqBattleEnd::add_enemys() {
  // @@protoc_insertion_point(field_add:NetMsg.ReqBattleEnd.enemys)
  return enemys_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::BattleEnemy >*
ReqBattleEnd::mutable_enemys() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqBattleEnd.enemys)
  return &enemys_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::BattleEnemy >&
ReqBattleEnd::enemys() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqBattleEnd.enemys)
  return enemys_;
}

inline const ReqBattleEnd* ReqBattleEnd::internal_default_instance() {
  return &ReqBattleEnd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleEndAck::kBattleIdFieldNumber;
const int BattleEndAck::kVictoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleEndAck::BattleEndAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BattleEndAck)
}

void BattleEndAck::InitAsDefaultInstance() {
}

BattleEndAck::BattleEndAck(const BattleEndAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BattleEndAck)
}

void BattleEndAck::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&victory_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(victory_));
  _cached_size_ = 0;
}

BattleEndAck::~BattleEndAck() {
  // @@protoc_insertion_point(destructor:NetMsg.BattleEndAck)
  SharedDtor();
}

void BattleEndAck::SharedDtor() {
}

void BattleEndAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleEndAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleEndAck_descriptor_;
}

const BattleEndAck& BattleEndAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BattleEndAck> BattleEndAck_default_instance_;

BattleEndAck* BattleEndAck::New(::google::protobuf::Arena* arena) const {
  BattleEndAck* n = new BattleEndAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattleEndAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BattleEndAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BattleEndAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BattleEndAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, victory_);

#undef ZR_HELPER_
#undef ZR_

}

bool BattleEndAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BattleEndAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_victory;
        break;
      }

      // optional bool victory = 2;
      case 2: {
        if (tag == 16) {
         parse_victory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BattleEndAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BattleEndAck)
  return false;
#undef DO_
}

void BattleEndAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BattleEndAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional bool victory = 2;
  if (this->victory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->victory(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BattleEndAck)
}

::google::protobuf::uint8* BattleEndAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BattleEndAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional bool victory = 2;
  if (this->victory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->victory(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BattleEndAck)
  return target;
}

size_t BattleEndAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BattleEndAck)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional bool victory = 2;
  if (this->victory() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleEndAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BattleEndAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BattleEndAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleEndAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BattleEndAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BattleEndAck)
    UnsafeMergeFrom(*source);
  }
}

void BattleEndAck::MergeFrom(const BattleEndAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BattleEndAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BattleEndAck::UnsafeMergeFrom(const BattleEndAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.victory() != 0) {
    set_victory(from.victory());
  }
}

void BattleEndAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BattleEndAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEndAck::CopyFrom(const BattleEndAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BattleEndAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BattleEndAck::IsInitialized() const {

  return true;
}

void BattleEndAck::Swap(BattleEndAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleEndAck::InternalSwap(BattleEndAck* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(victory_, other->victory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattleEndAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleEndAck_descriptor_;
  metadata.reflection = BattleEndAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattleEndAck

// optional uint64 battleId = 1;
void BattleEndAck::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BattleEndAck::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEndAck.battleId)
  return battleid_;
}
void BattleEndAck::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEndAck.battleId)
}

// optional bool victory = 2;
void BattleEndAck::clear_victory() {
  victory_ = false;
}
bool BattleEndAck::victory() const {
  // @@protoc_insertion_point(field_get:NetMsg.BattleEndAck.victory)
  return victory_;
}
void BattleEndAck::set_victory(bool value) {
  
  victory_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BattleEndAck.victory)
}

inline const BattleEndAck* BattleEndAck::internal_default_instance() {
  return &BattleEndAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHeroUseItem::kHeroIdFieldNumber;
const int ReqHeroUseItem::kItemIdFieldNumber;
const int ReqHeroUseItem::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeroUseItem::ReqHeroUseItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqHeroUseItem)
}

void ReqHeroUseItem::InitAsDefaultInstance() {
}

ReqHeroUseItem::ReqHeroUseItem(const ReqHeroUseItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqHeroUseItem)
}

void ReqHeroUseItem::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(num_));
  _cached_size_ = 0;
}

ReqHeroUseItem::~ReqHeroUseItem() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqHeroUseItem)
  SharedDtor();
}

void ReqHeroUseItem::SharedDtor() {
}

void ReqHeroUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeroUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeroUseItem_descriptor_;
}

const ReqHeroUseItem& ReqHeroUseItem::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqHeroUseItem> ReqHeroUseItem_default_instance_;

ReqHeroUseItem* ReqHeroUseItem::New(::google::protobuf::Arena* arena) const {
  ReqHeroUseItem* n = new ReqHeroUseItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHeroUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqHeroUseItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqHeroUseItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqHeroUseItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqHeroUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqHeroUseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqHeroUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqHeroUseItem)
  return false;
#undef DO_
}

void ReqHeroUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqHeroUseItem)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint64 itemId = 2;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqHeroUseItem)
}

::google::protobuf::uint8* ReqHeroUseItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqHeroUseItem)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint64 itemId = 2;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqHeroUseItem)
  return target;
}

size_t ReqHeroUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqHeroUseItem)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint64 itemId = 2;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeroUseItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqHeroUseItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqHeroUseItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeroUseItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqHeroUseItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqHeroUseItem)
    UnsafeMergeFrom(*source);
  }
}

void ReqHeroUseItem::MergeFrom(const ReqHeroUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqHeroUseItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqHeroUseItem::UnsafeMergeFrom(const ReqHeroUseItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void ReqHeroUseItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqHeroUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeroUseItem::CopyFrom(const ReqHeroUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqHeroUseItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqHeroUseItem::IsInitialized() const {

  return true;
}

void ReqHeroUseItem::Swap(ReqHeroUseItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeroUseItem::InternalSwap(ReqHeroUseItem* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(itemid_, other->itemid_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHeroUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeroUseItem_descriptor_;
  metadata.reflection = ReqHeroUseItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHeroUseItem

// optional uint64 heroId = 1;
void ReqHeroUseItem::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqHeroUseItem::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqHeroUseItem.heroId)
  return heroid_;
}
void ReqHeroUseItem::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqHeroUseItem.heroId)
}

// optional uint64 itemId = 2;
void ReqHeroUseItem::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqHeroUseItem::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqHeroUseItem.itemId)
  return itemid_;
}
void ReqHeroUseItem::set_itemid(::google::protobuf::uint64 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqHeroUseItem.itemId)
}

// optional uint32 num = 3;
void ReqHeroUseItem::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 ReqHeroUseItem::num() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqHeroUseItem.num)
  return num_;
}
void ReqHeroUseItem::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqHeroUseItem.num)
}

inline const ReqHeroUseItem* ReqHeroUseItem::internal_default_instance() {
  return &ReqHeroUseItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroUserItemAck::kHeroIdFieldNumber;
const int HeroUserItemAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroUserItemAck::HeroUserItemAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroUserItemAck)
}

void HeroUserItemAck::InitAsDefaultInstance() {
}

HeroUserItemAck::HeroUserItemAck(const HeroUserItemAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroUserItemAck)
}

void HeroUserItemAck::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(error_));
  _cached_size_ = 0;
}

HeroUserItemAck::~HeroUserItemAck() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroUserItemAck)
  SharedDtor();
}

void HeroUserItemAck::SharedDtor() {
}

void HeroUserItemAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroUserItemAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroUserItemAck_descriptor_;
}

const HeroUserItemAck& HeroUserItemAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroUserItemAck> HeroUserItemAck_default_instance_;

HeroUserItemAck* HeroUserItemAck::New(::google::protobuf::Arena* arena) const {
  HeroUserItemAck* n = new HeroUserItemAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroUserItemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroUserItemAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeroUserItemAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeroUserItemAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool HeroUserItemAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroUserItemAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroUserItemAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroUserItemAck)
  return false;
#undef DO_
}

void HeroUserItemAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroUserItemAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroUserItemAck)
}

::google::protobuf::uint8* HeroUserItemAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroUserItemAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroUserItemAck)
  return target;
}

size_t HeroUserItemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroUserItemAck)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroUserItemAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroUserItemAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroUserItemAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroUserItemAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroUserItemAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroUserItemAck)
    UnsafeMergeFrom(*source);
  }
}

void HeroUserItemAck::MergeFrom(const HeroUserItemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroUserItemAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroUserItemAck::UnsafeMergeFrom(const HeroUserItemAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void HeroUserItemAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroUserItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroUserItemAck::CopyFrom(const HeroUserItemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroUserItemAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroUserItemAck::IsInitialized() const {

  return true;
}

void HeroUserItemAck::Swap(HeroUserItemAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroUserItemAck::InternalSwap(HeroUserItemAck* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroUserItemAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroUserItemAck_descriptor_;
  metadata.reflection = HeroUserItemAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroUserItemAck

// optional uint64 heroId = 1;
void HeroUserItemAck::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HeroUserItemAck::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroUserItemAck.heroId)
  return heroid_;
}
void HeroUserItemAck::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroUserItemAck.heroId)
}

// optional uint32 error = 2;
void HeroUserItemAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 HeroUserItemAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroUserItemAck.error)
  return error_;
}
void HeroUserItemAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroUserItemAck.error)
}

inline const HeroUserItemAck* HeroUserItemAck::internal_default_instance() {
  return &HeroUserItemAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqUseItem::kItemIdFieldNumber;
const int ReqUseItem::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqUseItem::ReqUseItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqUseItem)
}

void ReqUseItem::InitAsDefaultInstance() {
}

ReqUseItem::ReqUseItem(const ReqUseItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqUseItem)
}

void ReqUseItem::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(num_));
  _cached_size_ = 0;
}

ReqUseItem::~ReqUseItem() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqUseItem)
  SharedDtor();
}

void ReqUseItem::SharedDtor() {
}

void ReqUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUseItem_descriptor_;
}

const ReqUseItem& ReqUseItem::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqUseItem> ReqUseItem_default_instance_;

ReqUseItem* ReqUseItem::New(::google::protobuf::Arena* arena) const {
  ReqUseItem* n = new ReqUseItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqUseItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqUseItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqUseItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqUseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqUseItem)
  return false;
#undef DO_
}

void ReqUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqUseItem)
  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqUseItem)
}

::google::protobuf::uint8* ReqUseItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqUseItem)
  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqUseItem)
  return target;
}

size_t ReqUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqUseItem)
  size_t total_size = 0;

  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUseItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqUseItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqUseItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqUseItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqUseItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqUseItem)
    UnsafeMergeFrom(*source);
  }
}

void ReqUseItem::MergeFrom(const ReqUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqUseItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqUseItem::UnsafeMergeFrom(const ReqUseItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void ReqUseItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUseItem::CopyFrom(const ReqUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqUseItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqUseItem::IsInitialized() const {

  return true;
}

void ReqUseItem::Swap(ReqUseItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqUseItem::InternalSwap(ReqUseItem* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUseItem_descriptor_;
  metadata.reflection = ReqUseItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqUseItem

// optional uint64 itemId = 1;
void ReqUseItem::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqUseItem::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqUseItem.itemId)
  return itemid_;
}
void ReqUseItem::set_itemid(::google::protobuf::uint64 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqUseItem.itemId)
}

// optional uint32 num = 2;
void ReqUseItem::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 ReqUseItem::num() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqUseItem.num)
  return num_;
}
void ReqUseItem::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqUseItem.num)
}

inline const ReqUseItem* ReqUseItem::internal_default_instance() {
  return &ReqUseItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UseItemAck::kItemIdFieldNumber;
const int UseItemAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UseItemAck::UseItemAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UseItemAck)
}

void UseItemAck::InitAsDefaultInstance() {
}

UseItemAck::UseItemAck(const UseItemAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UseItemAck)
}

void UseItemAck::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(error_));
  _cached_size_ = 0;
}

UseItemAck::~UseItemAck() {
  // @@protoc_insertion_point(destructor:NetMsg.UseItemAck)
  SharedDtor();
}

void UseItemAck::SharedDtor() {
}

void UseItemAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemAck_descriptor_;
}

const UseItemAck& UseItemAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UseItemAck> UseItemAck_default_instance_;

UseItemAck* UseItemAck::New(::google::protobuf::Arena* arena) const {
  UseItemAck* n = new UseItemAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UseItemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UseItemAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UseItemAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UseItemAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool UseItemAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UseItemAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UseItemAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UseItemAck)
  return false;
#undef DO_
}

void UseItemAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UseItemAck)
  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UseItemAck)
}

::google::protobuf::uint8* UseItemAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UseItemAck)
  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UseItemAck)
  return target;
}

size_t UseItemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UseItemAck)
  size_t total_size = 0;

  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UseItemAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UseItemAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UseItemAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UseItemAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UseItemAck)
    UnsafeMergeFrom(*source);
  }
}

void UseItemAck::MergeFrom(const UseItemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UseItemAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UseItemAck::UnsafeMergeFrom(const UseItemAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void UseItemAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UseItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemAck::CopyFrom(const UseItemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UseItemAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UseItemAck::IsInitialized() const {

  return true;
}

void UseItemAck::Swap(UseItemAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UseItemAck::InternalSwap(UseItemAck* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UseItemAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemAck_descriptor_;
  metadata.reflection = UseItemAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UseItemAck

// optional uint64 itemId = 1;
void UseItemAck::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UseItemAck::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.UseItemAck.itemId)
  return itemid_;
}
void UseItemAck::set_itemid(::google::protobuf::uint64 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UseItemAck.itemId)
}

// optional uint32 error = 2;
void UseItemAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 UseItemAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.UseItemAck.error)
  return error_;
}
void UseItemAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UseItemAck.error)
}

inline const UseItemAck* UseItemAck::internal_default_instance() {
  return &UseItemAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAddItem::kItemIdFieldNumber;
const int ReqAddItem::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAddItem::ReqAddItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqAddItem)
}

void ReqAddItem::InitAsDefaultInstance() {
}

ReqAddItem::ReqAddItem(const ReqAddItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqAddItem)
}

void ReqAddItem::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(num_));
  _cached_size_ = 0;
}

ReqAddItem::~ReqAddItem() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqAddItem)
  SharedDtor();
}

void ReqAddItem::SharedDtor() {
}

void ReqAddItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAddItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAddItem_descriptor_;
}

const ReqAddItem& ReqAddItem::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqAddItem> ReqAddItem_default_instance_;

ReqAddItem* ReqAddItem::New(::google::protobuf::Arena* arena) const {
  ReqAddItem* n = new ReqAddItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAddItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqAddItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqAddItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqAddItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqAddItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqAddItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqAddItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqAddItem)
  return false;
#undef DO_
}

void ReqAddItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqAddItem)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqAddItem)
}

::google::protobuf::uint8* ReqAddItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqAddItem)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqAddItem)
  return target;
}

size_t ReqAddItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqAddItem)
  size_t total_size = 0;

  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemid());
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAddItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqAddItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqAddItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAddItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqAddItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqAddItem)
    UnsafeMergeFrom(*source);
  }
}

void ReqAddItem::MergeFrom(const ReqAddItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqAddItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqAddItem::UnsafeMergeFrom(const ReqAddItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void ReqAddItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqAddItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddItem::CopyFrom(const ReqAddItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqAddItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqAddItem::IsInitialized() const {

  return true;
}

void ReqAddItem::Swap(ReqAddItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAddItem::InternalSwap(ReqAddItem* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAddItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAddItem_descriptor_;
  metadata.reflection = ReqAddItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAddItem

// optional uint32 itemId = 1;
void ReqAddItem::clear_itemid() {
  itemid_ = 0u;
}
::google::protobuf::uint32 ReqAddItem::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAddItem.itemId)
  return itemid_;
}
void ReqAddItem::set_itemid(::google::protobuf::uint32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAddItem.itemId)
}

// optional uint32 num = 2;
void ReqAddItem::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 ReqAddItem::num() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAddItem.num)
  return num_;
}
void ReqAddItem::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAddItem.num)
}

inline const ReqAddItem* ReqAddItem::internal_default_instance() {
  return &ReqAddItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddItemAck::kItemIdFieldNumber;
const int AddItemAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddItemAck::AddItemAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AddItemAck)
}

void AddItemAck::InitAsDefaultInstance() {
}

AddItemAck::AddItemAck(const AddItemAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AddItemAck)
}

void AddItemAck::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(error_));
  _cached_size_ = 0;
}

AddItemAck::~AddItemAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AddItemAck)
  SharedDtor();
}

void AddItemAck::SharedDtor() {
}

void AddItemAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddItemAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddItemAck_descriptor_;
}

const AddItemAck& AddItemAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddItemAck> AddItemAck_default_instance_;

AddItemAck* AddItemAck::New(::google::protobuf::Arena* arena) const {
  AddItemAck* n = new AddItemAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddItemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AddItemAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddItemAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddItemAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddItemAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AddItemAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AddItemAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AddItemAck)
  return false;
#undef DO_
}

void AddItemAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AddItemAck)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AddItemAck)
}

::google::protobuf::uint8* AddItemAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AddItemAck)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AddItemAck)
  return target;
}

size_t AddItemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AddItemAck)
  size_t total_size = 0;

  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddItemAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AddItemAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddItemAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddItemAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AddItemAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AddItemAck)
    UnsafeMergeFrom(*source);
  }
}

void AddItemAck::MergeFrom(const AddItemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AddItemAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddItemAck::UnsafeMergeFrom(const AddItemAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void AddItemAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AddItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemAck::CopyFrom(const AddItemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AddItemAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddItemAck::IsInitialized() const {

  return true;
}

void AddItemAck::Swap(AddItemAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddItemAck::InternalSwap(AddItemAck* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddItemAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddItemAck_descriptor_;
  metadata.reflection = AddItemAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddItemAck

// optional uint32 itemId = 1;
void AddItemAck::clear_itemid() {
  itemid_ = 0u;
}
::google::protobuf::uint32 AddItemAck::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.AddItemAck.itemId)
  return itemid_;
}
void AddItemAck::set_itemid(::google::protobuf::uint32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AddItemAck.itemId)
}

// optional uint32 error = 2;
void AddItemAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 AddItemAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.AddItemAck.error)
  return error_;
}
void AddItemAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AddItemAck.error)
}

inline const AddItemAck* AddItemAck::internal_default_instance() {
  return &AddItemAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvantureContinuousBattle::kEnemyPathFieldNumber;
const int AdvantureContinuousBattle::kPercentFieldNumber;
const int AdvantureContinuousBattle::kBattleIdFieldNumber;
const int AdvantureContinuousBattle::kEnemyTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvantureContinuousBattle::AdvantureContinuousBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AdvantureContinuousBattle)
}

void AdvantureContinuousBattle::InitAsDefaultInstance() {
}

AdvantureContinuousBattle::AdvantureContinuousBattle(const AdvantureContinuousBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AdvantureContinuousBattle)
}

void AdvantureContinuousBattle::SharedCtor() {
  ::memset(&enemypath_, 0, reinterpret_cast<char*>(&enemyteam_) -
    reinterpret_cast<char*>(&enemypath_) + sizeof(enemyteam_));
  _cached_size_ = 0;
}

AdvantureContinuousBattle::~AdvantureContinuousBattle() {
  // @@protoc_insertion_point(destructor:NetMsg.AdvantureContinuousBattle)
  SharedDtor();
}

void AdvantureContinuousBattle::SharedDtor() {
}

void AdvantureContinuousBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvantureContinuousBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantureContinuousBattle_descriptor_;
}

const AdvantureContinuousBattle& AdvantureContinuousBattle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvantureContinuousBattle> AdvantureContinuousBattle_default_instance_;

AdvantureContinuousBattle* AdvantureContinuousBattle::New(::google::protobuf::Arena* arena) const {
  AdvantureContinuousBattle* n = new AdvantureContinuousBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvantureContinuousBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AdvantureContinuousBattle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvantureContinuousBattle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvantureContinuousBattle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enemypath_, enemyteam_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdvantureContinuousBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AdvantureContinuousBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemyPath = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemypath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_percent;
        break;
      }

      // optional float percent = 2;
      case 2: {
        if (tag == 21) {
         parse_percent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battleId;
        break;
      }

      // optional uint64 battleId = 3;
      case 3: {
        if (tag == 24) {
         parse_battleId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enemyTeam;
        break;
      }

      // optional uint32 enemyTeam = 4;
      case 4: {
        if (tag == 32) {
         parse_enemyTeam:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyteam_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AdvantureContinuousBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AdvantureContinuousBattle)
  return false;
#undef DO_
}

void AdvantureContinuousBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AdvantureContinuousBattle)
  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemypath(), output);
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percent(), output);
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleid(), output);
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enemyteam(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AdvantureContinuousBattle)
}

::google::protobuf::uint8* AdvantureContinuousBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AdvantureContinuousBattle)
  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemypath(), target);
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->percent(), target);
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleid(), target);
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enemyteam(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AdvantureContinuousBattle)
  return target;
}

size_t AdvantureContinuousBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AdvantureContinuousBattle)
  size_t total_size = 0;

  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemypath());
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    total_size += 1 + 4;
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemyteam());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvantureContinuousBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AdvantureContinuousBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvantureContinuousBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvantureContinuousBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AdvantureContinuousBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AdvantureContinuousBattle)
    UnsafeMergeFrom(*source);
  }
}

void AdvantureContinuousBattle::MergeFrom(const AdvantureContinuousBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AdvantureContinuousBattle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvantureContinuousBattle::UnsafeMergeFrom(const AdvantureContinuousBattle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enemypath() != 0) {
    set_enemypath(from.enemypath());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.enemyteam() != 0) {
    set_enemyteam(from.enemyteam());
  }
}

void AdvantureContinuousBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AdvantureContinuousBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantureContinuousBattle::CopyFrom(const AdvantureContinuousBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AdvantureContinuousBattle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvantureContinuousBattle::IsInitialized() const {

  return true;
}

void AdvantureContinuousBattle::Swap(AdvantureContinuousBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvantureContinuousBattle::InternalSwap(AdvantureContinuousBattle* other) {
  std::swap(enemypath_, other->enemypath_);
  std::swap(percent_, other->percent_);
  std::swap(battleid_, other->battleid_);
  std::swap(enemyteam_, other->enemyteam_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvantureContinuousBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvantureContinuousBattle_descriptor_;
  metadata.reflection = AdvantureContinuousBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvantureContinuousBattle

// optional uint32 enemyPath = 1;
void AdvantureContinuousBattle::clear_enemypath() {
  enemypath_ = 0u;
}
::google::protobuf::uint32 AdvantureContinuousBattle::enemypath() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureContinuousBattle.enemyPath)
  return enemypath_;
}
void AdvantureContinuousBattle::set_enemypath(::google::protobuf::uint32 value) {
  
  enemypath_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureContinuousBattle.enemyPath)
}

// optional float percent = 2;
void AdvantureContinuousBattle::clear_percent() {
  percent_ = 0;
}
float AdvantureContinuousBattle::percent() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureContinuousBattle.percent)
  return percent_;
}
void AdvantureContinuousBattle::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureContinuousBattle.percent)
}

// optional uint64 battleId = 3;
void AdvantureContinuousBattle::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AdvantureContinuousBattle::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureContinuousBattle.battleId)
  return battleid_;
}
void AdvantureContinuousBattle::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureContinuousBattle.battleId)
}

// optional uint32 enemyTeam = 4;
void AdvantureContinuousBattle::clear_enemyteam() {
  enemyteam_ = 0u;
}
::google::protobuf::uint32 AdvantureContinuousBattle::enemyteam() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureContinuousBattle.enemyTeam)
  return enemyteam_;
}
void AdvantureContinuousBattle::set_enemyteam(::google::protobuf::uint32 value) {
  
  enemyteam_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureContinuousBattle.enemyTeam)
}

inline const AdvantureContinuousBattle* AdvantureContinuousBattle::internal_default_instance() {
  return &AdvantureContinuousBattle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvantureEvent::kIdFieldNumber;
const int AdvantureEvent::kTypeFieldNumber;
const int AdvantureEvent::kTimeFieldNumber;
const int AdvantureEvent::kAwardFieldNumber;
const int AdvantureEvent::kCreateTimeFieldNumber;
const int AdvantureEvent::kBattleFieldNumber;
const int AdvantureEvent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvantureEvent::AdvantureEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AdvantureEvent)
}

void AdvantureEvent::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
  battle_ = const_cast< ::NetMsg::AdvantureContinuousBattle*>(
      ::NetMsg::AdvantureContinuousBattle::internal_default_instance());
}

AdvantureEvent::AdvantureEvent(const AdvantureEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AdvantureEvent)
}

void AdvantureEvent::SharedCtor() {
  award_ = NULL;
  battle_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_) + sizeof(status_));
  _cached_size_ = 0;
}

AdvantureEvent::~AdvantureEvent() {
  // @@protoc_insertion_point(destructor:NetMsg.AdvantureEvent)
  SharedDtor();
}

void AdvantureEvent::SharedDtor() {
  if (this != &AdvantureEvent_default_instance_.get()) {
    delete award_;
    delete battle_;
  }
}

void AdvantureEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvantureEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantureEvent_descriptor_;
}

const AdvantureEvent& AdvantureEvent::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvantureEvent> AdvantureEvent_default_instance_;

AdvantureEvent* AdvantureEvent::New(::google::protobuf::Arena* arena) const {
  AdvantureEvent* n = new AdvantureEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvantureEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AdvantureEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvantureEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvantureEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, status_);
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
  if (GetArenaNoVirtual() == NULL && battle_ != NULL) delete battle_;
  battle_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool AdvantureEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AdvantureEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 4;
      case 4: {
        if (tag == 34) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 5;
      case 5: {
        if (tag == 40) {
         parse_createTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_battle;
        break;
      }

      // optional .NetMsg.AdvantureContinuousBattle battle = 6;
      case 6: {
        if (tag == 50) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional .NetMsg.AdvantureEventStatus status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::NetMsg::AdvantureEventStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AdvantureEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AdvantureEvent)
  return false;
#undef DO_
}

void AdvantureEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AdvantureEvent)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional .NetMsg.Award award = 4;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->award_, output);
  }

  // optional uint32 createTime = 5;
  if (this->createtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->createtime(), output);
  }

  // optional .NetMsg.AdvantureContinuousBattle battle = 6;
  if (this->has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->battle_, output);
  }

  // optional .NetMsg.AdvantureEventStatus status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AdvantureEvent)
}

::google::protobuf::uint8* AdvantureEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AdvantureEvent)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional .NetMsg.Award award = 4;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->award_, false, target);
  }

  // optional uint32 createTime = 5;
  if (this->createtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->createtime(), target);
  }

  // optional .NetMsg.AdvantureContinuousBattle battle = 6;
  if (this->has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->battle_, false, target);
  }

  // optional .NetMsg.AdvantureEventStatus status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AdvantureEvent)
  return target;
}

size_t AdvantureEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AdvantureEvent)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  // optional .NetMsg.Award award = 4;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  // optional uint32 createTime = 5;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  // optional .NetMsg.AdvantureContinuousBattle battle = 6;
  if (this->has_battle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->battle_);
  }

  // optional .NetMsg.AdvantureEventStatus status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvantureEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AdvantureEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvantureEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvantureEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AdvantureEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AdvantureEvent)
    UnsafeMergeFrom(*source);
  }
}

void AdvantureEvent::MergeFrom(const AdvantureEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AdvantureEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvantureEvent::UnsafeMergeFrom(const AdvantureEvent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
  if (from.createtime() != 0) {
    set_createtime(from.createtime());
  }
  if (from.has_battle()) {
    mutable_battle()->::NetMsg::AdvantureContinuousBattle::MergeFrom(from.battle());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void AdvantureEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AdvantureEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantureEvent::CopyFrom(const AdvantureEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AdvantureEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvantureEvent::IsInitialized() const {

  return true;
}

void AdvantureEvent::Swap(AdvantureEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvantureEvent::InternalSwap(AdvantureEvent* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(time_, other->time_);
  std::swap(award_, other->award_);
  std::swap(createtime_, other->createtime_);
  std::swap(battle_, other->battle_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvantureEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvantureEvent_descriptor_;
  metadata.reflection = AdvantureEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvantureEvent

// optional uint32 id = 1;
void AdvantureEvent::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 AdvantureEvent::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEvent.id)
  return id_;
}
void AdvantureEvent::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEvent.id)
}

// optional uint32 type = 2;
void AdvantureEvent::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 AdvantureEvent::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEvent.type)
  return type_;
}
void AdvantureEvent::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEvent.type)
}

// optional uint32 time = 3;
void AdvantureEvent::clear_time() {
  time_ = 0u;
}
::google::protobuf::uint32 AdvantureEvent::time() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEvent.time)
  return time_;
}
void AdvantureEvent::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEvent.time)
}

// optional .NetMsg.Award award = 4;
bool AdvantureEvent::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void AdvantureEvent::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& AdvantureEvent::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEvent.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* AdvantureEvent::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.AdvantureEvent.award)
  return award_;
}
::NetMsg::Award* AdvantureEvent::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.AdvantureEvent.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void AdvantureEvent::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.AdvantureEvent.award)
}

// optional uint32 createTime = 5;
void AdvantureEvent::clear_createtime() {
  createtime_ = 0u;
}
::google::protobuf::uint32 AdvantureEvent::createtime() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEvent.createTime)
  return createtime_;
}
void AdvantureEvent::set_createtime(::google::protobuf::uint32 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEvent.createTime)
}

// optional .NetMsg.AdvantureContinuousBattle battle = 6;
bool AdvantureEvent::has_battle() const {
  return this != internal_default_instance() && battle_ != NULL;
}
void AdvantureEvent::clear_battle() {
  if (GetArenaNoVirtual() == NULL && battle_ != NULL) delete battle_;
  battle_ = NULL;
}
const ::NetMsg::AdvantureContinuousBattle& AdvantureEvent::battle() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEvent.battle)
  return battle_ != NULL ? *battle_
                         : *::NetMsg::AdvantureContinuousBattle::internal_default_instance();
}
::NetMsg::AdvantureContinuousBattle* AdvantureEvent::mutable_battle() {
  
  if (battle_ == NULL) {
    battle_ = new ::NetMsg::AdvantureContinuousBattle;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.AdvantureEvent.battle)
  return battle_;
}
::NetMsg::AdvantureContinuousBattle* AdvantureEvent::release_battle() {
  // @@protoc_insertion_point(field_release:NetMsg.AdvantureEvent.battle)
  
  ::NetMsg::AdvantureContinuousBattle* temp = battle_;
  battle_ = NULL;
  return temp;
}
void AdvantureEvent::set_allocated_battle(::NetMsg::AdvantureContinuousBattle* battle) {
  delete battle_;
  battle_ = battle;
  if (battle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.AdvantureEvent.battle)
}

// optional .NetMsg.AdvantureEventStatus status = 7;
void AdvantureEvent::clear_status() {
  status_ = 0;
}
::NetMsg::AdvantureEventStatus AdvantureEvent::status() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEvent.status)
  return static_cast< ::NetMsg::AdvantureEventStatus >(status_);
}
void AdvantureEvent::set_status(::NetMsg::AdvantureEventStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEvent.status)
}

inline const AdvantureEvent* AdvantureEvent::internal_default_instance() {
  return &AdvantureEvent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvantureInfoAck::kTimesFieldNumber;
const int AdvantureInfoAck::kTimesMaxFieldNumber;
const int AdvantureInfoAck::kNextTimeFieldNumber;
const int AdvantureInfoAck::kEventsFieldNumber;
const int AdvantureInfoAck::kUpdateTimeFieldNumber;
const int AdvantureInfoAck::kDoTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvantureInfoAck::AdvantureInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AdvantureInfoAck)
}

void AdvantureInfoAck::InitAsDefaultInstance() {
}

AdvantureInfoAck::AdvantureInfoAck(const AdvantureInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AdvantureInfoAck)
}

void AdvantureInfoAck::SharedCtor() {
  ::memset(&times_, 0, reinterpret_cast<char*>(&dotimes_) -
    reinterpret_cast<char*>(&times_) + sizeof(dotimes_));
  _cached_size_ = 0;
}

AdvantureInfoAck::~AdvantureInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AdvantureInfoAck)
  SharedDtor();
}

void AdvantureInfoAck::SharedDtor() {
}

void AdvantureInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvantureInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantureInfoAck_descriptor_;
}

const AdvantureInfoAck& AdvantureInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvantureInfoAck> AdvantureInfoAck_default_instance_;

AdvantureInfoAck* AdvantureInfoAck::New(::google::protobuf::Arena* arena) const {
  AdvantureInfoAck* n = new AdvantureInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvantureInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AdvantureInfoAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvantureInfoAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvantureInfoAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(times_, dotimes_);

#undef ZR_HELPER_
#undef ZR_

  events_.Clear();
}

bool AdvantureInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AdvantureInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 times = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timesMax;
        break;
      }

      // optional uint32 timesMax = 2;
      case 2: {
        if (tag == 16) {
         parse_timesMax:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timesmax_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nextTime;
        break;
      }

      // optional uint32 nextTime = 3;
      case 3: {
        if (tag == 24) {
         parse_nextTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_events;
        break;
      }

      // repeated .NetMsg.AdvantureEvent events = 4;
      case 4: {
        if (tag == 34) {
         parse_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_updateTime;
        break;
      }

      // optional uint32 updateTime = 5;
      case 5: {
        if (tag == 40) {
         parse_updateTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_doTimes;
        break;
      }

      // optional uint32 doTimes = 6;
      case 6: {
        if (tag == 48) {
         parse_doTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dotimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AdvantureInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AdvantureInfoAck)
  return false;
#undef DO_
}

void AdvantureInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AdvantureInfoAck)
  // optional uint32 times = 1;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->times(), output);
  }

  // optional uint32 timesMax = 2;
  if (this->timesmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timesmax(), output);
  }

  // optional uint32 nextTime = 3;
  if (this->nexttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nexttime(), output);
  }

  // repeated .NetMsg.AdvantureEvent events = 4;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->events(i), output);
  }

  // optional uint32 updateTime = 5;
  if (this->updatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->updatetime(), output);
  }

  // optional uint32 doTimes = 6;
  if (this->dotimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dotimes(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AdvantureInfoAck)
}

::google::protobuf::uint8* AdvantureInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AdvantureInfoAck)
  // optional uint32 times = 1;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->times(), target);
  }

  // optional uint32 timesMax = 2;
  if (this->timesmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timesmax(), target);
  }

  // optional uint32 nextTime = 3;
  if (this->nexttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nexttime(), target);
  }

  // repeated .NetMsg.AdvantureEvent events = 4;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->events(i), false, target);
  }

  // optional uint32 updateTime = 5;
  if (this->updatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->updatetime(), target);
  }

  // optional uint32 doTimes = 6;
  if (this->dotimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dotimes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AdvantureInfoAck)
  return target;
}

size_t AdvantureInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AdvantureInfoAck)
  size_t total_size = 0;

  // optional uint32 times = 1;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // optional uint32 timesMax = 2;
  if (this->timesmax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timesmax());
  }

  // optional uint32 nextTime = 3;
  if (this->nexttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexttime());
  }

  // optional uint32 updateTime = 5;
  if (this->updatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());
  }

  // optional uint32 doTimes = 6;
  if (this->dotimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dotimes());
  }

  // repeated .NetMsg.AdvantureEvent events = 4;
  {
    unsigned int count = this->events_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvantureInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AdvantureInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvantureInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvantureInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AdvantureInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AdvantureInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void AdvantureInfoAck::MergeFrom(const AdvantureInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AdvantureInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvantureInfoAck::UnsafeMergeFrom(const AdvantureInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  events_.MergeFrom(from.events_);
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.timesmax() != 0) {
    set_timesmax(from.timesmax());
  }
  if (from.nexttime() != 0) {
    set_nexttime(from.nexttime());
  }
  if (from.updatetime() != 0) {
    set_updatetime(from.updatetime());
  }
  if (from.dotimes() != 0) {
    set_dotimes(from.dotimes());
  }
}

void AdvantureInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AdvantureInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantureInfoAck::CopyFrom(const AdvantureInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AdvantureInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvantureInfoAck::IsInitialized() const {

  return true;
}

void AdvantureInfoAck::Swap(AdvantureInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvantureInfoAck::InternalSwap(AdvantureInfoAck* other) {
  std::swap(times_, other->times_);
  std::swap(timesmax_, other->timesmax_);
  std::swap(nexttime_, other->nexttime_);
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(dotimes_, other->dotimes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvantureInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvantureInfoAck_descriptor_;
  metadata.reflection = AdvantureInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvantureInfoAck

// optional uint32 times = 1;
void AdvantureInfoAck::clear_times() {
  times_ = 0u;
}
::google::protobuf::uint32 AdvantureInfoAck::times() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureInfoAck.times)
  return times_;
}
void AdvantureInfoAck::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureInfoAck.times)
}

// optional uint32 timesMax = 2;
void AdvantureInfoAck::clear_timesmax() {
  timesmax_ = 0u;
}
::google::protobuf::uint32 AdvantureInfoAck::timesmax() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureInfoAck.timesMax)
  return timesmax_;
}
void AdvantureInfoAck::set_timesmax(::google::protobuf::uint32 value) {
  
  timesmax_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureInfoAck.timesMax)
}

// optional uint32 nextTime = 3;
void AdvantureInfoAck::clear_nexttime() {
  nexttime_ = 0u;
}
::google::protobuf::uint32 AdvantureInfoAck::nexttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureInfoAck.nextTime)
  return nexttime_;
}
void AdvantureInfoAck::set_nexttime(::google::protobuf::uint32 value) {
  
  nexttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureInfoAck.nextTime)
}

// repeated .NetMsg.AdvantureEvent events = 4;
int AdvantureInfoAck::events_size() const {
  return events_.size();
}
void AdvantureInfoAck::clear_events() {
  events_.Clear();
}
const ::NetMsg::AdvantureEvent& AdvantureInfoAck::events(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureInfoAck.events)
  return events_.Get(index);
}
::NetMsg::AdvantureEvent* AdvantureInfoAck::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.AdvantureInfoAck.events)
  return events_.Mutable(index);
}
::NetMsg::AdvantureEvent* AdvantureInfoAck::add_events() {
  // @@protoc_insertion_point(field_add:NetMsg.AdvantureInfoAck.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::AdvantureEvent >*
AdvantureInfoAck::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.AdvantureInfoAck.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::AdvantureEvent >&
AdvantureInfoAck::events() const {
  // @@protoc_insertion_point(field_list:NetMsg.AdvantureInfoAck.events)
  return events_;
}

// optional uint32 updateTime = 5;
void AdvantureInfoAck::clear_updatetime() {
  updatetime_ = 0u;
}
::google::protobuf::uint32 AdvantureInfoAck::updatetime() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureInfoAck.updateTime)
  return updatetime_;
}
void AdvantureInfoAck::set_updatetime(::google::protobuf::uint32 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureInfoAck.updateTime)
}

// optional uint32 doTimes = 6;
void AdvantureInfoAck::clear_dotimes() {
  dotimes_ = 0u;
}
::google::protobuf::uint32 AdvantureInfoAck::dotimes() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureInfoAck.doTimes)
  return dotimes_;
}
void AdvantureInfoAck::set_dotimes(::google::protobuf::uint32 value) {
  
  dotimes_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureInfoAck.doTimes)
}

inline const AdvantureInfoAck* AdvantureInfoAck::internal_default_instance() {
  return &AdvantureInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvantureAck::kTimesFieldNumber;
const int AdvantureAck::kNextTimeFieldNumber;
const int AdvantureAck::kGoldFieldNumber;
const int AdvantureAck::kExpFieldNumber;
const int AdvantureAck::kCritFieldNumber;
const int AdvantureAck::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvantureAck::AdvantureAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AdvantureAck)
}

void AdvantureAck::InitAsDefaultInstance() {
  event_ = const_cast< ::NetMsg::AdvantureEvent*>(
      ::NetMsg::AdvantureEvent::internal_default_instance());
}

AdvantureAck::AdvantureAck(const AdvantureAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AdvantureAck)
}

void AdvantureAck::SharedCtor() {
  event_ = NULL;
  ::memset(&times_, 0, reinterpret_cast<char*>(&crit_) -
    reinterpret_cast<char*>(&times_) + sizeof(crit_));
  _cached_size_ = 0;
}

AdvantureAck::~AdvantureAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AdvantureAck)
  SharedDtor();
}

void AdvantureAck::SharedDtor() {
  if (this != &AdvantureAck_default_instance_.get()) {
    delete event_;
  }
}

void AdvantureAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvantureAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantureAck_descriptor_;
}

const AdvantureAck& AdvantureAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvantureAck> AdvantureAck_default_instance_;

AdvantureAck* AdvantureAck::New(::google::protobuf::Arena* arena) const {
  AdvantureAck* n = new AdvantureAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvantureAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AdvantureAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvantureAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvantureAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(times_, crit_);
  if (GetArenaNoVirtual() == NULL && event_ != NULL) delete event_;
  event_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool AdvantureAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AdvantureAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 times = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextTime;
        break;
      }

      // optional uint32 nextTime = 2;
      case 2: {
        if (tag == 16) {
         parse_nextTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }

      // optional uint32 crit = 5;
      case 5: {
        if (tag == 40) {
         parse_crit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_event;
        break;
      }

      // optional .NetMsg.AdvantureEvent event = 6;
      case 6: {
        if (tag == 50) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AdvantureAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AdvantureAck)
  return false;
#undef DO_
}

void AdvantureAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AdvantureAck)
  // optional uint32 times = 1;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->times(), output);
  }

  // optional uint32 nextTime = 2;
  if (this->nexttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nexttime(), output);
  }

  // optional uint32 gold = 3;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold(), output);
  }

  // optional uint32 exp = 4;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crit(), output);
  }

  // optional .NetMsg.AdvantureEvent event = 6;
  if (this->has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->event_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AdvantureAck)
}

::google::protobuf::uint8* AdvantureAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AdvantureAck)
  // optional uint32 times = 1;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->times(), target);
  }

  // optional uint32 nextTime = 2;
  if (this->nexttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nexttime(), target);
  }

  // optional uint32 gold = 3;
  if (this->gold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gold(), target);
  }

  // optional uint32 exp = 4;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crit(), target);
  }

  // optional .NetMsg.AdvantureEvent event = 6;
  if (this->has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->event_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AdvantureAck)
  return target;
}

size_t AdvantureAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AdvantureAck)
  size_t total_size = 0;

  // optional uint32 times = 1;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // optional uint32 nextTime = 2;
  if (this->nexttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexttime());
  }

  // optional uint32 gold = 3;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gold());
  }

  // optional uint32 exp = 4;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crit());
  }

  // optional .NetMsg.AdvantureEvent event = 6;
  if (this->has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvantureAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AdvantureAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvantureAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvantureAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AdvantureAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AdvantureAck)
    UnsafeMergeFrom(*source);
  }
}

void AdvantureAck::MergeFrom(const AdvantureAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AdvantureAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvantureAck::UnsafeMergeFrom(const AdvantureAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.nexttime() != 0) {
    set_nexttime(from.nexttime());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.crit() != 0) {
    set_crit(from.crit());
  }
  if (from.has_event()) {
    mutable_event()->::NetMsg::AdvantureEvent::MergeFrom(from.event());
  }
}

void AdvantureAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AdvantureAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantureAck::CopyFrom(const AdvantureAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AdvantureAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvantureAck::IsInitialized() const {

  return true;
}

void AdvantureAck::Swap(AdvantureAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvantureAck::InternalSwap(AdvantureAck* other) {
  std::swap(times_, other->times_);
  std::swap(nexttime_, other->nexttime_);
  std::swap(gold_, other->gold_);
  std::swap(exp_, other->exp_);
  std::swap(crit_, other->crit_);
  std::swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvantureAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvantureAck_descriptor_;
  metadata.reflection = AdvantureAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvantureAck

// optional uint32 times = 1;
void AdvantureAck::clear_times() {
  times_ = 0u;
}
::google::protobuf::uint32 AdvantureAck::times() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureAck.times)
  return times_;
}
void AdvantureAck::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureAck.times)
}

// optional uint32 nextTime = 2;
void AdvantureAck::clear_nexttime() {
  nexttime_ = 0u;
}
::google::protobuf::uint32 AdvantureAck::nexttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureAck.nextTime)
  return nexttime_;
}
void AdvantureAck::set_nexttime(::google::protobuf::uint32 value) {
  
  nexttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureAck.nextTime)
}

// optional uint32 gold = 3;
void AdvantureAck::clear_gold() {
  gold_ = 0u;
}
::google::protobuf::uint32 AdvantureAck::gold() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureAck.gold)
  return gold_;
}
void AdvantureAck::set_gold(::google::protobuf::uint32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureAck.gold)
}

// optional uint32 exp = 4;
void AdvantureAck::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 AdvantureAck::exp() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureAck.exp)
  return exp_;
}
void AdvantureAck::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureAck.exp)
}

// optional uint32 crit = 5;
void AdvantureAck::clear_crit() {
  crit_ = 0u;
}
::google::protobuf::uint32 AdvantureAck::crit() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureAck.crit)
  return crit_;
}
void AdvantureAck::set_crit(::google::protobuf::uint32 value) {
  
  crit_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureAck.crit)
}

// optional .NetMsg.AdvantureEvent event = 6;
bool AdvantureAck::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
void AdvantureAck::clear_event() {
  if (GetArenaNoVirtual() == NULL && event_ != NULL) delete event_;
  event_ = NULL;
}
const ::NetMsg::AdvantureEvent& AdvantureAck::event() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureAck.event)
  return event_ != NULL ? *event_
                         : *::NetMsg::AdvantureEvent::internal_default_instance();
}
::NetMsg::AdvantureEvent* AdvantureAck::mutable_event() {
  
  if (event_ == NULL) {
    event_ = new ::NetMsg::AdvantureEvent;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.AdvantureAck.event)
  return event_;
}
::NetMsg::AdvantureEvent* AdvantureAck::release_event() {
  // @@protoc_insertion_point(field_release:NetMsg.AdvantureAck.event)
  
  ::NetMsg::AdvantureEvent* temp = event_;
  event_ = NULL;
  return temp;
}
void AdvantureAck::set_allocated_event(::NetMsg::AdvantureEvent* event) {
  delete event_;
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.AdvantureAck.event)
}

inline const AdvantureAck* AdvantureAck::internal_default_instance() {
  return &AdvantureAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAdvantureEventDone::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAdvantureEventDone::ReqAdvantureEventDone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqAdvantureEventDone)
}

void ReqAdvantureEventDone::InitAsDefaultInstance() {
}

ReqAdvantureEventDone::ReqAdvantureEventDone(const ReqAdvantureEventDone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqAdvantureEventDone)
}

void ReqAdvantureEventDone::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

ReqAdvantureEventDone::~ReqAdvantureEventDone() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqAdvantureEventDone)
  SharedDtor();
}

void ReqAdvantureEventDone::SharedDtor() {
}

void ReqAdvantureEventDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAdvantureEventDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAdvantureEventDone_descriptor_;
}

const ReqAdvantureEventDone& ReqAdvantureEventDone::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqAdvantureEventDone> ReqAdvantureEventDone_default_instance_;

ReqAdvantureEventDone* ReqAdvantureEventDone::New(::google::protobuf::Arena* arena) const {
  ReqAdvantureEventDone* n = new ReqAdvantureEventDone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAdvantureEventDone::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqAdvantureEventDone)
  id_ = 0u;
}

bool ReqAdvantureEventDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqAdvantureEventDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqAdvantureEventDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqAdvantureEventDone)
  return false;
#undef DO_
}

void ReqAdvantureEventDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqAdvantureEventDone)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqAdvantureEventDone)
}

::google::protobuf::uint8* ReqAdvantureEventDone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqAdvantureEventDone)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqAdvantureEventDone)
  return target;
}

size_t ReqAdvantureEventDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqAdvantureEventDone)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAdvantureEventDone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqAdvantureEventDone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqAdvantureEventDone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAdvantureEventDone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqAdvantureEventDone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqAdvantureEventDone)
    UnsafeMergeFrom(*source);
  }
}

void ReqAdvantureEventDone::MergeFrom(const ReqAdvantureEventDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqAdvantureEventDone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqAdvantureEventDone::UnsafeMergeFrom(const ReqAdvantureEventDone& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqAdvantureEventDone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqAdvantureEventDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAdvantureEventDone::CopyFrom(const ReqAdvantureEventDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqAdvantureEventDone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqAdvantureEventDone::IsInitialized() const {

  return true;
}

void ReqAdvantureEventDone::Swap(ReqAdvantureEventDone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAdvantureEventDone::InternalSwap(ReqAdvantureEventDone* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAdvantureEventDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAdvantureEventDone_descriptor_;
  metadata.reflection = ReqAdvantureEventDone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAdvantureEventDone

// optional uint32 id = 1;
void ReqAdvantureEventDone::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqAdvantureEventDone::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAdvantureEventDone.id)
  return id_;
}
void ReqAdvantureEventDone::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAdvantureEventDone.id)
}

inline const ReqAdvantureEventDone* ReqAdvantureEventDone::internal_default_instance() {
  return &ReqAdvantureEventDone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvantureEventDoneAck::kIdFieldNumber;
const int AdvantureEventDoneAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvantureEventDoneAck::AdvantureEventDoneAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AdvantureEventDoneAck)
}

void AdvantureEventDoneAck::InitAsDefaultInstance() {
}

AdvantureEventDoneAck::AdvantureEventDoneAck(const AdvantureEventDoneAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AdvantureEventDoneAck)
}

void AdvantureEventDoneAck::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&id_) + sizeof(error_));
  _cached_size_ = 0;
}

AdvantureEventDoneAck::~AdvantureEventDoneAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AdvantureEventDoneAck)
  SharedDtor();
}

void AdvantureEventDoneAck::SharedDtor() {
}

void AdvantureEventDoneAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvantureEventDoneAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantureEventDoneAck_descriptor_;
}

const AdvantureEventDoneAck& AdvantureEventDoneAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvantureEventDoneAck> AdvantureEventDoneAck_default_instance_;

AdvantureEventDoneAck* AdvantureEventDoneAck::New(::google::protobuf::Arena* arena) const {
  AdvantureEventDoneAck* n = new AdvantureEventDoneAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvantureEventDoneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AdvantureEventDoneAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvantureEventDoneAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvantureEventDoneAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdvantureEventDoneAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AdvantureEventDoneAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AdvantureEventDoneAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AdvantureEventDoneAck)
  return false;
#undef DO_
}

void AdvantureEventDoneAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AdvantureEventDoneAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AdvantureEventDoneAck)
}

::google::protobuf::uint8* AdvantureEventDoneAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AdvantureEventDoneAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AdvantureEventDoneAck)
  return target;
}

size_t AdvantureEventDoneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AdvantureEventDoneAck)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvantureEventDoneAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AdvantureEventDoneAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvantureEventDoneAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvantureEventDoneAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AdvantureEventDoneAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AdvantureEventDoneAck)
    UnsafeMergeFrom(*source);
  }
}

void AdvantureEventDoneAck::MergeFrom(const AdvantureEventDoneAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AdvantureEventDoneAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvantureEventDoneAck::UnsafeMergeFrom(const AdvantureEventDoneAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void AdvantureEventDoneAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AdvantureEventDoneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantureEventDoneAck::CopyFrom(const AdvantureEventDoneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AdvantureEventDoneAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvantureEventDoneAck::IsInitialized() const {

  return true;
}

void AdvantureEventDoneAck::Swap(AdvantureEventDoneAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvantureEventDoneAck::InternalSwap(AdvantureEventDoneAck* other) {
  std::swap(id_, other->id_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvantureEventDoneAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvantureEventDoneAck_descriptor_;
  metadata.reflection = AdvantureEventDoneAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvantureEventDoneAck

// optional uint32 id = 1;
void AdvantureEventDoneAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 AdvantureEventDoneAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEventDoneAck.id)
  return id_;
}
void AdvantureEventDoneAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEventDoneAck.id)
}

// optional uint32 error = 2;
void AdvantureEventDoneAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 AdvantureEventDoneAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEventDoneAck.error)
  return error_;
}
void AdvantureEventDoneAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEventDoneAck.error)
}

inline const AdvantureEventDoneAck* AdvantureEventDoneAck::internal_default_instance() {
  return &AdvantureEventDoneAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroFriendship::kHeroClassFieldNumber;
const int HeroFriendship::kFriendshipExpFieldNumber;
const int HeroFriendship::kFriendshipLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroFriendship::HeroFriendship()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroFriendship)
}

void HeroFriendship::InitAsDefaultInstance() {
}

HeroFriendship::HeroFriendship(const HeroFriendship& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroFriendship)
}

void HeroFriendship::SharedCtor() {
  ::memset(&heroclass_, 0, reinterpret_cast<char*>(&friendshiplv_) -
    reinterpret_cast<char*>(&heroclass_) + sizeof(friendshiplv_));
  _cached_size_ = 0;
}

HeroFriendship::~HeroFriendship() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroFriendship)
  SharedDtor();
}

void HeroFriendship::SharedDtor() {
}

void HeroFriendship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroFriendship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroFriendship_descriptor_;
}

const HeroFriendship& HeroFriendship::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroFriendship> HeroFriendship_default_instance_;

HeroFriendship* HeroFriendship::New(::google::protobuf::Arena* arena) const {
  HeroFriendship* n = new HeroFriendship;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroFriendship::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroFriendship)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeroFriendship, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeroFriendship*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroclass_, friendshiplv_);

#undef ZR_HELPER_
#undef ZR_

}

bool HeroFriendship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroFriendship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friendshipExp;
        break;
      }

      // optional uint32 friendshipExp = 2;
      case 2: {
        if (tag == 16) {
         parse_friendshipExp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendshipexp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friendshipLv;
        break;
      }

      // optional uint32 friendshipLv = 3;
      case 3: {
        if (tag == 24) {
         parse_friendshipLv:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendshiplv_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroFriendship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroFriendship)
  return false;
#undef DO_
}

void HeroFriendship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroFriendship)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // optional uint32 friendshipExp = 2;
  if (this->friendshipexp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friendshipexp(), output);
  }

  // optional uint32 friendshipLv = 3;
  if (this->friendshiplv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friendshiplv(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroFriendship)
}

::google::protobuf::uint8* HeroFriendship::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroFriendship)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // optional uint32 friendshipExp = 2;
  if (this->friendshipexp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friendshipexp(), target);
  }

  // optional uint32 friendshipLv = 3;
  if (this->friendshiplv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friendshiplv(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroFriendship)
  return target;
}

size_t HeroFriendship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroFriendship)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 friendshipExp = 2;
  if (this->friendshipexp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friendshipexp());
  }

  // optional uint32 friendshipLv = 3;
  if (this->friendshiplv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friendshiplv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroFriendship::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroFriendship)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroFriendship* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroFriendship>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroFriendship)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroFriendship)
    UnsafeMergeFrom(*source);
  }
}

void HeroFriendship::MergeFrom(const HeroFriendship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroFriendship)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroFriendship::UnsafeMergeFrom(const HeroFriendship& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.friendshipexp() != 0) {
    set_friendshipexp(from.friendshipexp());
  }
  if (from.friendshiplv() != 0) {
    set_friendshiplv(from.friendshiplv());
  }
}

void HeroFriendship::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroFriendship::CopyFrom(const HeroFriendship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroFriendship)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroFriendship::IsInitialized() const {

  return true;
}

void HeroFriendship::Swap(HeroFriendship* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroFriendship::InternalSwap(HeroFriendship* other) {
  std::swap(heroclass_, other->heroclass_);
  std::swap(friendshipexp_, other->friendshipexp_);
  std::swap(friendshiplv_, other->friendshiplv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroFriendship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroFriendship_descriptor_;
  metadata.reflection = HeroFriendship_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroFriendship

// optional uint32 heroClass = 1;
void HeroFriendship::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 HeroFriendship::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroFriendship.heroClass)
  return heroclass_;
}
void HeroFriendship::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroFriendship.heroClass)
}

// optional uint32 friendshipExp = 2;
void HeroFriendship::clear_friendshipexp() {
  friendshipexp_ = 0u;
}
::google::protobuf::uint32 HeroFriendship::friendshipexp() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroFriendship.friendshipExp)
  return friendshipexp_;
}
void HeroFriendship::set_friendshipexp(::google::protobuf::uint32 value) {
  
  friendshipexp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroFriendship.friendshipExp)
}

// optional uint32 friendshipLv = 3;
void HeroFriendship::clear_friendshiplv() {
  friendshiplv_ = 0u;
}
::google::protobuf::uint32 HeroFriendship::friendshiplv() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroFriendship.friendshipLv)
  return friendshiplv_;
}
void HeroFriendship::set_friendshiplv(::google::protobuf::uint32 value) {
  
  friendshiplv_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroFriendship.friendshipLv)
}

inline const HeroFriendship* HeroFriendship::internal_default_instance() {
  return &HeroFriendship_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroFriendshipAck::kHeroFriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroFriendshipAck::HeroFriendshipAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroFriendshipAck)
}

void HeroFriendshipAck::InitAsDefaultInstance() {
}

HeroFriendshipAck::HeroFriendshipAck(const HeroFriendshipAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroFriendshipAck)
}

void HeroFriendshipAck::SharedCtor() {
  _cached_size_ = 0;
}

HeroFriendshipAck::~HeroFriendshipAck() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroFriendshipAck)
  SharedDtor();
}

void HeroFriendshipAck::SharedDtor() {
}

void HeroFriendshipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroFriendshipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroFriendshipAck_descriptor_;
}

const HeroFriendshipAck& HeroFriendshipAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroFriendshipAck> HeroFriendshipAck_default_instance_;

HeroFriendshipAck* HeroFriendshipAck::New(::google::protobuf::Arena* arena) const {
  HeroFriendshipAck* n = new HeroFriendshipAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroFriendshipAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroFriendshipAck)
  herofri_.Clear();
}

bool HeroFriendshipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroFriendshipAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.HeroFriendship heroFri = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_heroFri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_herofri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_heroFri;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroFriendshipAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroFriendshipAck)
  return false;
#undef DO_
}

void HeroFriendshipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroFriendshipAck)
  // repeated .NetMsg.HeroFriendship heroFri = 1;
  for (unsigned int i = 0, n = this->herofri_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herofri(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroFriendshipAck)
}

::google::protobuf::uint8* HeroFriendshipAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroFriendshipAck)
  // repeated .NetMsg.HeroFriendship heroFri = 1;
  for (unsigned int i = 0, n = this->herofri_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->herofri(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroFriendshipAck)
  return target;
}

size_t HeroFriendshipAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroFriendshipAck)
  size_t total_size = 0;

  // repeated .NetMsg.HeroFriendship heroFri = 1;
  {
    unsigned int count = this->herofri_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herofri(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroFriendshipAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroFriendshipAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroFriendshipAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroFriendshipAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroFriendshipAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroFriendshipAck)
    UnsafeMergeFrom(*source);
  }
}

void HeroFriendshipAck::MergeFrom(const HeroFriendshipAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroFriendshipAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroFriendshipAck::UnsafeMergeFrom(const HeroFriendshipAck& from) {
  GOOGLE_DCHECK(&from != this);
  herofri_.MergeFrom(from.herofri_);
}

void HeroFriendshipAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroFriendshipAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroFriendshipAck::CopyFrom(const HeroFriendshipAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroFriendshipAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroFriendshipAck::IsInitialized() const {

  return true;
}

void HeroFriendshipAck::Swap(HeroFriendshipAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroFriendshipAck::InternalSwap(HeroFriendshipAck* other) {
  herofri_.UnsafeArenaSwap(&other->herofri_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroFriendshipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroFriendshipAck_descriptor_;
  metadata.reflection = HeroFriendshipAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroFriendshipAck

// repeated .NetMsg.HeroFriendship heroFri = 1;
int HeroFriendshipAck::herofri_size() const {
  return herofri_.size();
}
void HeroFriendshipAck::clear_herofri() {
  herofri_.Clear();
}
const ::NetMsg::HeroFriendship& HeroFriendshipAck::herofri(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroFriendshipAck.heroFri)
  return herofri_.Get(index);
}
::NetMsg::HeroFriendship* HeroFriendshipAck::mutable_herofri(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroFriendshipAck.heroFri)
  return herofri_.Mutable(index);
}
::NetMsg::HeroFriendship* HeroFriendshipAck::add_herofri() {
  // @@protoc_insertion_point(field_add:NetMsg.HeroFriendshipAck.heroFri)
  return herofri_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::HeroFriendship >*
HeroFriendshipAck::mutable_herofri() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.HeroFriendshipAck.heroFri)
  return &herofri_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::HeroFriendship >&
HeroFriendshipAck::herofri() const {
  // @@protoc_insertion_point(field_list:NetMsg.HeroFriendshipAck.heroFri)
  return herofri_;
}

inline const HeroFriendshipAck* HeroFriendshipAck::internal_default_instance() {
  return &HeroFriendshipAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroGeneralSoul::kHeroClassFieldNumber;
const int HeroGeneralSoul::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroGeneralSoul::HeroGeneralSoul()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroGeneralSoul)
}

void HeroGeneralSoul::InitAsDefaultInstance() {
}

HeroGeneralSoul::HeroGeneralSoul(const HeroGeneralSoul& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroGeneralSoul)
}

void HeroGeneralSoul::SharedCtor() {
  ::memset(&heroclass_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&heroclass_) + sizeof(num_));
  _cached_size_ = 0;
}

HeroGeneralSoul::~HeroGeneralSoul() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroGeneralSoul)
  SharedDtor();
}

void HeroGeneralSoul::SharedDtor() {
}

void HeroGeneralSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroGeneralSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroGeneralSoul_descriptor_;
}

const HeroGeneralSoul& HeroGeneralSoul::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroGeneralSoul> HeroGeneralSoul_default_instance_;

HeroGeneralSoul* HeroGeneralSoul::New(::google::protobuf::Arena* arena) const {
  HeroGeneralSoul* n = new HeroGeneralSoul;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroGeneralSoul::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroGeneralSoul)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeroGeneralSoul, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeroGeneralSoul*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroclass_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool HeroGeneralSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroGeneralSoul)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroGeneralSoul)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroGeneralSoul)
  return false;
#undef DO_
}

void HeroGeneralSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroGeneralSoul)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroGeneralSoul)
}

::google::protobuf::uint8* HeroGeneralSoul::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroGeneralSoul)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroGeneralSoul)
  return target;
}

size_t HeroGeneralSoul::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroGeneralSoul)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroGeneralSoul::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroGeneralSoul)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroGeneralSoul* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroGeneralSoul>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroGeneralSoul)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroGeneralSoul)
    UnsafeMergeFrom(*source);
  }
}

void HeroGeneralSoul::MergeFrom(const HeroGeneralSoul& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroGeneralSoul)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroGeneralSoul::UnsafeMergeFrom(const HeroGeneralSoul& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void HeroGeneralSoul::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroGeneralSoul)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroGeneralSoul::CopyFrom(const HeroGeneralSoul& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroGeneralSoul)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroGeneralSoul::IsInitialized() const {

  return true;
}

void HeroGeneralSoul::Swap(HeroGeneralSoul* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroGeneralSoul::InternalSwap(HeroGeneralSoul* other) {
  std::swap(heroclass_, other->heroclass_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroGeneralSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroGeneralSoul_descriptor_;
  metadata.reflection = HeroGeneralSoul_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroGeneralSoul

// optional uint32 heroClass = 1;
void HeroGeneralSoul::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 HeroGeneralSoul::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroGeneralSoul.heroClass)
  return heroclass_;
}
void HeroGeneralSoul::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroGeneralSoul.heroClass)
}

// optional uint32 num = 2;
void HeroGeneralSoul::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 HeroGeneralSoul::num() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroGeneralSoul.num)
  return num_;
}
void HeroGeneralSoul::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroGeneralSoul.num)
}

inline const HeroGeneralSoul* HeroGeneralSoul::internal_default_instance() {
  return &HeroGeneralSoul_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroGeneralSoulAck::kHeroSoulFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroGeneralSoulAck::HeroGeneralSoulAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroGeneralSoulAck)
}

void HeroGeneralSoulAck::InitAsDefaultInstance() {
}

HeroGeneralSoulAck::HeroGeneralSoulAck(const HeroGeneralSoulAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroGeneralSoulAck)
}

void HeroGeneralSoulAck::SharedCtor() {
  _cached_size_ = 0;
}

HeroGeneralSoulAck::~HeroGeneralSoulAck() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroGeneralSoulAck)
  SharedDtor();
}

void HeroGeneralSoulAck::SharedDtor() {
}

void HeroGeneralSoulAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroGeneralSoulAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroGeneralSoulAck_descriptor_;
}

const HeroGeneralSoulAck& HeroGeneralSoulAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroGeneralSoulAck> HeroGeneralSoulAck_default_instance_;

HeroGeneralSoulAck* HeroGeneralSoulAck::New(::google::protobuf::Arena* arena) const {
  HeroGeneralSoulAck* n = new HeroGeneralSoulAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroGeneralSoulAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroGeneralSoulAck)
  herosoul_.Clear();
}

bool HeroGeneralSoulAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroGeneralSoulAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.HeroGeneralSoul heroSoul = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_heroSoul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_herosoul()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_heroSoul;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroGeneralSoulAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroGeneralSoulAck)
  return false;
#undef DO_
}

void HeroGeneralSoulAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroGeneralSoulAck)
  // repeated .NetMsg.HeroGeneralSoul heroSoul = 1;
  for (unsigned int i = 0, n = this->herosoul_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herosoul(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroGeneralSoulAck)
}

::google::protobuf::uint8* HeroGeneralSoulAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroGeneralSoulAck)
  // repeated .NetMsg.HeroGeneralSoul heroSoul = 1;
  for (unsigned int i = 0, n = this->herosoul_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->herosoul(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroGeneralSoulAck)
  return target;
}

size_t HeroGeneralSoulAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroGeneralSoulAck)
  size_t total_size = 0;

  // repeated .NetMsg.HeroGeneralSoul heroSoul = 1;
  {
    unsigned int count = this->herosoul_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herosoul(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroGeneralSoulAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroGeneralSoulAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroGeneralSoulAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroGeneralSoulAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroGeneralSoulAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroGeneralSoulAck)
    UnsafeMergeFrom(*source);
  }
}

void HeroGeneralSoulAck::MergeFrom(const HeroGeneralSoulAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroGeneralSoulAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroGeneralSoulAck::UnsafeMergeFrom(const HeroGeneralSoulAck& from) {
  GOOGLE_DCHECK(&from != this);
  herosoul_.MergeFrom(from.herosoul_);
}

void HeroGeneralSoulAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroGeneralSoulAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroGeneralSoulAck::CopyFrom(const HeroGeneralSoulAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroGeneralSoulAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroGeneralSoulAck::IsInitialized() const {

  return true;
}

void HeroGeneralSoulAck::Swap(HeroGeneralSoulAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroGeneralSoulAck::InternalSwap(HeroGeneralSoulAck* other) {
  herosoul_.UnsafeArenaSwap(&other->herosoul_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroGeneralSoulAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroGeneralSoulAck_descriptor_;
  metadata.reflection = HeroGeneralSoulAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroGeneralSoulAck

// repeated .NetMsg.HeroGeneralSoul heroSoul = 1;
int HeroGeneralSoulAck::herosoul_size() const {
  return herosoul_.size();
}
void HeroGeneralSoulAck::clear_herosoul() {
  herosoul_.Clear();
}
const ::NetMsg::HeroGeneralSoul& HeroGeneralSoulAck::herosoul(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroGeneralSoulAck.heroSoul)
  return herosoul_.Get(index);
}
::NetMsg::HeroGeneralSoul* HeroGeneralSoulAck::mutable_herosoul(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroGeneralSoulAck.heroSoul)
  return herosoul_.Mutable(index);
}
::NetMsg::HeroGeneralSoul* HeroGeneralSoulAck::add_herosoul() {
  // @@protoc_insertion_point(field_add:NetMsg.HeroGeneralSoulAck.heroSoul)
  return herosoul_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::HeroGeneralSoul >*
HeroGeneralSoulAck::mutable_herosoul() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.HeroGeneralSoulAck.heroSoul)
  return &herosoul_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::HeroGeneralSoul >&
HeroGeneralSoulAck::herosoul() const {
  // @@protoc_insertion_point(field_list:NetMsg.HeroGeneralSoulAck.heroSoul)
  return herosoul_;
}

inline const HeroGeneralSoulAck* HeroGeneralSoulAck::internal_default_instance() {
  return &HeroGeneralSoulAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLearnVsCDInfo::kHeroClassFieldNumber;
const int UserLearnVsCDInfo::kUserLearnVsCDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLearnVsCDInfo::UserLearnVsCDInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UserLearnVsCDInfo)
}

void UserLearnVsCDInfo::InitAsDefaultInstance() {
}

UserLearnVsCDInfo::UserLearnVsCDInfo(const UserLearnVsCDInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UserLearnVsCDInfo)
}

void UserLearnVsCDInfo::SharedCtor() {
  ::memset(&heroclass_, 0, reinterpret_cast<char*>(&userlearnvscd_) -
    reinterpret_cast<char*>(&heroclass_) + sizeof(userlearnvscd_));
  _cached_size_ = 0;
}

UserLearnVsCDInfo::~UserLearnVsCDInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.UserLearnVsCDInfo)
  SharedDtor();
}

void UserLearnVsCDInfo::SharedDtor() {
}

void UserLearnVsCDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLearnVsCDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLearnVsCDInfo_descriptor_;
}

const UserLearnVsCDInfo& UserLearnVsCDInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserLearnVsCDInfo> UserLearnVsCDInfo_default_instance_;

UserLearnVsCDInfo* UserLearnVsCDInfo::New(::google::protobuf::Arena* arena) const {
  UserLearnVsCDInfo* n = new UserLearnVsCDInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLearnVsCDInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UserLearnVsCDInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserLearnVsCDInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserLearnVsCDInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroclass_, userlearnvscd_);

#undef ZR_HELPER_
#undef ZR_

}

bool UserLearnVsCDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UserLearnVsCDInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserLearnVsCD;
        break;
      }

      // optional uint32 UserLearnVsCD = 2;
      case 2: {
        if (tag == 16) {
         parse_UserLearnVsCD:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlearnvscd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UserLearnVsCDInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UserLearnVsCDInfo)
  return false;
#undef DO_
}

void UserLearnVsCDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UserLearnVsCDInfo)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // optional uint32 UserLearnVsCD = 2;
  if (this->userlearnvscd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userlearnvscd(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UserLearnVsCDInfo)
}

::google::protobuf::uint8* UserLearnVsCDInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UserLearnVsCDInfo)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // optional uint32 UserLearnVsCD = 2;
  if (this->userlearnvscd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userlearnvscd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UserLearnVsCDInfo)
  return target;
}

size_t UserLearnVsCDInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UserLearnVsCDInfo)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 UserLearnVsCD = 2;
  if (this->userlearnvscd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userlearnvscd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLearnVsCDInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UserLearnVsCDInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserLearnVsCDInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserLearnVsCDInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UserLearnVsCDInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UserLearnVsCDInfo)
    UnsafeMergeFrom(*source);
  }
}

void UserLearnVsCDInfo::MergeFrom(const UserLearnVsCDInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UserLearnVsCDInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserLearnVsCDInfo::UnsafeMergeFrom(const UserLearnVsCDInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.userlearnvscd() != 0) {
    set_userlearnvscd(from.userlearnvscd());
  }
}

void UserLearnVsCDInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UserLearnVsCDInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLearnVsCDInfo::CopyFrom(const UserLearnVsCDInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UserLearnVsCDInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserLearnVsCDInfo::IsInitialized() const {

  return true;
}

void UserLearnVsCDInfo::Swap(UserLearnVsCDInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLearnVsCDInfo::InternalSwap(UserLearnVsCDInfo* other) {
  std::swap(heroclass_, other->heroclass_);
  std::swap(userlearnvscd_, other->userlearnvscd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLearnVsCDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLearnVsCDInfo_descriptor_;
  metadata.reflection = UserLearnVsCDInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLearnVsCDInfo

// optional uint32 heroClass = 1;
void UserLearnVsCDInfo::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 UserLearnVsCDInfo::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserLearnVsCDInfo.heroClass)
  return heroclass_;
}
void UserLearnVsCDInfo::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UserLearnVsCDInfo.heroClass)
}

// optional uint32 UserLearnVsCD = 2;
void UserLearnVsCDInfo::clear_userlearnvscd() {
  userlearnvscd_ = 0u;
}
::google::protobuf::uint32 UserLearnVsCDInfo::userlearnvscd() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserLearnVsCDInfo.UserLearnVsCD)
  return userlearnvscd_;
}
void UserLearnVsCDInfo::set_userlearnvscd(::google::protobuf::uint32 value) {
  
  userlearnvscd_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UserLearnVsCDInfo.UserLearnVsCD)
}

inline const UserLearnVsCDInfo* UserLearnVsCDInfo::internal_default_instance() {
  return &UserLearnVsCDInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLearnVsCDAck::kCdInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLearnVsCDAck::UserLearnVsCDAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UserLearnVsCDAck)
}

void UserLearnVsCDAck::InitAsDefaultInstance() {
}

UserLearnVsCDAck::UserLearnVsCDAck(const UserLearnVsCDAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UserLearnVsCDAck)
}

void UserLearnVsCDAck::SharedCtor() {
  _cached_size_ = 0;
}

UserLearnVsCDAck::~UserLearnVsCDAck() {
  // @@protoc_insertion_point(destructor:NetMsg.UserLearnVsCDAck)
  SharedDtor();
}

void UserLearnVsCDAck::SharedDtor() {
}

void UserLearnVsCDAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLearnVsCDAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLearnVsCDAck_descriptor_;
}

const UserLearnVsCDAck& UserLearnVsCDAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserLearnVsCDAck> UserLearnVsCDAck_default_instance_;

UserLearnVsCDAck* UserLearnVsCDAck::New(::google::protobuf::Arena* arena) const {
  UserLearnVsCDAck* n = new UserLearnVsCDAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLearnVsCDAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UserLearnVsCDAck)
  cdinfo_.Clear();
}

bool UserLearnVsCDAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UserLearnVsCDAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.UserLearnVsCDInfo cdInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cdinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cdInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UserLearnVsCDAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UserLearnVsCDAck)
  return false;
#undef DO_
}

void UserLearnVsCDAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UserLearnVsCDAck)
  // repeated .NetMsg.UserLearnVsCDInfo cdInfo = 1;
  for (unsigned int i = 0, n = this->cdinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cdinfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UserLearnVsCDAck)
}

::google::protobuf::uint8* UserLearnVsCDAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UserLearnVsCDAck)
  // repeated .NetMsg.UserLearnVsCDInfo cdInfo = 1;
  for (unsigned int i = 0, n = this->cdinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cdinfo(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UserLearnVsCDAck)
  return target;
}

size_t UserLearnVsCDAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UserLearnVsCDAck)
  size_t total_size = 0;

  // repeated .NetMsg.UserLearnVsCDInfo cdInfo = 1;
  {
    unsigned int count = this->cdinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdinfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLearnVsCDAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UserLearnVsCDAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserLearnVsCDAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserLearnVsCDAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UserLearnVsCDAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UserLearnVsCDAck)
    UnsafeMergeFrom(*source);
  }
}

void UserLearnVsCDAck::MergeFrom(const UserLearnVsCDAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UserLearnVsCDAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserLearnVsCDAck::UnsafeMergeFrom(const UserLearnVsCDAck& from) {
  GOOGLE_DCHECK(&from != this);
  cdinfo_.MergeFrom(from.cdinfo_);
}

void UserLearnVsCDAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UserLearnVsCDAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLearnVsCDAck::CopyFrom(const UserLearnVsCDAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UserLearnVsCDAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserLearnVsCDAck::IsInitialized() const {

  return true;
}

void UserLearnVsCDAck::Swap(UserLearnVsCDAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLearnVsCDAck::InternalSwap(UserLearnVsCDAck* other) {
  cdinfo_.UnsafeArenaSwap(&other->cdinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLearnVsCDAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLearnVsCDAck_descriptor_;
  metadata.reflection = UserLearnVsCDAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLearnVsCDAck

// repeated .NetMsg.UserLearnVsCDInfo cdInfo = 1;
int UserLearnVsCDAck::cdinfo_size() const {
  return cdinfo_.size();
}
void UserLearnVsCDAck::clear_cdinfo() {
  cdinfo_.Clear();
}
const ::NetMsg::UserLearnVsCDInfo& UserLearnVsCDAck::cdinfo(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.UserLearnVsCDAck.cdInfo)
  return cdinfo_.Get(index);
}
::NetMsg::UserLearnVsCDInfo* UserLearnVsCDAck::mutable_cdinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.UserLearnVsCDAck.cdInfo)
  return cdinfo_.Mutable(index);
}
::NetMsg::UserLearnVsCDInfo* UserLearnVsCDAck::add_cdinfo() {
  // @@protoc_insertion_point(field_add:NetMsg.UserLearnVsCDAck.cdInfo)
  return cdinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::UserLearnVsCDInfo >*
UserLearnVsCDAck::mutable_cdinfo() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.UserLearnVsCDAck.cdInfo)
  return &cdinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::UserLearnVsCDInfo >&
UserLearnVsCDAck::cdinfo() const {
  // @@protoc_insertion_point(field_list:NetMsg.UserLearnVsCDAck.cdInfo)
  return cdinfo_;
}

inline const UserLearnVsCDAck* UserLearnVsCDAck::internal_default_instance() {
  return &UserLearnVsCDAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGiveHeroGift::kHeroClassFieldNumber;
const int ReqGiveHeroGift::kItemIdFieldNumber;
const int ReqGiveHeroGift::kItemNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGiveHeroGift::ReqGiveHeroGift()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqGiveHeroGift)
}

void ReqGiveHeroGift::InitAsDefaultInstance() {
}

ReqGiveHeroGift::ReqGiveHeroGift(const ReqGiveHeroGift& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqGiveHeroGift)
}

void ReqGiveHeroGift::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&itemnum_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(itemnum_));
  _cached_size_ = 0;
}

ReqGiveHeroGift::~ReqGiveHeroGift() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqGiveHeroGift)
  SharedDtor();
}

void ReqGiveHeroGift::SharedDtor() {
}

void ReqGiveHeroGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGiveHeroGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGiveHeroGift_descriptor_;
}

const ReqGiveHeroGift& ReqGiveHeroGift::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqGiveHeroGift> ReqGiveHeroGift_default_instance_;

ReqGiveHeroGift* ReqGiveHeroGift::New(::google::protobuf::Arena* arena) const {
  ReqGiveHeroGift* n = new ReqGiveHeroGift;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqGiveHeroGift::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqGiveHeroGift)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqGiveHeroGift, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqGiveHeroGift*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, itemnum_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqGiveHeroGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqGiveHeroGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional uint32 itemNum = 3;
      case 3: {
        if (tag == 24) {
         parse_itemNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqGiveHeroGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqGiveHeroGift)
  return false;
#undef DO_
}

void ReqGiveHeroGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqGiveHeroGift)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // optional uint64 itemId = 2;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 itemNum = 3;
  if (this->itemnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqGiveHeroGift)
}

::google::protobuf::uint8* ReqGiveHeroGift::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqGiveHeroGift)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // optional uint64 itemId = 2;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 itemNum = 3;
  if (this->itemnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqGiveHeroGift)
  return target;
}

size_t ReqGiveHeroGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqGiveHeroGift)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint64 itemId = 2;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  // optional uint32 itemNum = 3;
  if (this->itemnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGiveHeroGift::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqGiveHeroGift)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqGiveHeroGift* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGiveHeroGift>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqGiveHeroGift)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqGiveHeroGift)
    UnsafeMergeFrom(*source);
  }
}

void ReqGiveHeroGift::MergeFrom(const ReqGiveHeroGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqGiveHeroGift)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqGiveHeroGift::UnsafeMergeFrom(const ReqGiveHeroGift& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.itemnum() != 0) {
    set_itemnum(from.itemnum());
  }
}

void ReqGiveHeroGift::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqGiveHeroGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGiveHeroGift::CopyFrom(const ReqGiveHeroGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqGiveHeroGift)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqGiveHeroGift::IsInitialized() const {

  return true;
}

void ReqGiveHeroGift::Swap(ReqGiveHeroGift* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGiveHeroGift::InternalSwap(ReqGiveHeroGift* other) {
  std::swap(heroclass_, other->heroclass_);
  std::swap(itemid_, other->itemid_);
  std::swap(itemnum_, other->itemnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGiveHeroGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGiveHeroGift_descriptor_;
  metadata.reflection = ReqGiveHeroGift_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqGiveHeroGift

// optional uint32 heroClass = 1;
void ReqGiveHeroGift::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 ReqGiveHeroGift::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqGiveHeroGift.heroClass)
  return heroclass_;
}
void ReqGiveHeroGift::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqGiveHeroGift.heroClass)
}

// optional uint64 itemId = 2;
void ReqGiveHeroGift::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqGiveHeroGift::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqGiveHeroGift.itemId)
  return itemid_;
}
void ReqGiveHeroGift::set_itemid(::google::protobuf::uint64 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqGiveHeroGift.itemId)
}

// optional uint32 itemNum = 3;
void ReqGiveHeroGift::clear_itemnum() {
  itemnum_ = 0u;
}
::google::protobuf::uint32 ReqGiveHeroGift::itemnum() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqGiveHeroGift.itemNum)
  return itemnum_;
}
void ReqGiveHeroGift::set_itemnum(::google::protobuf::uint32 value) {
  
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqGiveHeroGift.itemNum)
}

inline const ReqGiveHeroGift* ReqGiveHeroGift::internal_default_instance() {
  return &ReqGiveHeroGift_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GiveHeroGiftAck::kItemIdFieldNumber;
const int GiveHeroGiftAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GiveHeroGiftAck::GiveHeroGiftAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.GiveHeroGiftAck)
}

void GiveHeroGiftAck::InitAsDefaultInstance() {
}

GiveHeroGiftAck::GiveHeroGiftAck(const GiveHeroGiftAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.GiveHeroGiftAck)
}

void GiveHeroGiftAck::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(error_));
  _cached_size_ = 0;
}

GiveHeroGiftAck::~GiveHeroGiftAck() {
  // @@protoc_insertion_point(destructor:NetMsg.GiveHeroGiftAck)
  SharedDtor();
}

void GiveHeroGiftAck::SharedDtor() {
}

void GiveHeroGiftAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveHeroGiftAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveHeroGiftAck_descriptor_;
}

const GiveHeroGiftAck& GiveHeroGiftAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GiveHeroGiftAck> GiveHeroGiftAck_default_instance_;

GiveHeroGiftAck* GiveHeroGiftAck::New(::google::protobuf::Arena* arena) const {
  GiveHeroGiftAck* n = new GiveHeroGiftAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GiveHeroGiftAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.GiveHeroGiftAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GiveHeroGiftAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GiveHeroGiftAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool GiveHeroGiftAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.GiveHeroGiftAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.GiveHeroGiftAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.GiveHeroGiftAck)
  return false;
#undef DO_
}

void GiveHeroGiftAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.GiveHeroGiftAck)
  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.GiveHeroGiftAck)
}

::google::protobuf::uint8* GiveHeroGiftAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.GiveHeroGiftAck)
  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.GiveHeroGiftAck)
  return target;
}

size_t GiveHeroGiftAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.GiveHeroGiftAck)
  size_t total_size = 0;

  // optional uint64 itemId = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveHeroGiftAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.GiveHeroGiftAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GiveHeroGiftAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GiveHeroGiftAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.GiveHeroGiftAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.GiveHeroGiftAck)
    UnsafeMergeFrom(*source);
  }
}

void GiveHeroGiftAck::MergeFrom(const GiveHeroGiftAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.GiveHeroGiftAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GiveHeroGiftAck::UnsafeMergeFrom(const GiveHeroGiftAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void GiveHeroGiftAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.GiveHeroGiftAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveHeroGiftAck::CopyFrom(const GiveHeroGiftAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.GiveHeroGiftAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GiveHeroGiftAck::IsInitialized() const {

  return true;
}

void GiveHeroGiftAck::Swap(GiveHeroGiftAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GiveHeroGiftAck::InternalSwap(GiveHeroGiftAck* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GiveHeroGiftAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveHeroGiftAck_descriptor_;
  metadata.reflection = GiveHeroGiftAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GiveHeroGiftAck

// optional uint64 itemId = 1;
void GiveHeroGiftAck::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GiveHeroGiftAck::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.GiveHeroGiftAck.itemId)
  return itemid_;
}
void GiveHeroGiftAck::set_itemid(::google::protobuf::uint64 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.GiveHeroGiftAck.itemId)
}

// optional uint32 error = 2;
void GiveHeroGiftAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 GiveHeroGiftAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.GiveHeroGiftAck.error)
  return error_;
}
void GiveHeroGiftAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.GiveHeroGiftAck.error)
}

inline const GiveHeroGiftAck* GiveHeroGiftAck::internal_default_instance() {
  return &GiveHeroGiftAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGeneralSoulExchangeHero::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGeneralSoulExchangeHero::ReqGeneralSoulExchangeHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqGeneralSoulExchangeHero)
}

void ReqGeneralSoulExchangeHero::InitAsDefaultInstance() {
}

ReqGeneralSoulExchangeHero::ReqGeneralSoulExchangeHero(const ReqGeneralSoulExchangeHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqGeneralSoulExchangeHero)
}

void ReqGeneralSoulExchangeHero::SharedCtor() {
  heroid_ = 0u;
  _cached_size_ = 0;
}

ReqGeneralSoulExchangeHero::~ReqGeneralSoulExchangeHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqGeneralSoulExchangeHero)
  SharedDtor();
}

void ReqGeneralSoulExchangeHero::SharedDtor() {
}

void ReqGeneralSoulExchangeHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGeneralSoulExchangeHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGeneralSoulExchangeHero_descriptor_;
}

const ReqGeneralSoulExchangeHero& ReqGeneralSoulExchangeHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqGeneralSoulExchangeHero> ReqGeneralSoulExchangeHero_default_instance_;

ReqGeneralSoulExchangeHero* ReqGeneralSoulExchangeHero::New(::google::protobuf::Arena* arena) const {
  ReqGeneralSoulExchangeHero* n = new ReqGeneralSoulExchangeHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqGeneralSoulExchangeHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqGeneralSoulExchangeHero)
  heroid_ = 0u;
}

bool ReqGeneralSoulExchangeHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqGeneralSoulExchangeHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqGeneralSoulExchangeHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqGeneralSoulExchangeHero)
  return false;
#undef DO_
}

void ReqGeneralSoulExchangeHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqGeneralSoulExchangeHero)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqGeneralSoulExchangeHero)
}

::google::protobuf::uint8* ReqGeneralSoulExchangeHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqGeneralSoulExchangeHero)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqGeneralSoulExchangeHero)
  return target;
}

size_t ReqGeneralSoulExchangeHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqGeneralSoulExchangeHero)
  size_t total_size = 0;

  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGeneralSoulExchangeHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqGeneralSoulExchangeHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqGeneralSoulExchangeHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGeneralSoulExchangeHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqGeneralSoulExchangeHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqGeneralSoulExchangeHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqGeneralSoulExchangeHero::MergeFrom(const ReqGeneralSoulExchangeHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqGeneralSoulExchangeHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqGeneralSoulExchangeHero::UnsafeMergeFrom(const ReqGeneralSoulExchangeHero& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void ReqGeneralSoulExchangeHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqGeneralSoulExchangeHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGeneralSoulExchangeHero::CopyFrom(const ReqGeneralSoulExchangeHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqGeneralSoulExchangeHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqGeneralSoulExchangeHero::IsInitialized() const {

  return true;
}

void ReqGeneralSoulExchangeHero::Swap(ReqGeneralSoulExchangeHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGeneralSoulExchangeHero::InternalSwap(ReqGeneralSoulExchangeHero* other) {
  std::swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGeneralSoulExchangeHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGeneralSoulExchangeHero_descriptor_;
  metadata.reflection = ReqGeneralSoulExchangeHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqGeneralSoulExchangeHero

// optional uint32 heroId = 1;
void ReqGeneralSoulExchangeHero::clear_heroid() {
  heroid_ = 0u;
}
::google::protobuf::uint32 ReqGeneralSoulExchangeHero::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqGeneralSoulExchangeHero.heroId)
  return heroid_;
}
void ReqGeneralSoulExchangeHero::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqGeneralSoulExchangeHero.heroId)
}

inline const ReqGeneralSoulExchangeHero* ReqGeneralSoulExchangeHero::internal_default_instance() {
  return &ReqGeneralSoulExchangeHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralSoulExchangeHeroAck::kErrorFieldNumber;
const int GeneralSoulExchangeHeroAck::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralSoulExchangeHeroAck::GeneralSoulExchangeHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.GeneralSoulExchangeHeroAck)
}

void GeneralSoulExchangeHeroAck::InitAsDefaultInstance() {
}

GeneralSoulExchangeHeroAck::GeneralSoulExchangeHeroAck(const GeneralSoulExchangeHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.GeneralSoulExchangeHeroAck)
}

void GeneralSoulExchangeHeroAck::SharedCtor() {
  ::memset(&error_, 0, reinterpret_cast<char*>(&heroid_) -
    reinterpret_cast<char*>(&error_) + sizeof(heroid_));
  _cached_size_ = 0;
}

GeneralSoulExchangeHeroAck::~GeneralSoulExchangeHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.GeneralSoulExchangeHeroAck)
  SharedDtor();
}

void GeneralSoulExchangeHeroAck::SharedDtor() {
}

void GeneralSoulExchangeHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralSoulExchangeHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralSoulExchangeHeroAck_descriptor_;
}

const GeneralSoulExchangeHeroAck& GeneralSoulExchangeHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GeneralSoulExchangeHeroAck> GeneralSoulExchangeHeroAck_default_instance_;

GeneralSoulExchangeHeroAck* GeneralSoulExchangeHeroAck::New(::google::protobuf::Arena* arena) const {
  GeneralSoulExchangeHeroAck* n = new GeneralSoulExchangeHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeneralSoulExchangeHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.GeneralSoulExchangeHeroAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeneralSoulExchangeHeroAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeneralSoulExchangeHeroAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(error_, heroid_);

#undef ZR_HELPER_
#undef ZR_

}

bool GeneralSoulExchangeHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.GeneralSoulExchangeHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroId;
        break;
      }

      // optional uint32 heroId = 2;
      case 2: {
        if (tag == 16) {
         parse_heroId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.GeneralSoulExchangeHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.GeneralSoulExchangeHeroAck)
  return false;
#undef DO_
}

void GeneralSoulExchangeHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.GeneralSoulExchangeHeroAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint32 heroId = 2;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.GeneralSoulExchangeHeroAck)
}

::google::protobuf::uint8* GeneralSoulExchangeHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.GeneralSoulExchangeHeroAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint32 heroId = 2;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.GeneralSoulExchangeHeroAck)
  return target;
}

size_t GeneralSoulExchangeHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.GeneralSoulExchangeHeroAck)
  size_t total_size = 0;

  // optional uint32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint32 heroId = 2;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralSoulExchangeHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.GeneralSoulExchangeHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GeneralSoulExchangeHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralSoulExchangeHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.GeneralSoulExchangeHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.GeneralSoulExchangeHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void GeneralSoulExchangeHeroAck::MergeFrom(const GeneralSoulExchangeHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.GeneralSoulExchangeHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GeneralSoulExchangeHeroAck::UnsafeMergeFrom(const GeneralSoulExchangeHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void GeneralSoulExchangeHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.GeneralSoulExchangeHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralSoulExchangeHeroAck::CopyFrom(const GeneralSoulExchangeHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.GeneralSoulExchangeHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GeneralSoulExchangeHeroAck::IsInitialized() const {

  return true;
}

void GeneralSoulExchangeHeroAck::Swap(GeneralSoulExchangeHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralSoulExchangeHeroAck::InternalSwap(GeneralSoulExchangeHeroAck* other) {
  std::swap(error_, other->error_);
  std::swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeneralSoulExchangeHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralSoulExchangeHeroAck_descriptor_;
  metadata.reflection = GeneralSoulExchangeHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeneralSoulExchangeHeroAck

// optional uint32 error = 1;
void GeneralSoulExchangeHeroAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 GeneralSoulExchangeHeroAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.GeneralSoulExchangeHeroAck.error)
  return error_;
}
void GeneralSoulExchangeHeroAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.GeneralSoulExchangeHeroAck.error)
}

// optional uint32 heroId = 2;
void GeneralSoulExchangeHeroAck::clear_heroid() {
  heroid_ = 0u;
}
::google::protobuf::uint32 GeneralSoulExchangeHeroAck::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.GeneralSoulExchangeHeroAck.heroId)
  return heroid_;
}
void GeneralSoulExchangeHeroAck::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.GeneralSoulExchangeHeroAck.heroId)
}

inline const GeneralSoulExchangeHeroAck* GeneralSoulExchangeHeroAck::internal_default_instance() {
  return &GeneralSoulExchangeHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqShopItem::kShopIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqShopItem::ReqShopItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqShopItem)
}

void ReqShopItem::InitAsDefaultInstance() {
}

ReqShopItem::ReqShopItem(const ReqShopItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqShopItem)
}

void ReqShopItem::SharedCtor() {
  shopid_ = 0u;
  _cached_size_ = 0;
}

ReqShopItem::~ReqShopItem() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqShopItem)
  SharedDtor();
}

void ReqShopItem::SharedDtor() {
}

void ReqShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqShopItem_descriptor_;
}

const ReqShopItem& ReqShopItem::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqShopItem> ReqShopItem_default_instance_;

ReqShopItem* ReqShopItem::New(::google::protobuf::Arena* arena) const {
  ReqShopItem* n = new ReqShopItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqShopItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqShopItem)
  shopid_ = 0u;
}

bool ReqShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqShopItem)
  return false;
#undef DO_
}

void ReqShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqShopItem)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqShopItem)
}

::google::protobuf::uint8* ReqShopItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqShopItem)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqShopItem)
  return target;
}

size_t ReqShopItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqShopItem)
  size_t total_size = 0;

  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shopid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqShopItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqShopItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqShopItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqShopItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqShopItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqShopItem)
    UnsafeMergeFrom(*source);
  }
}

void ReqShopItem::MergeFrom(const ReqShopItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqShopItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqShopItem::UnsafeMergeFrom(const ReqShopItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.shopid() != 0) {
    set_shopid(from.shopid());
  }
}

void ReqShopItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqShopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqShopItem::CopyFrom(const ReqShopItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqShopItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqShopItem::IsInitialized() const {

  return true;
}

void ReqShopItem::Swap(ReqShopItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqShopItem::InternalSwap(ReqShopItem* other) {
  std::swap(shopid_, other->shopid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqShopItem_descriptor_;
  metadata.reflection = ReqShopItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqShopItem

// optional uint32 shopId = 1;
void ReqShopItem::clear_shopid() {
  shopid_ = 0u;
}
::google::protobuf::uint32 ReqShopItem::shopid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqShopItem.shopId)
  return shopid_;
}
void ReqShopItem::set_shopid(::google::protobuf::uint32 value) {
  
  shopid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqShopItem.shopId)
}

inline const ReqShopItem* ReqShopItem::internal_default_instance() {
  return &ReqShopItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShopItem::kItemIdFieldNumber;
const int ShopItem::kItemNumFieldNumber;
const int ShopItem::kCurrencyTypeFieldNumber;
const int ShopItem::kPriceFieldNumber;
const int ShopItem::kBuyTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShopItem::ShopItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ShopItem)
}

void ShopItem::InitAsDefaultInstance() {
}

ShopItem::ShopItem(const ShopItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ShopItem)
}

void ShopItem::SharedCtor() {
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&buytimes_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(buytimes_));
  _cached_size_ = 0;
}

ShopItem::~ShopItem() {
  // @@protoc_insertion_point(destructor:NetMsg.ShopItem)
  SharedDtor();
}

void ShopItem::SharedDtor() {
}

void ShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItem_descriptor_;
}

const ShopItem& ShopItem::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ShopItem> ShopItem_default_instance_;

ShopItem* ShopItem::New(::google::protobuf::Arena* arena) const {
  ShopItem* n = new ShopItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShopItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ShopItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ShopItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ShopItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, buytimes_);

#undef ZR_HELPER_
#undef ZR_

}

bool ShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // optional uint32 itemNum = 2;
      case 2: {
        if (tag == 16) {
         parse_itemNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currencyType;
        break;
      }

      // optional uint32 currencyType = 3;
      case 3: {
        if (tag == 24) {
         parse_currencyType:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currencytype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional uint32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buyTimes;
        break;
      }

      // optional uint32 buyTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_buyTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ShopItem)
  return false;
#undef DO_
}

void ShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ShopItem)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 itemNum = 2;
  if (this->itemnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

  // optional uint32 currencyType = 3;
  if (this->currencytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currencytype(), output);
  }

  // optional uint32 price = 4;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  // optional uint32 buyTimes = 5;
  if (this->buytimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buytimes(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ShopItem)
}

::google::protobuf::uint8* ShopItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ShopItem)
  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 itemNum = 2;
  if (this->itemnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }

  // optional uint32 currencyType = 3;
  if (this->currencytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currencytype(), target);
  }

  // optional uint32 price = 4;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  // optional uint32 buyTimes = 5;
  if (this->buytimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buytimes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ShopItem)
  return target;
}

size_t ShopItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ShopItem)
  size_t total_size = 0;

  // optional uint32 itemId = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemid());
  }

  // optional uint32 itemNum = 2;
  if (this->itemnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemnum());
  }

  // optional uint32 currencyType = 3;
  if (this->currencytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currencytype());
  }

  // optional uint32 price = 4;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());
  }

  // optional uint32 buyTimes = 5;
  if (this->buytimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buytimes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ShopItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShopItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShopItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ShopItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ShopItem)
    UnsafeMergeFrom(*source);
  }
}

void ShopItem::MergeFrom(const ShopItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ShopItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ShopItem::UnsafeMergeFrom(const ShopItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.itemnum() != 0) {
    set_itemnum(from.itemnum());
  }
  if (from.currencytype() != 0) {
    set_currencytype(from.currencytype());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.buytimes() != 0) {
    set_buytimes(from.buytimes());
  }
}

void ShopItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ShopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItem::CopyFrom(const ShopItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ShopItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ShopItem::IsInitialized() const {

  return true;
}

void ShopItem::Swap(ShopItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShopItem::InternalSwap(ShopItem* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(itemnum_, other->itemnum_);
  std::swap(currencytype_, other->currencytype_);
  std::swap(price_, other->price_);
  std::swap(buytimes_, other->buytimes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItem_descriptor_;
  metadata.reflection = ShopItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShopItem

// optional uint32 itemId = 1;
void ShopItem::clear_itemid() {
  itemid_ = 0u;
}
::google::protobuf::uint32 ShopItem::itemid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItem.itemId)
  return itemid_;
}
void ShopItem::set_itemid(::google::protobuf::uint32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ShopItem.itemId)
}

// optional uint32 itemNum = 2;
void ShopItem::clear_itemnum() {
  itemnum_ = 0u;
}
::google::protobuf::uint32 ShopItem::itemnum() const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItem.itemNum)
  return itemnum_;
}
void ShopItem::set_itemnum(::google::protobuf::uint32 value) {
  
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ShopItem.itemNum)
}

// optional uint32 currencyType = 3;
void ShopItem::clear_currencytype() {
  currencytype_ = 0u;
}
::google::protobuf::uint32 ShopItem::currencytype() const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItem.currencyType)
  return currencytype_;
}
void ShopItem::set_currencytype(::google::protobuf::uint32 value) {
  
  currencytype_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ShopItem.currencyType)
}

// optional uint32 price = 4;
void ShopItem::clear_price() {
  price_ = 0u;
}
::google::protobuf::uint32 ShopItem::price() const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItem.price)
  return price_;
}
void ShopItem::set_price(::google::protobuf::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ShopItem.price)
}

// optional uint32 buyTimes = 5;
void ShopItem::clear_buytimes() {
  buytimes_ = 0u;
}
::google::protobuf::uint32 ShopItem::buytimes() const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItem.buyTimes)
  return buytimes_;
}
void ShopItem::set_buytimes(::google::protobuf::uint32 value) {
  
  buytimes_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ShopItem.buyTimes)
}

inline const ShopItem* ShopItem::internal_default_instance() {
  return &ShopItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShopItemAck::kShopIdFieldNumber;
const int ShopItemAck::kRefreshTimeFieldNumber;
const int ShopItemAck::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShopItemAck::ShopItemAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ShopItemAck)
}

void ShopItemAck::InitAsDefaultInstance() {
}

ShopItemAck::ShopItemAck(const ShopItemAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ShopItemAck)
}

void ShopItemAck::SharedCtor() {
  ::memset(&shopid_, 0, reinterpret_cast<char*>(&refreshtime_) -
    reinterpret_cast<char*>(&shopid_) + sizeof(refreshtime_));
  _cached_size_ = 0;
}

ShopItemAck::~ShopItemAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ShopItemAck)
  SharedDtor();
}

void ShopItemAck::SharedDtor() {
}

void ShopItemAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItemAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItemAck_descriptor_;
}

const ShopItemAck& ShopItemAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ShopItemAck> ShopItemAck_default_instance_;

ShopItemAck* ShopItemAck::New(::google::protobuf::Arena* arena) const {
  ShopItemAck* n = new ShopItemAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShopItemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ShopItemAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ShopItemAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ShopItemAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(shopid_, refreshtime_);

#undef ZR_HELPER_
#undef ZR_

  items_.Clear();
}

bool ShopItemAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ShopItemAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_refreshTime;
        break;
      }

      // optional uint32 refreshTime = 2;
      case 2: {
        if (tag == 16) {
         parse_refreshTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .NetMsg.ShopItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ShopItemAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ShopItemAck)
  return false;
#undef DO_
}

void ShopItemAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ShopItemAck)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // optional uint32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refreshtime(), output);
  }

  // repeated .NetMsg.ShopItem items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ShopItemAck)
}

::google::protobuf::uint8* ShopItemAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ShopItemAck)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // optional uint32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refreshtime(), target);
  }

  // repeated .NetMsg.ShopItem items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ShopItemAck)
  return target;
}

size_t ShopItemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ShopItemAck)
  size_t total_size = 0;

  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shopid());
  }

  // optional uint32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->refreshtime());
  }

  // repeated .NetMsg.ShopItem items = 3;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItemAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ShopItemAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShopItemAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShopItemAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ShopItemAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ShopItemAck)
    UnsafeMergeFrom(*source);
  }
}

void ShopItemAck::MergeFrom(const ShopItemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ShopItemAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ShopItemAck::UnsafeMergeFrom(const ShopItemAck& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
  if (from.shopid() != 0) {
    set_shopid(from.shopid());
  }
  if (from.refreshtime() != 0) {
    set_refreshtime(from.refreshtime());
  }
}

void ShopItemAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ShopItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItemAck::CopyFrom(const ShopItemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ShopItemAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ShopItemAck::IsInitialized() const {

  return true;
}

void ShopItemAck::Swap(ShopItemAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShopItemAck::InternalSwap(ShopItemAck* other) {
  std::swap(shopid_, other->shopid_);
  std::swap(refreshtime_, other->refreshtime_);
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShopItemAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItemAck_descriptor_;
  metadata.reflection = ShopItemAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShopItemAck

// optional uint32 shopId = 1;
void ShopItemAck::clear_shopid() {
  shopid_ = 0u;
}
::google::protobuf::uint32 ShopItemAck::shopid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItemAck.shopId)
  return shopid_;
}
void ShopItemAck::set_shopid(::google::protobuf::uint32 value) {
  
  shopid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ShopItemAck.shopId)
}

// optional uint32 refreshTime = 2;
void ShopItemAck::clear_refreshtime() {
  refreshtime_ = 0u;
}
::google::protobuf::uint32 ShopItemAck::refreshtime() const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItemAck.refreshTime)
  return refreshtime_;
}
void ShopItemAck::set_refreshtime(::google::protobuf::uint32 value) {
  
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ShopItemAck.refreshTime)
}

// repeated .NetMsg.ShopItem items = 3;
int ShopItemAck::items_size() const {
  return items_.size();
}
void ShopItemAck::clear_items() {
  items_.Clear();
}
const ::NetMsg::ShopItem& ShopItemAck::items(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ShopItemAck.items)
  return items_.Get(index);
}
::NetMsg::ShopItem* ShopItemAck::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ShopItemAck.items)
  return items_.Mutable(index);
}
::NetMsg::ShopItem* ShopItemAck::add_items() {
  // @@protoc_insertion_point(field_add:NetMsg.ShopItemAck.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ShopItem >*
ShopItemAck::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ShopItemAck.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ShopItem >&
ShopItemAck::items() const {
  // @@protoc_insertion_point(field_list:NetMsg.ShopItemAck.items)
  return items_;
}

inline const ShopItemAck* ShopItemAck::internal_default_instance() {
  return &ShopItemAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBuyShop::kShopIdFieldNumber;
const int ReqBuyShop::kShopPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBuyShop::ReqBuyShop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqBuyShop)
}

void ReqBuyShop::InitAsDefaultInstance() {
}

ReqBuyShop::ReqBuyShop(const ReqBuyShop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqBuyShop)
}

void ReqBuyShop::SharedCtor() {
  ::memset(&shopid_, 0, reinterpret_cast<char*>(&shoppos_) -
    reinterpret_cast<char*>(&shopid_) + sizeof(shoppos_));
  _cached_size_ = 0;
}

ReqBuyShop::~ReqBuyShop() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqBuyShop)
  SharedDtor();
}

void ReqBuyShop::SharedDtor() {
}

void ReqBuyShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuyShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuyShop_descriptor_;
}

const ReqBuyShop& ReqBuyShop::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqBuyShop> ReqBuyShop_default_instance_;

ReqBuyShop* ReqBuyShop::New(::google::protobuf::Arena* arena) const {
  ReqBuyShop* n = new ReqBuyShop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBuyShop::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqBuyShop)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqBuyShop, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqBuyShop*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(shopid_, shoppos_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqBuyShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqBuyShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopPos;
        break;
      }

      // optional uint32 shopPos = 2;
      case 2: {
        if (tag == 16) {
         parse_shopPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoppos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqBuyShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqBuyShop)
  return false;
#undef DO_
}

void ReqBuyShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqBuyShop)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // optional uint32 shopPos = 2;
  if (this->shoppos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shoppos(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqBuyShop)
}

::google::protobuf::uint8* ReqBuyShop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqBuyShop)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // optional uint32 shopPos = 2;
  if (this->shoppos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shoppos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqBuyShop)
  return target;
}

size_t ReqBuyShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqBuyShop)
  size_t total_size = 0;

  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shopid());
  }

  // optional uint32 shopPos = 2;
  if (this->shoppos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shoppos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuyShop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqBuyShop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqBuyShop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBuyShop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqBuyShop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqBuyShop)
    UnsafeMergeFrom(*source);
  }
}

void ReqBuyShop::MergeFrom(const ReqBuyShop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqBuyShop)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqBuyShop::UnsafeMergeFrom(const ReqBuyShop& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.shopid() != 0) {
    set_shopid(from.shopid());
  }
  if (from.shoppos() != 0) {
    set_shoppos(from.shoppos());
  }
}

void ReqBuyShop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqBuyShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyShop::CopyFrom(const ReqBuyShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqBuyShop)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqBuyShop::IsInitialized() const {

  return true;
}

void ReqBuyShop::Swap(ReqBuyShop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBuyShop::InternalSwap(ReqBuyShop* other) {
  std::swap(shopid_, other->shopid_);
  std::swap(shoppos_, other->shoppos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBuyShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuyShop_descriptor_;
  metadata.reflection = ReqBuyShop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBuyShop

// optional uint32 shopId = 1;
void ReqBuyShop::clear_shopid() {
  shopid_ = 0u;
}
::google::protobuf::uint32 ReqBuyShop::shopid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBuyShop.shopId)
  return shopid_;
}
void ReqBuyShop::set_shopid(::google::protobuf::uint32 value) {
  
  shopid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBuyShop.shopId)
}

// optional uint32 shopPos = 2;
void ReqBuyShop::clear_shoppos() {
  shoppos_ = 0u;
}
::google::protobuf::uint32 ReqBuyShop::shoppos() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBuyShop.shopPos)
  return shoppos_;
}
void ReqBuyShop::set_shoppos(::google::protobuf::uint32 value) {
  
  shoppos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBuyShop.shopPos)
}

inline const ReqBuyShop* ReqBuyShop::internal_default_instance() {
  return &ReqBuyShop_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuyShopAck::kShopIdFieldNumber;
const int BuyShopAck::kShopPosFieldNumber;
const int BuyShopAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuyShopAck::BuyShopAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BuyShopAck)
}

void BuyShopAck::InitAsDefaultInstance() {
}

BuyShopAck::BuyShopAck(const BuyShopAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BuyShopAck)
}

void BuyShopAck::SharedCtor() {
  ::memset(&shopid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&shopid_) + sizeof(error_));
  _cached_size_ = 0;
}

BuyShopAck::~BuyShopAck() {
  // @@protoc_insertion_point(destructor:NetMsg.BuyShopAck)
  SharedDtor();
}

void BuyShopAck::SharedDtor() {
}

void BuyShopAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyShopAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyShopAck_descriptor_;
}

const BuyShopAck& BuyShopAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BuyShopAck> BuyShopAck_default_instance_;

BuyShopAck* BuyShopAck::New(::google::protobuf::Arena* arena) const {
  BuyShopAck* n = new BuyShopAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuyShopAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BuyShopAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BuyShopAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BuyShopAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(shopid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool BuyShopAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BuyShopAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopPos;
        break;
      }

      // optional uint32 shopPos = 2;
      case 2: {
        if (tag == 16) {
         parse_shopPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoppos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BuyShopAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BuyShopAck)
  return false;
#undef DO_
}

void BuyShopAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BuyShopAck)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // optional uint32 shopPos = 2;
  if (this->shoppos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shoppos(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BuyShopAck)
}

::google::protobuf::uint8* BuyShopAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BuyShopAck)
  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // optional uint32 shopPos = 2;
  if (this->shoppos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shoppos(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BuyShopAck)
  return target;
}

size_t BuyShopAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BuyShopAck)
  size_t total_size = 0;

  // optional uint32 shopId = 1;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shopid());
  }

  // optional uint32 shopPos = 2;
  if (this->shoppos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shoppos());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyShopAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BuyShopAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BuyShopAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuyShopAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BuyShopAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BuyShopAck)
    UnsafeMergeFrom(*source);
  }
}

void BuyShopAck::MergeFrom(const BuyShopAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BuyShopAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BuyShopAck::UnsafeMergeFrom(const BuyShopAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.shopid() != 0) {
    set_shopid(from.shopid());
  }
  if (from.shoppos() != 0) {
    set_shoppos(from.shoppos());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void BuyShopAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BuyShopAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyShopAck::CopyFrom(const BuyShopAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BuyShopAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BuyShopAck::IsInitialized() const {

  return true;
}

void BuyShopAck::Swap(BuyShopAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuyShopAck::InternalSwap(BuyShopAck* other) {
  std::swap(shopid_, other->shopid_);
  std::swap(shoppos_, other->shoppos_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuyShopAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyShopAck_descriptor_;
  metadata.reflection = BuyShopAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuyShopAck

// optional uint32 shopId = 1;
void BuyShopAck::clear_shopid() {
  shopid_ = 0u;
}
::google::protobuf::uint32 BuyShopAck::shopid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BuyShopAck.shopId)
  return shopid_;
}
void BuyShopAck::set_shopid(::google::protobuf::uint32 value) {
  
  shopid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BuyShopAck.shopId)
}

// optional uint32 shopPos = 2;
void BuyShopAck::clear_shoppos() {
  shoppos_ = 0u;
}
::google::protobuf::uint32 BuyShopAck::shoppos() const {
  // @@protoc_insertion_point(field_get:NetMsg.BuyShopAck.shopPos)
  return shoppos_;
}
void BuyShopAck::set_shoppos(::google::protobuf::uint32 value) {
  
  shoppos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BuyShopAck.shopPos)
}

// optional uint32 error = 3;
void BuyShopAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 BuyShopAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.BuyShopAck.error)
  return error_;
}
void BuyShopAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BuyShopAck.error)
}

inline const BuyShopAck* BuyShopAck::internal_default_instance() {
  return &BuyShopAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRefreshShop::ReqRefreshShop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRefreshShop)
}

void ReqRefreshShop::InitAsDefaultInstance() {
}

ReqRefreshShop::ReqRefreshShop(const ReqRefreshShop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRefreshShop)
}

void ReqRefreshShop::SharedCtor() {
  _cached_size_ = 0;
}

ReqRefreshShop::~ReqRefreshShop() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRefreshShop)
  SharedDtor();
}

void ReqRefreshShop::SharedDtor() {
}

void ReqRefreshShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRefreshShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRefreshShop_descriptor_;
}

const ReqRefreshShop& ReqRefreshShop::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRefreshShop> ReqRefreshShop_default_instance_;

ReqRefreshShop* ReqRefreshShop::New(::google::protobuf::Arena* arena) const {
  ReqRefreshShop* n = new ReqRefreshShop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRefreshShop::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRefreshShop)
}

bool ReqRefreshShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRefreshShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRefreshShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRefreshShop)
  return false;
#undef DO_
}

void ReqRefreshShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRefreshShop)
  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRefreshShop)
}

::google::protobuf::uint8* ReqRefreshShop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRefreshShop)
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRefreshShop)
  return target;
}

size_t ReqRefreshShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRefreshShop)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRefreshShop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRefreshShop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRefreshShop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRefreshShop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRefreshShop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRefreshShop)
    UnsafeMergeFrom(*source);
  }
}

void ReqRefreshShop::MergeFrom(const ReqRefreshShop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRefreshShop)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRefreshShop::UnsafeMergeFrom(const ReqRefreshShop& from) {
  GOOGLE_DCHECK(&from != this);
}

void ReqRefreshShop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRefreshShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRefreshShop::CopyFrom(const ReqRefreshShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRefreshShop)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRefreshShop::IsInitialized() const {

  return true;
}

void ReqRefreshShop::Swap(ReqRefreshShop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRefreshShop::InternalSwap(ReqRefreshShop* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRefreshShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRefreshShop_descriptor_;
  metadata.reflection = ReqRefreshShop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRefreshShop

inline const ReqRefreshShop* ReqRefreshShop::internal_default_instance() {
  return &ReqRefreshShop_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshShopAck::RefreshShopAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RefreshShopAck)
}

void RefreshShopAck::InitAsDefaultInstance() {
}

RefreshShopAck::RefreshShopAck(const RefreshShopAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RefreshShopAck)
}

void RefreshShopAck::SharedCtor() {
  _cached_size_ = 0;
}

RefreshShopAck::~RefreshShopAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RefreshShopAck)
  SharedDtor();
}

void RefreshShopAck::SharedDtor() {
}

void RefreshShopAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshShopAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshShopAck_descriptor_;
}

const RefreshShopAck& RefreshShopAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RefreshShopAck> RefreshShopAck_default_instance_;

RefreshShopAck* RefreshShopAck::New(::google::protobuf::Arena* arena) const {
  RefreshShopAck* n = new RefreshShopAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefreshShopAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RefreshShopAck)
}

bool RefreshShopAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RefreshShopAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RefreshShopAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RefreshShopAck)
  return false;
#undef DO_
}

void RefreshShopAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RefreshShopAck)
  // @@protoc_insertion_point(serialize_end:NetMsg.RefreshShopAck)
}

::google::protobuf::uint8* RefreshShopAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RefreshShopAck)
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RefreshShopAck)
  return target;
}

size_t RefreshShopAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RefreshShopAck)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshShopAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RefreshShopAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RefreshShopAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefreshShopAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RefreshShopAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RefreshShopAck)
    UnsafeMergeFrom(*source);
  }
}

void RefreshShopAck::MergeFrom(const RefreshShopAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RefreshShopAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RefreshShopAck::UnsafeMergeFrom(const RefreshShopAck& from) {
  GOOGLE_DCHECK(&from != this);
}

void RefreshShopAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RefreshShopAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshShopAck::CopyFrom(const RefreshShopAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RefreshShopAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RefreshShopAck::IsInitialized() const {

  return true;
}

void RefreshShopAck::Swap(RefreshShopAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshShopAck::InternalSwap(RefreshShopAck* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefreshShopAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshShopAck_descriptor_;
  metadata.reflection = RefreshShopAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RefreshShopAck

inline const RefreshShopAck* RefreshShopAck::internal_default_instance() {
  return &RefreshShopAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEvolveHero::kHeroIdFieldNumber;
const int ReqEvolveHero::kEatHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEvolveHero::ReqEvolveHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqEvolveHero)
}

void ReqEvolveHero::InitAsDefaultInstance() {
}

ReqEvolveHero::ReqEvolveHero(const ReqEvolveHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqEvolveHero)
}

void ReqEvolveHero::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&eatheroid_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(eatheroid_));
  _cached_size_ = 0;
}

ReqEvolveHero::~ReqEvolveHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqEvolveHero)
  SharedDtor();
}

void ReqEvolveHero::SharedDtor() {
}

void ReqEvolveHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEvolveHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEvolveHero_descriptor_;
}

const ReqEvolveHero& ReqEvolveHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqEvolveHero> ReqEvolveHero_default_instance_;

ReqEvolveHero* ReqEvolveHero::New(::google::protobuf::Arena* arena) const {
  ReqEvolveHero* n = new ReqEvolveHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqEvolveHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqEvolveHero)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqEvolveHero, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqEvolveHero*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, eatheroid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqEvolveHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqEvolveHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eatHeroId;
        break;
      }

      // optional uint64 eatHeroId = 2;
      case 2: {
        if (tag == 16) {
         parse_eatHeroId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eatheroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqEvolveHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqEvolveHero)
  return false;
#undef DO_
}

void ReqEvolveHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqEvolveHero)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint64 eatHeroId = 2;
  if (this->eatheroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->eatheroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqEvolveHero)
}

::google::protobuf::uint8* ReqEvolveHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqEvolveHero)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint64 eatHeroId = 2;
  if (this->eatheroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->eatheroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqEvolveHero)
  return target;
}

size_t ReqEvolveHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqEvolveHero)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint64 eatHeroId = 2;
  if (this->eatheroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->eatheroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEvolveHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqEvolveHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqEvolveHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEvolveHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqEvolveHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqEvolveHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqEvolveHero::MergeFrom(const ReqEvolveHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqEvolveHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqEvolveHero::UnsafeMergeFrom(const ReqEvolveHero& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.eatheroid() != 0) {
    set_eatheroid(from.eatheroid());
  }
}

void ReqEvolveHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqEvolveHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEvolveHero::CopyFrom(const ReqEvolveHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqEvolveHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqEvolveHero::IsInitialized() const {

  return true;
}

void ReqEvolveHero::Swap(ReqEvolveHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEvolveHero::InternalSwap(ReqEvolveHero* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(eatheroid_, other->eatheroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEvolveHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEvolveHero_descriptor_;
  metadata.reflection = ReqEvolveHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqEvolveHero

// optional uint64 heroId = 1;
void ReqEvolveHero::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqEvolveHero::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqEvolveHero.heroId)
  return heroid_;
}
void ReqEvolveHero::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqEvolveHero.heroId)
}

// optional uint64 eatHeroId = 2;
void ReqEvolveHero::clear_eatheroid() {
  eatheroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqEvolveHero::eatheroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqEvolveHero.eatHeroId)
  return eatheroid_;
}
void ReqEvolveHero::set_eatheroid(::google::protobuf::uint64 value) {
  
  eatheroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqEvolveHero.eatHeroId)
}

inline const ReqEvolveHero* ReqEvolveHero::internal_default_instance() {
  return &ReqEvolveHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvolveHeroAck::kHeroIdFieldNumber;
const int EvolveHeroAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvolveHeroAck::EvolveHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.EvolveHeroAck)
}

void EvolveHeroAck::InitAsDefaultInstance() {
}

EvolveHeroAck::EvolveHeroAck(const EvolveHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.EvolveHeroAck)
}

void EvolveHeroAck::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(error_));
  _cached_size_ = 0;
}

EvolveHeroAck::~EvolveHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.EvolveHeroAck)
  SharedDtor();
}

void EvolveHeroAck::SharedDtor() {
}

void EvolveHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvolveHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvolveHeroAck_descriptor_;
}

const EvolveHeroAck& EvolveHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EvolveHeroAck> EvolveHeroAck_default_instance_;

EvolveHeroAck* EvolveHeroAck::New(::google::protobuf::Arena* arena) const {
  EvolveHeroAck* n = new EvolveHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EvolveHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.EvolveHeroAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EvolveHeroAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EvolveHeroAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool EvolveHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.EvolveHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.EvolveHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.EvolveHeroAck)
  return false;
#undef DO_
}

void EvolveHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.EvolveHeroAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.EvolveHeroAck)
}

::google::protobuf::uint8* EvolveHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.EvolveHeroAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.EvolveHeroAck)
  return target;
}

size_t EvolveHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.EvolveHeroAck)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvolveHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.EvolveHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EvolveHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvolveHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.EvolveHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.EvolveHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void EvolveHeroAck::MergeFrom(const EvolveHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.EvolveHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EvolveHeroAck::UnsafeMergeFrom(const EvolveHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void EvolveHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.EvolveHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvolveHeroAck::CopyFrom(const EvolveHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.EvolveHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EvolveHeroAck::IsInitialized() const {

  return true;
}

void EvolveHeroAck::Swap(EvolveHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvolveHeroAck::InternalSwap(EvolveHeroAck* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EvolveHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvolveHeroAck_descriptor_;
  metadata.reflection = EvolveHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EvolveHeroAck

// optional uint64 heroId = 1;
void EvolveHeroAck::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EvolveHeroAck::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.EvolveHeroAck.heroId)
  return heroid_;
}
void EvolveHeroAck::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.EvolveHeroAck.heroId)
}

// optional uint32 error = 2;
void EvolveHeroAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 EvolveHeroAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.EvolveHeroAck.error)
  return error_;
}
void EvolveHeroAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.EvolveHeroAck.error)
}

inline const EvolveHeroAck* EvolveHeroAck::internal_default_instance() {
  return &EvolveHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAdvancementRank::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAdvancementRank::ReqAdvancementRank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqAdvancementRank)
}

void ReqAdvancementRank::InitAsDefaultInstance() {
}

ReqAdvancementRank::ReqAdvancementRank(const ReqAdvancementRank& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqAdvancementRank)
}

void ReqAdvancementRank::SharedCtor() {
  rank_ = 0u;
  _cached_size_ = 0;
}

ReqAdvancementRank::~ReqAdvancementRank() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqAdvancementRank)
  SharedDtor();
}

void ReqAdvancementRank::SharedDtor() {
}

void ReqAdvancementRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAdvancementRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAdvancementRank_descriptor_;
}

const ReqAdvancementRank& ReqAdvancementRank::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqAdvancementRank> ReqAdvancementRank_default_instance_;

ReqAdvancementRank* ReqAdvancementRank::New(::google::protobuf::Arena* arena) const {
  ReqAdvancementRank* n = new ReqAdvancementRank;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAdvancementRank::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqAdvancementRank)
  rank_ = 0u;
}

bool ReqAdvancementRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqAdvancementRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqAdvancementRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqAdvancementRank)
  return false;
#undef DO_
}

void ReqAdvancementRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqAdvancementRank)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqAdvancementRank)
}

::google::protobuf::uint8* ReqAdvancementRank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqAdvancementRank)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqAdvancementRank)
  return target;
}

size_t ReqAdvancementRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqAdvancementRank)
  size_t total_size = 0;

  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAdvancementRank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqAdvancementRank)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqAdvancementRank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAdvancementRank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqAdvancementRank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqAdvancementRank)
    UnsafeMergeFrom(*source);
  }
}

void ReqAdvancementRank::MergeFrom(const ReqAdvancementRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqAdvancementRank)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqAdvancementRank::UnsafeMergeFrom(const ReqAdvancementRank& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void ReqAdvancementRank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqAdvancementRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAdvancementRank::CopyFrom(const ReqAdvancementRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqAdvancementRank)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqAdvancementRank::IsInitialized() const {

  return true;
}

void ReqAdvancementRank::Swap(ReqAdvancementRank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAdvancementRank::InternalSwap(ReqAdvancementRank* other) {
  std::swap(rank_, other->rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAdvancementRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAdvancementRank_descriptor_;
  metadata.reflection = ReqAdvancementRank_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAdvancementRank

// optional uint32 rank = 1;
void ReqAdvancementRank::clear_rank() {
  rank_ = 0u;
}
::google::protobuf::uint32 ReqAdvancementRank::rank() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAdvancementRank.rank)
  return rank_;
}
void ReqAdvancementRank::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAdvancementRank.rank)
}

inline const ReqAdvancementRank* ReqAdvancementRank::internal_default_instance() {
  return &ReqAdvancementRank_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvancementRankAck::kRankFieldNumber;
const int AdvancementRankAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvancementRankAck::AdvancementRankAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AdvancementRankAck)
}

void AdvancementRankAck::InitAsDefaultInstance() {
}

AdvancementRankAck::AdvancementRankAck(const AdvancementRankAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AdvancementRankAck)
}

void AdvancementRankAck::SharedCtor() {
  ::memset(&rank_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&rank_) + sizeof(error_));
  _cached_size_ = 0;
}

AdvancementRankAck::~AdvancementRankAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AdvancementRankAck)
  SharedDtor();
}

void AdvancementRankAck::SharedDtor() {
}

void AdvancementRankAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvancementRankAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvancementRankAck_descriptor_;
}

const AdvancementRankAck& AdvancementRankAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvancementRankAck> AdvancementRankAck_default_instance_;

AdvancementRankAck* AdvancementRankAck::New(::google::protobuf::Arena* arena) const {
  AdvancementRankAck* n = new AdvancementRankAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvancementRankAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AdvancementRankAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvancementRankAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvancementRankAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rank_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdvancementRankAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AdvancementRankAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AdvancementRankAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AdvancementRankAck)
  return false;
#undef DO_
}

void AdvancementRankAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AdvancementRankAck)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AdvancementRankAck)
}

::google::protobuf::uint8* AdvancementRankAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AdvancementRankAck)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AdvancementRankAck)
  return target;
}

size_t AdvancementRankAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AdvancementRankAck)
  size_t total_size = 0;

  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvancementRankAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AdvancementRankAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvancementRankAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvancementRankAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AdvancementRankAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AdvancementRankAck)
    UnsafeMergeFrom(*source);
  }
}

void AdvancementRankAck::MergeFrom(const AdvancementRankAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AdvancementRankAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvancementRankAck::UnsafeMergeFrom(const AdvancementRankAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void AdvancementRankAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AdvancementRankAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancementRankAck::CopyFrom(const AdvancementRankAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AdvancementRankAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvancementRankAck::IsInitialized() const {

  return true;
}

void AdvancementRankAck::Swap(AdvancementRankAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvancementRankAck::InternalSwap(AdvancementRankAck* other) {
  std::swap(rank_, other->rank_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvancementRankAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvancementRankAck_descriptor_;
  metadata.reflection = AdvancementRankAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvancementRankAck

// optional uint32 rank = 1;
void AdvancementRankAck::clear_rank() {
  rank_ = 0u;
}
::google::protobuf::uint32 AdvancementRankAck::rank() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvancementRankAck.rank)
  return rank_;
}
void AdvancementRankAck::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvancementRankAck.rank)
}

// optional uint32 error = 2;
void AdvancementRankAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 AdvancementRankAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvancementRankAck.error)
  return error_;
}
void AdvancementRankAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvancementRankAck.error)
}

inline const AdvancementRankAck* AdvancementRankAck::internal_default_instance() {
  return &AdvancementRankAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRankTitle::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRankTitle::ReqRankTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRankTitle)
}

void ReqRankTitle::InitAsDefaultInstance() {
}

ReqRankTitle::ReqRankTitle(const ReqRankTitle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRankTitle)
}

void ReqRankTitle::SharedCtor() {
  rank_ = 0u;
  _cached_size_ = 0;
}

ReqRankTitle::~ReqRankTitle() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRankTitle)
  SharedDtor();
}

void ReqRankTitle::SharedDtor() {
}

void ReqRankTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRankTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRankTitle_descriptor_;
}

const ReqRankTitle& ReqRankTitle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRankTitle> ReqRankTitle_default_instance_;

ReqRankTitle* ReqRankTitle::New(::google::protobuf::Arena* arena) const {
  ReqRankTitle* n = new ReqRankTitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRankTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRankTitle)
  rank_ = 0u;
}

bool ReqRankTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRankTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRankTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRankTitle)
  return false;
#undef DO_
}

void ReqRankTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRankTitle)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRankTitle)
}

::google::protobuf::uint8* ReqRankTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRankTitle)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRankTitle)
  return target;
}

size_t ReqRankTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRankTitle)
  size_t total_size = 0;

  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRankTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRankTitle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRankTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRankTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRankTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRankTitle)
    UnsafeMergeFrom(*source);
  }
}

void ReqRankTitle::MergeFrom(const ReqRankTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRankTitle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRankTitle::UnsafeMergeFrom(const ReqRankTitle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void ReqRankTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRankTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRankTitle::CopyFrom(const ReqRankTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRankTitle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRankTitle::IsInitialized() const {

  return true;
}

void ReqRankTitle::Swap(ReqRankTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRankTitle::InternalSwap(ReqRankTitle* other) {
  std::swap(rank_, other->rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRankTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRankTitle_descriptor_;
  metadata.reflection = ReqRankTitle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRankTitle

// optional uint32 rank = 1;
void ReqRankTitle::clear_rank() {
  rank_ = 0u;
}
::google::protobuf::uint32 ReqRankTitle::rank() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRankTitle.rank)
  return rank_;
}
void ReqRankTitle::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqRankTitle.rank)
}

inline const ReqRankTitle* ReqRankTitle::internal_default_instance() {
  return &ReqRankTitle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankTitlePlayer::kTitleFieldNumber;
const int RankTitlePlayer::kPlayerNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankTitlePlayer::RankTitlePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RankTitlePlayer)
}

void RankTitlePlayer::InitAsDefaultInstance() {
}

RankTitlePlayer::RankTitlePlayer(const RankTitlePlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RankTitlePlayer)
}

void RankTitlePlayer::SharedCtor() {
  ::memset(&title_, 0, reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&title_) + sizeof(playernum_));
  _cached_size_ = 0;
}

RankTitlePlayer::~RankTitlePlayer() {
  // @@protoc_insertion_point(destructor:NetMsg.RankTitlePlayer)
  SharedDtor();
}

void RankTitlePlayer::SharedDtor() {
}

void RankTitlePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankTitlePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankTitlePlayer_descriptor_;
}

const RankTitlePlayer& RankTitlePlayer::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RankTitlePlayer> RankTitlePlayer_default_instance_;

RankTitlePlayer* RankTitlePlayer::New(::google::protobuf::Arena* arena) const {
  RankTitlePlayer* n = new RankTitlePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankTitlePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RankTitlePlayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RankTitlePlayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RankTitlePlayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, playernum_);

#undef ZR_HELPER_
#undef ZR_

}

bool RankTitlePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RankTitlePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerNum;
        break;
      }

      // optional uint32 playerNum = 2;
      case 2: {
        if (tag == 16) {
         parse_playerNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playernum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RankTitlePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RankTitlePlayer)
  return false;
#undef DO_
}

void RankTitlePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RankTitlePlayer)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 playerNum = 2;
  if (this->playernum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playernum(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RankTitlePlayer)
}

::google::protobuf::uint8* RankTitlePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RankTitlePlayer)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 playerNum = 2;
  if (this->playernum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playernum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RankTitlePlayer)
  return target;
}

size_t RankTitlePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RankTitlePlayer)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 playerNum = 2;
  if (this->playernum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playernum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankTitlePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RankTitlePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RankTitlePlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankTitlePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RankTitlePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RankTitlePlayer)
    UnsafeMergeFrom(*source);
  }
}

void RankTitlePlayer::MergeFrom(const RankTitlePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RankTitlePlayer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RankTitlePlayer::UnsafeMergeFrom(const RankTitlePlayer& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.playernum() != 0) {
    set_playernum(from.playernum());
  }
}

void RankTitlePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RankTitlePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankTitlePlayer::CopyFrom(const RankTitlePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RankTitlePlayer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RankTitlePlayer::IsInitialized() const {

  return true;
}

void RankTitlePlayer::Swap(RankTitlePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankTitlePlayer::InternalSwap(RankTitlePlayer* other) {
  std::swap(title_, other->title_);
  std::swap(playernum_, other->playernum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankTitlePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankTitlePlayer_descriptor_;
  metadata.reflection = RankTitlePlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankTitlePlayer

// optional uint32 title = 1;
void RankTitlePlayer::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 RankTitlePlayer::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.RankTitlePlayer.title)
  return title_;
}
void RankTitlePlayer::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RankTitlePlayer.title)
}

// optional uint32 playerNum = 2;
void RankTitlePlayer::clear_playernum() {
  playernum_ = 0u;
}
::google::protobuf::uint32 RankTitlePlayer::playernum() const {
  // @@protoc_insertion_point(field_get:NetMsg.RankTitlePlayer.playerNum)
  return playernum_;
}
void RankTitlePlayer::set_playernum(::google::protobuf::uint32 value) {
  
  playernum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RankTitlePlayer.playerNum)
}

inline const RankTitlePlayer* RankTitlePlayer::internal_default_instance() {
  return &RankTitlePlayer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankTitleAck::kRankFieldNumber;
const int RankTitleAck::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankTitleAck::RankTitleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RankTitleAck)
}

void RankTitleAck::InitAsDefaultInstance() {
}

RankTitleAck::RankTitleAck(const RankTitleAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RankTitleAck)
}

void RankTitleAck::SharedCtor() {
  rank_ = 0u;
  _cached_size_ = 0;
}

RankTitleAck::~RankTitleAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RankTitleAck)
  SharedDtor();
}

void RankTitleAck::SharedDtor() {
}

void RankTitleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankTitleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankTitleAck_descriptor_;
}

const RankTitleAck& RankTitleAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RankTitleAck> RankTitleAck_default_instance_;

RankTitleAck* RankTitleAck::New(::google::protobuf::Arena* arena) const {
  RankTitleAck* n = new RankTitleAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankTitleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RankTitleAck)
  rank_ = 0u;
  players_.Clear();
}

bool RankTitleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RankTitleAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .NetMsg.RankTitlePlayer players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RankTitleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RankTitleAck)
  return false;
#undef DO_
}

void RankTitleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RankTitleAck)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // repeated .NetMsg.RankTitlePlayer players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RankTitleAck)
}

::google::protobuf::uint8* RankTitleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RankTitleAck)
  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // repeated .NetMsg.RankTitlePlayer players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->players(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RankTitleAck)
  return target;
}

size_t RankTitleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RankTitleAck)
  size_t total_size = 0;

  // optional uint32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // repeated .NetMsg.RankTitlePlayer players = 2;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankTitleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RankTitleAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RankTitleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankTitleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RankTitleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RankTitleAck)
    UnsafeMergeFrom(*source);
  }
}

void RankTitleAck::MergeFrom(const RankTitleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RankTitleAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RankTitleAck::UnsafeMergeFrom(const RankTitleAck& from) {
  GOOGLE_DCHECK(&from != this);
  players_.MergeFrom(from.players_);
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void RankTitleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RankTitleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankTitleAck::CopyFrom(const RankTitleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RankTitleAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RankTitleAck::IsInitialized() const {

  return true;
}

void RankTitleAck::Swap(RankTitleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankTitleAck::InternalSwap(RankTitleAck* other) {
  std::swap(rank_, other->rank_);
  players_.UnsafeArenaSwap(&other->players_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankTitleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankTitleAck_descriptor_;
  metadata.reflection = RankTitleAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankTitleAck

// optional uint32 rank = 1;
void RankTitleAck::clear_rank() {
  rank_ = 0u;
}
::google::protobuf::uint32 RankTitleAck::rank() const {
  // @@protoc_insertion_point(field_get:NetMsg.RankTitleAck.rank)
  return rank_;
}
void RankTitleAck::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RankTitleAck.rank)
}

// repeated .NetMsg.RankTitlePlayer players = 2;
int RankTitleAck::players_size() const {
  return players_.size();
}
void RankTitleAck::clear_players() {
  players_.Clear();
}
const ::NetMsg::RankTitlePlayer& RankTitleAck::players(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.RankTitleAck.players)
  return players_.Get(index);
}
::NetMsg::RankTitlePlayer* RankTitleAck::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.RankTitleAck.players)
  return players_.Mutable(index);
}
::NetMsg::RankTitlePlayer* RankTitleAck::add_players() {
  // @@protoc_insertion_point(field_add:NetMsg.RankTitleAck.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::RankTitlePlayer >*
RankTitleAck::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.RankTitleAck.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::RankTitlePlayer >&
RankTitleAck::players() const {
  // @@protoc_insertion_point(field_list:NetMsg.RankTitleAck.players)
  return players_;
}

inline const RankTitleAck* RankTitleAck::internal_default_instance() {
  return &RankTitleAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTitleInfo::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTitleInfo::ReqTitleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqTitleInfo)
}

void ReqTitleInfo::InitAsDefaultInstance() {
}

ReqTitleInfo::ReqTitleInfo(const ReqTitleInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqTitleInfo)
}

void ReqTitleInfo::SharedCtor() {
  title_ = 0u;
  _cached_size_ = 0;
}

ReqTitleInfo::~ReqTitleInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqTitleInfo)
  SharedDtor();
}

void ReqTitleInfo::SharedDtor() {
}

void ReqTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTitleInfo_descriptor_;
}

const ReqTitleInfo& ReqTitleInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqTitleInfo> ReqTitleInfo_default_instance_;

ReqTitleInfo* ReqTitleInfo::New(::google::protobuf::Arena* arena) const {
  ReqTitleInfo* n = new ReqTitleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqTitleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqTitleInfo)
  title_ = 0u;
}

bool ReqTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqTitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqTitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqTitleInfo)
  return false;
#undef DO_
}

void ReqTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqTitleInfo)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqTitleInfo)
}

::google::protobuf::uint8* ReqTitleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqTitleInfo)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqTitleInfo)
  return target;
}

size_t ReqTitleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqTitleInfo)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqTitleInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqTitleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTitleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqTitleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqTitleInfo)
    UnsafeMergeFrom(*source);
  }
}

void ReqTitleInfo::MergeFrom(const ReqTitleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqTitleInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqTitleInfo::UnsafeMergeFrom(const ReqTitleInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
}

void ReqTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqTitleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTitleInfo::CopyFrom(const ReqTitleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqTitleInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqTitleInfo::IsInitialized() const {

  return true;
}

void ReqTitleInfo::Swap(ReqTitleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTitleInfo::InternalSwap(ReqTitleInfo* other) {
  std::swap(title_, other->title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTitleInfo_descriptor_;
  metadata.reflection = ReqTitleInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqTitleInfo

// optional uint32 title = 1;
void ReqTitleInfo::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 ReqTitleInfo::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTitleInfo.title)
  return title_;
}
void ReqTitleInfo::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTitleInfo.title)
}

inline const ReqTitleInfo* ReqTitleInfo::internal_default_instance() {
  return &ReqTitleInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TitleInfoPlayer::kIdFieldNumber;
const int TitleInfoPlayer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TitleInfoPlayer::TitleInfoPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TitleInfoPlayer)
}

void TitleInfoPlayer::InitAsDefaultInstance() {
}

TitleInfoPlayer::TitleInfoPlayer(const TitleInfoPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TitleInfoPlayer)
}

void TitleInfoPlayer::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _cached_size_ = 0;
}

TitleInfoPlayer::~TitleInfoPlayer() {
  // @@protoc_insertion_point(destructor:NetMsg.TitleInfoPlayer)
  SharedDtor();
}

void TitleInfoPlayer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TitleInfoPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfoPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfoPlayer_descriptor_;
}

const TitleInfoPlayer& TitleInfoPlayer::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TitleInfoPlayer> TitleInfoPlayer_default_instance_;

TitleInfoPlayer* TitleInfoPlayer::New(::google::protobuf::Arena* arena) const {
  TitleInfoPlayer* n = new TitleInfoPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TitleInfoPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TitleInfoPlayer)
  id_ = 0u;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TitleInfoPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TitleInfoPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.TitleInfoPlayer.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TitleInfoPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TitleInfoPlayer)
  return false;
#undef DO_
}

void TitleInfoPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TitleInfoPlayer)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.TitleInfoPlayer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TitleInfoPlayer)
}

::google::protobuf::uint8* TitleInfoPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TitleInfoPlayer)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.TitleInfoPlayer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TitleInfoPlayer)
  return target;
}

size_t TitleInfoPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TitleInfoPlayer)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfoPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TitleInfoPlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TitleInfoPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TitleInfoPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TitleInfoPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TitleInfoPlayer)
    UnsafeMergeFrom(*source);
  }
}

void TitleInfoPlayer::MergeFrom(const TitleInfoPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TitleInfoPlayer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TitleInfoPlayer::UnsafeMergeFrom(const TitleInfoPlayer& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TitleInfoPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TitleInfoPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfoPlayer::CopyFrom(const TitleInfoPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TitleInfoPlayer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TitleInfoPlayer::IsInitialized() const {

  return true;
}

void TitleInfoPlayer::Swap(TitleInfoPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TitleInfoPlayer::InternalSwap(TitleInfoPlayer* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TitleInfoPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfoPlayer_descriptor_;
  metadata.reflection = TitleInfoPlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TitleInfoPlayer

// optional uint32 id = 1;
void TitleInfoPlayer::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 TitleInfoPlayer::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoPlayer.id)
  return id_;
}
void TitleInfoPlayer::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TitleInfoPlayer.id)
}

// optional string name = 2;
void TitleInfoPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TitleInfoPlayer::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoPlayer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitleInfoPlayer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.TitleInfoPlayer.name)
}
void TitleInfoPlayer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.TitleInfoPlayer.name)
}
void TitleInfoPlayer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.TitleInfoPlayer.name)
}
::std::string* TitleInfoPlayer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.TitleInfoPlayer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TitleInfoPlayer::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.TitleInfoPlayer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitleInfoPlayer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TitleInfoPlayer.name)
}

inline const TitleInfoPlayer* TitleInfoPlayer::internal_default_instance() {
  return &TitleInfoPlayer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TitleInfoAck::kTitleFieldNumber;
const int TitleInfoAck::kLeftTimeFieldNumber;
const int TitleInfoAck::kCurPlayerNumFieldNumber;
const int TitleInfoAck::kPlayersFieldNumber;
const int TitleInfoAck::kMeIsElectionFieldNumber;
const int TitleInfoAck::kElectionDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TitleInfoAck::TitleInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TitleInfoAck)
}

void TitleInfoAck::InitAsDefaultInstance() {
}

TitleInfoAck::TitleInfoAck(const TitleInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TitleInfoAck)
}

void TitleInfoAck::SharedCtor() {
  ::memset(&title_, 0, reinterpret_cast<char*>(&electiondata_) -
    reinterpret_cast<char*>(&title_) + sizeof(electiondata_));
  _cached_size_ = 0;
}

TitleInfoAck::~TitleInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.TitleInfoAck)
  SharedDtor();
}

void TitleInfoAck::SharedDtor() {
}

void TitleInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfoAck_descriptor_;
}

const TitleInfoAck& TitleInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TitleInfoAck> TitleInfoAck_default_instance_;

TitleInfoAck* TitleInfoAck::New(::google::protobuf::Arena* arena) const {
  TitleInfoAck* n = new TitleInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TitleInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TitleInfoAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TitleInfoAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TitleInfoAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, electiondata_);

#undef ZR_HELPER_
#undef ZR_

  players_.Clear();
}

bool TitleInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TitleInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 2;
      case 2: {
        if (tag == 16) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curPlayerNum;
        break;
      }

      // optional uint32 curPlayerNum = 3;
      case 3: {
        if (tag == 24) {
         parse_curPlayerNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curplayernum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .NetMsg.TitleInfoPlayer players = 4;
      case 4: {
        if (tag == 34) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_meIsElection;
        break;
      }

      // optional bool meIsElection = 5;
      case 5: {
        if (tag == 40) {
         parse_meIsElection:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meiselection_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_electionData;
        break;
      }

      // optional uint32 electionData = 6;
      case 6: {
        if (tag == 48) {
         parse_electionData:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &electiondata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TitleInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TitleInfoAck)
  return false;
#undef DO_
}

void TitleInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TitleInfoAck)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 leftTime = 2;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lefttime(), output);
  }

  // optional uint32 curPlayerNum = 3;
  if (this->curplayernum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curplayernum(), output);
  }

  // repeated .NetMsg.TitleInfoPlayer players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // optional bool meIsElection = 5;
  if (this->meiselection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->meiselection(), output);
  }

  // optional uint32 electionData = 6;
  if (this->electiondata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->electiondata(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TitleInfoAck)
}

::google::protobuf::uint8* TitleInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TitleInfoAck)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 leftTime = 2;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lefttime(), target);
  }

  // optional uint32 curPlayerNum = 3;
  if (this->curplayernum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curplayernum(), target);
  }

  // repeated .NetMsg.TitleInfoPlayer players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->players(i), false, target);
  }

  // optional bool meIsElection = 5;
  if (this->meiselection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->meiselection(), target);
  }

  // optional uint32 electionData = 6;
  if (this->electiondata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->electiondata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TitleInfoAck)
  return target;
}

size_t TitleInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TitleInfoAck)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 leftTime = 2;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  // optional uint32 curPlayerNum = 3;
  if (this->curplayernum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curplayernum());
  }

  // optional bool meIsElection = 5;
  if (this->meiselection() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 electionData = 6;
  if (this->electiondata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->electiondata());
  }

  // repeated .NetMsg.TitleInfoPlayer players = 4;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TitleInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TitleInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TitleInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TitleInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TitleInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void TitleInfoAck::MergeFrom(const TitleInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TitleInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TitleInfoAck::UnsafeMergeFrom(const TitleInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  players_.MergeFrom(from.players_);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
  if (from.curplayernum() != 0) {
    set_curplayernum(from.curplayernum());
  }
  if (from.meiselection() != 0) {
    set_meiselection(from.meiselection());
  }
  if (from.electiondata() != 0) {
    set_electiondata(from.electiondata());
  }
}

void TitleInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TitleInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfoAck::CopyFrom(const TitleInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TitleInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TitleInfoAck::IsInitialized() const {

  return true;
}

void TitleInfoAck::Swap(TitleInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TitleInfoAck::InternalSwap(TitleInfoAck* other) {
  std::swap(title_, other->title_);
  std::swap(lefttime_, other->lefttime_);
  std::swap(curplayernum_, other->curplayernum_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(meiselection_, other->meiselection_);
  std::swap(electiondata_, other->electiondata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TitleInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfoAck_descriptor_;
  metadata.reflection = TitleInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TitleInfoAck

// optional uint32 title = 1;
void TitleInfoAck::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 TitleInfoAck::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoAck.title)
  return title_;
}
void TitleInfoAck::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TitleInfoAck.title)
}

// optional uint32 leftTime = 2;
void TitleInfoAck::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 TitleInfoAck::lefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoAck.leftTime)
  return lefttime_;
}
void TitleInfoAck::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TitleInfoAck.leftTime)
}

// optional uint32 curPlayerNum = 3;
void TitleInfoAck::clear_curplayernum() {
  curplayernum_ = 0u;
}
::google::protobuf::uint32 TitleInfoAck::curplayernum() const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoAck.curPlayerNum)
  return curplayernum_;
}
void TitleInfoAck::set_curplayernum(::google::protobuf::uint32 value) {
  
  curplayernum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TitleInfoAck.curPlayerNum)
}

// repeated .NetMsg.TitleInfoPlayer players = 4;
int TitleInfoAck::players_size() const {
  return players_.size();
}
void TitleInfoAck::clear_players() {
  players_.Clear();
}
const ::NetMsg::TitleInfoPlayer& TitleInfoAck::players(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoAck.players)
  return players_.Get(index);
}
::NetMsg::TitleInfoPlayer* TitleInfoAck::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.TitleInfoAck.players)
  return players_.Mutable(index);
}
::NetMsg::TitleInfoPlayer* TitleInfoAck::add_players() {
  // @@protoc_insertion_point(field_add:NetMsg.TitleInfoAck.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::TitleInfoPlayer >*
TitleInfoAck::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.TitleInfoAck.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::TitleInfoPlayer >&
TitleInfoAck::players() const {
  // @@protoc_insertion_point(field_list:NetMsg.TitleInfoAck.players)
  return players_;
}

// optional bool meIsElection = 5;
void TitleInfoAck::clear_meiselection() {
  meiselection_ = false;
}
bool TitleInfoAck::meiselection() const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoAck.meIsElection)
  return meiselection_;
}
void TitleInfoAck::set_meiselection(bool value) {
  
  meiselection_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TitleInfoAck.meIsElection)
}

// optional uint32 electionData = 6;
void TitleInfoAck::clear_electiondata() {
  electiondata_ = 0u;
}
::google::protobuf::uint32 TitleInfoAck::electiondata() const {
  // @@protoc_insertion_point(field_get:NetMsg.TitleInfoAck.electionData)
  return electiondata_;
}
void TitleInfoAck::set_electiondata(::google::protobuf::uint32 value) {
  
  electiondata_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TitleInfoAck.electionData)
}

inline const TitleInfoAck* TitleInfoAck::internal_default_instance() {
  return &TitleInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqElectionTitle::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqElectionTitle::ReqElectionTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqElectionTitle)
}

void ReqElectionTitle::InitAsDefaultInstance() {
}

ReqElectionTitle::ReqElectionTitle(const ReqElectionTitle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqElectionTitle)
}

void ReqElectionTitle::SharedCtor() {
  title_ = 0u;
  _cached_size_ = 0;
}

ReqElectionTitle::~ReqElectionTitle() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqElectionTitle)
  SharedDtor();
}

void ReqElectionTitle::SharedDtor() {
}

void ReqElectionTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqElectionTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqElectionTitle_descriptor_;
}

const ReqElectionTitle& ReqElectionTitle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqElectionTitle> ReqElectionTitle_default_instance_;

ReqElectionTitle* ReqElectionTitle::New(::google::protobuf::Arena* arena) const {
  ReqElectionTitle* n = new ReqElectionTitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqElectionTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqElectionTitle)
  title_ = 0u;
}

bool ReqElectionTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqElectionTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqElectionTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqElectionTitle)
  return false;
#undef DO_
}

void ReqElectionTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqElectionTitle)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqElectionTitle)
}

::google::protobuf::uint8* ReqElectionTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqElectionTitle)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqElectionTitle)
  return target;
}

size_t ReqElectionTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqElectionTitle)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqElectionTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqElectionTitle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqElectionTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqElectionTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqElectionTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqElectionTitle)
    UnsafeMergeFrom(*source);
  }
}

void ReqElectionTitle::MergeFrom(const ReqElectionTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqElectionTitle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqElectionTitle::UnsafeMergeFrom(const ReqElectionTitle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
}

void ReqElectionTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqElectionTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqElectionTitle::CopyFrom(const ReqElectionTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqElectionTitle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqElectionTitle::IsInitialized() const {

  return true;
}

void ReqElectionTitle::Swap(ReqElectionTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqElectionTitle::InternalSwap(ReqElectionTitle* other) {
  std::swap(title_, other->title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqElectionTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqElectionTitle_descriptor_;
  metadata.reflection = ReqElectionTitle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqElectionTitle

// optional uint32 title = 1;
void ReqElectionTitle::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 ReqElectionTitle::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqElectionTitle.title)
  return title_;
}
void ReqElectionTitle::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqElectionTitle.title)
}

inline const ReqElectionTitle* ReqElectionTitle::internal_default_instance() {
  return &ReqElectionTitle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElectionTitleAck::kTitleFieldNumber;
const int ElectionTitleAck::kErrorFieldNumber;
const int ElectionTitleAck::kPlayerNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElectionTitleAck::ElectionTitleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ElectionTitleAck)
}

void ElectionTitleAck::InitAsDefaultInstance() {
}

ElectionTitleAck::ElectionTitleAck(const ElectionTitleAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ElectionTitleAck)
}

void ElectionTitleAck::SharedCtor() {
  ::memset(&title_, 0, reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&title_) + sizeof(playernum_));
  _cached_size_ = 0;
}

ElectionTitleAck::~ElectionTitleAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ElectionTitleAck)
  SharedDtor();
}

void ElectionTitleAck::SharedDtor() {
}

void ElectionTitleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElectionTitleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElectionTitleAck_descriptor_;
}

const ElectionTitleAck& ElectionTitleAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ElectionTitleAck> ElectionTitleAck_default_instance_;

ElectionTitleAck* ElectionTitleAck::New(::google::protobuf::Arena* arena) const {
  ElectionTitleAck* n = new ElectionTitleAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ElectionTitleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ElectionTitleAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ElectionTitleAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ElectionTitleAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(title_, playernum_);

#undef ZR_HELPER_
#undef ZR_

}

bool ElectionTitleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ElectionTitleAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerNum;
        break;
      }

      // optional uint32 playerNum = 3;
      case 3: {
        if (tag == 24) {
         parse_playerNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playernum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ElectionTitleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ElectionTitleAck)
  return false;
#undef DO_
}

void ElectionTitleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ElectionTitleAck)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // optional uint32 playerNum = 3;
  if (this->playernum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playernum(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ElectionTitleAck)
}

::google::protobuf::uint8* ElectionTitleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ElectionTitleAck)
  // optional uint32 title = 1;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // optional uint32 playerNum = 3;
  if (this->playernum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playernum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ElectionTitleAck)
  return target;
}

size_t ElectionTitleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ElectionTitleAck)
  size_t total_size = 0;

  // optional uint32 title = 1;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // optional uint32 playerNum = 3;
  if (this->playernum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playernum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElectionTitleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ElectionTitleAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ElectionTitleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElectionTitleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ElectionTitleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ElectionTitleAck)
    UnsafeMergeFrom(*source);
  }
}

void ElectionTitleAck::MergeFrom(const ElectionTitleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ElectionTitleAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ElectionTitleAck::UnsafeMergeFrom(const ElectionTitleAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.playernum() != 0) {
    set_playernum(from.playernum());
  }
}

void ElectionTitleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ElectionTitleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectionTitleAck::CopyFrom(const ElectionTitleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ElectionTitleAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ElectionTitleAck::IsInitialized() const {

  return true;
}

void ElectionTitleAck::Swap(ElectionTitleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElectionTitleAck::InternalSwap(ElectionTitleAck* other) {
  std::swap(title_, other->title_);
  std::swap(error_, other->error_);
  std::swap(playernum_, other->playernum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ElectionTitleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElectionTitleAck_descriptor_;
  metadata.reflection = ElectionTitleAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ElectionTitleAck

// optional uint32 title = 1;
void ElectionTitleAck::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 ElectionTitleAck::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.ElectionTitleAck.title)
  return title_;
}
void ElectionTitleAck::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ElectionTitleAck.title)
}

// optional uint32 error = 2;
void ElectionTitleAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 ElectionTitleAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.ElectionTitleAck.error)
  return error_;
}
void ElectionTitleAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ElectionTitleAck.error)
}

// optional uint32 playerNum = 3;
void ElectionTitleAck::clear_playernum() {
  playernum_ = 0u;
}
::google::protobuf::uint32 ElectionTitleAck::playernum() const {
  // @@protoc_insertion_point(field_get:NetMsg.ElectionTitleAck.playerNum)
  return playernum_;
}
void ElectionTitleAck::set_playernum(::google::protobuf::uint32 value) {
  
  playernum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ElectionTitleAck.playerNum)
}

inline const ElectionTitleAck* ElectionTitleAck::internal_default_instance() {
  return &ElectionTitleAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroClassSkill::kSkillIdFieldNumber;
const int HeroClassSkill::kSkillLvFieldNumber;
const int HeroClassSkill::kExpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroClassSkill::HeroClassSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroClassSkill)
}

void HeroClassSkill::InitAsDefaultInstance() {
}

HeroClassSkill::HeroClassSkill(const HeroClassSkill& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroClassSkill)
}

void HeroClassSkill::SharedCtor() {
  ::memset(&skillid_, 0, reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&skillid_) + sizeof(exp_));
  _cached_size_ = 0;
}

HeroClassSkill::~HeroClassSkill() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroClassSkill)
  SharedDtor();
}

void HeroClassSkill::SharedDtor() {
}

void HeroClassSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroClassSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroClassSkill_descriptor_;
}

const HeroClassSkill& HeroClassSkill::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroClassSkill> HeroClassSkill_default_instance_;

HeroClassSkill* HeroClassSkill::New(::google::protobuf::Arena* arena) const {
  HeroClassSkill* n = new HeroClassSkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroClassSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroClassSkill)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeroClassSkill, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeroClassSkill*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(skillid_, exp_);

#undef ZR_HELPER_
#undef ZR_

}

bool HeroClassSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroClassSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 2;
      case 2: {
        if (tag == 16) {
         parse_skillLv:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroClassSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroClassSkill)
  return false;
#undef DO_
}

void HeroClassSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroClassSkill)
  // optional uint32 skillId = 1;
  if (this->skillid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 skillLv = 2;
  if (this->skilllv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllv(), output);
  }

  // optional uint32 exp = 3;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroClassSkill)
}

::google::protobuf::uint8* HeroClassSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroClassSkill)
  // optional uint32 skillId = 1;
  if (this->skillid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 skillLv = 2;
  if (this->skilllv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllv(), target);
  }

  // optional uint32 exp = 3;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroClassSkill)
  return target;
}

size_t HeroClassSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroClassSkill)
  size_t total_size = 0;

  // optional uint32 skillId = 1;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skillid());
  }

  // optional uint32 skillLv = 2;
  if (this->skilllv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skilllv());
  }

  // optional uint32 exp = 3;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroClassSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroClassSkill)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroClassSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroClassSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroClassSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroClassSkill)
    UnsafeMergeFrom(*source);
  }
}

void HeroClassSkill::MergeFrom(const HeroClassSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroClassSkill)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroClassSkill::UnsafeMergeFrom(const HeroClassSkill& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.skillid() != 0) {
    set_skillid(from.skillid());
  }
  if (from.skilllv() != 0) {
    set_skilllv(from.skilllv());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
}

void HeroClassSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroClassSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroClassSkill::CopyFrom(const HeroClassSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroClassSkill)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroClassSkill::IsInitialized() const {

  return true;
}

void HeroClassSkill::Swap(HeroClassSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroClassSkill::InternalSwap(HeroClassSkill* other) {
  std::swap(skillid_, other->skillid_);
  std::swap(skilllv_, other->skilllv_);
  std::swap(exp_, other->exp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroClassSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroClassSkill_descriptor_;
  metadata.reflection = HeroClassSkill_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroClassSkill

// optional uint32 skillId = 1;
void HeroClassSkill::clear_skillid() {
  skillid_ = 0u;
}
::google::protobuf::uint32 HeroClassSkill::skillid() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassSkill.skillId)
  return skillid_;
}
void HeroClassSkill::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroClassSkill.skillId)
}

// optional uint32 skillLv = 2;
void HeroClassSkill::clear_skilllv() {
  skilllv_ = 0u;
}
::google::protobuf::uint32 HeroClassSkill::skilllv() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassSkill.skillLv)
  return skilllv_;
}
void HeroClassSkill::set_skilllv(::google::protobuf::uint32 value) {
  
  skilllv_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroClassSkill.skillLv)
}

// optional uint32 exp = 3;
void HeroClassSkill::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 HeroClassSkill::exp() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassSkill.exp)
  return exp_;
}
void HeroClassSkill::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroClassSkill.exp)
}

inline const HeroClassSkill* HeroClassSkill::internal_default_instance() {
  return &HeroClassSkill_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroClassInfo::kClassIdFieldNumber;
const int HeroClassInfo::kForceFieldNumber;
const int HeroClassInfo::kStarFieldNumber;
const int HeroClassInfo::kStrengthFieldNumber;
const int HeroClassInfo::kLeadershipFieldNumber;
const int HeroClassInfo::kWisdomFieldNumber;
const int HeroClassInfo::kCharmFieldNumber;
const int HeroClassInfo::kLuckFieldNumber;
const int HeroClassInfo::kSkillsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroClassInfo::HeroClassInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroClassInfo)
}

void HeroClassInfo::InitAsDefaultInstance() {
  star_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  strength_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  leadership_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  wisdom_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  charm_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
  luck_ = const_cast< ::NetMsg::HeroAttr*>(
      ::NetMsg::HeroAttr::internal_default_instance());
}

HeroClassInfo::HeroClassInfo(const HeroClassInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroClassInfo)
}

void HeroClassInfo::SharedCtor() {
  star_ = NULL;
  strength_ = NULL;
  leadership_ = NULL;
  wisdom_ = NULL;
  charm_ = NULL;
  luck_ = NULL;
  ::memset(&classid_, 0, reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&classid_) + sizeof(force_));
  _cached_size_ = 0;
}

HeroClassInfo::~HeroClassInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroClassInfo)
  SharedDtor();
}

void HeroClassInfo::SharedDtor() {
  if (this != &HeroClassInfo_default_instance_.get()) {
    delete star_;
    delete strength_;
    delete leadership_;
    delete wisdom_;
    delete charm_;
    delete luck_;
  }
}

void HeroClassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroClassInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroClassInfo_descriptor_;
}

const HeroClassInfo& HeroClassInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroClassInfo> HeroClassInfo_default_instance_;

HeroClassInfo* HeroClassInfo::New(::google::protobuf::Arena* arena) const {
  HeroClassInfo* n = new HeroClassInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroClassInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroClassInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeroClassInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeroClassInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(classid_, force_);
  if (GetArenaNoVirtual() == NULL && star_ != NULL) delete star_;
  star_ = NULL;
  if (GetArenaNoVirtual() == NULL && strength_ != NULL) delete strength_;
  strength_ = NULL;
  if (GetArenaNoVirtual() == NULL && leadership_ != NULL) delete leadership_;
  leadership_ = NULL;
  if (GetArenaNoVirtual() == NULL && wisdom_ != NULL) delete wisdom_;
  wisdom_ = NULL;
  if (GetArenaNoVirtual() == NULL && charm_ != NULL) delete charm_;
  charm_ = NULL;
  if (GetArenaNoVirtual() == NULL && luck_ != NULL) delete luck_;
  luck_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  skills_.Clear();
}

bool HeroClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroClassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 classId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_force;
        break;
      }

      // optional uint32 force = 2;
      case 2: {
        if (tag == 16) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_star;
        break;
      }

      // optional .NetMsg.HeroAttr star = 3;
      case 3: {
        if (tag == 26) {
         parse_star:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_star()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_strength;
        break;
      }

      // optional .NetMsg.HeroAttr strength = 4;
      case 4: {
        if (tag == 34) {
         parse_strength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strength()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_leadership;
        break;
      }

      // optional .NetMsg.HeroAttr leadership = 5;
      case 5: {
        if (tag == 42) {
         parse_leadership:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leadership()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_wisdom;
        break;
      }

      // optional .NetMsg.HeroAttr wisdom = 6;
      case 6: {
        if (tag == 50) {
         parse_wisdom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wisdom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_charm;
        break;
      }

      // optional .NetMsg.HeroAttr charm = 7;
      case 7: {
        if (tag == 58) {
         parse_charm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_luck;
        break;
      }

      // optional .NetMsg.HeroAttr luck = 8;
      case 8: {
        if (tag == 66) {
         parse_luck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_luck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_skills;
        break;
      }

      // repeated .NetMsg.HeroClassSkill skills = 9;
      case 9: {
        if (tag == 74) {
         parse_skills:
          DO_(input->IncrementRecursionDepth());
         parse_loop_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_skills;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroClassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroClassInfo)
  return false;
#undef DO_
}

void HeroClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroClassInfo)
  // optional uint32 classId = 1;
  if (this->classid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->classid(), output);
  }

  // optional uint32 force = 2;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->force(), output);
  }

  // optional .NetMsg.HeroAttr star = 3;
  if (this->has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->star_, output);
  }

  // optional .NetMsg.HeroAttr strength = 4;
  if (this->has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->strength_, output);
  }

  // optional .NetMsg.HeroAttr leadership = 5;
  if (this->has_leadership()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->leadership_, output);
  }

  // optional .NetMsg.HeroAttr wisdom = 6;
  if (this->has_wisdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->wisdom_, output);
  }

  // optional .NetMsg.HeroAttr charm = 7;
  if (this->has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->charm_, output);
  }

  // optional .NetMsg.HeroAttr luck = 8;
  if (this->has_luck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->luck_, output);
  }

  // repeated .NetMsg.HeroClassSkill skills = 9;
  for (unsigned int i = 0, n = this->skills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skills(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroClassInfo)
}

::google::protobuf::uint8* HeroClassInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroClassInfo)
  // optional uint32 classId = 1;
  if (this->classid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->classid(), target);
  }

  // optional uint32 force = 2;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->force(), target);
  }

  // optional .NetMsg.HeroAttr star = 3;
  if (this->has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->star_, false, target);
  }

  // optional .NetMsg.HeroAttr strength = 4;
  if (this->has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->strength_, false, target);
  }

  // optional .NetMsg.HeroAttr leadership = 5;
  if (this->has_leadership()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->leadership_, false, target);
  }

  // optional .NetMsg.HeroAttr wisdom = 6;
  if (this->has_wisdom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->wisdom_, false, target);
  }

  // optional .NetMsg.HeroAttr charm = 7;
  if (this->has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->charm_, false, target);
  }

  // optional .NetMsg.HeroAttr luck = 8;
  if (this->has_luck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->luck_, false, target);
  }

  // repeated .NetMsg.HeroClassSkill skills = 9;
  for (unsigned int i = 0, n = this->skills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->skills(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroClassInfo)
  return target;
}

size_t HeroClassInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroClassInfo)
  size_t total_size = 0;

  // optional uint32 classId = 1;
  if (this->classid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->classid());
  }

  // optional uint32 force = 2;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional .NetMsg.HeroAttr star = 3;
  if (this->has_star()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->star_);
  }

  // optional .NetMsg.HeroAttr strength = 4;
  if (this->has_strength()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->strength_);
  }

  // optional .NetMsg.HeroAttr leadership = 5;
  if (this->has_leadership()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leadership_);
  }

  // optional .NetMsg.HeroAttr wisdom = 6;
  if (this->has_wisdom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wisdom_);
  }

  // optional .NetMsg.HeroAttr charm = 7;
  if (this->has_charm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->charm_);
  }

  // optional .NetMsg.HeroAttr luck = 8;
  if (this->has_luck()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->luck_);
  }

  // repeated .NetMsg.HeroClassSkill skills = 9;
  {
    unsigned int count = this->skills_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skills(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroClassInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroClassInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroClassInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroClassInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroClassInfo)
    UnsafeMergeFrom(*source);
  }
}

void HeroClassInfo::MergeFrom(const HeroClassInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroClassInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroClassInfo::UnsafeMergeFrom(const HeroClassInfo& from) {
  GOOGLE_DCHECK(&from != this);
  skills_.MergeFrom(from.skills_);
  if (from.classid() != 0) {
    set_classid(from.classid());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.has_star()) {
    mutable_star()->::NetMsg::HeroAttr::MergeFrom(from.star());
  }
  if (from.has_strength()) {
    mutable_strength()->::NetMsg::HeroAttr::MergeFrom(from.strength());
  }
  if (from.has_leadership()) {
    mutable_leadership()->::NetMsg::HeroAttr::MergeFrom(from.leadership());
  }
  if (from.has_wisdom()) {
    mutable_wisdom()->::NetMsg::HeroAttr::MergeFrom(from.wisdom());
  }
  if (from.has_charm()) {
    mutable_charm()->::NetMsg::HeroAttr::MergeFrom(from.charm());
  }
  if (from.has_luck()) {
    mutable_luck()->::NetMsg::HeroAttr::MergeFrom(from.luck());
  }
}

void HeroClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroClassInfo::CopyFrom(const HeroClassInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroClassInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroClassInfo::IsInitialized() const {

  return true;
}

void HeroClassInfo::Swap(HeroClassInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroClassInfo::InternalSwap(HeroClassInfo* other) {
  std::swap(classid_, other->classid_);
  std::swap(force_, other->force_);
  std::swap(star_, other->star_);
  std::swap(strength_, other->strength_);
  std::swap(leadership_, other->leadership_);
  std::swap(wisdom_, other->wisdom_);
  std::swap(charm_, other->charm_);
  std::swap(luck_, other->luck_);
  skills_.UnsafeArenaSwap(&other->skills_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroClassInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroClassInfo_descriptor_;
  metadata.reflection = HeroClassInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroClassInfo

// optional uint32 classId = 1;
void HeroClassInfo::clear_classid() {
  classid_ = 0u;
}
::google::protobuf::uint32 HeroClassInfo::classid() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.classId)
  return classid_;
}
void HeroClassInfo::set_classid(::google::protobuf::uint32 value) {
  
  classid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroClassInfo.classId)
}

// optional uint32 force = 2;
void HeroClassInfo::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 HeroClassInfo::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.force)
  return force_;
}
void HeroClassInfo::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.HeroClassInfo.force)
}

// optional .NetMsg.HeroAttr star = 3;
bool HeroClassInfo::has_star() const {
  return this != internal_default_instance() && star_ != NULL;
}
void HeroClassInfo::clear_star() {
  if (GetArenaNoVirtual() == NULL && star_ != NULL) delete star_;
  star_ = NULL;
}
const ::NetMsg::HeroAttr& HeroClassInfo::star() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.star)
  return star_ != NULL ? *star_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroClassInfo::mutable_star() {
  
  if (star_ == NULL) {
    star_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassInfo.star)
  return star_;
}
::NetMsg::HeroAttr* HeroClassInfo::release_star() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroClassInfo.star)
  
  ::NetMsg::HeroAttr* temp = star_;
  star_ = NULL;
  return temp;
}
void HeroClassInfo::set_allocated_star(::NetMsg::HeroAttr* star) {
  delete star_;
  star_ = star;
  if (star) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroClassInfo.star)
}

// optional .NetMsg.HeroAttr strength = 4;
bool HeroClassInfo::has_strength() const {
  return this != internal_default_instance() && strength_ != NULL;
}
void HeroClassInfo::clear_strength() {
  if (GetArenaNoVirtual() == NULL && strength_ != NULL) delete strength_;
  strength_ = NULL;
}
const ::NetMsg::HeroAttr& HeroClassInfo::strength() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.strength)
  return strength_ != NULL ? *strength_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroClassInfo::mutable_strength() {
  
  if (strength_ == NULL) {
    strength_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassInfo.strength)
  return strength_;
}
::NetMsg::HeroAttr* HeroClassInfo::release_strength() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroClassInfo.strength)
  
  ::NetMsg::HeroAttr* temp = strength_;
  strength_ = NULL;
  return temp;
}
void HeroClassInfo::set_allocated_strength(::NetMsg::HeroAttr* strength) {
  delete strength_;
  strength_ = strength;
  if (strength) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroClassInfo.strength)
}

// optional .NetMsg.HeroAttr leadership = 5;
bool HeroClassInfo::has_leadership() const {
  return this != internal_default_instance() && leadership_ != NULL;
}
void HeroClassInfo::clear_leadership() {
  if (GetArenaNoVirtual() == NULL && leadership_ != NULL) delete leadership_;
  leadership_ = NULL;
}
const ::NetMsg::HeroAttr& HeroClassInfo::leadership() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.leadership)
  return leadership_ != NULL ? *leadership_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroClassInfo::mutable_leadership() {
  
  if (leadership_ == NULL) {
    leadership_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassInfo.leadership)
  return leadership_;
}
::NetMsg::HeroAttr* HeroClassInfo::release_leadership() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroClassInfo.leadership)
  
  ::NetMsg::HeroAttr* temp = leadership_;
  leadership_ = NULL;
  return temp;
}
void HeroClassInfo::set_allocated_leadership(::NetMsg::HeroAttr* leadership) {
  delete leadership_;
  leadership_ = leadership;
  if (leadership) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroClassInfo.leadership)
}

// optional .NetMsg.HeroAttr wisdom = 6;
bool HeroClassInfo::has_wisdom() const {
  return this != internal_default_instance() && wisdom_ != NULL;
}
void HeroClassInfo::clear_wisdom() {
  if (GetArenaNoVirtual() == NULL && wisdom_ != NULL) delete wisdom_;
  wisdom_ = NULL;
}
const ::NetMsg::HeroAttr& HeroClassInfo::wisdom() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.wisdom)
  return wisdom_ != NULL ? *wisdom_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroClassInfo::mutable_wisdom() {
  
  if (wisdom_ == NULL) {
    wisdom_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassInfo.wisdom)
  return wisdom_;
}
::NetMsg::HeroAttr* HeroClassInfo::release_wisdom() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroClassInfo.wisdom)
  
  ::NetMsg::HeroAttr* temp = wisdom_;
  wisdom_ = NULL;
  return temp;
}
void HeroClassInfo::set_allocated_wisdom(::NetMsg::HeroAttr* wisdom) {
  delete wisdom_;
  wisdom_ = wisdom;
  if (wisdom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroClassInfo.wisdom)
}

// optional .NetMsg.HeroAttr charm = 7;
bool HeroClassInfo::has_charm() const {
  return this != internal_default_instance() && charm_ != NULL;
}
void HeroClassInfo::clear_charm() {
  if (GetArenaNoVirtual() == NULL && charm_ != NULL) delete charm_;
  charm_ = NULL;
}
const ::NetMsg::HeroAttr& HeroClassInfo::charm() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.charm)
  return charm_ != NULL ? *charm_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroClassInfo::mutable_charm() {
  
  if (charm_ == NULL) {
    charm_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassInfo.charm)
  return charm_;
}
::NetMsg::HeroAttr* HeroClassInfo::release_charm() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroClassInfo.charm)
  
  ::NetMsg::HeroAttr* temp = charm_;
  charm_ = NULL;
  return temp;
}
void HeroClassInfo::set_allocated_charm(::NetMsg::HeroAttr* charm) {
  delete charm_;
  charm_ = charm;
  if (charm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroClassInfo.charm)
}

// optional .NetMsg.HeroAttr luck = 8;
bool HeroClassInfo::has_luck() const {
  return this != internal_default_instance() && luck_ != NULL;
}
void HeroClassInfo::clear_luck() {
  if (GetArenaNoVirtual() == NULL && luck_ != NULL) delete luck_;
  luck_ = NULL;
}
const ::NetMsg::HeroAttr& HeroClassInfo::luck() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.luck)
  return luck_ != NULL ? *luck_
                         : *::NetMsg::HeroAttr::internal_default_instance();
}
::NetMsg::HeroAttr* HeroClassInfo::mutable_luck() {
  
  if (luck_ == NULL) {
    luck_ = new ::NetMsg::HeroAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassInfo.luck)
  return luck_;
}
::NetMsg::HeroAttr* HeroClassInfo::release_luck() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroClassInfo.luck)
  
  ::NetMsg::HeroAttr* temp = luck_;
  luck_ = NULL;
  return temp;
}
void HeroClassInfo::set_allocated_luck(::NetMsg::HeroAttr* luck) {
  delete luck_;
  luck_ = luck;
  if (luck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroClassInfo.luck)
}

// repeated .NetMsg.HeroClassSkill skills = 9;
int HeroClassInfo::skills_size() const {
  return skills_.size();
}
void HeroClassInfo::clear_skills() {
  skills_.Clear();
}
const ::NetMsg::HeroClassSkill& HeroClassInfo::skills(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassInfo.skills)
  return skills_.Get(index);
}
::NetMsg::HeroClassSkill* HeroClassInfo::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassInfo.skills)
  return skills_.Mutable(index);
}
::NetMsg::HeroClassSkill* HeroClassInfo::add_skills() {
  // @@protoc_insertion_point(field_add:NetMsg.HeroClassInfo.skills)
  return skills_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::HeroClassSkill >*
HeroClassInfo::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.HeroClassInfo.skills)
  return &skills_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::HeroClassSkill >&
HeroClassInfo::skills() const {
  // @@protoc_insertion_point(field_list:NetMsg.HeroClassInfo.skills)
  return skills_;
}

inline const HeroClassInfo* HeroClassInfo::internal_default_instance() {
  return &HeroClassInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHeroClass::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeroClass::ReqHeroClass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqHeroClass)
}

void ReqHeroClass::InitAsDefaultInstance() {
}

ReqHeroClass::ReqHeroClass(const ReqHeroClass& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqHeroClass)
}

void ReqHeroClass::SharedCtor() {
  classid_ = 0u;
  _cached_size_ = 0;
}

ReqHeroClass::~ReqHeroClass() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqHeroClass)
  SharedDtor();
}

void ReqHeroClass::SharedDtor() {
}

void ReqHeroClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeroClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeroClass_descriptor_;
}

const ReqHeroClass& ReqHeroClass::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqHeroClass> ReqHeroClass_default_instance_;

ReqHeroClass* ReqHeroClass::New(::google::protobuf::Arena* arena) const {
  ReqHeroClass* n = new ReqHeroClass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHeroClass::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqHeroClass)
  classid_ = 0u;
}

bool ReqHeroClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqHeroClass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 classId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqHeroClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqHeroClass)
  return false;
#undef DO_
}

void ReqHeroClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqHeroClass)
  // optional uint32 classId = 1;
  if (this->classid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->classid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqHeroClass)
}

::google::protobuf::uint8* ReqHeroClass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqHeroClass)
  // optional uint32 classId = 1;
  if (this->classid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->classid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqHeroClass)
  return target;
}

size_t ReqHeroClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqHeroClass)
  size_t total_size = 0;

  // optional uint32 classId = 1;
  if (this->classid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->classid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeroClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqHeroClass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqHeroClass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeroClass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqHeroClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqHeroClass)
    UnsafeMergeFrom(*source);
  }
}

void ReqHeroClass::MergeFrom(const ReqHeroClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqHeroClass)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqHeroClass::UnsafeMergeFrom(const ReqHeroClass& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.classid() != 0) {
    set_classid(from.classid());
  }
}

void ReqHeroClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqHeroClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeroClass::CopyFrom(const ReqHeroClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqHeroClass)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqHeroClass::IsInitialized() const {

  return true;
}

void ReqHeroClass::Swap(ReqHeroClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeroClass::InternalSwap(ReqHeroClass* other) {
  std::swap(classid_, other->classid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHeroClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeroClass_descriptor_;
  metadata.reflection = ReqHeroClass_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHeroClass

// optional uint32 classId = 1;
void ReqHeroClass::clear_classid() {
  classid_ = 0u;
}
::google::protobuf::uint32 ReqHeroClass::classid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqHeroClass.classId)
  return classid_;
}
void ReqHeroClass::set_classid(::google::protobuf::uint32 value) {
  
  classid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqHeroClass.classId)
}

inline const ReqHeroClass* ReqHeroClass::internal_default_instance() {
  return &ReqHeroClass_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeroClassAck::kHeroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeroClassAck::HeroClassAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.HeroClassAck)
}

void HeroClassAck::InitAsDefaultInstance() {
  hero_ = const_cast< ::NetMsg::HeroClassInfo*>(
      ::NetMsg::HeroClassInfo::internal_default_instance());
}

HeroClassAck::HeroClassAck(const HeroClassAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.HeroClassAck)
}

void HeroClassAck::SharedCtor() {
  hero_ = NULL;
  _cached_size_ = 0;
}

HeroClassAck::~HeroClassAck() {
  // @@protoc_insertion_point(destructor:NetMsg.HeroClassAck)
  SharedDtor();
}

void HeroClassAck::SharedDtor() {
  if (this != &HeroClassAck_default_instance_.get()) {
    delete hero_;
  }
}

void HeroClassAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroClassAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroClassAck_descriptor_;
}

const HeroClassAck& HeroClassAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeroClassAck> HeroClassAck_default_instance_;

HeroClassAck* HeroClassAck::New(::google::protobuf::Arena* arena) const {
  HeroClassAck* n = new HeroClassAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeroClassAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.HeroClassAck)
  if (GetArenaNoVirtual() == NULL && hero_ != NULL) delete hero_;
  hero_ = NULL;
}

bool HeroClassAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.HeroClassAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.HeroClassInfo hero = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.HeroClassAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.HeroClassAck)
  return false;
#undef DO_
}

void HeroClassAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.HeroClassAck)
  // optional .NetMsg.HeroClassInfo hero = 1;
  if (this->has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hero_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.HeroClassAck)
}

::google::protobuf::uint8* HeroClassAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.HeroClassAck)
  // optional .NetMsg.HeroClassInfo hero = 1;
  if (this->has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hero_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.HeroClassAck)
  return target;
}

size_t HeroClassAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.HeroClassAck)
  size_t total_size = 0;

  // optional .NetMsg.HeroClassInfo hero = 1;
  if (this->has_hero()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hero_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroClassAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.HeroClassAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeroClassAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeroClassAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.HeroClassAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.HeroClassAck)
    UnsafeMergeFrom(*source);
  }
}

void HeroClassAck::MergeFrom(const HeroClassAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.HeroClassAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeroClassAck::UnsafeMergeFrom(const HeroClassAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_hero()) {
    mutable_hero()->::NetMsg::HeroClassInfo::MergeFrom(from.hero());
  }
}

void HeroClassAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.HeroClassAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroClassAck::CopyFrom(const HeroClassAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.HeroClassAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeroClassAck::IsInitialized() const {

  return true;
}

void HeroClassAck::Swap(HeroClassAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeroClassAck::InternalSwap(HeroClassAck* other) {
  std::swap(hero_, other->hero_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeroClassAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroClassAck_descriptor_;
  metadata.reflection = HeroClassAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeroClassAck

// optional .NetMsg.HeroClassInfo hero = 1;
bool HeroClassAck::has_hero() const {
  return this != internal_default_instance() && hero_ != NULL;
}
void HeroClassAck::clear_hero() {
  if (GetArenaNoVirtual() == NULL && hero_ != NULL) delete hero_;
  hero_ = NULL;
}
const ::NetMsg::HeroClassInfo& HeroClassAck::hero() const {
  // @@protoc_insertion_point(field_get:NetMsg.HeroClassAck.hero)
  return hero_ != NULL ? *hero_
                         : *::NetMsg::HeroClassInfo::internal_default_instance();
}
::NetMsg::HeroClassInfo* HeroClassAck::mutable_hero() {
  
  if (hero_ == NULL) {
    hero_ = new ::NetMsg::HeroClassInfo;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.HeroClassAck.hero)
  return hero_;
}
::NetMsg::HeroClassInfo* HeroClassAck::release_hero() {
  // @@protoc_insertion_point(field_release:NetMsg.HeroClassAck.hero)
  
  ::NetMsg::HeroClassInfo* temp = hero_;
  hero_ = NULL;
  return temp;
}
void HeroClassAck::set_allocated_hero(::NetMsg::HeroClassInfo* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.HeroClassAck.hero)
}

inline const HeroClassAck* HeroClassAck::internal_default_instance() {
  return &HeroClassAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqStudySkill::kHeroIdFieldNumber;
const int ReqStudySkill::kHeroClassFieldNumber;
const int ReqStudySkill::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqStudySkill::ReqStudySkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqStudySkill)
}

void ReqStudySkill::InitAsDefaultInstance() {
}

ReqStudySkill::ReqStudySkill(const ReqStudySkill& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqStudySkill)
}

void ReqStudySkill::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&skillid_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(skillid_));
  _cached_size_ = 0;
}

ReqStudySkill::~ReqStudySkill() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqStudySkill)
  SharedDtor();
}

void ReqStudySkill::SharedDtor() {
}

void ReqStudySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqStudySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqStudySkill_descriptor_;
}

const ReqStudySkill& ReqStudySkill::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqStudySkill> ReqStudySkill_default_instance_;

ReqStudySkill* ReqStudySkill::New(::google::protobuf::Arena* arena) const {
  ReqStudySkill* n = new ReqStudySkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqStudySkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqStudySkill)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqStudySkill, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqStudySkill*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, skillid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqStudySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqStudySkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroClass;
        break;
      }

      // optional uint32 heroClass = 2;
      case 2: {
        if (tag == 16) {
         parse_heroClass:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillId;
        break;
      }

      // optional uint32 skillId = 3;
      case 3: {
        if (tag == 24) {
         parse_skillId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqStudySkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqStudySkill)
  return false;
#undef DO_
}

void ReqStudySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqStudySkill)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroclass(), output);
  }

  // optional uint32 skillId = 3;
  if (this->skillid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqStudySkill)
}

::google::protobuf::uint8* ReqStudySkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqStudySkill)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroclass(), target);
  }

  // optional uint32 skillId = 3;
  if (this->skillid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqStudySkill)
  return target;
}

size_t ReqStudySkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqStudySkill)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 skillId = 3;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skillid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqStudySkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqStudySkill)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqStudySkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqStudySkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqStudySkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqStudySkill)
    UnsafeMergeFrom(*source);
  }
}

void ReqStudySkill::MergeFrom(const ReqStudySkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqStudySkill)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqStudySkill::UnsafeMergeFrom(const ReqStudySkill& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.skillid() != 0) {
    set_skillid(from.skillid());
  }
}

void ReqStudySkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqStudySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStudySkill::CopyFrom(const ReqStudySkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqStudySkill)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqStudySkill::IsInitialized() const {

  return true;
}

void ReqStudySkill::Swap(ReqStudySkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqStudySkill::InternalSwap(ReqStudySkill* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(heroclass_, other->heroclass_);
  std::swap(skillid_, other->skillid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqStudySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqStudySkill_descriptor_;
  metadata.reflection = ReqStudySkill_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqStudySkill

// optional uint64 heroId = 1;
void ReqStudySkill::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqStudySkill::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqStudySkill.heroId)
  return heroid_;
}
void ReqStudySkill::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqStudySkill.heroId)
}

// optional uint32 heroClass = 2;
void ReqStudySkill::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 ReqStudySkill::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqStudySkill.heroClass)
  return heroclass_;
}
void ReqStudySkill::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqStudySkill.heroClass)
}

// optional uint32 skillId = 3;
void ReqStudySkill::clear_skillid() {
  skillid_ = 0u;
}
::google::protobuf::uint32 ReqStudySkill::skillid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqStudySkill.skillId)
  return skillid_;
}
void ReqStudySkill::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqStudySkill.skillId)
}

inline const ReqStudySkill* ReqStudySkill::internal_default_instance() {
  return &ReqStudySkill_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StudySkillAck::kHeroIdFieldNumber;
const int StudySkillAck::kHeroClassFieldNumber;
const int StudySkillAck::kSkillIdFieldNumber;
const int StudySkillAck::kExpFieldNumber;
const int StudySkillAck::kCritFieldNumber;
const int StudySkillAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StudySkillAck::StudySkillAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.StudySkillAck)
}

void StudySkillAck::InitAsDefaultInstance() {
}

StudySkillAck::StudySkillAck(const StudySkillAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.StudySkillAck)
}

void StudySkillAck::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(error_));
  _cached_size_ = 0;
}

StudySkillAck::~StudySkillAck() {
  // @@protoc_insertion_point(destructor:NetMsg.StudySkillAck)
  SharedDtor();
}

void StudySkillAck::SharedDtor() {
}

void StudySkillAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StudySkillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StudySkillAck_descriptor_;
}

const StudySkillAck& StudySkillAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StudySkillAck> StudySkillAck_default_instance_;

StudySkillAck* StudySkillAck::New(::google::protobuf::Arena* arena) const {
  StudySkillAck* n = new StudySkillAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StudySkillAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.StudySkillAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StudySkillAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StudySkillAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool StudySkillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.StudySkillAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroClass;
        break;
      }

      // optional uint32 heroClass = 2;
      case 2: {
        if (tag == 16) {
         parse_heroClass:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillId;
        break;
      }

      // optional uint32 skillId = 3;
      case 3: {
        if (tag == 24) {
         parse_skillId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }

      // optional uint32 crit = 5;
      case 5: {
        if (tag == 40) {
         parse_crit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_error;
        break;
      }

      // optional uint32 error = 6;
      case 6: {
        if (tag == 48) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.StudySkillAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.StudySkillAck)
  return false;
#undef DO_
}

void StudySkillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.StudySkillAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroclass(), output);
  }

  // optional uint32 skillId = 3;
  if (this->skillid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional uint32 exp = 4;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crit(), output);
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.StudySkillAck)
}

::google::protobuf::uint8* StudySkillAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.StudySkillAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroclass(), target);
  }

  // optional uint32 skillId = 3;
  if (this->skillid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional uint32 exp = 4;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crit(), target);
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.StudySkillAck)
  return target;
}

size_t StudySkillAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.StudySkillAck)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 skillId = 3;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skillid());
  }

  // optional uint32 exp = 4;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crit());
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StudySkillAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.StudySkillAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StudySkillAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StudySkillAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.StudySkillAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.StudySkillAck)
    UnsafeMergeFrom(*source);
  }
}

void StudySkillAck::MergeFrom(const StudySkillAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.StudySkillAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StudySkillAck::UnsafeMergeFrom(const StudySkillAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.skillid() != 0) {
    set_skillid(from.skillid());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.crit() != 0) {
    set_crit(from.crit());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void StudySkillAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.StudySkillAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StudySkillAck::CopyFrom(const StudySkillAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.StudySkillAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StudySkillAck::IsInitialized() const {

  return true;
}

void StudySkillAck::Swap(StudySkillAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StudySkillAck::InternalSwap(StudySkillAck* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(heroclass_, other->heroclass_);
  std::swap(skillid_, other->skillid_);
  std::swap(exp_, other->exp_);
  std::swap(crit_, other->crit_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StudySkillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StudySkillAck_descriptor_;
  metadata.reflection = StudySkillAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StudySkillAck

// optional uint64 heroId = 1;
void StudySkillAck::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StudySkillAck::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudySkillAck.heroId)
  return heroid_;
}
void StudySkillAck::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudySkillAck.heroId)
}

// optional uint32 heroClass = 2;
void StudySkillAck::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 StudySkillAck::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudySkillAck.heroClass)
  return heroclass_;
}
void StudySkillAck::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudySkillAck.heroClass)
}

// optional uint32 skillId = 3;
void StudySkillAck::clear_skillid() {
  skillid_ = 0u;
}
::google::protobuf::uint32 StudySkillAck::skillid() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudySkillAck.skillId)
  return skillid_;
}
void StudySkillAck::set_skillid(::google::protobuf::uint32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudySkillAck.skillId)
}

// optional uint32 exp = 4;
void StudySkillAck::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 StudySkillAck::exp() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudySkillAck.exp)
  return exp_;
}
void StudySkillAck::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudySkillAck.exp)
}

// optional uint32 crit = 5;
void StudySkillAck::clear_crit() {
  crit_ = 0u;
}
::google::protobuf::uint32 StudySkillAck::crit() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudySkillAck.crit)
  return crit_;
}
void StudySkillAck::set_crit(::google::protobuf::uint32 value) {
  
  crit_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudySkillAck.crit)
}

// optional uint32 error = 6;
void StudySkillAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 StudySkillAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudySkillAck.error)
  return error_;
}
void StudySkillAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudySkillAck.error)
}

inline const StudySkillAck* StudySkillAck::internal_default_instance() {
  return &StudySkillAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqStudyProperty::kHeroIdFieldNumber;
const int ReqStudyProperty::kHeroClassFieldNumber;
const int ReqStudyProperty::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqStudyProperty::ReqStudyProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqStudyProperty)
}

void ReqStudyProperty::InitAsDefaultInstance() {
}

ReqStudyProperty::ReqStudyProperty(const ReqStudyProperty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqStudyProperty)
}

void ReqStudyProperty::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(type_));
  _cached_size_ = 0;
}

ReqStudyProperty::~ReqStudyProperty() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqStudyProperty)
  SharedDtor();
}

void ReqStudyProperty::SharedDtor() {
}

void ReqStudyProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqStudyProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqStudyProperty_descriptor_;
}

const ReqStudyProperty& ReqStudyProperty::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqStudyProperty> ReqStudyProperty_default_instance_;

ReqStudyProperty* ReqStudyProperty::New(::google::protobuf::Arena* arena) const {
  ReqStudyProperty* n = new ReqStudyProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqStudyProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqStudyProperty)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqStudyProperty, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqStudyProperty*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqStudyProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqStudyProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroClass;
        break;
      }

      // optional uint32 heroClass = 2;
      case 2: {
        if (tag == 16) {
         parse_heroClass:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .NetMsg.HeroPropertyType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::HeroPropertyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqStudyProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqStudyProperty)
  return false;
#undef DO_
}

void ReqStudyProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqStudyProperty)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroclass(), output);
  }

  // optional .NetMsg.HeroPropertyType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqStudyProperty)
}

::google::protobuf::uint8* ReqStudyProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqStudyProperty)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroclass(), target);
  }

  // optional .NetMsg.HeroPropertyType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqStudyProperty)
  return target;
}

size_t ReqStudyProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqStudyProperty)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional .NetMsg.HeroPropertyType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqStudyProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqStudyProperty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqStudyProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqStudyProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqStudyProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqStudyProperty)
    UnsafeMergeFrom(*source);
  }
}

void ReqStudyProperty::MergeFrom(const ReqStudyProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqStudyProperty)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqStudyProperty::UnsafeMergeFrom(const ReqStudyProperty& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqStudyProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqStudyProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStudyProperty::CopyFrom(const ReqStudyProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqStudyProperty)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqStudyProperty::IsInitialized() const {

  return true;
}

void ReqStudyProperty::Swap(ReqStudyProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqStudyProperty::InternalSwap(ReqStudyProperty* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(heroclass_, other->heroclass_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqStudyProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqStudyProperty_descriptor_;
  metadata.reflection = ReqStudyProperty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqStudyProperty

// optional uint64 heroId = 1;
void ReqStudyProperty::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqStudyProperty::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqStudyProperty.heroId)
  return heroid_;
}
void ReqStudyProperty::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqStudyProperty.heroId)
}

// optional uint32 heroClass = 2;
void ReqStudyProperty::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 ReqStudyProperty::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqStudyProperty.heroClass)
  return heroclass_;
}
void ReqStudyProperty::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqStudyProperty.heroClass)
}

// optional .NetMsg.HeroPropertyType type = 3;
void ReqStudyProperty::clear_type() {
  type_ = 0;
}
::NetMsg::HeroPropertyType ReqStudyProperty::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqStudyProperty.type)
  return static_cast< ::NetMsg::HeroPropertyType >(type_);
}
void ReqStudyProperty::set_type(::NetMsg::HeroPropertyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqStudyProperty.type)
}

inline const ReqStudyProperty* ReqStudyProperty::internal_default_instance() {
  return &ReqStudyProperty_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StudyPropertyAck::kHeroIdFieldNumber;
const int StudyPropertyAck::kHeroClassFieldNumber;
const int StudyPropertyAck::kTypeFieldNumber;
const int StudyPropertyAck::kPropertyFieldNumber;
const int StudyPropertyAck::kCritFieldNumber;
const int StudyPropertyAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StudyPropertyAck::StudyPropertyAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.StudyPropertyAck)
}

void StudyPropertyAck::InitAsDefaultInstance() {
}

StudyPropertyAck::StudyPropertyAck(const StudyPropertyAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.StudyPropertyAck)
}

void StudyPropertyAck::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(error_));
  _cached_size_ = 0;
}

StudyPropertyAck::~StudyPropertyAck() {
  // @@protoc_insertion_point(destructor:NetMsg.StudyPropertyAck)
  SharedDtor();
}

void StudyPropertyAck::SharedDtor() {
}

void StudyPropertyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StudyPropertyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StudyPropertyAck_descriptor_;
}

const StudyPropertyAck& StudyPropertyAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StudyPropertyAck> StudyPropertyAck_default_instance_;

StudyPropertyAck* StudyPropertyAck::New(::google::protobuf::Arena* arena) const {
  StudyPropertyAck* n = new StudyPropertyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StudyPropertyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.StudyPropertyAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StudyPropertyAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StudyPropertyAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool StudyPropertyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.StudyPropertyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroClass;
        break;
      }

      // optional uint32 heroClass = 2;
      case 2: {
        if (tag == 16) {
         parse_heroClass:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .NetMsg.HeroPropertyType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::HeroPropertyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_property;
        break;
      }

      // optional uint32 property = 4;
      case 4: {
        if (tag == 32) {
         parse_property:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &property_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }

      // optional uint32 crit = 5;
      case 5: {
        if (tag == 40) {
         parse_crit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_error;
        break;
      }

      // optional uint32 error = 6;
      case 6: {
        if (tag == 48) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.StudyPropertyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.StudyPropertyAck)
  return false;
#undef DO_
}

void StudyPropertyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.StudyPropertyAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroclass(), output);
  }

  // optional .NetMsg.HeroPropertyType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 property = 4;
  if (this->property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->property(), output);
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crit(), output);
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.StudyPropertyAck)
}

::google::protobuf::uint8* StudyPropertyAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.StudyPropertyAck)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroclass(), target);
  }

  // optional .NetMsg.HeroPropertyType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 property = 4;
  if (this->property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->property(), target);
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crit(), target);
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.StudyPropertyAck)
  return target;
}

size_t StudyPropertyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.StudyPropertyAck)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional .NetMsg.HeroPropertyType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 property = 4;
  if (this->property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->property());
  }

  // optional uint32 crit = 5;
  if (this->crit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crit());
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StudyPropertyAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.StudyPropertyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StudyPropertyAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StudyPropertyAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.StudyPropertyAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.StudyPropertyAck)
    UnsafeMergeFrom(*source);
  }
}

void StudyPropertyAck::MergeFrom(const StudyPropertyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.StudyPropertyAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StudyPropertyAck::UnsafeMergeFrom(const StudyPropertyAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.property() != 0) {
    set_property(from.property());
  }
  if (from.crit() != 0) {
    set_crit(from.crit());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void StudyPropertyAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.StudyPropertyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StudyPropertyAck::CopyFrom(const StudyPropertyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.StudyPropertyAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StudyPropertyAck::IsInitialized() const {

  return true;
}

void StudyPropertyAck::Swap(StudyPropertyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StudyPropertyAck::InternalSwap(StudyPropertyAck* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(heroclass_, other->heroclass_);
  std::swap(type_, other->type_);
  std::swap(property_, other->property_);
  std::swap(crit_, other->crit_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StudyPropertyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StudyPropertyAck_descriptor_;
  metadata.reflection = StudyPropertyAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StudyPropertyAck

// optional uint64 heroId = 1;
void StudyPropertyAck::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StudyPropertyAck::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudyPropertyAck.heroId)
  return heroid_;
}
void StudyPropertyAck::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudyPropertyAck.heroId)
}

// optional uint32 heroClass = 2;
void StudyPropertyAck::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 StudyPropertyAck::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudyPropertyAck.heroClass)
  return heroclass_;
}
void StudyPropertyAck::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudyPropertyAck.heroClass)
}

// optional .NetMsg.HeroPropertyType type = 3;
void StudyPropertyAck::clear_type() {
  type_ = 0;
}
::NetMsg::HeroPropertyType StudyPropertyAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudyPropertyAck.type)
  return static_cast< ::NetMsg::HeroPropertyType >(type_);
}
void StudyPropertyAck::set_type(::NetMsg::HeroPropertyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudyPropertyAck.type)
}

// optional uint32 property = 4;
void StudyPropertyAck::clear_property() {
  property_ = 0u;
}
::google::protobuf::uint32 StudyPropertyAck::property() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudyPropertyAck.property)
  return property_;
}
void StudyPropertyAck::set_property(::google::protobuf::uint32 value) {
  
  property_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudyPropertyAck.property)
}

// optional uint32 crit = 5;
void StudyPropertyAck::clear_crit() {
  crit_ = 0u;
}
::google::protobuf::uint32 StudyPropertyAck::crit() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudyPropertyAck.crit)
  return crit_;
}
void StudyPropertyAck::set_crit(::google::protobuf::uint32 value) {
  
  crit_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudyPropertyAck.crit)
}

// optional uint32 error = 6;
void StudyPropertyAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 StudyPropertyAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.StudyPropertyAck.error)
  return error_;
}
void StudyPropertyAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.StudyPropertyAck.error)
}

inline const StudyPropertyAck* StudyPropertyAck::internal_default_instance() {
  return &StudyPropertyAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRaffleHero::kIdFieldNumber;
const int ReqRaffleHero::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRaffleHero::ReqRaffleHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRaffleHero)
}

void ReqRaffleHero::InitAsDefaultInstance() {
}

ReqRaffleHero::ReqRaffleHero(const ReqRaffleHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRaffleHero)
}

void ReqRaffleHero::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_) + sizeof(num_));
  _cached_size_ = 0;
}

ReqRaffleHero::~ReqRaffleHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRaffleHero)
  SharedDtor();
}

void ReqRaffleHero::SharedDtor() {
}

void ReqRaffleHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRaffleHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRaffleHero_descriptor_;
}

const ReqRaffleHero& ReqRaffleHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRaffleHero> ReqRaffleHero_default_instance_;

ReqRaffleHero* ReqRaffleHero::New(::google::protobuf::Arena* arena) const {
  ReqRaffleHero* n = new ReqRaffleHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRaffleHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRaffleHero)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqRaffleHero, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqRaffleHero*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqRaffleHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRaffleHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRaffleHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRaffleHero)
  return false;
#undef DO_
}

void ReqRaffleHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRaffleHero)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRaffleHero)
}

::google::protobuf::uint8* ReqRaffleHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRaffleHero)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRaffleHero)
  return target;
}

size_t ReqRaffleHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRaffleHero)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRaffleHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRaffleHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRaffleHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRaffleHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRaffleHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRaffleHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqRaffleHero::MergeFrom(const ReqRaffleHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRaffleHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRaffleHero::UnsafeMergeFrom(const ReqRaffleHero& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void ReqRaffleHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRaffleHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRaffleHero::CopyFrom(const ReqRaffleHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRaffleHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRaffleHero::IsInitialized() const {

  return true;
}

void ReqRaffleHero::Swap(ReqRaffleHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRaffleHero::InternalSwap(ReqRaffleHero* other) {
  std::swap(id_, other->id_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRaffleHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRaffleHero_descriptor_;
  metadata.reflection = ReqRaffleHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRaffleHero

// optional uint32 id = 1;
void ReqRaffleHero::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqRaffleHero::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRaffleHero.id)
  return id_;
}
void ReqRaffleHero::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqRaffleHero.id)
}

// optional uint32 num = 2;
void ReqRaffleHero::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 ReqRaffleHero::num() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRaffleHero.num)
  return num_;
}
void ReqRaffleHero::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqRaffleHero.num)
}

inline const ReqRaffleHero* ReqRaffleHero::internal_default_instance() {
  return &ReqRaffleHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaffleHeroAck::kHeroUIdFieldNumber;
const int RaffleHeroAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaffleHeroAck::RaffleHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RaffleHeroAck)
}

void RaffleHeroAck::InitAsDefaultInstance() {
}

RaffleHeroAck::RaffleHeroAck(const RaffleHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RaffleHeroAck)
}

void RaffleHeroAck::SharedCtor() {
  error_ = 0u;
  _cached_size_ = 0;
}

RaffleHeroAck::~RaffleHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RaffleHeroAck)
  SharedDtor();
}

void RaffleHeroAck::SharedDtor() {
}

void RaffleHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaffleHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaffleHeroAck_descriptor_;
}

const RaffleHeroAck& RaffleHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaffleHeroAck> RaffleHeroAck_default_instance_;

RaffleHeroAck* RaffleHeroAck::New(::google::protobuf::Arena* arena) const {
  RaffleHeroAck* n = new RaffleHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaffleHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RaffleHeroAck)
  error_ = 0u;
  herouid_.Clear();
}

bool RaffleHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RaffleHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 heroUId = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_herouid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_herouid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RaffleHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RaffleHeroAck)
  return false;
#undef DO_
}

void RaffleHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RaffleHeroAck)
  // repeated uint64 heroUId = 1;
  if (this->herouid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_herouid_cached_byte_size_);
  }
  for (int i = 0; i < this->herouid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->herouid(i), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RaffleHeroAck)
}

::google::protobuf::uint8* RaffleHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RaffleHeroAck)
  // repeated uint64 heroUId = 1;
  if (this->herouid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _herouid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->herouid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->herouid(i), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RaffleHeroAck)
  return target;
}

size_t RaffleHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RaffleHeroAck)
  size_t total_size = 0;

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated uint64 heroUId = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->herouid_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->herouid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _herouid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaffleHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RaffleHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaffleHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaffleHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RaffleHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RaffleHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void RaffleHeroAck::MergeFrom(const RaffleHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RaffleHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaffleHeroAck::UnsafeMergeFrom(const RaffleHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  herouid_.UnsafeMergeFrom(from.herouid_);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void RaffleHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RaffleHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaffleHeroAck::CopyFrom(const RaffleHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RaffleHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaffleHeroAck::IsInitialized() const {

  return true;
}

void RaffleHeroAck::Swap(RaffleHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaffleHeroAck::InternalSwap(RaffleHeroAck* other) {
  herouid_.UnsafeArenaSwap(&other->herouid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaffleHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaffleHeroAck_descriptor_;
  metadata.reflection = RaffleHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaffleHeroAck

// repeated uint64 heroUId = 1;
int RaffleHeroAck::herouid_size() const {
  return herouid_.size();
}
void RaffleHeroAck::clear_herouid() {
  herouid_.Clear();
}
::google::protobuf::uint64 RaffleHeroAck::herouid(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.RaffleHeroAck.heroUId)
  return herouid_.Get(index);
}
void RaffleHeroAck::set_herouid(int index, ::google::protobuf::uint64 value) {
  herouid_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.RaffleHeroAck.heroUId)
}
void RaffleHeroAck::add_herouid(::google::protobuf::uint64 value) {
  herouid_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.RaffleHeroAck.heroUId)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RaffleHeroAck::herouid() const {
  // @@protoc_insertion_point(field_list:NetMsg.RaffleHeroAck.heroUId)
  return herouid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RaffleHeroAck::mutable_herouid() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.RaffleHeroAck.heroUId)
  return &herouid_;
}

// optional uint32 error = 2;
void RaffleHeroAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 RaffleHeroAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.RaffleHeroAck.error)
  return error_;
}
void RaffleHeroAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RaffleHeroAck.error)
}

inline const RaffleHeroAck* RaffleHeroAck::internal_default_instance() {
  return &RaffleHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRaffleHeroTimes::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRaffleHeroTimes::ReqRaffleHeroTimes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRaffleHeroTimes)
}

void ReqRaffleHeroTimes::InitAsDefaultInstance() {
}

ReqRaffleHeroTimes::ReqRaffleHeroTimes(const ReqRaffleHeroTimes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRaffleHeroTimes)
}

void ReqRaffleHeroTimes::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

ReqRaffleHeroTimes::~ReqRaffleHeroTimes() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRaffleHeroTimes)
  SharedDtor();
}

void ReqRaffleHeroTimes::SharedDtor() {
}

void ReqRaffleHeroTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRaffleHeroTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRaffleHeroTimes_descriptor_;
}

const ReqRaffleHeroTimes& ReqRaffleHeroTimes::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRaffleHeroTimes> ReqRaffleHeroTimes_default_instance_;

ReqRaffleHeroTimes* ReqRaffleHeroTimes::New(::google::protobuf::Arena* arena) const {
  ReqRaffleHeroTimes* n = new ReqRaffleHeroTimes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRaffleHeroTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRaffleHeroTimes)
  id_ = 0u;
}

bool ReqRaffleHeroTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRaffleHeroTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRaffleHeroTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRaffleHeroTimes)
  return false;
#undef DO_
}

void ReqRaffleHeroTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRaffleHeroTimes)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRaffleHeroTimes)
}

::google::protobuf::uint8* ReqRaffleHeroTimes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRaffleHeroTimes)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRaffleHeroTimes)
  return target;
}

size_t ReqRaffleHeroTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRaffleHeroTimes)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRaffleHeroTimes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRaffleHeroTimes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRaffleHeroTimes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRaffleHeroTimes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRaffleHeroTimes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRaffleHeroTimes)
    UnsafeMergeFrom(*source);
  }
}

void ReqRaffleHeroTimes::MergeFrom(const ReqRaffleHeroTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRaffleHeroTimes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRaffleHeroTimes::UnsafeMergeFrom(const ReqRaffleHeroTimes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqRaffleHeroTimes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRaffleHeroTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRaffleHeroTimes::CopyFrom(const ReqRaffleHeroTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRaffleHeroTimes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRaffleHeroTimes::IsInitialized() const {

  return true;
}

void ReqRaffleHeroTimes::Swap(ReqRaffleHeroTimes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRaffleHeroTimes::InternalSwap(ReqRaffleHeroTimes* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRaffleHeroTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRaffleHeroTimes_descriptor_;
  metadata.reflection = ReqRaffleHeroTimes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRaffleHeroTimes

// optional uint32 id = 1;
void ReqRaffleHeroTimes::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqRaffleHeroTimes::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRaffleHeroTimes.id)
  return id_;
}
void ReqRaffleHeroTimes::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqRaffleHeroTimes.id)
}

inline const ReqRaffleHeroTimes* ReqRaffleHeroTimes::internal_default_instance() {
  return &ReqRaffleHeroTimes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaffleHeroTimesAck::kIdFieldNumber;
const int RaffleHeroTimesAck::kTimesFieldNumber;
const int RaffleHeroTimesAck::kOneRaffTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaffleHeroTimesAck::RaffleHeroTimesAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RaffleHeroTimesAck)
}

void RaffleHeroTimesAck::InitAsDefaultInstance() {
}

RaffleHeroTimesAck::RaffleHeroTimesAck(const RaffleHeroTimesAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RaffleHeroTimesAck)
}

void RaffleHeroTimesAck::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&onerafftime_) -
    reinterpret_cast<char*>(&id_) + sizeof(onerafftime_));
  _cached_size_ = 0;
}

RaffleHeroTimesAck::~RaffleHeroTimesAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RaffleHeroTimesAck)
  SharedDtor();
}

void RaffleHeroTimesAck::SharedDtor() {
}

void RaffleHeroTimesAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaffleHeroTimesAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaffleHeroTimesAck_descriptor_;
}

const RaffleHeroTimesAck& RaffleHeroTimesAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaffleHeroTimesAck> RaffleHeroTimesAck_default_instance_;

RaffleHeroTimesAck* RaffleHeroTimesAck::New(::google::protobuf::Arena* arena) const {
  RaffleHeroTimesAck* n = new RaffleHeroTimesAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaffleHeroTimesAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RaffleHeroTimesAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaffleHeroTimesAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaffleHeroTimesAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, onerafftime_);

#undef ZR_HELPER_
#undef ZR_

}

bool RaffleHeroTimesAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RaffleHeroTimesAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (tag == 16) {
         parse_times:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oneRaffTime;
        break;
      }

      // optional uint32 oneRaffTime = 3;
      case 3: {
        if (tag == 24) {
         parse_oneRaffTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onerafftime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RaffleHeroTimesAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RaffleHeroTimesAck)
  return false;
#undef DO_
}

void RaffleHeroTimesAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RaffleHeroTimesAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // optional uint32 oneRaffTime = 3;
  if (this->onerafftime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onerafftime(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RaffleHeroTimesAck)
}

::google::protobuf::uint8* RaffleHeroTimesAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RaffleHeroTimesAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // optional uint32 oneRaffTime = 3;
  if (this->onerafftime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onerafftime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RaffleHeroTimesAck)
  return target;
}

size_t RaffleHeroTimesAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RaffleHeroTimesAck)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // optional uint32 oneRaffTime = 3;
  if (this->onerafftime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onerafftime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaffleHeroTimesAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RaffleHeroTimesAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaffleHeroTimesAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaffleHeroTimesAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RaffleHeroTimesAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RaffleHeroTimesAck)
    UnsafeMergeFrom(*source);
  }
}

void RaffleHeroTimesAck::MergeFrom(const RaffleHeroTimesAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RaffleHeroTimesAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaffleHeroTimesAck::UnsafeMergeFrom(const RaffleHeroTimesAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.onerafftime() != 0) {
    set_onerafftime(from.onerafftime());
  }
}

void RaffleHeroTimesAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RaffleHeroTimesAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaffleHeroTimesAck::CopyFrom(const RaffleHeroTimesAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RaffleHeroTimesAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaffleHeroTimesAck::IsInitialized() const {

  return true;
}

void RaffleHeroTimesAck::Swap(RaffleHeroTimesAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaffleHeroTimesAck::InternalSwap(RaffleHeroTimesAck* other) {
  std::swap(id_, other->id_);
  std::swap(times_, other->times_);
  std::swap(onerafftime_, other->onerafftime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaffleHeroTimesAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaffleHeroTimesAck_descriptor_;
  metadata.reflection = RaffleHeroTimesAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaffleHeroTimesAck

// optional uint32 id = 1;
void RaffleHeroTimesAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 RaffleHeroTimesAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.RaffleHeroTimesAck.id)
  return id_;
}
void RaffleHeroTimesAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RaffleHeroTimesAck.id)
}

// optional uint32 times = 2;
void RaffleHeroTimesAck::clear_times() {
  times_ = 0u;
}
::google::protobuf::uint32 RaffleHeroTimesAck::times() const {
  // @@protoc_insertion_point(field_get:NetMsg.RaffleHeroTimesAck.times)
  return times_;
}
void RaffleHeroTimesAck::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RaffleHeroTimesAck.times)
}

// optional uint32 oneRaffTime = 3;
void RaffleHeroTimesAck::clear_onerafftime() {
  onerafftime_ = 0u;
}
::google::protobuf::uint32 RaffleHeroTimesAck::onerafftime() const {
  // @@protoc_insertion_point(field_get:NetMsg.RaffleHeroTimesAck.oneRaffTime)
  return onerafftime_;
}
void RaffleHeroTimesAck::set_onerafftime(::google::protobuf::uint32 value) {
  
  onerafftime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RaffleHeroTimesAck.oneRaffTime)
}

inline const RaffleHeroTimesAck* RaffleHeroTimesAck::internal_default_instance() {
  return &RaffleHeroTimesAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAddMoney::kTypeFieldNumber;
const int ReqAddMoney::kAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAddMoney::ReqAddMoney()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqAddMoney)
}

void ReqAddMoney::InitAsDefaultInstance() {
}

ReqAddMoney::ReqAddMoney(const ReqAddMoney& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqAddMoney)
}

void ReqAddMoney::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&add_) -
    reinterpret_cast<char*>(&type_) + sizeof(add_));
  _cached_size_ = 0;
}

ReqAddMoney::~ReqAddMoney() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqAddMoney)
  SharedDtor();
}

void ReqAddMoney::SharedDtor() {
}

void ReqAddMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAddMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAddMoney_descriptor_;
}

const ReqAddMoney& ReqAddMoney::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqAddMoney> ReqAddMoney_default_instance_;

ReqAddMoney* ReqAddMoney::New(::google::protobuf::Arena* arena) const {
  ReqAddMoney* n = new ReqAddMoney;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAddMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqAddMoney)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqAddMoney, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqAddMoney*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, add_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqAddMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqAddMoney)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add;
        break;
      }

      // optional int32 add = 2;
      case 2: {
        if (tag == 16) {
         parse_add:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqAddMoney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqAddMoney)
  return false;
#undef DO_
}

void ReqAddMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqAddMoney)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 add = 2;
  if (this->add() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqAddMoney)
}

::google::protobuf::uint8* ReqAddMoney::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqAddMoney)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 add = 2;
  if (this->add() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqAddMoney)
  return target;
}

size_t ReqAddMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqAddMoney)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 add = 2;
  if (this->add() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAddMoney::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqAddMoney)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqAddMoney* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAddMoney>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqAddMoney)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqAddMoney)
    UnsafeMergeFrom(*source);
  }
}

void ReqAddMoney::MergeFrom(const ReqAddMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqAddMoney)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqAddMoney::UnsafeMergeFrom(const ReqAddMoney& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.add() != 0) {
    set_add(from.add());
  }
}

void ReqAddMoney::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqAddMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddMoney::CopyFrom(const ReqAddMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqAddMoney)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqAddMoney::IsInitialized() const {

  return true;
}

void ReqAddMoney::Swap(ReqAddMoney* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAddMoney::InternalSwap(ReqAddMoney* other) {
  std::swap(type_, other->type_);
  std::swap(add_, other->add_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAddMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAddMoney_descriptor_;
  metadata.reflection = ReqAddMoney_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAddMoney

// optional int32 type = 1;
void ReqAddMoney::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 ReqAddMoney::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAddMoney.type)
  return type_;
}
void ReqAddMoney::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAddMoney.type)
}

// optional int32 add = 2;
void ReqAddMoney::clear_add() {
  add_ = 0;
}
::google::protobuf::int32 ReqAddMoney::add() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAddMoney.add)
  return add_;
}
void ReqAddMoney::set_add(::google::protobuf::int32 value) {
  
  add_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAddMoney.add)
}

inline const ReqAddMoney* ReqAddMoney::internal_default_instance() {
  return &ReqAddMoney_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddMoneyAck::kTypeFieldNumber;
const int AddMoneyAck::kAddFieldNumber;
const int AddMoneyAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddMoneyAck::AddMoneyAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AddMoneyAck)
}

void AddMoneyAck::InitAsDefaultInstance() {
}

AddMoneyAck::AddMoneyAck(const AddMoneyAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AddMoneyAck)
}

void AddMoneyAck::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_));
  _cached_size_ = 0;
}

AddMoneyAck::~AddMoneyAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AddMoneyAck)
  SharedDtor();
}

void AddMoneyAck::SharedDtor() {
}

void AddMoneyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMoneyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMoneyAck_descriptor_;
}

const AddMoneyAck& AddMoneyAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddMoneyAck> AddMoneyAck_default_instance_;

AddMoneyAck* AddMoneyAck::New(::google::protobuf::Arena* arena) const {
  AddMoneyAck* n = new AddMoneyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddMoneyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AddMoneyAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddMoneyAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddMoneyAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddMoneyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AddMoneyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add;
        break;
      }

      // optional int32 add = 2;
      case 2: {
        if (tag == 16) {
         parse_add:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AddMoneyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AddMoneyAck)
  return false;
#undef DO_
}

void AddMoneyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AddMoneyAck)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 add = 2;
  if (this->add() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AddMoneyAck)
}

::google::protobuf::uint8* AddMoneyAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AddMoneyAck)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 add = 2;
  if (this->add() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AddMoneyAck)
  return target;
}

size_t AddMoneyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AddMoneyAck)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 add = 2;
  if (this->add() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMoneyAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AddMoneyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddMoneyAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddMoneyAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AddMoneyAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AddMoneyAck)
    UnsafeMergeFrom(*source);
  }
}

void AddMoneyAck::MergeFrom(const AddMoneyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AddMoneyAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddMoneyAck::UnsafeMergeFrom(const AddMoneyAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.add() != 0) {
    set_add(from.add());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void AddMoneyAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AddMoneyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMoneyAck::CopyFrom(const AddMoneyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AddMoneyAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddMoneyAck::IsInitialized() const {

  return true;
}

void AddMoneyAck::Swap(AddMoneyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddMoneyAck::InternalSwap(AddMoneyAck* other) {
  std::swap(type_, other->type_);
  std::swap(add_, other->add_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddMoneyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMoneyAck_descriptor_;
  metadata.reflection = AddMoneyAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddMoneyAck

// optional int32 type = 1;
void AddMoneyAck::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 AddMoneyAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.AddMoneyAck.type)
  return type_;
}
void AddMoneyAck::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AddMoneyAck.type)
}

// optional int32 add = 2;
void AddMoneyAck::clear_add() {
  add_ = 0;
}
::google::protobuf::int32 AddMoneyAck::add() const {
  // @@protoc_insertion_point(field_get:NetMsg.AddMoneyAck.add)
  return add_;
}
void AddMoneyAck::set_add(::google::protobuf::int32 value) {
  
  add_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AddMoneyAck.add)
}

// optional uint32 error = 3;
void AddMoneyAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 AddMoneyAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.AddMoneyAck.error)
  return error_;
}
void AddMoneyAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AddMoneyAck.error)
}

inline const AddMoneyAck* AddMoneyAck::internal_default_instance() {
  return &AddMoneyAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLevelUpCamp::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLevelUpCamp::ReqLevelUpCamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqLevelUpCamp)
}

void ReqLevelUpCamp::InitAsDefaultInstance() {
}

ReqLevelUpCamp::ReqLevelUpCamp(const ReqLevelUpCamp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqLevelUpCamp)
}

void ReqLevelUpCamp::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

ReqLevelUpCamp::~ReqLevelUpCamp() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqLevelUpCamp)
  SharedDtor();
}

void ReqLevelUpCamp::SharedDtor() {
}

void ReqLevelUpCamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLevelUpCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLevelUpCamp_descriptor_;
}

const ReqLevelUpCamp& ReqLevelUpCamp::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqLevelUpCamp> ReqLevelUpCamp_default_instance_;

ReqLevelUpCamp* ReqLevelUpCamp::New(::google::protobuf::Arena* arena) const {
  ReqLevelUpCamp* n = new ReqLevelUpCamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLevelUpCamp::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqLevelUpCamp)
  type_ = 0;
}

bool ReqLevelUpCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqLevelUpCamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.CampType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqLevelUpCamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqLevelUpCamp)
  return false;
#undef DO_
}

void ReqLevelUpCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqLevelUpCamp)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqLevelUpCamp)
}

::google::protobuf::uint8* ReqLevelUpCamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqLevelUpCamp)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqLevelUpCamp)
  return target;
}

size_t ReqLevelUpCamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqLevelUpCamp)
  size_t total_size = 0;

  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLevelUpCamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqLevelUpCamp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqLevelUpCamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLevelUpCamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqLevelUpCamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqLevelUpCamp)
    UnsafeMergeFrom(*source);
  }
}

void ReqLevelUpCamp::MergeFrom(const ReqLevelUpCamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqLevelUpCamp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqLevelUpCamp::UnsafeMergeFrom(const ReqLevelUpCamp& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqLevelUpCamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqLevelUpCamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLevelUpCamp::CopyFrom(const ReqLevelUpCamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqLevelUpCamp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqLevelUpCamp::IsInitialized() const {

  return true;
}

void ReqLevelUpCamp::Swap(ReqLevelUpCamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLevelUpCamp::InternalSwap(ReqLevelUpCamp* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLevelUpCamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLevelUpCamp_descriptor_;
  metadata.reflection = ReqLevelUpCamp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLevelUpCamp

// optional .NetMsg.CampType type = 1;
void ReqLevelUpCamp::clear_type() {
  type_ = 0;
}
::NetMsg::CampType ReqLevelUpCamp::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqLevelUpCamp.type)
  return static_cast< ::NetMsg::CampType >(type_);
}
void ReqLevelUpCamp::set_type(::NetMsg::CampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqLevelUpCamp.type)
}

inline const ReqLevelUpCamp* ReqLevelUpCamp::internal_default_instance() {
  return &ReqLevelUpCamp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LevelUpCampAck::kTypeFieldNumber;
const int LevelUpCampAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LevelUpCampAck::LevelUpCampAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.LevelUpCampAck)
}

void LevelUpCampAck::InitAsDefaultInstance() {
}

LevelUpCampAck::LevelUpCampAck(const LevelUpCampAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.LevelUpCampAck)
}

void LevelUpCampAck::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_));
  _cached_size_ = 0;
}

LevelUpCampAck::~LevelUpCampAck() {
  // @@protoc_insertion_point(destructor:NetMsg.LevelUpCampAck)
  SharedDtor();
}

void LevelUpCampAck::SharedDtor() {
}

void LevelUpCampAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelUpCampAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelUpCampAck_descriptor_;
}

const LevelUpCampAck& LevelUpCampAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LevelUpCampAck> LevelUpCampAck_default_instance_;

LevelUpCampAck* LevelUpCampAck::New(::google::protobuf::Arena* arena) const {
  LevelUpCampAck* n = new LevelUpCampAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LevelUpCampAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.LevelUpCampAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LevelUpCampAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LevelUpCampAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool LevelUpCampAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.LevelUpCampAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.CampType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.LevelUpCampAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.LevelUpCampAck)
  return false;
#undef DO_
}

void LevelUpCampAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.LevelUpCampAck)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.LevelUpCampAck)
}

::google::protobuf::uint8* LevelUpCampAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.LevelUpCampAck)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.LevelUpCampAck)
  return target;
}

size_t LevelUpCampAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.LevelUpCampAck)
  size_t total_size = 0;

  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpCampAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.LevelUpCampAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LevelUpCampAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LevelUpCampAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.LevelUpCampAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.LevelUpCampAck)
    UnsafeMergeFrom(*source);
  }
}

void LevelUpCampAck::MergeFrom(const LevelUpCampAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.LevelUpCampAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LevelUpCampAck::UnsafeMergeFrom(const LevelUpCampAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void LevelUpCampAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.LevelUpCampAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelUpCampAck::CopyFrom(const LevelUpCampAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.LevelUpCampAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LevelUpCampAck::IsInitialized() const {

  return true;
}

void LevelUpCampAck::Swap(LevelUpCampAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LevelUpCampAck::InternalSwap(LevelUpCampAck* other) {
  std::swap(type_, other->type_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LevelUpCampAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelUpCampAck_descriptor_;
  metadata.reflection = LevelUpCampAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LevelUpCampAck

// optional .NetMsg.CampType type = 1;
void LevelUpCampAck::clear_type() {
  type_ = 0;
}
::NetMsg::CampType LevelUpCampAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.LevelUpCampAck.type)
  return static_cast< ::NetMsg::CampType >(type_);
}
void LevelUpCampAck::set_type(::NetMsg::CampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.LevelUpCampAck.type)
}

// optional uint32 error = 3;
void LevelUpCampAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 LevelUpCampAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.LevelUpCampAck.error)
  return error_;
}
void LevelUpCampAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.LevelUpCampAck.error)
}

inline const LevelUpCampAck* LevelUpCampAck::internal_default_instance() {
  return &LevelUpCampAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqClearCampCD::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqClearCampCD::ReqClearCampCD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqClearCampCD)
}

void ReqClearCampCD::InitAsDefaultInstance() {
}

ReqClearCampCD::ReqClearCampCD(const ReqClearCampCD& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqClearCampCD)
}

void ReqClearCampCD::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

ReqClearCampCD::~ReqClearCampCD() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqClearCampCD)
  SharedDtor();
}

void ReqClearCampCD::SharedDtor() {
}

void ReqClearCampCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClearCampCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClearCampCD_descriptor_;
}

const ReqClearCampCD& ReqClearCampCD::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqClearCampCD> ReqClearCampCD_default_instance_;

ReqClearCampCD* ReqClearCampCD::New(::google::protobuf::Arena* arena) const {
  ReqClearCampCD* n = new ReqClearCampCD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqClearCampCD::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqClearCampCD)
  type_ = 0;
}

bool ReqClearCampCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqClearCampCD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.CampType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqClearCampCD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqClearCampCD)
  return false;
#undef DO_
}

void ReqClearCampCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqClearCampCD)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqClearCampCD)
}

::google::protobuf::uint8* ReqClearCampCD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqClearCampCD)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqClearCampCD)
  return target;
}

size_t ReqClearCampCD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqClearCampCD)
  size_t total_size = 0;

  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClearCampCD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqClearCampCD)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqClearCampCD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqClearCampCD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqClearCampCD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqClearCampCD)
    UnsafeMergeFrom(*source);
  }
}

void ReqClearCampCD::MergeFrom(const ReqClearCampCD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqClearCampCD)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqClearCampCD::UnsafeMergeFrom(const ReqClearCampCD& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqClearCampCD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqClearCampCD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClearCampCD::CopyFrom(const ReqClearCampCD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqClearCampCD)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqClearCampCD::IsInitialized() const {

  return true;
}

void ReqClearCampCD::Swap(ReqClearCampCD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqClearCampCD::InternalSwap(ReqClearCampCD* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqClearCampCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClearCampCD_descriptor_;
  metadata.reflection = ReqClearCampCD_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqClearCampCD

// optional .NetMsg.CampType type = 1;
void ReqClearCampCD::clear_type() {
  type_ = 0;
}
::NetMsg::CampType ReqClearCampCD::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqClearCampCD.type)
  return static_cast< ::NetMsg::CampType >(type_);
}
void ReqClearCampCD::set_type(::NetMsg::CampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqClearCampCD.type)
}

inline const ReqClearCampCD* ReqClearCampCD::internal_default_instance() {
  return &ReqClearCampCD_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearCampCDAck::kTypeFieldNumber;
const int ClearCampCDAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearCampCDAck::ClearCampCDAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClearCampCDAck)
}

void ClearCampCDAck::InitAsDefaultInstance() {
}

ClearCampCDAck::ClearCampCDAck(const ClearCampCDAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClearCampCDAck)
}

void ClearCampCDAck::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_));
  _cached_size_ = 0;
}

ClearCampCDAck::~ClearCampCDAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ClearCampCDAck)
  SharedDtor();
}

void ClearCampCDAck::SharedDtor() {
}

void ClearCampCDAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearCampCDAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearCampCDAck_descriptor_;
}

const ClearCampCDAck& ClearCampCDAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClearCampCDAck> ClearCampCDAck_default_instance_;

ClearCampCDAck* ClearCampCDAck::New(::google::protobuf::Arena* arena) const {
  ClearCampCDAck* n = new ClearCampCDAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearCampCDAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClearCampCDAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClearCampCDAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClearCampCDAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool ClearCampCDAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClearCampCDAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.CampType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClearCampCDAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClearCampCDAck)
  return false;
#undef DO_
}

void ClearCampCDAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClearCampCDAck)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClearCampCDAck)
}

::google::protobuf::uint8* ClearCampCDAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClearCampCDAck)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClearCampCDAck)
  return target;
}

size_t ClearCampCDAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClearCampCDAck)
  size_t total_size = 0;

  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearCampCDAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClearCampCDAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClearCampCDAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearCampCDAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClearCampCDAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClearCampCDAck)
    UnsafeMergeFrom(*source);
  }
}

void ClearCampCDAck::MergeFrom(const ClearCampCDAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClearCampCDAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClearCampCDAck::UnsafeMergeFrom(const ClearCampCDAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void ClearCampCDAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClearCampCDAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearCampCDAck::CopyFrom(const ClearCampCDAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClearCampCDAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClearCampCDAck::IsInitialized() const {

  return true;
}

void ClearCampCDAck::Swap(ClearCampCDAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearCampCDAck::InternalSwap(ClearCampCDAck* other) {
  std::swap(type_, other->type_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearCampCDAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearCampCDAck_descriptor_;
  metadata.reflection = ClearCampCDAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearCampCDAck

// optional .NetMsg.CampType type = 1;
void ClearCampCDAck::clear_type() {
  type_ = 0;
}
::NetMsg::CampType ClearCampCDAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClearCampCDAck.type)
  return static_cast< ::NetMsg::CampType >(type_);
}
void ClearCampCDAck::set_type(::NetMsg::CampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClearCampCDAck.type)
}

// optional uint32 error = 2;
void ClearCampCDAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 ClearCampCDAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClearCampCDAck.error)
  return error_;
}
void ClearCampCDAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClearCampCDAck.error)
}

inline const ClearCampCDAck* ClearCampCDAck::internal_default_instance() {
  return &ClearCampCDAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCampState::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCampState::ReqCampState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqCampState)
}

void ReqCampState::InitAsDefaultInstance() {
}

ReqCampState::ReqCampState(const ReqCampState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqCampState)
}

void ReqCampState::SharedCtor() {
  _cached_size_ = 0;
}

ReqCampState::~ReqCampState() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqCampState)
  SharedDtor();
}

void ReqCampState::SharedDtor() {
}

void ReqCampState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCampState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCampState_descriptor_;
}

const ReqCampState& ReqCampState::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqCampState> ReqCampState_default_instance_;

ReqCampState* ReqCampState::New(::google::protobuf::Arena* arena) const {
  ReqCampState* n = new ReqCampState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCampState::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqCampState)
  types_.Clear();
}

bool ReqCampState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqCampState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.CampType types = 1;
      case 1: {
        if (tag == 10) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_types(static_cast< ::NetMsg::CampType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_types(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqCampState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqCampState)
  return false;
#undef DO_
}

void ReqCampState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqCampState)
  // repeated .NetMsg.CampType types = 1;
  if (this->types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_types_cached_byte_size_);
  }
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqCampState)
}

::google::protobuf::uint8* ReqCampState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqCampState)
  // repeated .NetMsg.CampType types = 1;
  if (this->types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _types_cached_byte_size_, target);
  }
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->types(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqCampState)
  return target;
}

size_t ReqCampState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqCampState)
  size_t total_size = 0;

  // repeated .NetMsg.CampType types = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->types_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCampState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqCampState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqCampState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCampState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqCampState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqCampState)
    UnsafeMergeFrom(*source);
  }
}

void ReqCampState::MergeFrom(const ReqCampState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqCampState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqCampState::UnsafeMergeFrom(const ReqCampState& from) {
  GOOGLE_DCHECK(&from != this);
  types_.UnsafeMergeFrom(from.types_);
}

void ReqCampState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqCampState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCampState::CopyFrom(const ReqCampState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqCampState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqCampState::IsInitialized() const {

  return true;
}

void ReqCampState::Swap(ReqCampState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCampState::InternalSwap(ReqCampState* other) {
  types_.UnsafeArenaSwap(&other->types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCampState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCampState_descriptor_;
  metadata.reflection = ReqCampState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCampState

// repeated .NetMsg.CampType types = 1;
int ReqCampState::types_size() const {
  return types_.size();
}
void ReqCampState::clear_types() {
  types_.Clear();
}
::NetMsg::CampType ReqCampState::types(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCampState.types)
  return static_cast< ::NetMsg::CampType >(types_.Get(index));
}
void ReqCampState::set_types(int index, ::NetMsg::CampType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqCampState.types)
}
void ReqCampState::add_types(::NetMsg::CampType value) {
  types_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.ReqCampState.types)
}
const ::google::protobuf::RepeatedField<int>&
ReqCampState::types() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqCampState.types)
  return types_;
}
::google::protobuf::RepeatedField<int>*
ReqCampState::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqCampState.types)
  return &types_;
}

inline const ReqCampState* ReqCampState::internal_default_instance() {
  return &ReqCampState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CampState::kTypeFieldNumber;
const int CampState::kLevelFieldNumber;
const int CampState::kOutputDataFieldNumber;
const int CampState::kLeftTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CampState::CampState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CampState)
}

void CampState::InitAsDefaultInstance() {
}

CampState::CampState(const CampState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CampState)
}

void CampState::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&type_) + sizeof(lefttime_));
  _cached_size_ = 0;
}

CampState::~CampState() {
  // @@protoc_insertion_point(destructor:NetMsg.CampState)
  SharedDtor();
}

void CampState::SharedDtor() {
}

void CampState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampState_descriptor_;
}

const CampState& CampState::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CampState> CampState_default_instance_;

CampState* CampState::New(::google::protobuf::Arena* arena) const {
  CampState* n = new CampState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CampState::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CampState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CampState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CampState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, lefttime_);

#undef ZR_HELPER_
#undef ZR_

}

bool CampState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CampState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.CampType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_outputData;
        break;
      }

      // optional uint32 outputData = 3;
      case 3: {
        if (tag == 24) {
         parse_outputData:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outputdata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 4;
      case 4: {
        if (tag == 32) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CampState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CampState)
  return false;
#undef DO_
}

void CampState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CampState)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 outputData = 3;
  if (this->outputdata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->outputdata(), output);
  }

  // optional uint32 leftTime = 4;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lefttime(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CampState)
}

::google::protobuf::uint8* CampState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CampState)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 outputData = 3;
  if (this->outputdata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->outputdata(), target);
  }

  // optional uint32 leftTime = 4;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lefttime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CampState)
  return target;
}

size_t CampState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CampState)
  size_t total_size = 0;

  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 outputData = 3;
  if (this->outputdata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->outputdata());
  }

  // optional uint32 leftTime = 4;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CampState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CampState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CampState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CampState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CampState)
    UnsafeMergeFrom(*source);
  }
}

void CampState::MergeFrom(const CampState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CampState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CampState::UnsafeMergeFrom(const CampState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.outputdata() != 0) {
    set_outputdata(from.outputdata());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
}

void CampState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CampState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampState::CopyFrom(const CampState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CampState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CampState::IsInitialized() const {

  return true;
}

void CampState::Swap(CampState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CampState::InternalSwap(CampState* other) {
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(outputdata_, other->outputdata_);
  std::swap(lefttime_, other->lefttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CampState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampState_descriptor_;
  metadata.reflection = CampState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CampState

// optional .NetMsg.CampType type = 1;
void CampState::clear_type() {
  type_ = 0;
}
::NetMsg::CampType CampState::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.CampState.type)
  return static_cast< ::NetMsg::CampType >(type_);
}
void CampState::set_type(::NetMsg::CampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CampState.type)
}

// optional uint32 level = 2;
void CampState::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 CampState::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.CampState.level)
  return level_;
}
void CampState::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CampState.level)
}

// optional uint32 outputData = 3;
void CampState::clear_outputdata() {
  outputdata_ = 0u;
}
::google::protobuf::uint32 CampState::outputdata() const {
  // @@protoc_insertion_point(field_get:NetMsg.CampState.outputData)
  return outputdata_;
}
void CampState::set_outputdata(::google::protobuf::uint32 value) {
  
  outputdata_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CampState.outputData)
}

// optional uint32 leftTime = 4;
void CampState::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 CampState::lefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.CampState.leftTime)
  return lefttime_;
}
void CampState::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CampState.leftTime)
}

inline const CampState* CampState::internal_default_instance() {
  return &CampState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CampStateAck::kStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CampStateAck::CampStateAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CampStateAck)
}

void CampStateAck::InitAsDefaultInstance() {
}

CampStateAck::CampStateAck(const CampStateAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CampStateAck)
}

void CampStateAck::SharedCtor() {
  _cached_size_ = 0;
}

CampStateAck::~CampStateAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CampStateAck)
  SharedDtor();
}

void CampStateAck::SharedDtor() {
}

void CampStateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampStateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampStateAck_descriptor_;
}

const CampStateAck& CampStateAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CampStateAck> CampStateAck_default_instance_;

CampStateAck* CampStateAck::New(::google::protobuf::Arena* arena) const {
  CampStateAck* n = new CampStateAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CampStateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CampStateAck)
  states_.Clear();
}

bool CampStateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CampStateAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.CampState states = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_states;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CampStateAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CampStateAck)
  return false;
#undef DO_
}

void CampStateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CampStateAck)
  // repeated .NetMsg.CampState states = 1;
  for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->states(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CampStateAck)
}

::google::protobuf::uint8* CampStateAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CampStateAck)
  // repeated .NetMsg.CampState states = 1;
  for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->states(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CampStateAck)
  return target;
}

size_t CampStateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CampStateAck)
  size_t total_size = 0;

  // repeated .NetMsg.CampState states = 1;
  {
    unsigned int count = this->states_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->states(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampStateAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CampStateAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CampStateAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CampStateAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CampStateAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CampStateAck)
    UnsafeMergeFrom(*source);
  }
}

void CampStateAck::MergeFrom(const CampStateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CampStateAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CampStateAck::UnsafeMergeFrom(const CampStateAck& from) {
  GOOGLE_DCHECK(&from != this);
  states_.MergeFrom(from.states_);
}

void CampStateAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CampStateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampStateAck::CopyFrom(const CampStateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CampStateAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CampStateAck::IsInitialized() const {

  return true;
}

void CampStateAck::Swap(CampStateAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CampStateAck::InternalSwap(CampStateAck* other) {
  states_.UnsafeArenaSwap(&other->states_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CampStateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampStateAck_descriptor_;
  metadata.reflection = CampStateAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CampStateAck

// repeated .NetMsg.CampState states = 1;
int CampStateAck::states_size() const {
  return states_.size();
}
void CampStateAck::clear_states() {
  states_.Clear();
}
const ::NetMsg::CampState& CampStateAck::states(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.CampStateAck.states)
  return states_.Get(index);
}
::NetMsg::CampState* CampStateAck::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.CampStateAck.states)
  return states_.Mutable(index);
}
::NetMsg::CampState* CampStateAck::add_states() {
  // @@protoc_insertion_point(field_add:NetMsg.CampStateAck.states)
  return states_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::CampState >*
CampStateAck::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.CampStateAck.states)
  return &states_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::CampState >&
CampStateAck::states() const {
  // @@protoc_insertion_point(field_list:NetMsg.CampStateAck.states)
  return states_;
}

inline const CampStateAck* CampStateAck::internal_default_instance() {
  return &CampStateAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetCampOut::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetCampOut::ReqGetCampOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqGetCampOut)
}

void ReqGetCampOut::InitAsDefaultInstance() {
}

ReqGetCampOut::ReqGetCampOut(const ReqGetCampOut& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqGetCampOut)
}

void ReqGetCampOut::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

ReqGetCampOut::~ReqGetCampOut() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqGetCampOut)
  SharedDtor();
}

void ReqGetCampOut::SharedDtor() {
}

void ReqGetCampOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetCampOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetCampOut_descriptor_;
}

const ReqGetCampOut& ReqGetCampOut::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqGetCampOut> ReqGetCampOut_default_instance_;

ReqGetCampOut* ReqGetCampOut::New(::google::protobuf::Arena* arena) const {
  ReqGetCampOut* n = new ReqGetCampOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqGetCampOut::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqGetCampOut)
  type_ = 0;
}

bool ReqGetCampOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqGetCampOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.CampType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqGetCampOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqGetCampOut)
  return false;
#undef DO_
}

void ReqGetCampOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqGetCampOut)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqGetCampOut)
}

::google::protobuf::uint8* ReqGetCampOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqGetCampOut)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqGetCampOut)
  return target;
}

size_t ReqGetCampOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqGetCampOut)
  size_t total_size = 0;

  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetCampOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqGetCampOut)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqGetCampOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGetCampOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqGetCampOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqGetCampOut)
    UnsafeMergeFrom(*source);
  }
}

void ReqGetCampOut::MergeFrom(const ReqGetCampOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqGetCampOut)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqGetCampOut::UnsafeMergeFrom(const ReqGetCampOut& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqGetCampOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqGetCampOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetCampOut::CopyFrom(const ReqGetCampOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqGetCampOut)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqGetCampOut::IsInitialized() const {

  return true;
}

void ReqGetCampOut::Swap(ReqGetCampOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetCampOut::InternalSwap(ReqGetCampOut* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGetCampOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetCampOut_descriptor_;
  metadata.reflection = ReqGetCampOut_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqGetCampOut

// optional .NetMsg.CampType type = 1;
void ReqGetCampOut::clear_type() {
  type_ = 0;
}
::NetMsg::CampType ReqGetCampOut::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqGetCampOut.type)
  return static_cast< ::NetMsg::CampType >(type_);
}
void ReqGetCampOut::set_type(::NetMsg::CampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqGetCampOut.type)
}

inline const ReqGetCampOut* ReqGetCampOut::internal_default_instance() {
  return &ReqGetCampOut_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCampOutAck::kTypeFieldNumber;
const int GetCampOutAck::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCampOutAck::GetCampOutAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.GetCampOutAck)
}

void GetCampOutAck::InitAsDefaultInstance() {
}

GetCampOutAck::GetCampOutAck(const GetCampOutAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.GetCampOutAck)
}

void GetCampOutAck::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&type_) + sizeof(output_));
  _cached_size_ = 0;
}

GetCampOutAck::~GetCampOutAck() {
  // @@protoc_insertion_point(destructor:NetMsg.GetCampOutAck)
  SharedDtor();
}

void GetCampOutAck::SharedDtor() {
}

void GetCampOutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCampOutAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCampOutAck_descriptor_;
}

const GetCampOutAck& GetCampOutAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetCampOutAck> GetCampOutAck_default_instance_;

GetCampOutAck* GetCampOutAck::New(::google::protobuf::Arena* arena) const {
  GetCampOutAck* n = new GetCampOutAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCampOutAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.GetCampOutAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetCampOutAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetCampOutAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, output_);

#undef ZR_HELPER_
#undef ZR_

}

bool GetCampOutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.GetCampOutAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.CampType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::CampType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output;
        break;
      }

      // optional uint32 output = 2;
      case 2: {
        if (tag == 16) {
         parse_output:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.GetCampOutAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.GetCampOutAck)
  return false;
#undef DO_
}

void GetCampOutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.GetCampOutAck)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 output = 2;
  if (this->output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->output(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.GetCampOutAck)
}

::google::protobuf::uint8* GetCampOutAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.GetCampOutAck)
  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 output = 2;
  if (this->output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->output(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.GetCampOutAck)
  return target;
}

size_t GetCampOutAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.GetCampOutAck)
  size_t total_size = 0;

  // optional .NetMsg.CampType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 output = 2;
  if (this->output() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCampOutAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.GetCampOutAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetCampOutAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCampOutAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.GetCampOutAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.GetCampOutAck)
    UnsafeMergeFrom(*source);
  }
}

void GetCampOutAck::MergeFrom(const GetCampOutAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.GetCampOutAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetCampOutAck::UnsafeMergeFrom(const GetCampOutAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.output() != 0) {
    set_output(from.output());
  }
}

void GetCampOutAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.GetCampOutAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCampOutAck::CopyFrom(const GetCampOutAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.GetCampOutAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetCampOutAck::IsInitialized() const {

  return true;
}

void GetCampOutAck::Swap(GetCampOutAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCampOutAck::InternalSwap(GetCampOutAck* other) {
  std::swap(type_, other->type_);
  std::swap(output_, other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCampOutAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCampOutAck_descriptor_;
  metadata.reflection = GetCampOutAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCampOutAck

// optional .NetMsg.CampType type = 1;
void GetCampOutAck::clear_type() {
  type_ = 0;
}
::NetMsg::CampType GetCampOutAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.GetCampOutAck.type)
  return static_cast< ::NetMsg::CampType >(type_);
}
void GetCampOutAck::set_type(::NetMsg::CampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.GetCampOutAck.type)
}

// optional uint32 output = 2;
void GetCampOutAck::clear_output() {
  output_ = 0u;
}
::google::protobuf::uint32 GetCampOutAck::output() const {
  // @@protoc_insertion_point(field_get:NetMsg.GetCampOutAck.output)
  return output_;
}
void GetCampOutAck::set_output(::google::protobuf::uint32 value) {
  
  output_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.GetCampOutAck.output)
}

inline const GetCampOutAck* GetCampOutAck::internal_default_instance() {
  return &GetCampOutAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CycleBattleAck::kMaxDifficultyFieldNumber;
const int CycleBattleAck::kCurDifficultyFieldNumber;
const int CycleBattleAck::kCurRoundFieldNumber;
const int CycleBattleAck::kLeftUnlockTimesFieldNumber;
const int CycleBattleAck::kLeftTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CycleBattleAck::CycleBattleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CycleBattleAck)
}

void CycleBattleAck::InitAsDefaultInstance() {
}

CycleBattleAck::CycleBattleAck(const CycleBattleAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CycleBattleAck)
}

void CycleBattleAck::SharedCtor() {
  ::memset(&maxdifficulty_, 0, reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&maxdifficulty_) + sizeof(lefttime_));
  _cached_size_ = 0;
}

CycleBattleAck::~CycleBattleAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CycleBattleAck)
  SharedDtor();
}

void CycleBattleAck::SharedDtor() {
}

void CycleBattleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CycleBattleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CycleBattleAck_descriptor_;
}

const CycleBattleAck& CycleBattleAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CycleBattleAck> CycleBattleAck_default_instance_;

CycleBattleAck* CycleBattleAck::New(::google::protobuf::Arena* arena) const {
  CycleBattleAck* n = new CycleBattleAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CycleBattleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CycleBattleAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CycleBattleAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CycleBattleAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(maxdifficulty_, lefttime_);

#undef ZR_HELPER_
#undef ZR_

}

bool CycleBattleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CycleBattleAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxDifficulty = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxdifficulty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curDifficulty;
        break;
      }

      // optional uint32 curDifficulty = 2;
      case 2: {
        if (tag == 16) {
         parse_curDifficulty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curdifficulty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curRound;
        break;
      }

      // optional uint32 curRound = 3;
      case 3: {
        if (tag == 24) {
         parse_curRound:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curround_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leftUnlockTimes;
        break;
      }

      // optional uint32 leftUnlockTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_leftUnlockTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftunlocktimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 5;
      case 5: {
        if (tag == 40) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CycleBattleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CycleBattleAck)
  return false;
#undef DO_
}

void CycleBattleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CycleBattleAck)
  // optional uint32 maxDifficulty = 1;
  if (this->maxdifficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxdifficulty(), output);
  }

  // optional uint32 curDifficulty = 2;
  if (this->curdifficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curdifficulty(), output);
  }

  // optional uint32 curRound = 3;
  if (this->curround() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curround(), output);
  }

  // optional uint32 leftUnlockTimes = 4;
  if (this->leftunlocktimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leftunlocktimes(), output);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lefttime(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CycleBattleAck)
}

::google::protobuf::uint8* CycleBattleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CycleBattleAck)
  // optional uint32 maxDifficulty = 1;
  if (this->maxdifficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxdifficulty(), target);
  }

  // optional uint32 curDifficulty = 2;
  if (this->curdifficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curdifficulty(), target);
  }

  // optional uint32 curRound = 3;
  if (this->curround() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curround(), target);
  }

  // optional uint32 leftUnlockTimes = 4;
  if (this->leftunlocktimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leftunlocktimes(), target);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lefttime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CycleBattleAck)
  return target;
}

size_t CycleBattleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CycleBattleAck)
  size_t total_size = 0;

  // optional uint32 maxDifficulty = 1;
  if (this->maxdifficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxdifficulty());
  }

  // optional uint32 curDifficulty = 2;
  if (this->curdifficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curdifficulty());
  }

  // optional uint32 curRound = 3;
  if (this->curround() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curround());
  }

  // optional uint32 leftUnlockTimes = 4;
  if (this->leftunlocktimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftunlocktimes());
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CycleBattleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CycleBattleAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CycleBattleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CycleBattleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CycleBattleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CycleBattleAck)
    UnsafeMergeFrom(*source);
  }
}

void CycleBattleAck::MergeFrom(const CycleBattleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CycleBattleAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CycleBattleAck::UnsafeMergeFrom(const CycleBattleAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.maxdifficulty() != 0) {
    set_maxdifficulty(from.maxdifficulty());
  }
  if (from.curdifficulty() != 0) {
    set_curdifficulty(from.curdifficulty());
  }
  if (from.curround() != 0) {
    set_curround(from.curround());
  }
  if (from.leftunlocktimes() != 0) {
    set_leftunlocktimes(from.leftunlocktimes());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
}

void CycleBattleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CycleBattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CycleBattleAck::CopyFrom(const CycleBattleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CycleBattleAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CycleBattleAck::IsInitialized() const {

  return true;
}

void CycleBattleAck::Swap(CycleBattleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CycleBattleAck::InternalSwap(CycleBattleAck* other) {
  std::swap(maxdifficulty_, other->maxdifficulty_);
  std::swap(curdifficulty_, other->curdifficulty_);
  std::swap(curround_, other->curround_);
  std::swap(leftunlocktimes_, other->leftunlocktimes_);
  std::swap(lefttime_, other->lefttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CycleBattleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CycleBattleAck_descriptor_;
  metadata.reflection = CycleBattleAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CycleBattleAck

// optional uint32 maxDifficulty = 1;
void CycleBattleAck::clear_maxdifficulty() {
  maxdifficulty_ = 0u;
}
::google::protobuf::uint32 CycleBattleAck::maxdifficulty() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleAck.maxDifficulty)
  return maxdifficulty_;
}
void CycleBattleAck::set_maxdifficulty(::google::protobuf::uint32 value) {
  
  maxdifficulty_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleAck.maxDifficulty)
}

// optional uint32 curDifficulty = 2;
void CycleBattleAck::clear_curdifficulty() {
  curdifficulty_ = 0u;
}
::google::protobuf::uint32 CycleBattleAck::curdifficulty() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleAck.curDifficulty)
  return curdifficulty_;
}
void CycleBattleAck::set_curdifficulty(::google::protobuf::uint32 value) {
  
  curdifficulty_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleAck.curDifficulty)
}

// optional uint32 curRound = 3;
void CycleBattleAck::clear_curround() {
  curround_ = 0u;
}
::google::protobuf::uint32 CycleBattleAck::curround() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleAck.curRound)
  return curround_;
}
void CycleBattleAck::set_curround(::google::protobuf::uint32 value) {
  
  curround_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleAck.curRound)
}

// optional uint32 leftUnlockTimes = 4;
void CycleBattleAck::clear_leftunlocktimes() {
  leftunlocktimes_ = 0u;
}
::google::protobuf::uint32 CycleBattleAck::leftunlocktimes() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleAck.leftUnlockTimes)
  return leftunlocktimes_;
}
void CycleBattleAck::set_leftunlocktimes(::google::protobuf::uint32 value) {
  
  leftunlocktimes_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleAck.leftUnlockTimes)
}

// optional uint32 leftTime = 5;
void CycleBattleAck::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 CycleBattleAck::lefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleAck.leftTime)
  return lefttime_;
}
void CycleBattleAck::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleAck.leftTime)
}

inline const CycleBattleAck* CycleBattleAck::internal_default_instance() {
  return &CycleBattleAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefresshCycleAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefresshCycleAck::RefresshCycleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RefresshCycleAck)
}

void RefresshCycleAck::InitAsDefaultInstance() {
}

RefresshCycleAck::RefresshCycleAck(const RefresshCycleAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RefresshCycleAck)
}

void RefresshCycleAck::SharedCtor() {
  error_ = 0u;
  _cached_size_ = 0;
}

RefresshCycleAck::~RefresshCycleAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RefresshCycleAck)
  SharedDtor();
}

void RefresshCycleAck::SharedDtor() {
}

void RefresshCycleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefresshCycleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefresshCycleAck_descriptor_;
}

const RefresshCycleAck& RefresshCycleAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RefresshCycleAck> RefresshCycleAck_default_instance_;

RefresshCycleAck* RefresshCycleAck::New(::google::protobuf::Arena* arena) const {
  RefresshCycleAck* n = new RefresshCycleAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefresshCycleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RefresshCycleAck)
  error_ = 0u;
}

bool RefresshCycleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RefresshCycleAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RefresshCycleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RefresshCycleAck)
  return false;
#undef DO_
}

void RefresshCycleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RefresshCycleAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RefresshCycleAck)
}

::google::protobuf::uint8* RefresshCycleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RefresshCycleAck)
  // optional uint32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RefresshCycleAck)
  return target;
}

size_t RefresshCycleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RefresshCycleAck)
  size_t total_size = 0;

  // optional uint32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefresshCycleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RefresshCycleAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RefresshCycleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefresshCycleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RefresshCycleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RefresshCycleAck)
    UnsafeMergeFrom(*source);
  }
}

void RefresshCycleAck::MergeFrom(const RefresshCycleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RefresshCycleAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RefresshCycleAck::UnsafeMergeFrom(const RefresshCycleAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void RefresshCycleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RefresshCycleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefresshCycleAck::CopyFrom(const RefresshCycleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RefresshCycleAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RefresshCycleAck::IsInitialized() const {

  return true;
}

void RefresshCycleAck::Swap(RefresshCycleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefresshCycleAck::InternalSwap(RefresshCycleAck* other) {
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefresshCycleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefresshCycleAck_descriptor_;
  metadata.reflection = RefresshCycleAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RefresshCycleAck

// optional uint32 error = 1;
void RefresshCycleAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 RefresshCycleAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.RefresshCycleAck.error)
  return error_;
}
void RefresshCycleAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RefresshCycleAck.error)
}

inline const RefresshCycleAck* RefresshCycleAck::internal_default_instance() {
  return &RefresshCycleAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSelectCycleDiff::kDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSelectCycleDiff::ReqSelectCycleDiff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqSelectCycleDiff)
}

void ReqSelectCycleDiff::InitAsDefaultInstance() {
}

ReqSelectCycleDiff::ReqSelectCycleDiff(const ReqSelectCycleDiff& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqSelectCycleDiff)
}

void ReqSelectCycleDiff::SharedCtor() {
  difficulty_ = 0u;
  _cached_size_ = 0;
}

ReqSelectCycleDiff::~ReqSelectCycleDiff() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqSelectCycleDiff)
  SharedDtor();
}

void ReqSelectCycleDiff::SharedDtor() {
}

void ReqSelectCycleDiff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSelectCycleDiff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSelectCycleDiff_descriptor_;
}

const ReqSelectCycleDiff& ReqSelectCycleDiff::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqSelectCycleDiff> ReqSelectCycleDiff_default_instance_;

ReqSelectCycleDiff* ReqSelectCycleDiff::New(::google::protobuf::Arena* arena) const {
  ReqSelectCycleDiff* n = new ReqSelectCycleDiff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSelectCycleDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqSelectCycleDiff)
  difficulty_ = 0u;
}

bool ReqSelectCycleDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqSelectCycleDiff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 difficulty = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqSelectCycleDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqSelectCycleDiff)
  return false;
#undef DO_
}

void ReqSelectCycleDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqSelectCycleDiff)
  // optional uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->difficulty(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqSelectCycleDiff)
}

::google::protobuf::uint8* ReqSelectCycleDiff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqSelectCycleDiff)
  // optional uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->difficulty(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqSelectCycleDiff)
  return target;
}

size_t ReqSelectCycleDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqSelectCycleDiff)
  size_t total_size = 0;

  // optional uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSelectCycleDiff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqSelectCycleDiff)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqSelectCycleDiff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSelectCycleDiff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqSelectCycleDiff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqSelectCycleDiff)
    UnsafeMergeFrom(*source);
  }
}

void ReqSelectCycleDiff::MergeFrom(const ReqSelectCycleDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqSelectCycleDiff)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqSelectCycleDiff::UnsafeMergeFrom(const ReqSelectCycleDiff& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
}

void ReqSelectCycleDiff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqSelectCycleDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSelectCycleDiff::CopyFrom(const ReqSelectCycleDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqSelectCycleDiff)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqSelectCycleDiff::IsInitialized() const {

  return true;
}

void ReqSelectCycleDiff::Swap(ReqSelectCycleDiff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSelectCycleDiff::InternalSwap(ReqSelectCycleDiff* other) {
  std::swap(difficulty_, other->difficulty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSelectCycleDiff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSelectCycleDiff_descriptor_;
  metadata.reflection = ReqSelectCycleDiff_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSelectCycleDiff

// optional uint32 difficulty = 1;
void ReqSelectCycleDiff::clear_difficulty() {
  difficulty_ = 0u;
}
::google::protobuf::uint32 ReqSelectCycleDiff::difficulty() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqSelectCycleDiff.difficulty)
  return difficulty_;
}
void ReqSelectCycleDiff::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqSelectCycleDiff.difficulty)
}

inline const ReqSelectCycleDiff* ReqSelectCycleDiff::internal_default_instance() {
  return &ReqSelectCycleDiff_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectCycleDiffAck::kDifficultyFieldNumber;
const int SelectCycleDiffAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectCycleDiffAck::SelectCycleDiffAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SelectCycleDiffAck)
}

void SelectCycleDiffAck::InitAsDefaultInstance() {
}

SelectCycleDiffAck::SelectCycleDiffAck(const SelectCycleDiffAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SelectCycleDiffAck)
}

void SelectCycleDiffAck::SharedCtor() {
  ::memset(&difficulty_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&difficulty_) + sizeof(error_));
  _cached_size_ = 0;
}

SelectCycleDiffAck::~SelectCycleDiffAck() {
  // @@protoc_insertion_point(destructor:NetMsg.SelectCycleDiffAck)
  SharedDtor();
}

void SelectCycleDiffAck::SharedDtor() {
}

void SelectCycleDiffAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectCycleDiffAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectCycleDiffAck_descriptor_;
}

const SelectCycleDiffAck& SelectCycleDiffAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SelectCycleDiffAck> SelectCycleDiffAck_default_instance_;

SelectCycleDiffAck* SelectCycleDiffAck::New(::google::protobuf::Arena* arena) const {
  SelectCycleDiffAck* n = new SelectCycleDiffAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectCycleDiffAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SelectCycleDiffAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SelectCycleDiffAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SelectCycleDiffAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(difficulty_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool SelectCycleDiffAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SelectCycleDiffAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 difficulty = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SelectCycleDiffAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SelectCycleDiffAck)
  return false;
#undef DO_
}

void SelectCycleDiffAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SelectCycleDiffAck)
  // optional uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->difficulty(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SelectCycleDiffAck)
}

::google::protobuf::uint8* SelectCycleDiffAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SelectCycleDiffAck)
  // optional uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->difficulty(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SelectCycleDiffAck)
  return target;
}

size_t SelectCycleDiffAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SelectCycleDiffAck)
  size_t total_size = 0;

  // optional uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectCycleDiffAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SelectCycleDiffAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SelectCycleDiffAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectCycleDiffAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SelectCycleDiffAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SelectCycleDiffAck)
    UnsafeMergeFrom(*source);
  }
}

void SelectCycleDiffAck::MergeFrom(const SelectCycleDiffAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SelectCycleDiffAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SelectCycleDiffAck::UnsafeMergeFrom(const SelectCycleDiffAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void SelectCycleDiffAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SelectCycleDiffAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectCycleDiffAck::CopyFrom(const SelectCycleDiffAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SelectCycleDiffAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SelectCycleDiffAck::IsInitialized() const {

  return true;
}

void SelectCycleDiffAck::Swap(SelectCycleDiffAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectCycleDiffAck::InternalSwap(SelectCycleDiffAck* other) {
  std::swap(difficulty_, other->difficulty_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectCycleDiffAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectCycleDiffAck_descriptor_;
  metadata.reflection = SelectCycleDiffAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectCycleDiffAck

// optional uint32 difficulty = 1;
void SelectCycleDiffAck::clear_difficulty() {
  difficulty_ = 0u;
}
::google::protobuf::uint32 SelectCycleDiffAck::difficulty() const {
  // @@protoc_insertion_point(field_get:NetMsg.SelectCycleDiffAck.difficulty)
  return difficulty_;
}
void SelectCycleDiffAck::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SelectCycleDiffAck.difficulty)
}

// optional uint32 error = 2;
void SelectCycleDiffAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 SelectCycleDiffAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.SelectCycleDiffAck.error)
  return error_;
}
void SelectCycleDiffAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SelectCycleDiffAck.error)
}

inline const SelectCycleDiffAck* SelectCycleDiffAck::internal_default_instance() {
  return &SelectCycleDiffAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CycleBattleInfoAck::kEnemyPathFieldNumber;
const int CycleBattleInfoAck::kPercentFieldNumber;
const int CycleBattleInfoAck::kBattleIdFieldNumber;
const int CycleBattleInfoAck::kEnemyTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CycleBattleInfoAck::CycleBattleInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CycleBattleInfoAck)
}

void CycleBattleInfoAck::InitAsDefaultInstance() {
}

CycleBattleInfoAck::CycleBattleInfoAck(const CycleBattleInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CycleBattleInfoAck)
}

void CycleBattleInfoAck::SharedCtor() {
  ::memset(&enemypath_, 0, reinterpret_cast<char*>(&enemyteam_) -
    reinterpret_cast<char*>(&enemypath_) + sizeof(enemyteam_));
  _cached_size_ = 0;
}

CycleBattleInfoAck::~CycleBattleInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CycleBattleInfoAck)
  SharedDtor();
}

void CycleBattleInfoAck::SharedDtor() {
}

void CycleBattleInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CycleBattleInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CycleBattleInfoAck_descriptor_;
}

const CycleBattleInfoAck& CycleBattleInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CycleBattleInfoAck> CycleBattleInfoAck_default_instance_;

CycleBattleInfoAck* CycleBattleInfoAck::New(::google::protobuf::Arena* arena) const {
  CycleBattleInfoAck* n = new CycleBattleInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CycleBattleInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CycleBattleInfoAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CycleBattleInfoAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CycleBattleInfoAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enemypath_, enemyteam_);

#undef ZR_HELPER_
#undef ZR_

}

bool CycleBattleInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CycleBattleInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemyPath = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemypath_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_percent;
        break;
      }

      // optional float percent = 2;
      case 2: {
        if (tag == 21) {
         parse_percent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battleId;
        break;
      }

      // optional uint64 battleId = 3;
      case 3: {
        if (tag == 24) {
         parse_battleId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enemyTeam;
        break;
      }

      // optional uint32 enemyTeam = 4;
      case 4: {
        if (tag == 32) {
         parse_enemyTeam:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyteam_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CycleBattleInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CycleBattleInfoAck)
  return false;
#undef DO_
}

void CycleBattleInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CycleBattleInfoAck)
  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemypath(), output);
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percent(), output);
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleid(), output);
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enemyteam(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CycleBattleInfoAck)
}

::google::protobuf::uint8* CycleBattleInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CycleBattleInfoAck)
  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemypath(), target);
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->percent(), target);
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleid(), target);
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enemyteam(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CycleBattleInfoAck)
  return target;
}

size_t CycleBattleInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CycleBattleInfoAck)
  size_t total_size = 0;

  // optional uint32 enemyPath = 1;
  if (this->enemypath() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemypath());
  }

  // optional float percent = 2;
  if (this->percent() != 0) {
    total_size += 1 + 4;
  }

  // optional uint64 battleId = 3;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 enemyTeam = 4;
  if (this->enemyteam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enemyteam());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CycleBattleInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CycleBattleInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CycleBattleInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CycleBattleInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CycleBattleInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CycleBattleInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void CycleBattleInfoAck::MergeFrom(const CycleBattleInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CycleBattleInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CycleBattleInfoAck::UnsafeMergeFrom(const CycleBattleInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enemypath() != 0) {
    set_enemypath(from.enemypath());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.enemyteam() != 0) {
    set_enemyteam(from.enemyteam());
  }
}

void CycleBattleInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CycleBattleInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CycleBattleInfoAck::CopyFrom(const CycleBattleInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CycleBattleInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CycleBattleInfoAck::IsInitialized() const {

  return true;
}

void CycleBattleInfoAck::Swap(CycleBattleInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CycleBattleInfoAck::InternalSwap(CycleBattleInfoAck* other) {
  std::swap(enemypath_, other->enemypath_);
  std::swap(percent_, other->percent_);
  std::swap(battleid_, other->battleid_);
  std::swap(enemyteam_, other->enemyteam_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CycleBattleInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CycleBattleInfoAck_descriptor_;
  metadata.reflection = CycleBattleInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CycleBattleInfoAck

// optional uint32 enemyPath = 1;
void CycleBattleInfoAck::clear_enemypath() {
  enemypath_ = 0u;
}
::google::protobuf::uint32 CycleBattleInfoAck::enemypath() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleInfoAck.enemyPath)
  return enemypath_;
}
void CycleBattleInfoAck::set_enemypath(::google::protobuf::uint32 value) {
  
  enemypath_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleInfoAck.enemyPath)
}

// optional float percent = 2;
void CycleBattleInfoAck::clear_percent() {
  percent_ = 0;
}
float CycleBattleInfoAck::percent() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleInfoAck.percent)
  return percent_;
}
void CycleBattleInfoAck::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleInfoAck.percent)
}

// optional uint64 battleId = 3;
void CycleBattleInfoAck::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CycleBattleInfoAck::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleInfoAck.battleId)
  return battleid_;
}
void CycleBattleInfoAck::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleInfoAck.battleId)
}

// optional uint32 enemyTeam = 4;
void CycleBattleInfoAck::clear_enemyteam() {
  enemyteam_ = 0u;
}
::google::protobuf::uint32 CycleBattleInfoAck::enemyteam() const {
  // @@protoc_insertion_point(field_get:NetMsg.CycleBattleInfoAck.enemyTeam)
  return enemyteam_;
}
void CycleBattleInfoAck::set_enemyteam(::google::protobuf::uint32 value) {
  
  enemyteam_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CycleBattleInfoAck.enemyTeam)
}

inline const CycleBattleInfoAck* CycleBattleInfoAck::internal_default_instance() {
  return &CycleBattleInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvantureEventStatusChange::kAdvEventIdFieldNumber;
const int AdvantureEventStatusChange::kAdvEventStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvantureEventStatusChange::AdvantureEventStatusChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AdvantureEventStatusChange)
}

void AdvantureEventStatusChange::InitAsDefaultInstance() {
}

AdvantureEventStatusChange::AdvantureEventStatusChange(const AdvantureEventStatusChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AdvantureEventStatusChange)
}

void AdvantureEventStatusChange::SharedCtor() {
  ::memset(&adveventid_, 0, reinterpret_cast<char*>(&adveventstatus_) -
    reinterpret_cast<char*>(&adveventid_) + sizeof(adveventstatus_));
  _cached_size_ = 0;
}

AdvantureEventStatusChange::~AdvantureEventStatusChange() {
  // @@protoc_insertion_point(destructor:NetMsg.AdvantureEventStatusChange)
  SharedDtor();
}

void AdvantureEventStatusChange::SharedDtor() {
}

void AdvantureEventStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvantureEventStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantureEventStatusChange_descriptor_;
}

const AdvantureEventStatusChange& AdvantureEventStatusChange::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdvantureEventStatusChange> AdvantureEventStatusChange_default_instance_;

AdvantureEventStatusChange* AdvantureEventStatusChange::New(::google::protobuf::Arena* arena) const {
  AdvantureEventStatusChange* n = new AdvantureEventStatusChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvantureEventStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AdvantureEventStatusChange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvantureEventStatusChange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvantureEventStatusChange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(adveventid_, adveventstatus_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdvantureEventStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AdvantureEventStatusChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 advEventId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adveventid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_advEventStatus;
        break;
      }

      // optional .NetMsg.AdvantureEventStatus advEventStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_advEventStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_adveventstatus(static_cast< ::NetMsg::AdvantureEventStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AdvantureEventStatusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AdvantureEventStatusChange)
  return false;
#undef DO_
}

void AdvantureEventStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AdvantureEventStatusChange)
  // optional uint32 advEventId = 1;
  if (this->adveventid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adveventid(), output);
  }

  // optional .NetMsg.AdvantureEventStatus advEventStatus = 2;
  if (this->adveventstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->adveventstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AdvantureEventStatusChange)
}

::google::protobuf::uint8* AdvantureEventStatusChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AdvantureEventStatusChange)
  // optional uint32 advEventId = 1;
  if (this->adveventid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adveventid(), target);
  }

  // optional .NetMsg.AdvantureEventStatus advEventStatus = 2;
  if (this->adveventstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->adveventstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AdvantureEventStatusChange)
  return target;
}

size_t AdvantureEventStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AdvantureEventStatusChange)
  size_t total_size = 0;

  // optional uint32 advEventId = 1;
  if (this->adveventid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adveventid());
  }

  // optional .NetMsg.AdvantureEventStatus advEventStatus = 2;
  if (this->adveventstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->adveventstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvantureEventStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AdvantureEventStatusChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdvantureEventStatusChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvantureEventStatusChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AdvantureEventStatusChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AdvantureEventStatusChange)
    UnsafeMergeFrom(*source);
  }
}

void AdvantureEventStatusChange::MergeFrom(const AdvantureEventStatusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AdvantureEventStatusChange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdvantureEventStatusChange::UnsafeMergeFrom(const AdvantureEventStatusChange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.adveventid() != 0) {
    set_adveventid(from.adveventid());
  }
  if (from.adveventstatus() != 0) {
    set_adveventstatus(from.adveventstatus());
  }
}

void AdvantureEventStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AdvantureEventStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantureEventStatusChange::CopyFrom(const AdvantureEventStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AdvantureEventStatusChange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdvantureEventStatusChange::IsInitialized() const {

  return true;
}

void AdvantureEventStatusChange::Swap(AdvantureEventStatusChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvantureEventStatusChange::InternalSwap(AdvantureEventStatusChange* other) {
  std::swap(adveventid_, other->adveventid_);
  std::swap(adveventstatus_, other->adveventstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvantureEventStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvantureEventStatusChange_descriptor_;
  metadata.reflection = AdvantureEventStatusChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvantureEventStatusChange

// optional uint32 advEventId = 1;
void AdvantureEventStatusChange::clear_adveventid() {
  adveventid_ = 0u;
}
::google::protobuf::uint32 AdvantureEventStatusChange::adveventid() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEventStatusChange.advEventId)
  return adveventid_;
}
void AdvantureEventStatusChange::set_adveventid(::google::protobuf::uint32 value) {
  
  adveventid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEventStatusChange.advEventId)
}

// optional .NetMsg.AdvantureEventStatus advEventStatus = 2;
void AdvantureEventStatusChange::clear_adveventstatus() {
  adveventstatus_ = 0;
}
::NetMsg::AdvantureEventStatus AdvantureEventStatusChange::adveventstatus() const {
  // @@protoc_insertion_point(field_get:NetMsg.AdvantureEventStatusChange.advEventStatus)
  return static_cast< ::NetMsg::AdvantureEventStatus >(adveventstatus_);
}
void AdvantureEventStatusChange::set_adveventstatus(::NetMsg::AdvantureEventStatus value) {
  
  adveventstatus_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.AdvantureEventStatusChange.advEventStatus)
}

inline const AdvantureEventStatusChange* AdvantureEventStatusChange::internal_default_instance() {
  return &AdvantureEventStatusChange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRecruitHero::kRecruitIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRecruitHero::ReqRecruitHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRecruitHero)
}

void ReqRecruitHero::InitAsDefaultInstance() {
}

ReqRecruitHero::ReqRecruitHero(const ReqRecruitHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRecruitHero)
}

void ReqRecruitHero::SharedCtor() {
  recruitid_ = 0u;
  _cached_size_ = 0;
}

ReqRecruitHero::~ReqRecruitHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRecruitHero)
  SharedDtor();
}

void ReqRecruitHero::SharedDtor() {
}

void ReqRecruitHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRecruitHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRecruitHero_descriptor_;
}

const ReqRecruitHero& ReqRecruitHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRecruitHero> ReqRecruitHero_default_instance_;

ReqRecruitHero* ReqRecruitHero::New(::google::protobuf::Arena* arena) const {
  ReqRecruitHero* n = new ReqRecruitHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRecruitHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRecruitHero)
  recruitid_ = 0u;
}

bool ReqRecruitHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRecruitHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recruitId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruitid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRecruitHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRecruitHero)
  return false;
#undef DO_
}

void ReqRecruitHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRecruitHero)
  // optional uint32 recruitId = 1;
  if (this->recruitid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recruitid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRecruitHero)
}

::google::protobuf::uint8* ReqRecruitHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRecruitHero)
  // optional uint32 recruitId = 1;
  if (this->recruitid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recruitid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRecruitHero)
  return target;
}

size_t ReqRecruitHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRecruitHero)
  size_t total_size = 0;

  // optional uint32 recruitId = 1;
  if (this->recruitid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recruitid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRecruitHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRecruitHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRecruitHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRecruitHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRecruitHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRecruitHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqRecruitHero::MergeFrom(const ReqRecruitHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRecruitHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRecruitHero::UnsafeMergeFrom(const ReqRecruitHero& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recruitid() != 0) {
    set_recruitid(from.recruitid());
  }
}

void ReqRecruitHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRecruitHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecruitHero::CopyFrom(const ReqRecruitHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRecruitHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRecruitHero::IsInitialized() const {

  return true;
}

void ReqRecruitHero::Swap(ReqRecruitHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRecruitHero::InternalSwap(ReqRecruitHero* other) {
  std::swap(recruitid_, other->recruitid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRecruitHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRecruitHero_descriptor_;
  metadata.reflection = ReqRecruitHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRecruitHero

// optional uint32 recruitId = 1;
void ReqRecruitHero::clear_recruitid() {
  recruitid_ = 0u;
}
::google::protobuf::uint32 ReqRecruitHero::recruitid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRecruitHero.recruitId)
  return recruitid_;
}
void ReqRecruitHero::set_recruitid(::google::protobuf::uint32 value) {
  
  recruitid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqRecruitHero.recruitId)
}

inline const ReqRecruitHero* ReqRecruitHero::internal_default_instance() {
  return &ReqRecruitHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecruitHeroAck::kRecruitIdFieldNumber;
const int RecruitHeroAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecruitHeroAck::RecruitHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RecruitHeroAck)
}

void RecruitHeroAck::InitAsDefaultInstance() {
}

RecruitHeroAck::RecruitHeroAck(const RecruitHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RecruitHeroAck)
}

void RecruitHeroAck::SharedCtor() {
  ::memset(&recruitid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&recruitid_) + sizeof(error_));
  _cached_size_ = 0;
}

RecruitHeroAck::~RecruitHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RecruitHeroAck)
  SharedDtor();
}

void RecruitHeroAck::SharedDtor() {
}

void RecruitHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecruitHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecruitHeroAck_descriptor_;
}

const RecruitHeroAck& RecruitHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RecruitHeroAck> RecruitHeroAck_default_instance_;

RecruitHeroAck* RecruitHeroAck::New(::google::protobuf::Arena* arena) const {
  RecruitHeroAck* n = new RecruitHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecruitHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RecruitHeroAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecruitHeroAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecruitHeroAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recruitid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool RecruitHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RecruitHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recruitId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruitid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RecruitHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RecruitHeroAck)
  return false;
#undef DO_
}

void RecruitHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RecruitHeroAck)
  // optional uint32 recruitId = 1;
  if (this->recruitid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recruitid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RecruitHeroAck)
}

::google::protobuf::uint8* RecruitHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RecruitHeroAck)
  // optional uint32 recruitId = 1;
  if (this->recruitid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recruitid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RecruitHeroAck)
  return target;
}

size_t RecruitHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RecruitHeroAck)
  size_t total_size = 0;

  // optional uint32 recruitId = 1;
  if (this->recruitid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recruitid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecruitHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RecruitHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecruitHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecruitHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RecruitHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RecruitHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void RecruitHeroAck::MergeFrom(const RecruitHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RecruitHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RecruitHeroAck::UnsafeMergeFrom(const RecruitHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recruitid() != 0) {
    set_recruitid(from.recruitid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void RecruitHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RecruitHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecruitHeroAck::CopyFrom(const RecruitHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RecruitHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RecruitHeroAck::IsInitialized() const {

  return true;
}

void RecruitHeroAck::Swap(RecruitHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecruitHeroAck::InternalSwap(RecruitHeroAck* other) {
  std::swap(recruitid_, other->recruitid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecruitHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecruitHeroAck_descriptor_;
  metadata.reflection = RecruitHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecruitHeroAck

// optional uint32 recruitId = 1;
void RecruitHeroAck::clear_recruitid() {
  recruitid_ = 0u;
}
::google::protobuf::uint32 RecruitHeroAck::recruitid() const {
  // @@protoc_insertion_point(field_get:NetMsg.RecruitHeroAck.recruitId)
  return recruitid_;
}
void RecruitHeroAck::set_recruitid(::google::protobuf::uint32 value) {
  
  recruitid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RecruitHeroAck.recruitId)
}

// optional uint32 error = 2;
void RecruitHeroAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 RecruitHeroAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.RecruitHeroAck.error)
  return error_;
}
void RecruitHeroAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RecruitHeroAck.error)
}

inline const RecruitHeroAck* RecruitHeroAck::internal_default_instance() {
  return &RecruitHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRecruitedHero::kRecruitIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRecruitedHero::ReqRecruitedHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRecruitedHero)
}

void ReqRecruitedHero::InitAsDefaultInstance() {
}

ReqRecruitedHero::ReqRecruitedHero(const ReqRecruitedHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRecruitedHero)
}

void ReqRecruitedHero::SharedCtor() {
  _cached_size_ = 0;
}

ReqRecruitedHero::~ReqRecruitedHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRecruitedHero)
  SharedDtor();
}

void ReqRecruitedHero::SharedDtor() {
}

void ReqRecruitedHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRecruitedHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRecruitedHero_descriptor_;
}

const ReqRecruitedHero& ReqRecruitedHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRecruitedHero> ReqRecruitedHero_default_instance_;

ReqRecruitedHero* ReqRecruitedHero::New(::google::protobuf::Arena* arena) const {
  ReqRecruitedHero* n = new ReqRecruitedHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRecruitedHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRecruitedHero)
  recruitids_.Clear();
}

bool ReqRecruitedHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRecruitedHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 recruitIds = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recruitids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_recruitids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRecruitedHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRecruitedHero)
  return false;
#undef DO_
}

void ReqRecruitedHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRecruitedHero)
  // repeated uint32 recruitIds = 1;
  if (this->recruitids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_recruitids_cached_byte_size_);
  }
  for (int i = 0; i < this->recruitids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->recruitids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRecruitedHero)
}

::google::protobuf::uint8* ReqRecruitedHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRecruitedHero)
  // repeated uint32 recruitIds = 1;
  if (this->recruitids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _recruitids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->recruitids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->recruitids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRecruitedHero)
  return target;
}

size_t ReqRecruitedHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRecruitedHero)
  size_t total_size = 0;

  // repeated uint32 recruitIds = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->recruitids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recruitids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _recruitids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRecruitedHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRecruitedHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRecruitedHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRecruitedHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRecruitedHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRecruitedHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqRecruitedHero::MergeFrom(const ReqRecruitedHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRecruitedHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRecruitedHero::UnsafeMergeFrom(const ReqRecruitedHero& from) {
  GOOGLE_DCHECK(&from != this);
  recruitids_.UnsafeMergeFrom(from.recruitids_);
}

void ReqRecruitedHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRecruitedHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecruitedHero::CopyFrom(const ReqRecruitedHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRecruitedHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRecruitedHero::IsInitialized() const {

  return true;
}

void ReqRecruitedHero::Swap(ReqRecruitedHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRecruitedHero::InternalSwap(ReqRecruitedHero* other) {
  recruitids_.UnsafeArenaSwap(&other->recruitids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRecruitedHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRecruitedHero_descriptor_;
  metadata.reflection = ReqRecruitedHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRecruitedHero

// repeated uint32 recruitIds = 1;
int ReqRecruitedHero::recruitids_size() const {
  return recruitids_.size();
}
void ReqRecruitedHero::clear_recruitids() {
  recruitids_.Clear();
}
::google::protobuf::uint32 ReqRecruitedHero::recruitids(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRecruitedHero.recruitIds)
  return recruitids_.Get(index);
}
void ReqRecruitedHero::set_recruitids(int index, ::google::protobuf::uint32 value) {
  recruitids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqRecruitedHero.recruitIds)
}
void ReqRecruitedHero::add_recruitids(::google::protobuf::uint32 value) {
  recruitids_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.ReqRecruitedHero.recruitIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReqRecruitedHero::recruitids() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqRecruitedHero.recruitIds)
  return recruitids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReqRecruitedHero::mutable_recruitids() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqRecruitedHero.recruitIds)
  return &recruitids_;
}

inline const ReqRecruitedHero* ReqRecruitedHero::internal_default_instance() {
  return &ReqRecruitedHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecruitedHeroAck::kRecruitIdFieldNumber;
const int RecruitedHeroAck::kRecruitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecruitedHeroAck::RecruitedHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RecruitedHeroAck)
}

void RecruitedHeroAck::InitAsDefaultInstance() {
}

RecruitedHeroAck::RecruitedHeroAck(const RecruitedHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RecruitedHeroAck)
}

void RecruitedHeroAck::SharedCtor() {
  _cached_size_ = 0;
}

RecruitedHeroAck::~RecruitedHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RecruitedHeroAck)
  SharedDtor();
}

void RecruitedHeroAck::SharedDtor() {
}

void RecruitedHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecruitedHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecruitedHeroAck_descriptor_;
}

const RecruitedHeroAck& RecruitedHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RecruitedHeroAck> RecruitedHeroAck_default_instance_;

RecruitedHeroAck* RecruitedHeroAck::New(::google::protobuf::Arena* arena) const {
  RecruitedHeroAck* n = new RecruitedHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecruitedHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RecruitedHeroAck)
  recruitid_.Clear();
  recruited_.Clear();
}

bool RecruitedHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RecruitedHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 recruitId = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recruitid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_recruitid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recruited;
        break;
      }

      // repeated bool recruited = 2;
      case 2: {
        if (tag == 18) {
         parse_recruited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_recruited())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18, input, this->mutable_recruited())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RecruitedHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RecruitedHeroAck)
  return false;
#undef DO_
}

void RecruitedHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RecruitedHeroAck)
  // repeated uint32 recruitId = 1;
  if (this->recruitid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_recruitid_cached_byte_size_);
  }
  for (int i = 0; i < this->recruitid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->recruitid(i), output);
  }

  // repeated bool recruited = 2;
  if (this->recruited_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_recruited_cached_byte_size_);
  }
  for (int i = 0; i < this->recruited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->recruited(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RecruitedHeroAck)
}

::google::protobuf::uint8* RecruitedHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RecruitedHeroAck)
  // repeated uint32 recruitId = 1;
  if (this->recruitid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _recruitid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->recruitid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->recruitid(i), target);
  }

  // repeated bool recruited = 2;
  if (this->recruited_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _recruited_cached_byte_size_, target);
  }
  for (int i = 0; i < this->recruited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->recruited(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RecruitedHeroAck)
  return target;
}

size_t RecruitedHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RecruitedHeroAck)
  size_t total_size = 0;

  // repeated uint32 recruitId = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->recruitid_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recruitid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _recruitid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool recruited = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->recruited_size();
    data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _recruited_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecruitedHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RecruitedHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecruitedHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecruitedHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RecruitedHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RecruitedHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void RecruitedHeroAck::MergeFrom(const RecruitedHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RecruitedHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RecruitedHeroAck::UnsafeMergeFrom(const RecruitedHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  recruitid_.UnsafeMergeFrom(from.recruitid_);
  recruited_.UnsafeMergeFrom(from.recruited_);
}

void RecruitedHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RecruitedHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecruitedHeroAck::CopyFrom(const RecruitedHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RecruitedHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RecruitedHeroAck::IsInitialized() const {

  return true;
}

void RecruitedHeroAck::Swap(RecruitedHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecruitedHeroAck::InternalSwap(RecruitedHeroAck* other) {
  recruitid_.UnsafeArenaSwap(&other->recruitid_);
  recruited_.UnsafeArenaSwap(&other->recruited_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecruitedHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecruitedHeroAck_descriptor_;
  metadata.reflection = RecruitedHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecruitedHeroAck

// repeated uint32 recruitId = 1;
int RecruitedHeroAck::recruitid_size() const {
  return recruitid_.size();
}
void RecruitedHeroAck::clear_recruitid() {
  recruitid_.Clear();
}
::google::protobuf::uint32 RecruitedHeroAck::recruitid(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.RecruitedHeroAck.recruitId)
  return recruitid_.Get(index);
}
void RecruitedHeroAck::set_recruitid(int index, ::google::protobuf::uint32 value) {
  recruitid_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.RecruitedHeroAck.recruitId)
}
void RecruitedHeroAck::add_recruitid(::google::protobuf::uint32 value) {
  recruitid_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.RecruitedHeroAck.recruitId)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RecruitedHeroAck::recruitid() const {
  // @@protoc_insertion_point(field_list:NetMsg.RecruitedHeroAck.recruitId)
  return recruitid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RecruitedHeroAck::mutable_recruitid() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.RecruitedHeroAck.recruitId)
  return &recruitid_;
}

// repeated bool recruited = 2;
int RecruitedHeroAck::recruited_size() const {
  return recruited_.size();
}
void RecruitedHeroAck::clear_recruited() {
  recruited_.Clear();
}
bool RecruitedHeroAck::recruited(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.RecruitedHeroAck.recruited)
  return recruited_.Get(index);
}
void RecruitedHeroAck::set_recruited(int index, bool value) {
  recruited_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.RecruitedHeroAck.recruited)
}
void RecruitedHeroAck::add_recruited(bool value) {
  recruited_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.RecruitedHeroAck.recruited)
}
const ::google::protobuf::RepeatedField< bool >&
RecruitedHeroAck::recruited() const {
  // @@protoc_insertion_point(field_list:NetMsg.RecruitedHeroAck.recruited)
  return recruited_;
}
::google::protobuf::RepeatedField< bool >*
RecruitedHeroAck::mutable_recruited() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.RecruitedHeroAck.recruited)
  return &recruited_;
}

inline const RecruitedHeroAck* RecruitedHeroAck::internal_default_instance() {
  return &RecruitedHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqVSBattleBegin::kTypeFieldNumber;
const int ReqVSBattleBegin::kIdFieldNumber;
const int ReqVSBattleBegin::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqVSBattleBegin::ReqVSBattleBegin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqVSBattleBegin)
}

void ReqVSBattleBegin::InitAsDefaultInstance() {
}

ReqVSBattleBegin::ReqVSBattleBegin(const ReqVSBattleBegin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqVSBattleBegin)
}

void ReqVSBattleBegin::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&heroid_) -
    reinterpret_cast<char*>(&type_) + sizeof(heroid_));
  _cached_size_ = 0;
}

ReqVSBattleBegin::~ReqVSBattleBegin() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqVSBattleBegin)
  SharedDtor();
}

void ReqVSBattleBegin::SharedDtor() {
}

void ReqVSBattleBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqVSBattleBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqVSBattleBegin_descriptor_;
}

const ReqVSBattleBegin& ReqVSBattleBegin::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqVSBattleBegin> ReqVSBattleBegin_default_instance_;

ReqVSBattleBegin* ReqVSBattleBegin::New(::google::protobuf::Arena* arena) const {
  ReqVSBattleBegin* n = new ReqVSBattleBegin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqVSBattleBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqVSBattleBegin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqVSBattleBegin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqVSBattleBegin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, heroid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqVSBattleBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqVSBattleBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heroId;
        break;
      }

      // optional uint64 heroId = 3;
      case 3: {
        if (tag == 24) {
         parse_heroId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqVSBattleBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqVSBattleBegin)
  return false;
#undef DO_
}

void ReqVSBattleBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqVSBattleBegin)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint64 heroId = 3;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->heroid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqVSBattleBegin)
}

::google::protobuf::uint8* ReqVSBattleBegin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqVSBattleBegin)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint64 heroId = 3;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->heroid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqVSBattleBegin)
  return target;
}

size_t ReqVSBattleBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqVSBattleBegin)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint64 heroId = 3;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqVSBattleBegin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqVSBattleBegin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqVSBattleBegin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqVSBattleBegin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqVSBattleBegin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqVSBattleBegin)
    UnsafeMergeFrom(*source);
  }
}

void ReqVSBattleBegin::MergeFrom(const ReqVSBattleBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqVSBattleBegin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqVSBattleBegin::UnsafeMergeFrom(const ReqVSBattleBegin& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void ReqVSBattleBegin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqVSBattleBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVSBattleBegin::CopyFrom(const ReqVSBattleBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqVSBattleBegin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqVSBattleBegin::IsInitialized() const {

  return true;
}

void ReqVSBattleBegin::Swap(ReqVSBattleBegin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqVSBattleBegin::InternalSwap(ReqVSBattleBegin* other) {
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqVSBattleBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqVSBattleBegin_descriptor_;
  metadata.reflection = ReqVSBattleBegin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqVSBattleBegin

// optional uint32 type = 1;
void ReqVSBattleBegin::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 ReqVSBattleBegin::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqVSBattleBegin.type)
  return type_;
}
void ReqVSBattleBegin::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqVSBattleBegin.type)
}

// optional uint32 id = 2;
void ReqVSBattleBegin::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqVSBattleBegin::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqVSBattleBegin.id)
  return id_;
}
void ReqVSBattleBegin::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqVSBattleBegin.id)
}

// optional uint64 heroId = 3;
void ReqVSBattleBegin::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqVSBattleBegin::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqVSBattleBegin.heroId)
  return heroid_;
}
void ReqVSBattleBegin::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqVSBattleBegin.heroId)
}

inline const ReqVSBattleBegin* ReqVSBattleBegin::internal_default_instance() {
  return &ReqVSBattleBegin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VSBattleEnemy::kIdFieldNumber;
const int VSBattleEnemy::kStarFieldNumber;
const int VSBattleEnemy::kNuqiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VSBattleEnemy::VSBattleEnemy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VSBattleEnemy)
}

void VSBattleEnemy::InitAsDefaultInstance() {
}

VSBattleEnemy::VSBattleEnemy(const VSBattleEnemy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VSBattleEnemy)
}

void VSBattleEnemy::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&nuqi_) -
    reinterpret_cast<char*>(&id_) + sizeof(nuqi_));
  _cached_size_ = 0;
}

VSBattleEnemy::~VSBattleEnemy() {
  // @@protoc_insertion_point(destructor:NetMsg.VSBattleEnemy)
  SharedDtor();
}

void VSBattleEnemy::SharedDtor() {
}

void VSBattleEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSBattleEnemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSBattleEnemy_descriptor_;
}

const VSBattleEnemy& VSBattleEnemy::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VSBattleEnemy> VSBattleEnemy_default_instance_;

VSBattleEnemy* VSBattleEnemy::New(::google::protobuf::Arena* arena) const {
  VSBattleEnemy* n = new VSBattleEnemy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VSBattleEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VSBattleEnemy)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VSBattleEnemy, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VSBattleEnemy*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, nuqi_);

#undef ZR_HELPER_
#undef ZR_

}

bool VSBattleEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VSBattleEnemy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nuqi;
        break;
      }

      // optional uint32 nuqi = 3;
      case 3: {
        if (tag == 24) {
         parse_nuqi:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nuqi_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VSBattleEnemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VSBattleEnemy)
  return false;
#undef DO_
}

void VSBattleEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VSBattleEnemy)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // optional uint32 nuqi = 3;
  if (this->nuqi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nuqi(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VSBattleEnemy)
}

::google::protobuf::uint8* VSBattleEnemy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VSBattleEnemy)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // optional uint32 nuqi = 3;
  if (this->nuqi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nuqi(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VSBattleEnemy)
  return target;
}

size_t VSBattleEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VSBattleEnemy)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->star());
  }

  // optional uint32 nuqi = 3;
  if (this->nuqi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nuqi());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSBattleEnemy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VSBattleEnemy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VSBattleEnemy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VSBattleEnemy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VSBattleEnemy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VSBattleEnemy)
    UnsafeMergeFrom(*source);
  }
}

void VSBattleEnemy::MergeFrom(const VSBattleEnemy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VSBattleEnemy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VSBattleEnemy::UnsafeMergeFrom(const VSBattleEnemy& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.star() != 0) {
    set_star(from.star());
  }
  if (from.nuqi() != 0) {
    set_nuqi(from.nuqi());
  }
}

void VSBattleEnemy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VSBattleEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSBattleEnemy::CopyFrom(const VSBattleEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VSBattleEnemy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VSBattleEnemy::IsInitialized() const {

  return true;
}

void VSBattleEnemy::Swap(VSBattleEnemy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VSBattleEnemy::InternalSwap(VSBattleEnemy* other) {
  std::swap(id_, other->id_);
  std::swap(star_, other->star_);
  std::swap(nuqi_, other->nuqi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VSBattleEnemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSBattleEnemy_descriptor_;
  metadata.reflection = VSBattleEnemy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VSBattleEnemy

// optional uint32 id = 1;
void VSBattleEnemy::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 VSBattleEnemy::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleEnemy.id)
  return id_;
}
void VSBattleEnemy::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleEnemy.id)
}

// optional uint32 star = 2;
void VSBattleEnemy::clear_star() {
  star_ = 0u;
}
::google::protobuf::uint32 VSBattleEnemy::star() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleEnemy.star)
  return star_;
}
void VSBattleEnemy::set_star(::google::protobuf::uint32 value) {
  
  star_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleEnemy.star)
}

// optional uint32 nuqi = 3;
void VSBattleEnemy::clear_nuqi() {
  nuqi_ = 0u;
}
::google::protobuf::uint32 VSBattleEnemy::nuqi() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleEnemy.nuqi)
  return nuqi_;
}
void VSBattleEnemy::set_nuqi(::google::protobuf::uint32 value) {
  
  nuqi_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleEnemy.nuqi)
}

inline const VSBattleEnemy* VSBattleEnemy::internal_default_instance() {
  return &VSBattleEnemy_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VSBattleBeginAck::kBattleIdFieldNumber;
const int VSBattleBeginAck::kTypeFieldNumber;
const int VSBattleBeginAck::kIdFieldNumber;
const int VSBattleBeginAck::kEnemysFieldNumber;
const int VSBattleBeginAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VSBattleBeginAck::VSBattleBeginAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VSBattleBeginAck)
}

void VSBattleBeginAck::InitAsDefaultInstance() {
}

VSBattleBeginAck::VSBattleBeginAck(const VSBattleBeginAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VSBattleBeginAck)
}

void VSBattleBeginAck::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(error_));
  _cached_size_ = 0;
}

VSBattleBeginAck::~VSBattleBeginAck() {
  // @@protoc_insertion_point(destructor:NetMsg.VSBattleBeginAck)
  SharedDtor();
}

void VSBattleBeginAck::SharedDtor() {
}

void VSBattleBeginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSBattleBeginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSBattleBeginAck_descriptor_;
}

const VSBattleBeginAck& VSBattleBeginAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VSBattleBeginAck> VSBattleBeginAck_default_instance_;

VSBattleBeginAck* VSBattleBeginAck::New(::google::protobuf::Arena* arena) const {
  VSBattleBeginAck* n = new VSBattleBeginAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VSBattleBeginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VSBattleBeginAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VSBattleBeginAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VSBattleBeginAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, error_);

#undef ZR_HELPER_
#undef ZR_

  enemys_.Clear();
}

bool VSBattleBeginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VSBattleBeginAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_enemys;
        break;
      }

      // repeated .NetMsg.VSBattleEnemy enemys = 4;
      case 4: {
        if (tag == 34) {
         parse_enemys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_enemys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_enemys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_error;
        break;
      }

      // optional uint32 error = 5;
      case 5: {
        if (tag == 40) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VSBattleBeginAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VSBattleBeginAck)
  return false;
#undef DO_
}

void VSBattleBeginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VSBattleBeginAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // repeated .NetMsg.VSBattleEnemy enemys = 4;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enemys(i), output);
  }

  // optional uint32 error = 5;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VSBattleBeginAck)
}

::google::protobuf::uint8* VSBattleBeginAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VSBattleBeginAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // repeated .NetMsg.VSBattleEnemy enemys = 4;
  for (unsigned int i = 0, n = this->enemys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->enemys(i), false, target);
  }

  // optional uint32 error = 5;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VSBattleBeginAck)
  return target;
}

size_t VSBattleBeginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VSBattleBeginAck)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 error = 5;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.VSBattleEnemy enemys = 4;
  {
    unsigned int count = this->enemys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSBattleBeginAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VSBattleBeginAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VSBattleBeginAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VSBattleBeginAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VSBattleBeginAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VSBattleBeginAck)
    UnsafeMergeFrom(*source);
  }
}

void VSBattleBeginAck::MergeFrom(const VSBattleBeginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VSBattleBeginAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VSBattleBeginAck::UnsafeMergeFrom(const VSBattleBeginAck& from) {
  GOOGLE_DCHECK(&from != this);
  enemys_.MergeFrom(from.enemys_);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void VSBattleBeginAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VSBattleBeginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSBattleBeginAck::CopyFrom(const VSBattleBeginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VSBattleBeginAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VSBattleBeginAck::IsInitialized() const {

  return true;
}

void VSBattleBeginAck::Swap(VSBattleBeginAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VSBattleBeginAck::InternalSwap(VSBattleBeginAck* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  enemys_.UnsafeArenaSwap(&other->enemys_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VSBattleBeginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSBattleBeginAck_descriptor_;
  metadata.reflection = VSBattleBeginAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VSBattleBeginAck

// optional uint64 battleId = 1;
void VSBattleBeginAck::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VSBattleBeginAck::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleBeginAck.battleId)
  return battleid_;
}
void VSBattleBeginAck::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleBeginAck.battleId)
}

// optional uint32 type = 2;
void VSBattleBeginAck::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 VSBattleBeginAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleBeginAck.type)
  return type_;
}
void VSBattleBeginAck::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleBeginAck.type)
}

// optional uint32 id = 3;
void VSBattleBeginAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 VSBattleBeginAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleBeginAck.id)
  return id_;
}
void VSBattleBeginAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleBeginAck.id)
}

// repeated .NetMsg.VSBattleEnemy enemys = 4;
int VSBattleBeginAck::enemys_size() const {
  return enemys_.size();
}
void VSBattleBeginAck::clear_enemys() {
  enemys_.Clear();
}
const ::NetMsg::VSBattleEnemy& VSBattleBeginAck::enemys(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleBeginAck.enemys)
  return enemys_.Get(index);
}
::NetMsg::VSBattleEnemy* VSBattleBeginAck::mutable_enemys(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.VSBattleBeginAck.enemys)
  return enemys_.Mutable(index);
}
::NetMsg::VSBattleEnemy* VSBattleBeginAck::add_enemys() {
  // @@protoc_insertion_point(field_add:NetMsg.VSBattleBeginAck.enemys)
  return enemys_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::VSBattleEnemy >*
VSBattleBeginAck::mutable_enemys() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.VSBattleBeginAck.enemys)
  return &enemys_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::VSBattleEnemy >&
VSBattleBeginAck::enemys() const {
  // @@protoc_insertion_point(field_list:NetMsg.VSBattleBeginAck.enemys)
  return enemys_;
}

// optional uint32 error = 5;
void VSBattleBeginAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 VSBattleBeginAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleBeginAck.error)
  return error_;
}
void VSBattleBeginAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleBeginAck.error)
}

inline const VSBattleBeginAck* VSBattleBeginAck::internal_default_instance() {
  return &VSBattleBeginAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqVSBattleReady::kBattleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqVSBattleReady::ReqVSBattleReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqVSBattleReady)
}

void ReqVSBattleReady::InitAsDefaultInstance() {
}

ReqVSBattleReady::ReqVSBattleReady(const ReqVSBattleReady& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqVSBattleReady)
}

void ReqVSBattleReady::SharedCtor() {
  battleid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqVSBattleReady::~ReqVSBattleReady() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqVSBattleReady)
  SharedDtor();
}

void ReqVSBattleReady::SharedDtor() {
}

void ReqVSBattleReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqVSBattleReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqVSBattleReady_descriptor_;
}

const ReqVSBattleReady& ReqVSBattleReady::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqVSBattleReady> ReqVSBattleReady_default_instance_;

ReqVSBattleReady* ReqVSBattleReady::New(::google::protobuf::Arena* arena) const {
  ReqVSBattleReady* n = new ReqVSBattleReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqVSBattleReady::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqVSBattleReady)
  battleid_ = GOOGLE_ULONGLONG(0);
}

bool ReqVSBattleReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqVSBattleReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqVSBattleReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqVSBattleReady)
  return false;
#undef DO_
}

void ReqVSBattleReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqVSBattleReady)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqVSBattleReady)
}

::google::protobuf::uint8* ReqVSBattleReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqVSBattleReady)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqVSBattleReady)
  return target;
}

size_t ReqVSBattleReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqVSBattleReady)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqVSBattleReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqVSBattleReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqVSBattleReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqVSBattleReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqVSBattleReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqVSBattleReady)
    UnsafeMergeFrom(*source);
  }
}

void ReqVSBattleReady::MergeFrom(const ReqVSBattleReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqVSBattleReady)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqVSBattleReady::UnsafeMergeFrom(const ReqVSBattleReady& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
}

void ReqVSBattleReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqVSBattleReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVSBattleReady::CopyFrom(const ReqVSBattleReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqVSBattleReady)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqVSBattleReady::IsInitialized() const {

  return true;
}

void ReqVSBattleReady::Swap(ReqVSBattleReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqVSBattleReady::InternalSwap(ReqVSBattleReady* other) {
  std::swap(battleid_, other->battleid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqVSBattleReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqVSBattleReady_descriptor_;
  metadata.reflection = ReqVSBattleReady_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqVSBattleReady

// optional uint64 battleId = 1;
void ReqVSBattleReady::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqVSBattleReady::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqVSBattleReady.battleId)
  return battleid_;
}
void ReqVSBattleReady::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqVSBattleReady.battleId)
}

inline const ReqVSBattleReady* ReqVSBattleReady::internal_default_instance() {
  return &ReqVSBattleReady_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VSBattleReadyAck::kBattleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VSBattleReadyAck::VSBattleReadyAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VSBattleReadyAck)
}

void VSBattleReadyAck::InitAsDefaultInstance() {
}

VSBattleReadyAck::VSBattleReadyAck(const VSBattleReadyAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VSBattleReadyAck)
}

void VSBattleReadyAck::SharedCtor() {
  battleid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

VSBattleReadyAck::~VSBattleReadyAck() {
  // @@protoc_insertion_point(destructor:NetMsg.VSBattleReadyAck)
  SharedDtor();
}

void VSBattleReadyAck::SharedDtor() {
}

void VSBattleReadyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSBattleReadyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSBattleReadyAck_descriptor_;
}

const VSBattleReadyAck& VSBattleReadyAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VSBattleReadyAck> VSBattleReadyAck_default_instance_;

VSBattleReadyAck* VSBattleReadyAck::New(::google::protobuf::Arena* arena) const {
  VSBattleReadyAck* n = new VSBattleReadyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VSBattleReadyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VSBattleReadyAck)
  battleid_ = GOOGLE_ULONGLONG(0);
}

bool VSBattleReadyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VSBattleReadyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VSBattleReadyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VSBattleReadyAck)
  return false;
#undef DO_
}

void VSBattleReadyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VSBattleReadyAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VSBattleReadyAck)
}

::google::protobuf::uint8* VSBattleReadyAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VSBattleReadyAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VSBattleReadyAck)
  return target;
}

size_t VSBattleReadyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VSBattleReadyAck)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSBattleReadyAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VSBattleReadyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VSBattleReadyAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VSBattleReadyAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VSBattleReadyAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VSBattleReadyAck)
    UnsafeMergeFrom(*source);
  }
}

void VSBattleReadyAck::MergeFrom(const VSBattleReadyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VSBattleReadyAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VSBattleReadyAck::UnsafeMergeFrom(const VSBattleReadyAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
}

void VSBattleReadyAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VSBattleReadyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSBattleReadyAck::CopyFrom(const VSBattleReadyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VSBattleReadyAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VSBattleReadyAck::IsInitialized() const {

  return true;
}

void VSBattleReadyAck::Swap(VSBattleReadyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VSBattleReadyAck::InternalSwap(VSBattleReadyAck* other) {
  std::swap(battleid_, other->battleid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VSBattleReadyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSBattleReadyAck_descriptor_;
  metadata.reflection = VSBattleReadyAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VSBattleReadyAck

// optional uint64 battleId = 1;
void VSBattleReadyAck::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VSBattleReadyAck::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleReadyAck.battleId)
  return battleid_;
}
void VSBattleReadyAck::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleReadyAck.battleId)
}

inline const VSBattleReadyAck* VSBattleReadyAck::internal_default_instance() {
  return &VSBattleReadyAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqVSBattleOpt::kBattleIdFieldNumber;
const int ReqVSBattleOpt::kTypeFieldNumber;
const int ReqVSBattleOpt::kTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqVSBattleOpt::ReqVSBattleOpt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqVSBattleOpt)
}

void ReqVSBattleOpt::InitAsDefaultInstance() {
}

ReqVSBattleOpt::ReqVSBattleOpt(const ReqVSBattleOpt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqVSBattleOpt)
}

void ReqVSBattleOpt::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(turn_));
  _cached_size_ = 0;
}

ReqVSBattleOpt::~ReqVSBattleOpt() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqVSBattleOpt)
  SharedDtor();
}

void ReqVSBattleOpt::SharedDtor() {
}

void ReqVSBattleOpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqVSBattleOpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqVSBattleOpt_descriptor_;
}

const ReqVSBattleOpt& ReqVSBattleOpt::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqVSBattleOpt> ReqVSBattleOpt_default_instance_;

ReqVSBattleOpt* ReqVSBattleOpt::New(::google::protobuf::Arena* arena) const {
  ReqVSBattleOpt* n = new ReqVSBattleOpt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqVSBattleOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqVSBattleOpt)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqVSBattleOpt, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqVSBattleOpt*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, turn_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqVSBattleOpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqVSBattleOpt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_turn;
        break;
      }

      // optional uint32 turn = 3;
      case 3: {
        if (tag == 24) {
         parse_turn:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqVSBattleOpt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqVSBattleOpt)
  return false;
#undef DO_
}

void ReqVSBattleOpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqVSBattleOpt)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 turn = 3;
  if (this->turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->turn(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqVSBattleOpt)
}

::google::protobuf::uint8* ReqVSBattleOpt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqVSBattleOpt)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 turn = 3;
  if (this->turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->turn(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqVSBattleOpt)
  return target;
}

size_t ReqVSBattleOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqVSBattleOpt)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 turn = 3;
  if (this->turn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqVSBattleOpt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqVSBattleOpt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqVSBattleOpt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqVSBattleOpt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqVSBattleOpt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqVSBattleOpt)
    UnsafeMergeFrom(*source);
  }
}

void ReqVSBattleOpt::MergeFrom(const ReqVSBattleOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqVSBattleOpt)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqVSBattleOpt::UnsafeMergeFrom(const ReqVSBattleOpt& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.turn() != 0) {
    set_turn(from.turn());
  }
}

void ReqVSBattleOpt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqVSBattleOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVSBattleOpt::CopyFrom(const ReqVSBattleOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqVSBattleOpt)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqVSBattleOpt::IsInitialized() const {

  return true;
}

void ReqVSBattleOpt::Swap(ReqVSBattleOpt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqVSBattleOpt::InternalSwap(ReqVSBattleOpt* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(type_, other->type_);
  std::swap(turn_, other->turn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqVSBattleOpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqVSBattleOpt_descriptor_;
  metadata.reflection = ReqVSBattleOpt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqVSBattleOpt

// optional uint64 battleId = 1;
void ReqVSBattleOpt::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqVSBattleOpt::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqVSBattleOpt.battleId)
  return battleid_;
}
void ReqVSBattleOpt::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqVSBattleOpt.battleId)
}

// optional uint32 type = 2;
void ReqVSBattleOpt::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 ReqVSBattleOpt::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqVSBattleOpt.type)
  return type_;
}
void ReqVSBattleOpt::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqVSBattleOpt.type)
}

// optional uint32 turn = 3;
void ReqVSBattleOpt::clear_turn() {
  turn_ = 0u;
}
::google::protobuf::uint32 ReqVSBattleOpt::turn() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqVSBattleOpt.turn)
  return turn_;
}
void ReqVSBattleOpt::set_turn(::google::protobuf::uint32 value) {
  
  turn_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqVSBattleOpt.turn)
}

inline const ReqVSBattleOpt* ReqVSBattleOpt::internal_default_instance() {
  return &ReqVSBattleOpt_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VSBattleOptAck::kBattleIdFieldNumber;
const int VSBattleOptAck::kTypeFieldNumber;
const int VSBattleOptAck::kTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VSBattleOptAck::VSBattleOptAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VSBattleOptAck)
}

void VSBattleOptAck::InitAsDefaultInstance() {
}

VSBattleOptAck::VSBattleOptAck(const VSBattleOptAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VSBattleOptAck)
}

void VSBattleOptAck::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(turn_));
  _cached_size_ = 0;
}

VSBattleOptAck::~VSBattleOptAck() {
  // @@protoc_insertion_point(destructor:NetMsg.VSBattleOptAck)
  SharedDtor();
}

void VSBattleOptAck::SharedDtor() {
}

void VSBattleOptAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSBattleOptAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSBattleOptAck_descriptor_;
}

const VSBattleOptAck& VSBattleOptAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VSBattleOptAck> VSBattleOptAck_default_instance_;

VSBattleOptAck* VSBattleOptAck::New(::google::protobuf::Arena* arena) const {
  VSBattleOptAck* n = new VSBattleOptAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VSBattleOptAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VSBattleOptAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VSBattleOptAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VSBattleOptAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, turn_);

#undef ZR_HELPER_
#undef ZR_

}

bool VSBattleOptAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VSBattleOptAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_turn;
        break;
      }

      // optional uint32 turn = 3;
      case 3: {
        if (tag == 24) {
         parse_turn:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VSBattleOptAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VSBattleOptAck)
  return false;
#undef DO_
}

void VSBattleOptAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VSBattleOptAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 turn = 3;
  if (this->turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->turn(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VSBattleOptAck)
}

::google::protobuf::uint8* VSBattleOptAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VSBattleOptAck)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 turn = 3;
  if (this->turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->turn(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VSBattleOptAck)
  return target;
}

size_t VSBattleOptAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VSBattleOptAck)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 turn = 3;
  if (this->turn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSBattleOptAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VSBattleOptAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VSBattleOptAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VSBattleOptAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VSBattleOptAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VSBattleOptAck)
    UnsafeMergeFrom(*source);
  }
}

void VSBattleOptAck::MergeFrom(const VSBattleOptAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VSBattleOptAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VSBattleOptAck::UnsafeMergeFrom(const VSBattleOptAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.turn() != 0) {
    set_turn(from.turn());
  }
}

void VSBattleOptAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VSBattleOptAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSBattleOptAck::CopyFrom(const VSBattleOptAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VSBattleOptAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VSBattleOptAck::IsInitialized() const {

  return true;
}

void VSBattleOptAck::Swap(VSBattleOptAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VSBattleOptAck::InternalSwap(VSBattleOptAck* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(type_, other->type_);
  std::swap(turn_, other->turn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VSBattleOptAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSBattleOptAck_descriptor_;
  metadata.reflection = VSBattleOptAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VSBattleOptAck

// optional uint64 battleId = 1;
void VSBattleOptAck::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VSBattleOptAck::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleOptAck.battleId)
  return battleid_;
}
void VSBattleOptAck::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleOptAck.battleId)
}

// optional uint32 type = 2;
void VSBattleOptAck::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 VSBattleOptAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleOptAck.type)
  return type_;
}
void VSBattleOptAck::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleOptAck.type)
}

// optional uint32 turn = 3;
void VSBattleOptAck::clear_turn() {
  turn_ = 0u;
}
::google::protobuf::uint32 VSBattleOptAck::turn() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleOptAck.turn)
  return turn_;
}
void VSBattleOptAck::set_turn(::google::protobuf::uint32 value) {
  
  turn_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleOptAck.turn)
}

inline const VSBattleOptAck* VSBattleOptAck::internal_default_instance() {
  return &VSBattleOptAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VSBattleUnitState::kBattleIdFieldNumber;
const int VSBattleUnitState::kHpFieldNumber;
const int VSBattleUnitState::kNuqiFieldNumber;
const int VSBattleUnitState::kOptTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VSBattleUnitState::VSBattleUnitState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VSBattleUnitState)
}

void VSBattleUnitState::InitAsDefaultInstance() {
}

VSBattleUnitState::VSBattleUnitState(const VSBattleUnitState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VSBattleUnitState)
}

void VSBattleUnitState::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&opttype_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(opttype_));
  _cached_size_ = 0;
}

VSBattleUnitState::~VSBattleUnitState() {
  // @@protoc_insertion_point(destructor:NetMsg.VSBattleUnitState)
  SharedDtor();
}

void VSBattleUnitState::SharedDtor() {
}

void VSBattleUnitState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSBattleUnitState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSBattleUnitState_descriptor_;
}

const VSBattleUnitState& VSBattleUnitState::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VSBattleUnitState> VSBattleUnitState_default_instance_;

VSBattleUnitState* VSBattleUnitState::New(::google::protobuf::Arena* arena) const {
  VSBattleUnitState* n = new VSBattleUnitState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VSBattleUnitState::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VSBattleUnitState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VSBattleUnitState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VSBattleUnitState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, opttype_);

#undef ZR_HELPER_
#undef ZR_

}

bool VSBattleUnitState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VSBattleUnitState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 2;
      case 2: {
        if (tag == 16) {
         parse_hp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nuqi;
        break;
      }

      // optional uint32 nuqi = 3;
      case 3: {
        if (tag == 24) {
         parse_nuqi:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nuqi_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optType;
        break;
      }

      // optional uint32 optType = 4;
      case 4: {
        if (tag == 32) {
         parse_optType:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opttype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VSBattleUnitState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VSBattleUnitState)
  return false;
#undef DO_
}

void VSBattleUnitState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VSBattleUnitState)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional uint32 hp = 2;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

  // optional uint32 nuqi = 3;
  if (this->nuqi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nuqi(), output);
  }

  // optional uint32 optType = 4;
  if (this->opttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opttype(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VSBattleUnitState)
}

::google::protobuf::uint8* VSBattleUnitState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VSBattleUnitState)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional uint32 hp = 2;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }

  // optional uint32 nuqi = 3;
  if (this->nuqi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nuqi(), target);
  }

  // optional uint32 optType = 4;
  if (this->opttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opttype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VSBattleUnitState)
  return target;
}

size_t VSBattleUnitState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VSBattleUnitState)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 hp = 2;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  // optional uint32 nuqi = 3;
  if (this->nuqi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nuqi());
  }

  // optional uint32 optType = 4;
  if (this->opttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opttype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSBattleUnitState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VSBattleUnitState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VSBattleUnitState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VSBattleUnitState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VSBattleUnitState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VSBattleUnitState)
    UnsafeMergeFrom(*source);
  }
}

void VSBattleUnitState::MergeFrom(const VSBattleUnitState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VSBattleUnitState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VSBattleUnitState::UnsafeMergeFrom(const VSBattleUnitState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.nuqi() != 0) {
    set_nuqi(from.nuqi());
  }
  if (from.opttype() != 0) {
    set_opttype(from.opttype());
  }
}

void VSBattleUnitState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VSBattleUnitState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSBattleUnitState::CopyFrom(const VSBattleUnitState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VSBattleUnitState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VSBattleUnitState::IsInitialized() const {

  return true;
}

void VSBattleUnitState::Swap(VSBattleUnitState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VSBattleUnitState::InternalSwap(VSBattleUnitState* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(hp_, other->hp_);
  std::swap(nuqi_, other->nuqi_);
  std::swap(opttype_, other->opttype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VSBattleUnitState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSBattleUnitState_descriptor_;
  metadata.reflection = VSBattleUnitState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VSBattleUnitState

// optional uint64 battleId = 1;
void VSBattleUnitState::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VSBattleUnitState::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleUnitState.battleId)
  return battleid_;
}
void VSBattleUnitState::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleUnitState.battleId)
}

// optional uint32 hp = 2;
void VSBattleUnitState::clear_hp() {
  hp_ = 0u;
}
::google::protobuf::uint32 VSBattleUnitState::hp() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleUnitState.hp)
  return hp_;
}
void VSBattleUnitState::set_hp(::google::protobuf::uint32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleUnitState.hp)
}

// optional uint32 nuqi = 3;
void VSBattleUnitState::clear_nuqi() {
  nuqi_ = 0u;
}
::google::protobuf::uint32 VSBattleUnitState::nuqi() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleUnitState.nuqi)
  return nuqi_;
}
void VSBattleUnitState::set_nuqi(::google::protobuf::uint32 value) {
  
  nuqi_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleUnitState.nuqi)
}

// optional uint32 optType = 4;
void VSBattleUnitState::clear_opttype() {
  opttype_ = 0u;
}
::google::protobuf::uint32 VSBattleUnitState::opttype() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleUnitState.optType)
  return opttype_;
}
void VSBattleUnitState::set_opttype(::google::protobuf::uint32 value) {
  
  opttype_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleUnitState.optType)
}

inline const VSBattleUnitState* VSBattleUnitState::internal_default_instance() {
  return &VSBattleUnitState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VSBattleTurn::kBattleIdFieldNumber;
const int VSBattleTurn::kMeStateFieldNumber;
const int VSBattleTurn::kOtherStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VSBattleTurn::VSBattleTurn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VSBattleTurn)
}

void VSBattleTurn::InitAsDefaultInstance() {
  mestate_ = const_cast< ::NetMsg::VSBattleUnitState*>(
      ::NetMsg::VSBattleUnitState::internal_default_instance());
  otherstate_ = const_cast< ::NetMsg::VSBattleUnitState*>(
      ::NetMsg::VSBattleUnitState::internal_default_instance());
}

VSBattleTurn::VSBattleTurn(const VSBattleTurn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VSBattleTurn)
}

void VSBattleTurn::SharedCtor() {
  mestate_ = NULL;
  otherstate_ = NULL;
  battleid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

VSBattleTurn::~VSBattleTurn() {
  // @@protoc_insertion_point(destructor:NetMsg.VSBattleTurn)
  SharedDtor();
}

void VSBattleTurn::SharedDtor() {
  if (this != &VSBattleTurn_default_instance_.get()) {
    delete mestate_;
    delete otherstate_;
  }
}

void VSBattleTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSBattleTurn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSBattleTurn_descriptor_;
}

const VSBattleTurn& VSBattleTurn::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VSBattleTurn> VSBattleTurn_default_instance_;

VSBattleTurn* VSBattleTurn::New(::google::protobuf::Arena* arena) const {
  VSBattleTurn* n = new VSBattleTurn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VSBattleTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VSBattleTurn)
  battleid_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && mestate_ != NULL) delete mestate_;
  mestate_ = NULL;
  if (GetArenaNoVirtual() == NULL && otherstate_ != NULL) delete otherstate_;
  otherstate_ = NULL;
}

bool VSBattleTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VSBattleTurn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_meState;
        break;
      }

      // optional .NetMsg.VSBattleUnitState meState = 2;
      case 2: {
        if (tag == 18) {
         parse_meState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_otherState;
        break;
      }

      // optional .NetMsg.VSBattleUnitState otherState = 3;
      case 3: {
        if (tag == 26) {
         parse_otherState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otherstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VSBattleTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VSBattleTurn)
  return false;
#undef DO_
}

void VSBattleTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VSBattleTurn)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional .NetMsg.VSBattleUnitState meState = 2;
  if (this->has_mestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mestate_, output);
  }

  // optional .NetMsg.VSBattleUnitState otherState = 3;
  if (this->has_otherstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->otherstate_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VSBattleTurn)
}

::google::protobuf::uint8* VSBattleTurn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VSBattleTurn)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional .NetMsg.VSBattleUnitState meState = 2;
  if (this->has_mestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mestate_, false, target);
  }

  // optional .NetMsg.VSBattleUnitState otherState = 3;
  if (this->has_otherstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->otherstate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VSBattleTurn)
  return target;
}

size_t VSBattleTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VSBattleTurn)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional .NetMsg.VSBattleUnitState meState = 2;
  if (this->has_mestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mestate_);
  }

  // optional .NetMsg.VSBattleUnitState otherState = 3;
  if (this->has_otherstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->otherstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSBattleTurn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VSBattleTurn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VSBattleTurn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VSBattleTurn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VSBattleTurn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VSBattleTurn)
    UnsafeMergeFrom(*source);
  }
}

void VSBattleTurn::MergeFrom(const VSBattleTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VSBattleTurn)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VSBattleTurn::UnsafeMergeFrom(const VSBattleTurn& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.has_mestate()) {
    mutable_mestate()->::NetMsg::VSBattleUnitState::MergeFrom(from.mestate());
  }
  if (from.has_otherstate()) {
    mutable_otherstate()->::NetMsg::VSBattleUnitState::MergeFrom(from.otherstate());
  }
}

void VSBattleTurn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VSBattleTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSBattleTurn::CopyFrom(const VSBattleTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VSBattleTurn)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VSBattleTurn::IsInitialized() const {

  return true;
}

void VSBattleTurn::Swap(VSBattleTurn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VSBattleTurn::InternalSwap(VSBattleTurn* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(mestate_, other->mestate_);
  std::swap(otherstate_, other->otherstate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VSBattleTurn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSBattleTurn_descriptor_;
  metadata.reflection = VSBattleTurn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VSBattleTurn

// optional uint64 battleId = 1;
void VSBattleTurn::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VSBattleTurn::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleTurn.battleId)
  return battleid_;
}
void VSBattleTurn::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleTurn.battleId)
}

// optional .NetMsg.VSBattleUnitState meState = 2;
bool VSBattleTurn::has_mestate() const {
  return this != internal_default_instance() && mestate_ != NULL;
}
void VSBattleTurn::clear_mestate() {
  if (GetArenaNoVirtual() == NULL && mestate_ != NULL) delete mestate_;
  mestate_ = NULL;
}
const ::NetMsg::VSBattleUnitState& VSBattleTurn::mestate() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleTurn.meState)
  return mestate_ != NULL ? *mestate_
                         : *::NetMsg::VSBattleUnitState::internal_default_instance();
}
::NetMsg::VSBattleUnitState* VSBattleTurn::mutable_mestate() {
  
  if (mestate_ == NULL) {
    mestate_ = new ::NetMsg::VSBattleUnitState;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.VSBattleTurn.meState)
  return mestate_;
}
::NetMsg::VSBattleUnitState* VSBattleTurn::release_mestate() {
  // @@protoc_insertion_point(field_release:NetMsg.VSBattleTurn.meState)
  
  ::NetMsg::VSBattleUnitState* temp = mestate_;
  mestate_ = NULL;
  return temp;
}
void VSBattleTurn::set_allocated_mestate(::NetMsg::VSBattleUnitState* mestate) {
  delete mestate_;
  mestate_ = mestate;
  if (mestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.VSBattleTurn.meState)
}

// optional .NetMsg.VSBattleUnitState otherState = 3;
bool VSBattleTurn::has_otherstate() const {
  return this != internal_default_instance() && otherstate_ != NULL;
}
void VSBattleTurn::clear_otherstate() {
  if (GetArenaNoVirtual() == NULL && otherstate_ != NULL) delete otherstate_;
  otherstate_ = NULL;
}
const ::NetMsg::VSBattleUnitState& VSBattleTurn::otherstate() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleTurn.otherState)
  return otherstate_ != NULL ? *otherstate_
                         : *::NetMsg::VSBattleUnitState::internal_default_instance();
}
::NetMsg::VSBattleUnitState* VSBattleTurn::mutable_otherstate() {
  
  if (otherstate_ == NULL) {
    otherstate_ = new ::NetMsg::VSBattleUnitState;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.VSBattleTurn.otherState)
  return otherstate_;
}
::NetMsg::VSBattleUnitState* VSBattleTurn::release_otherstate() {
  // @@protoc_insertion_point(field_release:NetMsg.VSBattleTurn.otherState)
  
  ::NetMsg::VSBattleUnitState* temp = otherstate_;
  otherstate_ = NULL;
  return temp;
}
void VSBattleTurn::set_allocated_otherstate(::NetMsg::VSBattleUnitState* otherstate) {
  delete otherstate_;
  otherstate_ = otherstate;
  if (otherstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.VSBattleTurn.otherState)
}

inline const VSBattleTurn* VSBattleTurn::internal_default_instance() {
  return &VSBattleTurn_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VSBattleEnd::kBattleIdFieldNumber;
const int VSBattleEnd::kVictoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VSBattleEnd::VSBattleEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.VSBattleEnd)
}

void VSBattleEnd::InitAsDefaultInstance() {
}

VSBattleEnd::VSBattleEnd(const VSBattleEnd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.VSBattleEnd)
}

void VSBattleEnd::SharedCtor() {
  ::memset(&battleid_, 0, reinterpret_cast<char*>(&victory_) -
    reinterpret_cast<char*>(&battleid_) + sizeof(victory_));
  _cached_size_ = 0;
}

VSBattleEnd::~VSBattleEnd() {
  // @@protoc_insertion_point(destructor:NetMsg.VSBattleEnd)
  SharedDtor();
}

void VSBattleEnd::SharedDtor() {
}

void VSBattleEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSBattleEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSBattleEnd_descriptor_;
}

const VSBattleEnd& VSBattleEnd::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VSBattleEnd> VSBattleEnd_default_instance_;

VSBattleEnd* VSBattleEnd::New(::google::protobuf::Arena* arena) const {
  VSBattleEnd* n = new VSBattleEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VSBattleEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.VSBattleEnd)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VSBattleEnd, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VSBattleEnd*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battleid_, victory_);

#undef ZR_HELPER_
#undef ZR_

}

bool VSBattleEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.VSBattleEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battleId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_victory;
        break;
      }

      // optional uint32 victory = 2;
      case 2: {
        if (tag == 16) {
         parse_victory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.VSBattleEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.VSBattleEnd)
  return false;
#undef DO_
}

void VSBattleEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.VSBattleEnd)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleid(), output);
  }

  // optional uint32 victory = 2;
  if (this->victory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->victory(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.VSBattleEnd)
}

::google::protobuf::uint8* VSBattleEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.VSBattleEnd)
  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleid(), target);
  }

  // optional uint32 victory = 2;
  if (this->victory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->victory(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.VSBattleEnd)
  return target;
}

size_t VSBattleEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.VSBattleEnd)
  size_t total_size = 0;

  // optional uint64 battleId = 1;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // optional uint32 victory = 2;
  if (this->victory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->victory());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSBattleEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.VSBattleEnd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VSBattleEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VSBattleEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.VSBattleEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.VSBattleEnd)
    UnsafeMergeFrom(*source);
  }
}

void VSBattleEnd::MergeFrom(const VSBattleEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.VSBattleEnd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VSBattleEnd::UnsafeMergeFrom(const VSBattleEnd& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.victory() != 0) {
    set_victory(from.victory());
  }
}

void VSBattleEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.VSBattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSBattleEnd::CopyFrom(const VSBattleEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.VSBattleEnd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VSBattleEnd::IsInitialized() const {

  return true;
}

void VSBattleEnd::Swap(VSBattleEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VSBattleEnd::InternalSwap(VSBattleEnd* other) {
  std::swap(battleid_, other->battleid_);
  std::swap(victory_, other->victory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VSBattleEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSBattleEnd_descriptor_;
  metadata.reflection = VSBattleEnd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VSBattleEnd

// optional uint64 battleId = 1;
void VSBattleEnd::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VSBattleEnd::battleid() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleEnd.battleId)
  return battleid_;
}
void VSBattleEnd::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleEnd.battleId)
}

// optional uint32 victory = 2;
void VSBattleEnd::clear_victory() {
  victory_ = 0u;
}
::google::protobuf::uint32 VSBattleEnd::victory() const {
  // @@protoc_insertion_point(field_get:NetMsg.VSBattleEnd.victory)
  return victory_;
}
void VSBattleEnd::set_victory(::google::protobuf::uint32 value) {
  
  victory_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.VSBattleEnd.victory)
}

inline const VSBattleEnd* VSBattleEnd::internal_default_instance() {
  return &VSBattleEnd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBioHeroInfo::kHeroClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBioHeroInfo::ReqBioHeroInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqBioHeroInfo)
}

void ReqBioHeroInfo::InitAsDefaultInstance() {
}

ReqBioHeroInfo::ReqBioHeroInfo(const ReqBioHeroInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqBioHeroInfo)
}

void ReqBioHeroInfo::SharedCtor() {
  heroclass_ = 0u;
  _cached_size_ = 0;
}

ReqBioHeroInfo::~ReqBioHeroInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqBioHeroInfo)
  SharedDtor();
}

void ReqBioHeroInfo::SharedDtor() {
}

void ReqBioHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBioHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBioHeroInfo_descriptor_;
}

const ReqBioHeroInfo& ReqBioHeroInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqBioHeroInfo> ReqBioHeroInfo_default_instance_;

ReqBioHeroInfo* ReqBioHeroInfo::New(::google::protobuf::Arena* arena) const {
  ReqBioHeroInfo* n = new ReqBioHeroInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBioHeroInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqBioHeroInfo)
  heroclass_ = 0u;
}

bool ReqBioHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqBioHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqBioHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqBioHeroInfo)
  return false;
#undef DO_
}

void ReqBioHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqBioHeroInfo)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqBioHeroInfo)
}

::google::protobuf::uint8* ReqBioHeroInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqBioHeroInfo)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqBioHeroInfo)
  return target;
}

size_t ReqBioHeroInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqBioHeroInfo)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBioHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqBioHeroInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqBioHeroInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBioHeroInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqBioHeroInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqBioHeroInfo)
    UnsafeMergeFrom(*source);
  }
}

void ReqBioHeroInfo::MergeFrom(const ReqBioHeroInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqBioHeroInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqBioHeroInfo::UnsafeMergeFrom(const ReqBioHeroInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
}

void ReqBioHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqBioHeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBioHeroInfo::CopyFrom(const ReqBioHeroInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqBioHeroInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqBioHeroInfo::IsInitialized() const {

  return true;
}

void ReqBioHeroInfo::Swap(ReqBioHeroInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBioHeroInfo::InternalSwap(ReqBioHeroInfo* other) {
  std::swap(heroclass_, other->heroclass_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBioHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBioHeroInfo_descriptor_;
  metadata.reflection = ReqBioHeroInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBioHeroInfo

// optional uint32 heroClass = 1;
void ReqBioHeroInfo::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 ReqBioHeroInfo::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBioHeroInfo.heroClass)
  return heroclass_;
}
void ReqBioHeroInfo::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBioHeroInfo.heroClass)
}

inline const ReqBioHeroInfo* ReqBioHeroInfo::internal_default_instance() {
  return &ReqBioHeroInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioHeroStepData::kIdFieldNumber;
const int BioHeroStepData::kLockFieldNumber;
const int BioHeroStepData::kBranchesCompleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioHeroStepData::BioHeroStepData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BioHeroStepData)
}

void BioHeroStepData::InitAsDefaultInstance() {
}

BioHeroStepData::BioHeroStepData(const BioHeroStepData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BioHeroStepData)
}

void BioHeroStepData::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&lock_) -
    reinterpret_cast<char*>(&id_) + sizeof(lock_));
  _cached_size_ = 0;
}

BioHeroStepData::~BioHeroStepData() {
  // @@protoc_insertion_point(destructor:NetMsg.BioHeroStepData)
  SharedDtor();
}

void BioHeroStepData::SharedDtor() {
}

void BioHeroStepData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioHeroStepData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioHeroStepData_descriptor_;
}

const BioHeroStepData& BioHeroStepData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BioHeroStepData> BioHeroStepData_default_instance_;

BioHeroStepData* BioHeroStepData::New(::google::protobuf::Arena* arena) const {
  BioHeroStepData* n = new BioHeroStepData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioHeroStepData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BioHeroStepData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BioHeroStepData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BioHeroStepData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, lock_);

#undef ZR_HELPER_
#undef ZR_

  branchescomplete_.Clear();
}

bool BioHeroStepData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BioHeroStepData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lock;
        break;
      }

      // optional bool lock = 2;
      case 2: {
        if (tag == 16) {
         parse_lock:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_branchesComplete;
        break;
      }

      // repeated uint32 branchesComplete = 3;
      case 3: {
        if (tag == 26) {
         parse_branchesComplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_branchescomplete())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_branchescomplete())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BioHeroStepData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BioHeroStepData)
  return false;
#undef DO_
}

void BioHeroStepData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BioHeroStepData)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool lock = 2;
  if (this->lock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lock(), output);
  }

  // repeated uint32 branchesComplete = 3;
  if (this->branchescomplete_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_branchescomplete_cached_byte_size_);
  }
  for (int i = 0; i < this->branchescomplete_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->branchescomplete(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BioHeroStepData)
}

::google::protobuf::uint8* BioHeroStepData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BioHeroStepData)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool lock = 2;
  if (this->lock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lock(), target);
  }

  // repeated uint32 branchesComplete = 3;
  if (this->branchescomplete_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _branchescomplete_cached_byte_size_, target);
  }
  for (int i = 0; i < this->branchescomplete_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->branchescomplete(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BioHeroStepData)
  return target;
}

size_t BioHeroStepData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BioHeroStepData)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional bool lock = 2;
  if (this->lock() != 0) {
    total_size += 1 + 1;
  }

  // repeated uint32 branchesComplete = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->branchescomplete_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->branchescomplete(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _branchescomplete_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioHeroStepData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BioHeroStepData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioHeroStepData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BioHeroStepData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BioHeroStepData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BioHeroStepData)
    UnsafeMergeFrom(*source);
  }
}

void BioHeroStepData::MergeFrom(const BioHeroStepData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BioHeroStepData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BioHeroStepData::UnsafeMergeFrom(const BioHeroStepData& from) {
  GOOGLE_DCHECK(&from != this);
  branchescomplete_.UnsafeMergeFrom(from.branchescomplete_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.lock() != 0) {
    set_lock(from.lock());
  }
}

void BioHeroStepData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BioHeroStepData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioHeroStepData::CopyFrom(const BioHeroStepData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BioHeroStepData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BioHeroStepData::IsInitialized() const {

  return true;
}

void BioHeroStepData::Swap(BioHeroStepData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioHeroStepData::InternalSwap(BioHeroStepData* other) {
  std::swap(id_, other->id_);
  std::swap(lock_, other->lock_);
  branchescomplete_.UnsafeArenaSwap(&other->branchescomplete_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioHeroStepData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioHeroStepData_descriptor_;
  metadata.reflection = BioHeroStepData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioHeroStepData

// optional uint32 id = 1;
void BioHeroStepData::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 BioHeroStepData::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroStepData.id)
  return id_;
}
void BioHeroStepData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BioHeroStepData.id)
}

// optional bool lock = 2;
void BioHeroStepData::clear_lock() {
  lock_ = false;
}
bool BioHeroStepData::lock() const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroStepData.lock)
  return lock_;
}
void BioHeroStepData::set_lock(bool value) {
  
  lock_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BioHeroStepData.lock)
}

// repeated uint32 branchesComplete = 3;
int BioHeroStepData::branchescomplete_size() const {
  return branchescomplete_.size();
}
void BioHeroStepData::clear_branchescomplete() {
  branchescomplete_.Clear();
}
::google::protobuf::uint32 BioHeroStepData::branchescomplete(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroStepData.branchesComplete)
  return branchescomplete_.Get(index);
}
void BioHeroStepData::set_branchescomplete(int index, ::google::protobuf::uint32 value) {
  branchescomplete_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.BioHeroStepData.branchesComplete)
}
void BioHeroStepData::add_branchescomplete(::google::protobuf::uint32 value) {
  branchescomplete_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.BioHeroStepData.branchesComplete)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BioHeroStepData::branchescomplete() const {
  // @@protoc_insertion_point(field_list:NetMsg.BioHeroStepData.branchesComplete)
  return branchescomplete_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BioHeroStepData::mutable_branchescomplete() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BioHeroStepData.branchesComplete)
  return &branchescomplete_;
}

inline const BioHeroStepData* BioHeroStepData::internal_default_instance() {
  return &BioHeroStepData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioHeroInfoAck::kHeroClassFieldNumber;
const int BioHeroInfoAck::kStepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioHeroInfoAck::BioHeroInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BioHeroInfoAck)
}

void BioHeroInfoAck::InitAsDefaultInstance() {
}

BioHeroInfoAck::BioHeroInfoAck(const BioHeroInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BioHeroInfoAck)
}

void BioHeroInfoAck::SharedCtor() {
  heroclass_ = 0u;
  _cached_size_ = 0;
}

BioHeroInfoAck::~BioHeroInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.BioHeroInfoAck)
  SharedDtor();
}

void BioHeroInfoAck::SharedDtor() {
}

void BioHeroInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioHeroInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioHeroInfoAck_descriptor_;
}

const BioHeroInfoAck& BioHeroInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BioHeroInfoAck> BioHeroInfoAck_default_instance_;

BioHeroInfoAck* BioHeroInfoAck::New(::google::protobuf::Arena* arena) const {
  BioHeroInfoAck* n = new BioHeroInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioHeroInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BioHeroInfoAck)
  heroclass_ = 0u;
  steps_.Clear();
}

bool BioHeroInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BioHeroInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.BioHeroStepData steps = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_steps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_heroClass;
        break;
      }

      // optional uint32 heroClass = 2;
      case 2: {
        if (tag == 16) {
         parse_heroClass:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BioHeroInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BioHeroInfoAck)
  return false;
#undef DO_
}

void BioHeroInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BioHeroInfoAck)
  // repeated .NetMsg.BioHeroStepData steps = 1;
  for (unsigned int i = 0, n = this->steps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->steps(i), output);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroclass(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BioHeroInfoAck)
}

::google::protobuf::uint8* BioHeroInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BioHeroInfoAck)
  // repeated .NetMsg.BioHeroStepData steps = 1;
  for (unsigned int i = 0, n = this->steps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->steps(i), false, target);
  }

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroclass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BioHeroInfoAck)
  return target;
}

size_t BioHeroInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BioHeroInfoAck)
  size_t total_size = 0;

  // optional uint32 heroClass = 2;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // repeated .NetMsg.BioHeroStepData steps = 1;
  {
    unsigned int count = this->steps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->steps(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioHeroInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BioHeroInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioHeroInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BioHeroInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BioHeroInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BioHeroInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void BioHeroInfoAck::MergeFrom(const BioHeroInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BioHeroInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BioHeroInfoAck::UnsafeMergeFrom(const BioHeroInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  steps_.MergeFrom(from.steps_);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
}

void BioHeroInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BioHeroInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioHeroInfoAck::CopyFrom(const BioHeroInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BioHeroInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BioHeroInfoAck::IsInitialized() const {

  return true;
}

void BioHeroInfoAck::Swap(BioHeroInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioHeroInfoAck::InternalSwap(BioHeroInfoAck* other) {
  std::swap(heroclass_, other->heroclass_);
  steps_.UnsafeArenaSwap(&other->steps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioHeroInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioHeroInfoAck_descriptor_;
  metadata.reflection = BioHeroInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioHeroInfoAck

// optional uint32 heroClass = 2;
void BioHeroInfoAck::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 BioHeroInfoAck::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroInfoAck.heroClass)
  return heroclass_;
}
void BioHeroInfoAck::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BioHeroInfoAck.heroClass)
}

// repeated .NetMsg.BioHeroStepData steps = 1;
int BioHeroInfoAck::steps_size() const {
  return steps_.size();
}
void BioHeroInfoAck::clear_steps() {
  steps_.Clear();
}
const ::NetMsg::BioHeroStepData& BioHeroInfoAck::steps(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroInfoAck.steps)
  return steps_.Get(index);
}
::NetMsg::BioHeroStepData* BioHeroInfoAck::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.BioHeroInfoAck.steps)
  return steps_.Mutable(index);
}
::NetMsg::BioHeroStepData* BioHeroInfoAck::add_steps() {
  // @@protoc_insertion_point(field_add:NetMsg.BioHeroInfoAck.steps)
  return steps_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::BioHeroStepData >*
BioHeroInfoAck::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BioHeroInfoAck.steps)
  return &steps_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::BioHeroStepData >&
BioHeroInfoAck::steps() const {
  // @@protoc_insertion_point(field_list:NetMsg.BioHeroInfoAck.steps)
  return steps_;
}

inline const BioHeroInfoAck* BioHeroInfoAck::internal_default_instance() {
  return &BioHeroInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBioHeroStepDone::kHeroClassFieldNumber;
const int ReqBioHeroStepDone::kStepIdFieldNumber;
const int ReqBioHeroStepDone::kBranchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBioHeroStepDone::ReqBioHeroStepDone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqBioHeroStepDone)
}

void ReqBioHeroStepDone::InitAsDefaultInstance() {
}

ReqBioHeroStepDone::ReqBioHeroStepDone(const ReqBioHeroStepDone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqBioHeroStepDone)
}

void ReqBioHeroStepDone::SharedCtor() {
  ::memset(&heroclass_, 0, reinterpret_cast<char*>(&branchid_) -
    reinterpret_cast<char*>(&heroclass_) + sizeof(branchid_));
  _cached_size_ = 0;
}

ReqBioHeroStepDone::~ReqBioHeroStepDone() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqBioHeroStepDone)
  SharedDtor();
}

void ReqBioHeroStepDone::SharedDtor() {
}

void ReqBioHeroStepDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBioHeroStepDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBioHeroStepDone_descriptor_;
}

const ReqBioHeroStepDone& ReqBioHeroStepDone::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqBioHeroStepDone> ReqBioHeroStepDone_default_instance_;

ReqBioHeroStepDone* ReqBioHeroStepDone::New(::google::protobuf::Arena* arena) const {
  ReqBioHeroStepDone* n = new ReqBioHeroStepDone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBioHeroStepDone::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqBioHeroStepDone)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqBioHeroStepDone, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqBioHeroStepDone*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroclass_, branchid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqBioHeroStepDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqBioHeroStepDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stepId;
        break;
      }

      // optional uint32 stepId = 2;
      case 2: {
        if (tag == 16) {
         parse_stepId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branchId;
        break;
      }

      // optional uint32 branchId = 3;
      case 3: {
        if (tag == 24) {
         parse_branchId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branchid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqBioHeroStepDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqBioHeroStepDone)
  return false;
#undef DO_
}

void ReqBioHeroStepDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqBioHeroStepDone)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // optional uint32 stepId = 2;
  if (this->stepid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  // optional uint32 branchId = 3;
  if (this->branchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->branchid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqBioHeroStepDone)
}

::google::protobuf::uint8* ReqBioHeroStepDone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqBioHeroStepDone)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // optional uint32 stepId = 2;
  if (this->stepid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  // optional uint32 branchId = 3;
  if (this->branchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->branchid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqBioHeroStepDone)
  return target;
}

size_t ReqBioHeroStepDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqBioHeroStepDone)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 stepId = 2;
  if (this->stepid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stepid());
  }

  // optional uint32 branchId = 3;
  if (this->branchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->branchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBioHeroStepDone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqBioHeroStepDone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqBioHeroStepDone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBioHeroStepDone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqBioHeroStepDone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqBioHeroStepDone)
    UnsafeMergeFrom(*source);
  }
}

void ReqBioHeroStepDone::MergeFrom(const ReqBioHeroStepDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqBioHeroStepDone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqBioHeroStepDone::UnsafeMergeFrom(const ReqBioHeroStepDone& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.stepid() != 0) {
    set_stepid(from.stepid());
  }
  if (from.branchid() != 0) {
    set_branchid(from.branchid());
  }
}

void ReqBioHeroStepDone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqBioHeroStepDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBioHeroStepDone::CopyFrom(const ReqBioHeroStepDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqBioHeroStepDone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqBioHeroStepDone::IsInitialized() const {

  return true;
}

void ReqBioHeroStepDone::Swap(ReqBioHeroStepDone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBioHeroStepDone::InternalSwap(ReqBioHeroStepDone* other) {
  std::swap(heroclass_, other->heroclass_);
  std::swap(stepid_, other->stepid_);
  std::swap(branchid_, other->branchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBioHeroStepDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBioHeroStepDone_descriptor_;
  metadata.reflection = ReqBioHeroStepDone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBioHeroStepDone

// optional uint32 heroClass = 1;
void ReqBioHeroStepDone::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 ReqBioHeroStepDone::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBioHeroStepDone.heroClass)
  return heroclass_;
}
void ReqBioHeroStepDone::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBioHeroStepDone.heroClass)
}

// optional uint32 stepId = 2;
void ReqBioHeroStepDone::clear_stepid() {
  stepid_ = 0u;
}
::google::protobuf::uint32 ReqBioHeroStepDone::stepid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBioHeroStepDone.stepId)
  return stepid_;
}
void ReqBioHeroStepDone::set_stepid(::google::protobuf::uint32 value) {
  
  stepid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBioHeroStepDone.stepId)
}

// optional uint32 branchId = 3;
void ReqBioHeroStepDone::clear_branchid() {
  branchid_ = 0u;
}
::google::protobuf::uint32 ReqBioHeroStepDone::branchid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBioHeroStepDone.branchId)
  return branchid_;
}
void ReqBioHeroStepDone::set_branchid(::google::protobuf::uint32 value) {
  
  branchid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBioHeroStepDone.branchId)
}

inline const ReqBioHeroStepDone* ReqBioHeroStepDone::internal_default_instance() {
  return &ReqBioHeroStepDone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioHeroStepDoneAck::kHeroClassFieldNumber;
const int BioHeroStepDoneAck::kStepIdFieldNumber;
const int BioHeroStepDoneAck::kUnlockStepIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioHeroStepDoneAck::BioHeroStepDoneAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BioHeroStepDoneAck)
}

void BioHeroStepDoneAck::InitAsDefaultInstance() {
}

BioHeroStepDoneAck::BioHeroStepDoneAck(const BioHeroStepDoneAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BioHeroStepDoneAck)
}

void BioHeroStepDoneAck::SharedCtor() {
  ::memset(&heroclass_, 0, reinterpret_cast<char*>(&stepid_) -
    reinterpret_cast<char*>(&heroclass_) + sizeof(stepid_));
  _cached_size_ = 0;
}

BioHeroStepDoneAck::~BioHeroStepDoneAck() {
  // @@protoc_insertion_point(destructor:NetMsg.BioHeroStepDoneAck)
  SharedDtor();
}

void BioHeroStepDoneAck::SharedDtor() {
}

void BioHeroStepDoneAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioHeroStepDoneAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioHeroStepDoneAck_descriptor_;
}

const BioHeroStepDoneAck& BioHeroStepDoneAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BioHeroStepDoneAck> BioHeroStepDoneAck_default_instance_;

BioHeroStepDoneAck* BioHeroStepDoneAck::New(::google::protobuf::Arena* arena) const {
  BioHeroStepDoneAck* n = new BioHeroStepDoneAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioHeroStepDoneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BioHeroStepDoneAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BioHeroStepDoneAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BioHeroStepDoneAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroclass_, stepid_);

#undef ZR_HELPER_
#undef ZR_

  unlockstepids_.Clear();
}

bool BioHeroStepDoneAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BioHeroStepDoneAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroClass = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroclass_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stepId;
        break;
      }

      // optional uint32 stepId = 2;
      case 2: {
        if (tag == 16) {
         parse_stepId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unlockStepIds;
        break;
      }

      // repeated uint32 unlockStepIds = 4;
      case 4: {
        if (tag == 34) {
         parse_unlockStepIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockstepids())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_unlockstepids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BioHeroStepDoneAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BioHeroStepDoneAck)
  return false;
#undef DO_
}

void BioHeroStepDoneAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BioHeroStepDoneAck)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroclass(), output);
  }

  // optional uint32 stepId = 2;
  if (this->stepid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  // repeated uint32 unlockStepIds = 4;
  if (this->unlockstepids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_unlockstepids_cached_byte_size_);
  }
  for (int i = 0; i < this->unlockstepids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlockstepids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BioHeroStepDoneAck)
}

::google::protobuf::uint8* BioHeroStepDoneAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BioHeroStepDoneAck)
  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroclass(), target);
  }

  // optional uint32 stepId = 2;
  if (this->stepid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  // repeated uint32 unlockStepIds = 4;
  if (this->unlockstepids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _unlockstepids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->unlockstepids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlockstepids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BioHeroStepDoneAck)
  return target;
}

size_t BioHeroStepDoneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BioHeroStepDoneAck)
  size_t total_size = 0;

  // optional uint32 heroClass = 1;
  if (this->heroclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroclass());
  }

  // optional uint32 stepId = 2;
  if (this->stepid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stepid());
  }

  // repeated uint32 unlockStepIds = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->unlockstepids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockstepids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlockstepids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioHeroStepDoneAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BioHeroStepDoneAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioHeroStepDoneAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BioHeroStepDoneAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BioHeroStepDoneAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BioHeroStepDoneAck)
    UnsafeMergeFrom(*source);
  }
}

void BioHeroStepDoneAck::MergeFrom(const BioHeroStepDoneAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BioHeroStepDoneAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BioHeroStepDoneAck::UnsafeMergeFrom(const BioHeroStepDoneAck& from) {
  GOOGLE_DCHECK(&from != this);
  unlockstepids_.UnsafeMergeFrom(from.unlockstepids_);
  if (from.heroclass() != 0) {
    set_heroclass(from.heroclass());
  }
  if (from.stepid() != 0) {
    set_stepid(from.stepid());
  }
}

void BioHeroStepDoneAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BioHeroStepDoneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioHeroStepDoneAck::CopyFrom(const BioHeroStepDoneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BioHeroStepDoneAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BioHeroStepDoneAck::IsInitialized() const {

  return true;
}

void BioHeroStepDoneAck::Swap(BioHeroStepDoneAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioHeroStepDoneAck::InternalSwap(BioHeroStepDoneAck* other) {
  std::swap(heroclass_, other->heroclass_);
  std::swap(stepid_, other->stepid_);
  unlockstepids_.UnsafeArenaSwap(&other->unlockstepids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioHeroStepDoneAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioHeroStepDoneAck_descriptor_;
  metadata.reflection = BioHeroStepDoneAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioHeroStepDoneAck

// optional uint32 heroClass = 1;
void BioHeroStepDoneAck::clear_heroclass() {
  heroclass_ = 0u;
}
::google::protobuf::uint32 BioHeroStepDoneAck::heroclass() const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroStepDoneAck.heroClass)
  return heroclass_;
}
void BioHeroStepDoneAck::set_heroclass(::google::protobuf::uint32 value) {
  
  heroclass_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BioHeroStepDoneAck.heroClass)
}

// optional uint32 stepId = 2;
void BioHeroStepDoneAck::clear_stepid() {
  stepid_ = 0u;
}
::google::protobuf::uint32 BioHeroStepDoneAck::stepid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroStepDoneAck.stepId)
  return stepid_;
}
void BioHeroStepDoneAck::set_stepid(::google::protobuf::uint32 value) {
  
  stepid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BioHeroStepDoneAck.stepId)
}

// repeated uint32 unlockStepIds = 4;
int BioHeroStepDoneAck::unlockstepids_size() const {
  return unlockstepids_.size();
}
void BioHeroStepDoneAck::clear_unlockstepids() {
  unlockstepids_.Clear();
}
::google::protobuf::uint32 BioHeroStepDoneAck::unlockstepids(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BioHeroStepDoneAck.unlockStepIds)
  return unlockstepids_.Get(index);
}
void BioHeroStepDoneAck::set_unlockstepids(int index, ::google::protobuf::uint32 value) {
  unlockstepids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.BioHeroStepDoneAck.unlockStepIds)
}
void BioHeroStepDoneAck::add_unlockstepids(::google::protobuf::uint32 value) {
  unlockstepids_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.BioHeroStepDoneAck.unlockStepIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BioHeroStepDoneAck::unlockstepids() const {
  // @@protoc_insertion_point(field_list:NetMsg.BioHeroStepDoneAck.unlockStepIds)
  return unlockstepids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BioHeroStepDoneAck::mutable_unlockstepids() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BioHeroStepDoneAck.unlockStepIds)
  return &unlockstepids_;
}

inline const BioHeroStepDoneAck* BioHeroStepDoneAck::internal_default_instance() {
  return &BioHeroStepDoneAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAddFriend::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAddFriend::ReqAddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqAddFriend)
}

void ReqAddFriend::InitAsDefaultInstance() {
}

ReqAddFriend::ReqAddFriend(const ReqAddFriend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqAddFriend)
}

void ReqAddFriend::SharedCtor() {
  userid_ = 0u;
  _cached_size_ = 0;
}

ReqAddFriend::~ReqAddFriend() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqAddFriend)
  SharedDtor();
}

void ReqAddFriend::SharedDtor() {
}

void ReqAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAddFriend_descriptor_;
}

const ReqAddFriend& ReqAddFriend::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqAddFriend> ReqAddFriend_default_instance_;

ReqAddFriend* ReqAddFriend::New(::google::protobuf::Arena* arena) const {
  ReqAddFriend* n = new ReqAddFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqAddFriend)
  userid_ = 0u;
}

bool ReqAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqAddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqAddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqAddFriend)
  return false;
#undef DO_
}

void ReqAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqAddFriend)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqAddFriend)
}

::google::protobuf::uint8* ReqAddFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqAddFriend)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqAddFriend)
  return target;
}

size_t ReqAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqAddFriend)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqAddFriend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqAddFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAddFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqAddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqAddFriend)
    UnsafeMergeFrom(*source);
  }
}

void ReqAddFriend::MergeFrom(const ReqAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqAddFriend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqAddFriend::UnsafeMergeFrom(const ReqAddFriend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ReqAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddFriend::CopyFrom(const ReqAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqAddFriend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqAddFriend::IsInitialized() const {

  return true;
}

void ReqAddFriend::Swap(ReqAddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAddFriend::InternalSwap(ReqAddFriend* other) {
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAddFriend_descriptor_;
  metadata.reflection = ReqAddFriend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAddFriend

// optional uint32 userId = 1;
void ReqAddFriend::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 ReqAddFriend::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqAddFriend.userId)
  return userid_;
}
void ReqAddFriend::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqAddFriend.userId)
}

inline const ReqAddFriend* ReqAddFriend::internal_default_instance() {
  return &ReqAddFriend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRemoveFriend::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRemoveFriend::ReqRemoveFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqRemoveFriend)
}

void ReqRemoveFriend::InitAsDefaultInstance() {
}

ReqRemoveFriend::ReqRemoveFriend(const ReqRemoveFriend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqRemoveFriend)
}

void ReqRemoveFriend::SharedCtor() {
  userid_ = 0u;
  _cached_size_ = 0;
}

ReqRemoveFriend::~ReqRemoveFriend() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqRemoveFriend)
  SharedDtor();
}

void ReqRemoveFriend::SharedDtor() {
}

void ReqRemoveFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRemoveFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRemoveFriend_descriptor_;
}

const ReqRemoveFriend& ReqRemoveFriend::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqRemoveFriend> ReqRemoveFriend_default_instance_;

ReqRemoveFriend* ReqRemoveFriend::New(::google::protobuf::Arena* arena) const {
  ReqRemoveFriend* n = new ReqRemoveFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRemoveFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqRemoveFriend)
  userid_ = 0u;
}

bool ReqRemoveFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqRemoveFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqRemoveFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqRemoveFriend)
  return false;
#undef DO_
}

void ReqRemoveFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqRemoveFriend)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqRemoveFriend)
}

::google::protobuf::uint8* ReqRemoveFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqRemoveFriend)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqRemoveFriend)
  return target;
}

size_t ReqRemoveFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqRemoveFriend)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRemoveFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqRemoveFriend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqRemoveFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRemoveFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqRemoveFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqRemoveFriend)
    UnsafeMergeFrom(*source);
  }
}

void ReqRemoveFriend::MergeFrom(const ReqRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqRemoveFriend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqRemoveFriend::UnsafeMergeFrom(const ReqRemoveFriend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ReqRemoveFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqRemoveFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRemoveFriend::CopyFrom(const ReqRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqRemoveFriend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqRemoveFriend::IsInitialized() const {

  return true;
}

void ReqRemoveFriend::Swap(ReqRemoveFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRemoveFriend::InternalSwap(ReqRemoveFriend* other) {
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRemoveFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRemoveFriend_descriptor_;
  metadata.reflection = ReqRemoveFriend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRemoveFriend

// optional uint32 userId = 1;
void ReqRemoveFriend::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 ReqRemoveFriend::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqRemoveFriend.userId)
  return userid_;
}
void ReqRemoveFriend::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqRemoveFriend.userId)
}

inline const ReqRemoveFriend* ReqRemoveFriend::internal_default_instance() {
  return &ReqRemoveFriend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveFriendAck::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveFriendAck::RemoveFriendAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RemoveFriendAck)
}

void RemoveFriendAck::InitAsDefaultInstance() {
}

RemoveFriendAck::RemoveFriendAck(const RemoveFriendAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RemoveFriendAck)
}

void RemoveFriendAck::SharedCtor() {
  userid_ = 0u;
  _cached_size_ = 0;
}

RemoveFriendAck::~RemoveFriendAck() {
  // @@protoc_insertion_point(destructor:NetMsg.RemoveFriendAck)
  SharedDtor();
}

void RemoveFriendAck::SharedDtor() {
}

void RemoveFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFriendAck_descriptor_;
}

const RemoveFriendAck& RemoveFriendAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RemoveFriendAck> RemoveFriendAck_default_instance_;

RemoveFriendAck* RemoveFriendAck::New(::google::protobuf::Arena* arena) const {
  RemoveFriendAck* n = new RemoveFriendAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveFriendAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RemoveFriendAck)
  userid_ = 0u;
}

bool RemoveFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RemoveFriendAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RemoveFriendAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RemoveFriendAck)
  return false;
#undef DO_
}

void RemoveFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RemoveFriendAck)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RemoveFriendAck)
}

::google::protobuf::uint8* RemoveFriendAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RemoveFriendAck)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RemoveFriendAck)
  return target;
}

size_t RemoveFriendAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RemoveFriendAck)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RemoveFriendAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RemoveFriendAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveFriendAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RemoveFriendAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RemoveFriendAck)
    UnsafeMergeFrom(*source);
  }
}

void RemoveFriendAck::MergeFrom(const RemoveFriendAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RemoveFriendAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RemoveFriendAck::UnsafeMergeFrom(const RemoveFriendAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void RemoveFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RemoveFriendAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFriendAck::CopyFrom(const RemoveFriendAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RemoveFriendAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RemoveFriendAck::IsInitialized() const {

  return true;
}

void RemoveFriendAck::Swap(RemoveFriendAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveFriendAck::InternalSwap(RemoveFriendAck* other) {
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveFriendAck_descriptor_;
  metadata.reflection = RemoveFriendAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveFriendAck

// optional uint32 userId = 1;
void RemoveFriendAck::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 RemoveFriendAck::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.RemoveFriendAck.userId)
  return userid_;
}
void RemoveFriendAck::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RemoveFriendAck.userId)
}

inline const RemoveFriendAck* RemoveFriendAck::internal_default_instance() {
  return &RemoveFriendAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTopList::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTopList::ReqTopList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqTopList)
}

void ReqTopList::InitAsDefaultInstance() {
}

ReqTopList::ReqTopList(const ReqTopList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqTopList)
}

void ReqTopList::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

ReqTopList::~ReqTopList() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqTopList)
  SharedDtor();
}

void ReqTopList::SharedDtor() {
}

void ReqTopList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTopList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTopList_descriptor_;
}

const ReqTopList& ReqTopList::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqTopList> ReqTopList_default_instance_;

ReqTopList* ReqTopList::New(::google::protobuf::Arena* arena) const {
  ReqTopList* n = new ReqTopList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqTopList::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqTopList)
  type_ = 0;
}

bool ReqTopList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqTopList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.TopListType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::TopListType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqTopList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqTopList)
  return false;
#undef DO_
}

void ReqTopList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqTopList)
  // optional .NetMsg.TopListType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqTopList)
}

::google::protobuf::uint8* ReqTopList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqTopList)
  // optional .NetMsg.TopListType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqTopList)
  return target;
}

size_t ReqTopList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqTopList)
  size_t total_size = 0;

  // optional .NetMsg.TopListType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTopList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqTopList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqTopList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTopList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqTopList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqTopList)
    UnsafeMergeFrom(*source);
  }
}

void ReqTopList::MergeFrom(const ReqTopList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqTopList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqTopList::UnsafeMergeFrom(const ReqTopList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqTopList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqTopList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTopList::CopyFrom(const ReqTopList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqTopList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqTopList::IsInitialized() const {

  return true;
}

void ReqTopList::Swap(ReqTopList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTopList::InternalSwap(ReqTopList* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTopList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTopList_descriptor_;
  metadata.reflection = ReqTopList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqTopList

// optional .NetMsg.TopListType type = 1;
void ReqTopList::clear_type() {
  type_ = 0;
}
::NetMsg::TopListType ReqTopList::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTopList.type)
  return static_cast< ::NetMsg::TopListType >(type_);
}
void ReqTopList::set_type(::NetMsg::TopListType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTopList.type)
}

inline const ReqTopList* ReqTopList::internal_default_instance() {
  return &ReqTopList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopListAck::kTypeFieldNumber;
const int TopListAck::kTopDataFieldNumber;
const int TopListAck::kMyRankingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopListAck::TopListAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TopListAck)
}

void TopListAck::InitAsDefaultInstance() {
}

TopListAck::TopListAck(const TopListAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TopListAck)
}

void TopListAck::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&myranking_) -
    reinterpret_cast<char*>(&type_) + sizeof(myranking_));
  _cached_size_ = 0;
}

TopListAck::~TopListAck() {
  // @@protoc_insertion_point(destructor:NetMsg.TopListAck)
  SharedDtor();
}

void TopListAck::SharedDtor() {
}

void TopListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopListAck_descriptor_;
}

const TopListAck& TopListAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopListAck> TopListAck_default_instance_;

TopListAck* TopListAck::New(::google::protobuf::Arena* arena) const {
  TopListAck* n = new TopListAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TopListAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopListAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopListAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, myranking_);

#undef ZR_HELPER_
#undef ZR_

  topdata_.Clear();
}

bool TopListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TopListAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.TopListType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::TopListType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topData;
        break;
      }

      // repeated .NetMsg.TopListData topData = 2;
      case 2: {
        if (tag == 18) {
         parse_topData:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_topData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_myRanking;
        break;
      }

      // optional uint32 myRanking = 3;
      case 3: {
        if (tag == 24) {
         parse_myRanking:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myranking_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TopListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TopListAck)
  return false;
#undef DO_
}

void TopListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TopListAck)
  // optional .NetMsg.TopListType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .NetMsg.TopListData topData = 2;
  for (unsigned int i = 0, n = this->topdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->topdata(i), output);
  }

  // optional uint32 myRanking = 3;
  if (this->myranking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myranking(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TopListAck)
}

::google::protobuf::uint8* TopListAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TopListAck)
  // optional .NetMsg.TopListType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .NetMsg.TopListData topData = 2;
  for (unsigned int i = 0, n = this->topdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->topdata(i), false, target);
  }

  // optional uint32 myRanking = 3;
  if (this->myranking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myranking(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TopListAck)
  return target;
}

size_t TopListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TopListAck)
  size_t total_size = 0;

  // optional .NetMsg.TopListType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 myRanking = 3;
  if (this->myranking() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->myranking());
  }

  // repeated .NetMsg.TopListData topData = 2;
  {
    unsigned int count = this->topdata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topdata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TopListAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopListAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopListAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TopListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TopListAck)
    UnsafeMergeFrom(*source);
  }
}

void TopListAck::MergeFrom(const TopListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TopListAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopListAck::UnsafeMergeFrom(const TopListAck& from) {
  GOOGLE_DCHECK(&from != this);
  topdata_.MergeFrom(from.topdata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.myranking() != 0) {
    set_myranking(from.myranking());
  }
}

void TopListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TopListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopListAck::CopyFrom(const TopListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TopListAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopListAck::IsInitialized() const {

  return true;
}

void TopListAck::Swap(TopListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopListAck::InternalSwap(TopListAck* other) {
  std::swap(type_, other->type_);
  topdata_.UnsafeArenaSwap(&other->topdata_);
  std::swap(myranking_, other->myranking_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopListAck_descriptor_;
  metadata.reflection = TopListAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopListAck

// optional .NetMsg.TopListType type = 1;
void TopListAck::clear_type() {
  type_ = 0;
}
::NetMsg::TopListType TopListAck::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.TopListAck.type)
  return static_cast< ::NetMsg::TopListType >(type_);
}
void TopListAck::set_type(::NetMsg::TopListType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TopListAck.type)
}

// repeated .NetMsg.TopListData topData = 2;
int TopListAck::topdata_size() const {
  return topdata_.size();
}
void TopListAck::clear_topdata() {
  topdata_.Clear();
}
const ::NetMsg::TopListData& TopListAck::topdata(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.TopListAck.topData)
  return topdata_.Get(index);
}
::NetMsg::TopListData* TopListAck::mutable_topdata(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.TopListAck.topData)
  return topdata_.Mutable(index);
}
::NetMsg::TopListData* TopListAck::add_topdata() {
  // @@protoc_insertion_point(field_add:NetMsg.TopListAck.topData)
  return topdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::TopListData >*
TopListAck::mutable_topdata() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.TopListAck.topData)
  return &topdata_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::TopListData >&
TopListAck::topdata() const {
  // @@protoc_insertion_point(field_list:NetMsg.TopListAck.topData)
  return topdata_;
}

// optional uint32 myRanking = 3;
void TopListAck::clear_myranking() {
  myranking_ = 0u;
}
::google::protobuf::uint32 TopListAck::myranking() const {
  // @@protoc_insertion_point(field_get:NetMsg.TopListAck.myRanking)
  return myranking_;
}
void TopListAck::set_myranking(::google::protobuf::uint32 value) {
  
  myranking_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TopListAck.myRanking)
}

inline const TopListAck* TopListAck::internal_default_instance() {
  return &TopListAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopListData::kSortReputationFieldNumber;
const int TopListData::kSortMilitaryFieldNumber;
const int TopListData::kSortLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopListData::TopListData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TopListData)
}

void TopListData::InitAsDefaultInstance() {
  TopListData_default_oneof_instance_->sortreputation_ = const_cast< ::NetMsg::SortReputationData*>(
      ::NetMsg::SortReputationData::internal_default_instance());
  TopListData_default_oneof_instance_->sortmilitary_ = const_cast< ::NetMsg::SortMilitaryData*>(
      ::NetMsg::SortMilitaryData::internal_default_instance());
  TopListData_default_oneof_instance_->sortlevel_ = const_cast< ::NetMsg::SortLevelData*>(
      ::NetMsg::SortLevelData::internal_default_instance());
}

TopListData::TopListData(const TopListData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TopListData)
}

void TopListData::SharedCtor() {
  clear_has_info();
  _cached_size_ = 0;
}

TopListData::~TopListData() {
  // @@protoc_insertion_point(destructor:NetMsg.TopListData)
  SharedDtor();
}

void TopListData::SharedDtor() {
  if (has_info()) {
    clear_info();
  }
}

void TopListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopListData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopListData_descriptor_;
}

const TopListData& TopListData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopListData> TopListData_default_instance_;

TopListData* TopListData::New(::google::protobuf::Arena* arena) const {
  TopListData* n = new TopListData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopListData::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:NetMsg.TopListData)
  switch (info_case()) {
    case kSortReputation: {
      delete info_.sortreputation_;
      break;
    }
    case kSortMilitary: {
      delete info_.sortmilitary_;
      break;
    }
    case kSortLevel: {
      delete info_.sortlevel_;
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_NOT_SET;
}


void TopListData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TopListData)
  clear_info();
}

bool TopListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TopListData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.SortReputationData sortReputation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sortreputation()));
        } else {
          goto handle_unusual;
        }
        goto after_sortlevel;
        break;
      }

      // optional .NetMsg.SortMilitaryData sortMilitary = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sortmilitary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sortLevel;
        break;
      }

      // optional .NetMsg.SortLevelData sortLevel = 3;
      case 3: {
        if (tag == 26) {
         parse_sortLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sortlevel()));
        } else {
          goto handle_unusual;
        }
       after_sortlevel:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TopListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TopListData)
  return false;
#undef DO_
}

void TopListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TopListData)
  // optional .NetMsg.SortReputationData sortReputation = 1;
  if (has_sortreputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *info_.sortreputation_, output);
  }

  // optional .NetMsg.SortMilitaryData sortMilitary = 2;
  if (has_sortmilitary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *info_.sortmilitary_, output);
  }

  // optional .NetMsg.SortLevelData sortLevel = 3;
  if (has_sortlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *info_.sortlevel_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TopListData)
}

::google::protobuf::uint8* TopListData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TopListData)
  // optional .NetMsg.SortReputationData sortReputation = 1;
  if (has_sortreputation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *info_.sortreputation_, false, target);
  }

  // optional .NetMsg.SortMilitaryData sortMilitary = 2;
  if (has_sortmilitary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *info_.sortmilitary_, false, target);
  }

  // optional .NetMsg.SortLevelData sortLevel = 3;
  if (has_sortlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *info_.sortlevel_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TopListData)
  return target;
}

size_t TopListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TopListData)
  size_t total_size = 0;

  switch (info_case()) {
    // optional .NetMsg.SortReputationData sortReputation = 1;
    case kSortReputation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.sortreputation_);
      break;
    }
    // optional .NetMsg.SortMilitaryData sortMilitary = 2;
    case kSortMilitary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.sortmilitary_);
      break;
    }
    // optional .NetMsg.SortLevelData sortLevel = 3;
    case kSortLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.sortlevel_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopListData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TopListData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopListData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopListData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TopListData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TopListData)
    UnsafeMergeFrom(*source);
  }
}

void TopListData::MergeFrom(const TopListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TopListData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopListData::UnsafeMergeFrom(const TopListData& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.info_case()) {
    case kSortReputation: {
      mutable_sortreputation()->::NetMsg::SortReputationData::MergeFrom(from.sortreputation());
      break;
    }
    case kSortMilitary: {
      mutable_sortmilitary()->::NetMsg::SortMilitaryData::MergeFrom(from.sortmilitary());
      break;
    }
    case kSortLevel: {
      mutable_sortlevel()->::NetMsg::SortLevelData::MergeFrom(from.sortlevel());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
}

void TopListData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TopListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopListData::CopyFrom(const TopListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TopListData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopListData::IsInitialized() const {

  return true;
}

void TopListData::Swap(TopListData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopListData::InternalSwap(TopListData* other) {
  std::swap(info_, other->info_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopListData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopListData_descriptor_;
  metadata.reflection = TopListData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopListData

// optional .NetMsg.SortReputationData sortReputation = 1;
bool TopListData::has_sortreputation() const {
  return info_case() == kSortReputation;
}
void TopListData::set_has_sortreputation() {
  _oneof_case_[0] = kSortReputation;
}
void TopListData::clear_sortreputation() {
  if (has_sortreputation()) {
    delete info_.sortreputation_;
    clear_has_info();
  }
}
 const ::NetMsg::SortReputationData& TopListData::sortreputation() const {
  // @@protoc_insertion_point(field_get:NetMsg.TopListData.sortReputation)
  return has_sortreputation()
      ? *info_.sortreputation_
      : ::NetMsg::SortReputationData::default_instance();
}
::NetMsg::SortReputationData* TopListData::mutable_sortreputation() {
  if (!has_sortreputation()) {
    clear_info();
    set_has_sortreputation();
    info_.sortreputation_ = new ::NetMsg::SortReputationData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.TopListData.sortReputation)
  return info_.sortreputation_;
}
::NetMsg::SortReputationData* TopListData::release_sortreputation() {
  // @@protoc_insertion_point(field_release:NetMsg.TopListData.sortReputation)
  if (has_sortreputation()) {
    clear_has_info();
    ::NetMsg::SortReputationData* temp = info_.sortreputation_;
    info_.sortreputation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopListData::set_allocated_sortreputation(::NetMsg::SortReputationData* sortreputation) {
  clear_info();
  if (sortreputation) {
    set_has_sortreputation();
    info_.sortreputation_ = sortreputation;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TopListData.sortReputation)
}

// optional .NetMsg.SortMilitaryData sortMilitary = 2;
bool TopListData::has_sortmilitary() const {
  return info_case() == kSortMilitary;
}
void TopListData::set_has_sortmilitary() {
  _oneof_case_[0] = kSortMilitary;
}
void TopListData::clear_sortmilitary() {
  if (has_sortmilitary()) {
    delete info_.sortmilitary_;
    clear_has_info();
  }
}
 const ::NetMsg::SortMilitaryData& TopListData::sortmilitary() const {
  // @@protoc_insertion_point(field_get:NetMsg.TopListData.sortMilitary)
  return has_sortmilitary()
      ? *info_.sortmilitary_
      : ::NetMsg::SortMilitaryData::default_instance();
}
::NetMsg::SortMilitaryData* TopListData::mutable_sortmilitary() {
  if (!has_sortmilitary()) {
    clear_info();
    set_has_sortmilitary();
    info_.sortmilitary_ = new ::NetMsg::SortMilitaryData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.TopListData.sortMilitary)
  return info_.sortmilitary_;
}
::NetMsg::SortMilitaryData* TopListData::release_sortmilitary() {
  // @@protoc_insertion_point(field_release:NetMsg.TopListData.sortMilitary)
  if (has_sortmilitary()) {
    clear_has_info();
    ::NetMsg::SortMilitaryData* temp = info_.sortmilitary_;
    info_.sortmilitary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopListData::set_allocated_sortmilitary(::NetMsg::SortMilitaryData* sortmilitary) {
  clear_info();
  if (sortmilitary) {
    set_has_sortmilitary();
    info_.sortmilitary_ = sortmilitary;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TopListData.sortMilitary)
}

// optional .NetMsg.SortLevelData sortLevel = 3;
bool TopListData::has_sortlevel() const {
  return info_case() == kSortLevel;
}
void TopListData::set_has_sortlevel() {
  _oneof_case_[0] = kSortLevel;
}
void TopListData::clear_sortlevel() {
  if (has_sortlevel()) {
    delete info_.sortlevel_;
    clear_has_info();
  }
}
 const ::NetMsg::SortLevelData& TopListData::sortlevel() const {
  // @@protoc_insertion_point(field_get:NetMsg.TopListData.sortLevel)
  return has_sortlevel()
      ? *info_.sortlevel_
      : ::NetMsg::SortLevelData::default_instance();
}
::NetMsg::SortLevelData* TopListData::mutable_sortlevel() {
  if (!has_sortlevel()) {
    clear_info();
    set_has_sortlevel();
    info_.sortlevel_ = new ::NetMsg::SortLevelData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.TopListData.sortLevel)
  return info_.sortlevel_;
}
::NetMsg::SortLevelData* TopListData::release_sortlevel() {
  // @@protoc_insertion_point(field_release:NetMsg.TopListData.sortLevel)
  if (has_sortlevel()) {
    clear_has_info();
    ::NetMsg::SortLevelData* temp = info_.sortlevel_;
    info_.sortlevel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopListData::set_allocated_sortlevel(::NetMsg::SortLevelData* sortlevel) {
  clear_info();
  if (sortlevel) {
    set_has_sortlevel();
    info_.sortlevel_ = sortlevel;
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TopListData.sortLevel)
}

bool TopListData::has_info() const {
  return info_case() != INFO_NOT_SET;
}
void TopListData::clear_has_info() {
  _oneof_case_[0] = INFO_NOT_SET;
}
TopListData::InfoCase TopListData::info_case() const {
  return TopListData::InfoCase(_oneof_case_[0]);
}
inline const TopListData* TopListData::internal_default_instance() {
  return &TopListData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SortReputationData::kUserIDFieldNumber;
const int SortReputationData::kSortIDFieldNumber;
const int SortReputationData::kPlayerNameFieldNumber;
const int SortReputationData::kForceFieldNumber;
const int SortReputationData::kLevelFieldNumber;
const int SortReputationData::kTitleFieldNumber;
const int SortReputationData::kReputationFieldNumber;
const int SortReputationData::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SortReputationData::SortReputationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SortReputationData)
}

void SortReputationData::InitAsDefaultInstance() {
}

SortReputationData::SortReputationData(const SortReputationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SortReputationData)
}

void SortReputationData::SharedCtor() {
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&icon_) -
    reinterpret_cast<char*>(&userid_) + sizeof(icon_));
  _cached_size_ = 0;
}

SortReputationData::~SortReputationData() {
  // @@protoc_insertion_point(destructor:NetMsg.SortReputationData)
  SharedDtor();
}

void SortReputationData::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SortReputationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortReputationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortReputationData_descriptor_;
}

const SortReputationData& SortReputationData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SortReputationData> SortReputationData_default_instance_;

SortReputationData* SortReputationData::New(::google::protobuf::Arena* arena) const {
  SortReputationData* n = new SortReputationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SortReputationData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SortReputationData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SortReputationData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SortReputationData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, icon_);
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SortReputationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SortReputationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sortID;
        break;
      }

      // optional uint32 sortID = 2;
      case 2: {
        if (tag == 16) {
         parse_sortID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.SortReputationData.playerName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_force;
        break;
      }

      // optional uint32 force = 4;
      case 4: {
        if (tag == 32) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_title;
        break;
      }

      // optional uint32 title = 6;
      case 6: {
        if (tag == 48) {
         parse_title:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reputation;
        break;
      }

      // optional uint32 reputation = 7;
      case 7: {
        if (tag == 56) {
         parse_reputation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reputation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_icon;
        break;
      }

      // optional uint32 icon = 8;
      case 8: {
        if (tag == 64) {
         parse_icon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SortReputationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SortReputationData)
  return false;
#undef DO_
}

void SortReputationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SortReputationData)
  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortid(), output);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.SortReputationData.playerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->force(), output);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->title(), output);
  }

  // optional uint32 reputation = 7;
  if (this->reputation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reputation(), output);
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->icon(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SortReputationData)
}

::google::protobuf::uint8* SortReputationData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SortReputationData)
  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortid(), target);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.SortReputationData.playerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->force(), target);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->title(), target);
  }

  // optional uint32 reputation = 7;
  if (this->reputation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reputation(), target);
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->icon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SortReputationData)
  return target;
}

size_t SortReputationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SortReputationData)
  size_t total_size = 0;

  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sortid());
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 reputation = 7;
  if (this->reputation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reputation());
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortReputationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SortReputationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SortReputationData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SortReputationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SortReputationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SortReputationData)
    UnsafeMergeFrom(*source);
  }
}

void SortReputationData::MergeFrom(const SortReputationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SortReputationData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SortReputationData::UnsafeMergeFrom(const SortReputationData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.sortid() != 0) {
    set_sortid(from.sortid());
  }
  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.reputation() != 0) {
    set_reputation(from.reputation());
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
}

void SortReputationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SortReputationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortReputationData::CopyFrom(const SortReputationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SortReputationData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SortReputationData::IsInitialized() const {

  return true;
}

void SortReputationData::Swap(SortReputationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SortReputationData::InternalSwap(SortReputationData* other) {
  std::swap(userid_, other->userid_);
  std::swap(sortid_, other->sortid_);
  playername_.Swap(&other->playername_);
  std::swap(force_, other->force_);
  std::swap(level_, other->level_);
  std::swap(title_, other->title_);
  std::swap(reputation_, other->reputation_);
  std::swap(icon_, other->icon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SortReputationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortReputationData_descriptor_;
  metadata.reflection = SortReputationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SortReputationData

// optional uint32 userID = 1;
void SortReputationData::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 SortReputationData::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.userID)
  return userid_;
}
void SortReputationData::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.userID)
}

// optional uint32 sortID = 2;
void SortReputationData::clear_sortid() {
  sortid_ = 0u;
}
::google::protobuf::uint32 SortReputationData::sortid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.sortID)
  return sortid_;
}
void SortReputationData::set_sortid(::google::protobuf::uint32 value) {
  
  sortid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.sortID)
}

// optional string playerName = 3;
void SortReputationData::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SortReputationData::playername() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.playerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SortReputationData::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.playerName)
}
void SortReputationData::set_playername(const char* value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.SortReputationData.playerName)
}
void SortReputationData::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.SortReputationData.playerName)
}
::std::string* SortReputationData::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.SortReputationData.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SortReputationData::release_playername() {
  // @@protoc_insertion_point(field_release:NetMsg.SortReputationData.playerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SortReputationData::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.SortReputationData.playerName)
}

// optional uint32 force = 4;
void SortReputationData::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 SortReputationData::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.force)
  return force_;
}
void SortReputationData::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.force)
}

// optional uint32 level = 5;
void SortReputationData::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 SortReputationData::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.level)
  return level_;
}
void SortReputationData::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.level)
}

// optional uint32 title = 6;
void SortReputationData::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 SortReputationData::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.title)
  return title_;
}
void SortReputationData::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.title)
}

// optional uint32 reputation = 7;
void SortReputationData::clear_reputation() {
  reputation_ = 0u;
}
::google::protobuf::uint32 SortReputationData::reputation() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.reputation)
  return reputation_;
}
void SortReputationData::set_reputation(::google::protobuf::uint32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.reputation)
}

// optional uint32 icon = 8;
void SortReputationData::clear_icon() {
  icon_ = 0u;
}
::google::protobuf::uint32 SortReputationData::icon() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortReputationData.icon)
  return icon_;
}
void SortReputationData::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortReputationData.icon)
}

inline const SortReputationData* SortReputationData::internal_default_instance() {
  return &SortReputationData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SortMilitaryData::kUserIDFieldNumber;
const int SortMilitaryData::kSortIDFieldNumber;
const int SortMilitaryData::kPlayerNameFieldNumber;
const int SortMilitaryData::kForceFieldNumber;
const int SortMilitaryData::kLevelFieldNumber;
const int SortMilitaryData::kTitleFieldNumber;
const int SortMilitaryData::kMilitaryFieldNumber;
const int SortMilitaryData::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SortMilitaryData::SortMilitaryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SortMilitaryData)
}

void SortMilitaryData::InitAsDefaultInstance() {
}

SortMilitaryData::SortMilitaryData(const SortMilitaryData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SortMilitaryData)
}

void SortMilitaryData::SharedCtor() {
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&icon_) -
    reinterpret_cast<char*>(&userid_) + sizeof(icon_));
  _cached_size_ = 0;
}

SortMilitaryData::~SortMilitaryData() {
  // @@protoc_insertion_point(destructor:NetMsg.SortMilitaryData)
  SharedDtor();
}

void SortMilitaryData::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SortMilitaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortMilitaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortMilitaryData_descriptor_;
}

const SortMilitaryData& SortMilitaryData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SortMilitaryData> SortMilitaryData_default_instance_;

SortMilitaryData* SortMilitaryData::New(::google::protobuf::Arena* arena) const {
  SortMilitaryData* n = new SortMilitaryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SortMilitaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SortMilitaryData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SortMilitaryData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SortMilitaryData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, icon_);
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SortMilitaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SortMilitaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sortID;
        break;
      }

      // optional uint32 sortID = 2;
      case 2: {
        if (tag == 16) {
         parse_sortID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.SortMilitaryData.playerName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_force;
        break;
      }

      // optional uint32 force = 4;
      case 4: {
        if (tag == 32) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_title;
        break;
      }

      // optional uint32 title = 6;
      case 6: {
        if (tag == 48) {
         parse_title:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_military;
        break;
      }

      // optional uint32 military = 7;
      case 7: {
        if (tag == 56) {
         parse_military:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_icon;
        break;
      }

      // optional uint32 icon = 8;
      case 8: {
        if (tag == 64) {
         parse_icon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SortMilitaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SortMilitaryData)
  return false;
#undef DO_
}

void SortMilitaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SortMilitaryData)
  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortid(), output);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.SortMilitaryData.playerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->force(), output);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->title(), output);
  }

  // optional uint32 military = 7;
  if (this->military() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->military(), output);
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->icon(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SortMilitaryData)
}

::google::protobuf::uint8* SortMilitaryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SortMilitaryData)
  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortid(), target);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.SortMilitaryData.playerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->force(), target);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->title(), target);
  }

  // optional uint32 military = 7;
  if (this->military() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->military(), target);
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->icon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SortMilitaryData)
  return target;
}

size_t SortMilitaryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SortMilitaryData)
  size_t total_size = 0;

  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sortid());
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 military = 7;
  if (this->military() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->military());
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortMilitaryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SortMilitaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SortMilitaryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SortMilitaryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SortMilitaryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SortMilitaryData)
    UnsafeMergeFrom(*source);
  }
}

void SortMilitaryData::MergeFrom(const SortMilitaryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SortMilitaryData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SortMilitaryData::UnsafeMergeFrom(const SortMilitaryData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.sortid() != 0) {
    set_sortid(from.sortid());
  }
  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.military() != 0) {
    set_military(from.military());
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
}

void SortMilitaryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SortMilitaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortMilitaryData::CopyFrom(const SortMilitaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SortMilitaryData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SortMilitaryData::IsInitialized() const {

  return true;
}

void SortMilitaryData::Swap(SortMilitaryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SortMilitaryData::InternalSwap(SortMilitaryData* other) {
  std::swap(userid_, other->userid_);
  std::swap(sortid_, other->sortid_);
  playername_.Swap(&other->playername_);
  std::swap(force_, other->force_);
  std::swap(level_, other->level_);
  std::swap(title_, other->title_);
  std::swap(military_, other->military_);
  std::swap(icon_, other->icon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SortMilitaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortMilitaryData_descriptor_;
  metadata.reflection = SortMilitaryData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SortMilitaryData

// optional uint32 userID = 1;
void SortMilitaryData::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 SortMilitaryData::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.userID)
  return userid_;
}
void SortMilitaryData::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.userID)
}

// optional uint32 sortID = 2;
void SortMilitaryData::clear_sortid() {
  sortid_ = 0u;
}
::google::protobuf::uint32 SortMilitaryData::sortid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.sortID)
  return sortid_;
}
void SortMilitaryData::set_sortid(::google::protobuf::uint32 value) {
  
  sortid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.sortID)
}

// optional string playerName = 3;
void SortMilitaryData::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SortMilitaryData::playername() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.playerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SortMilitaryData::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.playerName)
}
void SortMilitaryData::set_playername(const char* value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.SortMilitaryData.playerName)
}
void SortMilitaryData::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.SortMilitaryData.playerName)
}
::std::string* SortMilitaryData::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.SortMilitaryData.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SortMilitaryData::release_playername() {
  // @@protoc_insertion_point(field_release:NetMsg.SortMilitaryData.playerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SortMilitaryData::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.SortMilitaryData.playerName)
}

// optional uint32 force = 4;
void SortMilitaryData::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 SortMilitaryData::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.force)
  return force_;
}
void SortMilitaryData::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.force)
}

// optional uint32 level = 5;
void SortMilitaryData::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 SortMilitaryData::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.level)
  return level_;
}
void SortMilitaryData::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.level)
}

// optional uint32 title = 6;
void SortMilitaryData::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 SortMilitaryData::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.title)
  return title_;
}
void SortMilitaryData::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.title)
}

// optional uint32 military = 7;
void SortMilitaryData::clear_military() {
  military_ = 0u;
}
::google::protobuf::uint32 SortMilitaryData::military() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.military)
  return military_;
}
void SortMilitaryData::set_military(::google::protobuf::uint32 value) {
  
  military_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.military)
}

// optional uint32 icon = 8;
void SortMilitaryData::clear_icon() {
  icon_ = 0u;
}
::google::protobuf::uint32 SortMilitaryData::icon() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortMilitaryData.icon)
  return icon_;
}
void SortMilitaryData::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortMilitaryData.icon)
}

inline const SortMilitaryData* SortMilitaryData::internal_default_instance() {
  return &SortMilitaryData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SortLevelData::kUserIDFieldNumber;
const int SortLevelData::kSortIDFieldNumber;
const int SortLevelData::kPlayerNameFieldNumber;
const int SortLevelData::kForceFieldNumber;
const int SortLevelData::kTitleFieldNumber;
const int SortLevelData::kMilitaryFieldNumber;
const int SortLevelData::kLevelFieldNumber;
const int SortLevelData::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SortLevelData::SortLevelData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SortLevelData)
}

void SortLevelData::InitAsDefaultInstance() {
}

SortLevelData::SortLevelData(const SortLevelData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SortLevelData)
}

void SortLevelData::SharedCtor() {
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&icon_) -
    reinterpret_cast<char*>(&userid_) + sizeof(icon_));
  _cached_size_ = 0;
}

SortLevelData::~SortLevelData() {
  // @@protoc_insertion_point(destructor:NetMsg.SortLevelData)
  SharedDtor();
}

void SortLevelData::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SortLevelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortLevelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortLevelData_descriptor_;
}

const SortLevelData& SortLevelData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SortLevelData> SortLevelData_default_instance_;

SortLevelData* SortLevelData::New(::google::protobuf::Arena* arena) const {
  SortLevelData* n = new SortLevelData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SortLevelData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SortLevelData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SortLevelData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SortLevelData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, icon_);
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SortLevelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SortLevelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sortID;
        break;
      }

      // optional uint32 sortID = 2;
      case 2: {
        if (tag == 16) {
         parse_sortID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.SortLevelData.playerName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_force;
        break;
      }

      // optional uint32 force = 4;
      case 4: {
        if (tag == 32) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_title;
        break;
      }

      // optional uint32 title = 5;
      case 5: {
        if (tag == 40) {
         parse_title:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_military;
        break;
      }

      // optional uint32 military = 6;
      case 6: {
        if (tag == 48) {
         parse_military:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_icon;
        break;
      }

      // optional uint32 icon = 8;
      case 8: {
        if (tag == 64) {
         parse_icon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SortLevelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SortLevelData)
  return false;
#undef DO_
}

void SortLevelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SortLevelData)
  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortid(), output);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.SortLevelData.playerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->force(), output);
  }

  // optional uint32 title = 5;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->title(), output);
  }

  // optional uint32 military = 6;
  if (this->military() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->military(), output);
  }

  // optional uint32 level = 7;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->icon(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SortLevelData)
}

::google::protobuf::uint8* SortLevelData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SortLevelData)
  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortid(), target);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.SortLevelData.playerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->force(), target);
  }

  // optional uint32 title = 5;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->title(), target);
  }

  // optional uint32 military = 6;
  if (this->military() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->military(), target);
  }

  // optional uint32 level = 7;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->icon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SortLevelData)
  return target;
}

size_t SortLevelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SortLevelData)
  size_t total_size = 0;

  // optional uint32 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional uint32 sortID = 2;
  if (this->sortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sortid());
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional uint32 title = 5;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 military = 6;
  if (this->military() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->military());
  }

  // optional uint32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 icon = 8;
  if (this->icon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortLevelData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SortLevelData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SortLevelData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SortLevelData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SortLevelData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SortLevelData)
    UnsafeMergeFrom(*source);
  }
}

void SortLevelData::MergeFrom(const SortLevelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SortLevelData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SortLevelData::UnsafeMergeFrom(const SortLevelData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.sortid() != 0) {
    set_sortid(from.sortid());
  }
  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.military() != 0) {
    set_military(from.military());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
}

void SortLevelData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SortLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortLevelData::CopyFrom(const SortLevelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SortLevelData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SortLevelData::IsInitialized() const {

  return true;
}

void SortLevelData::Swap(SortLevelData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SortLevelData::InternalSwap(SortLevelData* other) {
  std::swap(userid_, other->userid_);
  std::swap(sortid_, other->sortid_);
  playername_.Swap(&other->playername_);
  std::swap(force_, other->force_);
  std::swap(title_, other->title_);
  std::swap(military_, other->military_);
  std::swap(level_, other->level_);
  std::swap(icon_, other->icon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SortLevelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortLevelData_descriptor_;
  metadata.reflection = SortLevelData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SortLevelData

// optional uint32 userID = 1;
void SortLevelData::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 SortLevelData::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.userID)
  return userid_;
}
void SortLevelData::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.userID)
}

// optional uint32 sortID = 2;
void SortLevelData::clear_sortid() {
  sortid_ = 0u;
}
::google::protobuf::uint32 SortLevelData::sortid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.sortID)
  return sortid_;
}
void SortLevelData::set_sortid(::google::protobuf::uint32 value) {
  
  sortid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.sortID)
}

// optional string playerName = 3;
void SortLevelData::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SortLevelData::playername() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.playerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SortLevelData::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.playerName)
}
void SortLevelData::set_playername(const char* value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.SortLevelData.playerName)
}
void SortLevelData::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.SortLevelData.playerName)
}
::std::string* SortLevelData::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.SortLevelData.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SortLevelData::release_playername() {
  // @@protoc_insertion_point(field_release:NetMsg.SortLevelData.playerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SortLevelData::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.SortLevelData.playerName)
}

// optional uint32 force = 4;
void SortLevelData::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 SortLevelData::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.force)
  return force_;
}
void SortLevelData::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.force)
}

// optional uint32 title = 5;
void SortLevelData::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 SortLevelData::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.title)
  return title_;
}
void SortLevelData::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.title)
}

// optional uint32 military = 6;
void SortLevelData::clear_military() {
  military_ = 0u;
}
::google::protobuf::uint32 SortLevelData::military() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.military)
  return military_;
}
void SortLevelData::set_military(::google::protobuf::uint32 value) {
  
  military_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.military)
}

// optional uint32 level = 7;
void SortLevelData::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 SortLevelData::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.level)
  return level_;
}
void SortLevelData::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.level)
}

// optional uint32 icon = 8;
void SortLevelData::clear_icon() {
  icon_ = 0u;
}
::google::protobuf::uint32 SortLevelData::icon() const {
  // @@protoc_insertion_point(field_get:NetMsg.SortLevelData.icon)
  return icon_;
}
void SortLevelData::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SortLevelData.icon)
}

inline const SortLevelData* SortLevelData::internal_default_instance() {
  return &SortLevelData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendInfo::kUserIdFieldNumber;
const int FriendInfo::kNameFieldNumber;
const int FriendInfo::kIconFieldNumber;
const int FriendInfo::kForceFieldNumber;
const int FriendInfo::kRankFieldNumber;
const int FriendInfo::kTitleFieldNumber;
const int FriendInfo::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendInfo::FriendInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.FriendInfo)
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.FriendInfo)
}

void FriendInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&userid_) + sizeof(online_));
  _cached_size_ = 0;
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.FriendInfo)
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FriendInfo> FriendInfo_default_instance_;

FriendInfo* FriendInfo::New(::google::protobuf::Arena* arena) const {
  FriendInfo* n = new FriendInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.FriendInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FriendInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FriendInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, online_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.FriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.FriendInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_icon;
        break;
      }

      // optional uint32 icon = 3;
      case 3: {
        if (tag == 24) {
         parse_icon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_force;
        break;
      }

      // optional uint32 force = 4;
      case 4: {
        if (tag == 32) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 5;
      case 5: {
        if (tag == 40) {
         parse_rank:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_title;
        break;
      }

      // optional uint32 title = 6;
      case 6: {
        if (tag == 48) {
         parse_title:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_online;
        break;
      }

      // optional bool online = 7;
      case 7: {
        if (tag == 56) {
         parse_online:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.FriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.FriendInfo)
  return false;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.FriendInfo)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.FriendInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 icon = 3;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->icon(), output);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->force(), output);
  }

  // optional uint32 rank = 5;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rank(), output);
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->title(), output);
  }

  // optional bool online = 7;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->online(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.FriendInfo)
}

::google::protobuf::uint8* FriendInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.FriendInfo)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.FriendInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 icon = 3;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->icon(), target);
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->force(), target);
  }

  // optional uint32 rank = 5;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rank(), target);
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->title(), target);
  }

  // optional bool online = 7;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->online(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.FriendInfo)
  return target;
}

size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.FriendInfo)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 icon = 3;
  if (this->icon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icon());
  }

  // optional uint32 force = 4;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional uint32 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional uint32 title = 6;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional bool online = 7;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.FriendInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FriendInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.FriendInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.FriendInfo)
    UnsafeMergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.FriendInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FriendInfo::UnsafeMergeFrom(const FriendInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.FriendInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FriendInfo::IsInitialized() const {

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendInfo::InternalSwap(FriendInfo* other) {
  std::swap(userid_, other->userid_);
  name_.Swap(&other->name_);
  std::swap(icon_, other->icon_);
  std::swap(force_, other->force_);
  std::swap(rank_, other->rank_);
  std::swap(title_, other->title_);
  std::swap(online_, other->online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendInfo

// optional uint32 userId = 1;
void FriendInfo::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 FriendInfo::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendInfo.userId)
  return userid_;
}
void FriendInfo::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.FriendInfo.userId)
}

// optional string name = 2;
void FriendInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FriendInfo::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.FriendInfo.name)
}
void FriendInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.FriendInfo.name)
}
void FriendInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.FriendInfo.name)
}
::std::string* FriendInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.FriendInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.FriendInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.FriendInfo.name)
}

// optional uint32 icon = 3;
void FriendInfo::clear_icon() {
  icon_ = 0u;
}
::google::protobuf::uint32 FriendInfo::icon() const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendInfo.icon)
  return icon_;
}
void FriendInfo::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.FriendInfo.icon)
}

// optional uint32 force = 4;
void FriendInfo::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 FriendInfo::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendInfo.force)
  return force_;
}
void FriendInfo::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.FriendInfo.force)
}

// optional uint32 rank = 5;
void FriendInfo::clear_rank() {
  rank_ = 0u;
}
::google::protobuf::uint32 FriendInfo::rank() const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendInfo.rank)
  return rank_;
}
void FriendInfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.FriendInfo.rank)
}

// optional uint32 title = 6;
void FriendInfo::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 FriendInfo::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendInfo.title)
  return title_;
}
void FriendInfo::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.FriendInfo.title)
}

// optional bool online = 7;
void FriendInfo::clear_online() {
  online_ = false;
}
bool FriendInfo::online() const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendInfo.online)
  return online_;
}
void FriendInfo::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.FriendInfo.online)
}

inline const FriendInfo* FriendInfo::internal_default_instance() {
  return &FriendInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendsInfoAck::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendsInfoAck::FriendsInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.FriendsInfoAck)
}

void FriendsInfoAck::InitAsDefaultInstance() {
}

FriendsInfoAck::FriendsInfoAck(const FriendsInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.FriendsInfoAck)
}

void FriendsInfoAck::SharedCtor() {
  _cached_size_ = 0;
}

FriendsInfoAck::~FriendsInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.FriendsInfoAck)
  SharedDtor();
}

void FriendsInfoAck::SharedDtor() {
}

void FriendsInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsInfoAck_descriptor_;
}

const FriendsInfoAck& FriendsInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FriendsInfoAck> FriendsInfoAck_default_instance_;

FriendsInfoAck* FriendsInfoAck::New(::google::protobuf::Arena* arena) const {
  FriendsInfoAck* n = new FriendsInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendsInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.FriendsInfoAck)
  friends_.Clear();
}

bool FriendsInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.FriendsInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.FriendInfo friends = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_friends;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.FriendsInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.FriendsInfoAck)
  return false;
#undef DO_
}

void FriendsInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.FriendsInfoAck)
  // repeated .NetMsg.FriendInfo friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.FriendsInfoAck)
}

::google::protobuf::uint8* FriendsInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.FriendsInfoAck)
  // repeated .NetMsg.FriendInfo friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->friends(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.FriendsInfoAck)
  return target;
}

size_t FriendsInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.FriendsInfoAck)
  size_t total_size = 0;

  // repeated .NetMsg.FriendInfo friends = 1;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.FriendsInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FriendsInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendsInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.FriendsInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.FriendsInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void FriendsInfoAck::MergeFrom(const FriendsInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.FriendsInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FriendsInfoAck::UnsafeMergeFrom(const FriendsInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  friends_.MergeFrom(from.friends_);
}

void FriendsInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.FriendsInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsInfoAck::CopyFrom(const FriendsInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.FriendsInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FriendsInfoAck::IsInitialized() const {

  return true;
}

void FriendsInfoAck::Swap(FriendsInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendsInfoAck::InternalSwap(FriendsInfoAck* other) {
  friends_.UnsafeArenaSwap(&other->friends_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendsInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsInfoAck_descriptor_;
  metadata.reflection = FriendsInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendsInfoAck

// repeated .NetMsg.FriendInfo friends = 1;
int FriendsInfoAck::friends_size() const {
  return friends_.size();
}
void FriendsInfoAck::clear_friends() {
  friends_.Clear();
}
const ::NetMsg::FriendInfo& FriendsInfoAck::friends(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.FriendsInfoAck.friends)
  return friends_.Get(index);
}
::NetMsg::FriendInfo* FriendsInfoAck::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.FriendsInfoAck.friends)
  return friends_.Mutable(index);
}
::NetMsg::FriendInfo* FriendsInfoAck::add_friends() {
  // @@protoc_insertion_point(field_add:NetMsg.FriendsInfoAck.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::FriendInfo >*
FriendsInfoAck::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.FriendsInfoAck.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::FriendInfo >&
FriendsInfoAck::friends() const {
  // @@protoc_insertion_point(field_list:NetMsg.FriendsInfoAck.friends)
  return friends_;
}

inline const FriendsInfoAck* FriendsInfoAck::internal_default_instance() {
  return &FriendsInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailSender::kIdFieldNumber;
const int MailSender::kNameFieldNumber;
const int MailSender::kIconFieldNumber;
const int MailSender::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailSender::MailSender()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.MailSender)
}

void MailSender::InitAsDefaultInstance() {
}

MailSender::MailSender(const MailSender& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.MailSender)
}

void MailSender::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&title_) -
    reinterpret_cast<char*>(&id_) + sizeof(title_));
  _cached_size_ = 0;
}

MailSender::~MailSender() {
  // @@protoc_insertion_point(destructor:NetMsg.MailSender)
  SharedDtor();
}

void MailSender::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MailSender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailSender::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailSender_descriptor_;
}

const MailSender& MailSender::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MailSender> MailSender_default_instance_;

MailSender* MailSender::New(::google::protobuf::Arena* arena) const {
  MailSender* n = new MailSender;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailSender::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.MailSender)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MailSender, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MailSender*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, title_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MailSender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.MailSender)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.MailSender.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_icon;
        break;
      }

      // optional uint32 icon = 3;
      case 3: {
        if (tag == 24) {
         parse_icon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_title;
        break;
      }

      // optional uint32 title = 4;
      case 4: {
        if (tag == 32) {
         parse_title:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.MailSender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.MailSender)
  return false;
#undef DO_
}

void MailSender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.MailSender)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.MailSender.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 icon = 3;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->icon(), output);
  }

  // optional uint32 title = 4;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->title(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.MailSender)
}

::google::protobuf::uint8* MailSender::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.MailSender)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.MailSender.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 icon = 3;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->icon(), target);
  }

  // optional uint32 title = 4;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->title(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.MailSender)
  return target;
}

size_t MailSender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.MailSender)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 icon = 3;
  if (this->icon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icon());
  }

  // optional uint32 title = 4;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailSender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.MailSender)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MailSender* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailSender>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.MailSender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.MailSender)
    UnsafeMergeFrom(*source);
  }
}

void MailSender::MergeFrom(const MailSender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.MailSender)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MailSender::UnsafeMergeFrom(const MailSender& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
  if (from.title() != 0) {
    set_title(from.title());
  }
}

void MailSender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.MailSender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailSender::CopyFrom(const MailSender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.MailSender)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MailSender::IsInitialized() const {

  return true;
}

void MailSender::Swap(MailSender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailSender::InternalSwap(MailSender* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(icon_, other->icon_);
  std::swap(title_, other->title_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailSender::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailSender_descriptor_;
  metadata.reflection = MailSender_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailSender

// optional uint32 id = 1;
void MailSender::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 MailSender::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailSender.id)
  return id_;
}
void MailSender::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailSender.id)
}

// optional string name = 2;
void MailSender::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MailSender::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailSender.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailSender::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.MailSender.name)
}
void MailSender::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.MailSender.name)
}
void MailSender::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.MailSender.name)
}
::std::string* MailSender::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.MailSender.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MailSender::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.MailSender.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailSender::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.MailSender.name)
}

// optional uint32 icon = 3;
void MailSender::clear_icon() {
  icon_ = 0u;
}
::google::protobuf::uint32 MailSender::icon() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailSender.icon)
  return icon_;
}
void MailSender::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailSender.icon)
}

// optional uint32 title = 4;
void MailSender::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 MailSender::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailSender.title)
  return title_;
}
void MailSender::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailSender.title)
}

inline const MailSender* MailSender::internal_default_instance() {
  return &MailSender_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailData::kIdFieldNumber;
const int MailData::kSendTimeFieldNumber;
const int MailData::kSenderFieldNumber;
const int MailData::kTitleFieldNumber;
const int MailData::kHasAwardFieldNumber;
const int MailData::kIsReadFieldNumber;
const int MailData::kIsGetAwardFieldNumber;
const int MailData::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailData::MailData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.MailData)
}

void MailData::InitAsDefaultInstance() {
  sender_ = const_cast< ::NetMsg::MailSender*>(
      ::NetMsg::MailSender::internal_default_instance());
}

MailData::MailData(const MailData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.MailData)
}

void MailData::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = NULL;
  ::memset(&sendtime_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sendtime_) + sizeof(type_));
  _cached_size_ = 0;
}

MailData::~MailData() {
  // @@protoc_insertion_point(destructor:NetMsg.MailData)
  SharedDtor();
}

void MailData::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MailData_default_instance_.get()) {
    delete sender_;
  }
}

void MailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailData_descriptor_;
}

const MailData& MailData::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MailData> MailData_default_instance_;

MailData* MailData::New(::google::protobuf::Arena* arena) const {
  MailData* n = new MailData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.MailData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MailData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MailData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sendtime_, type_);
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) delete sender_;
  sender_ = NULL;
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.MailData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sendTime;
        break;
      }

      // optional int64 sendTime = 2;
      case 2: {
        if (tag == 16) {
         parse_sendTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // optional .NetMsg.MailSender sender = 3;
      case 3: {
        if (tag == 26) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (tag == 34) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.MailData.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hasAward;
        break;
      }

      // optional bool hasAward = 5;
      case 5: {
        if (tag == 40) {
         parse_hasAward:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasaward_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isRead;
        break;
      }

      // optional bool isRead = 6;
      case 6: {
        if (tag == 48) {
         parse_isRead:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isread_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isGetAward;
        break;
      }

      // optional bool isGetAward = 7;
      case 7: {
        if (tag == 56) {
         parse_isGetAward:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgetaward_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional .NetMsg.MailType type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::MailType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.MailData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.MailData)
  return false;
#undef DO_
}

void MailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.MailData)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional int64 sendTime = 2;
  if (this->sendtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sendtime(), output);
  }

  // optional .NetMsg.MailSender sender = 3;
  if (this->has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sender_, output);
  }

  // optional string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.MailData.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional bool hasAward = 5;
  if (this->hasaward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasaward(), output);
  }

  // optional bool isRead = 6;
  if (this->isread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isread(), output);
  }

  // optional bool isGetAward = 7;
  if (this->isgetaward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isgetaward(), output);
  }

  // optional .NetMsg.MailType type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.MailData)
}

::google::protobuf::uint8* MailData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.MailData)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional int64 sendTime = 2;
  if (this->sendtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sendtime(), target);
  }

  // optional .NetMsg.MailSender sender = 3;
  if (this->has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sender_, false, target);
  }

  // optional string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.MailData.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional bool hasAward = 5;
  if (this->hasaward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hasaward(), target);
  }

  // optional bool isRead = 6;
  if (this->isread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isread(), target);
  }

  // optional bool isGetAward = 7;
  if (this->isgetaward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isgetaward(), target);
  }

  // optional .NetMsg.MailType type = 8;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.MailData)
  return target;
}

size_t MailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.MailData)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional int64 sendTime = 2;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sendtime());
  }

  // optional .NetMsg.MailSender sender = 3;
  if (this->has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sender_);
  }

  // optional string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional bool hasAward = 5;
  if (this->hasaward() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isRead = 6;
  if (this->isread() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isGetAward = 7;
  if (this->isgetaward() != 0) {
    total_size += 1 + 1;
  }

  // optional .NetMsg.MailType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.MailData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MailData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.MailData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.MailData)
    UnsafeMergeFrom(*source);
  }
}

void MailData::MergeFrom(const MailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.MailData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MailData::UnsafeMergeFrom(const MailData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.sendtime() != 0) {
    set_sendtime(from.sendtime());
  }
  if (from.has_sender()) {
    mutable_sender()->::NetMsg::MailSender::MergeFrom(from.sender());
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.hasaward() != 0) {
    set_hasaward(from.hasaward());
  }
  if (from.isread() != 0) {
    set_isread(from.isread());
  }
  if (from.isgetaward() != 0) {
    set_isgetaward(from.isgetaward());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MailData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.MailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailData::CopyFrom(const MailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.MailData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MailData::IsInitialized() const {

  return true;
}

void MailData::Swap(MailData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailData::InternalSwap(MailData* other) {
  std::swap(id_, other->id_);
  std::swap(sendtime_, other->sendtime_);
  std::swap(sender_, other->sender_);
  title_.Swap(&other->title_);
  std::swap(hasaward_, other->hasaward_);
  std::swap(isread_, other->isread_);
  std::swap(isgetaward_, other->isgetaward_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailData_descriptor_;
  metadata.reflection = MailData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailData

// optional uint32 id = 1;
void MailData::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 MailData::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.id)
  return id_;
}
void MailData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailData.id)
}

// optional int64 sendTime = 2;
void MailData::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MailData::sendtime() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.sendTime)
  return sendtime_;
}
void MailData::set_sendtime(::google::protobuf::int64 value) {
  
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailData.sendTime)
}

// optional .NetMsg.MailSender sender = 3;
bool MailData::has_sender() const {
  return this != internal_default_instance() && sender_ != NULL;
}
void MailData::clear_sender() {
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) delete sender_;
  sender_ = NULL;
}
const ::NetMsg::MailSender& MailData::sender() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.sender)
  return sender_ != NULL ? *sender_
                         : *::NetMsg::MailSender::internal_default_instance();
}
::NetMsg::MailSender* MailData::mutable_sender() {
  
  if (sender_ == NULL) {
    sender_ = new ::NetMsg::MailSender;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.MailData.sender)
  return sender_;
}
::NetMsg::MailSender* MailData::release_sender() {
  // @@protoc_insertion_point(field_release:NetMsg.MailData.sender)
  
  ::NetMsg::MailSender* temp = sender_;
  sender_ = NULL;
  return temp;
}
void MailData::set_allocated_sender(::NetMsg::MailSender* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.MailData.sender)
}

// optional string title = 4;
void MailData::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MailData::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailData::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.MailData.title)
}
void MailData::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.MailData.title)
}
void MailData::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.MailData.title)
}
::std::string* MailData::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.MailData.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MailData::release_title() {
  // @@protoc_insertion_point(field_release:NetMsg.MailData.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailData::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.MailData.title)
}

// optional bool hasAward = 5;
void MailData::clear_hasaward() {
  hasaward_ = false;
}
bool MailData::hasaward() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.hasAward)
  return hasaward_;
}
void MailData::set_hasaward(bool value) {
  
  hasaward_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailData.hasAward)
}

// optional bool isRead = 6;
void MailData::clear_isread() {
  isread_ = false;
}
bool MailData::isread() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.isRead)
  return isread_;
}
void MailData::set_isread(bool value) {
  
  isread_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailData.isRead)
}

// optional bool isGetAward = 7;
void MailData::clear_isgetaward() {
  isgetaward_ = false;
}
bool MailData::isgetaward() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.isGetAward)
  return isgetaward_;
}
void MailData::set_isgetaward(bool value) {
  
  isgetaward_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailData.isGetAward)
}

// optional .NetMsg.MailType type = 8;
void MailData::clear_type() {
  type_ = 0;
}
::NetMsg::MailType MailData::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailData.type)
  return static_cast< ::NetMsg::MailType >(type_);
}
void MailData::set_type(::NetMsg::MailType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailData.type)
}

inline const MailData* MailData::internal_default_instance() {
  return &MailData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailInfoAck::kMailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailInfoAck::MailInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.MailInfoAck)
}

void MailInfoAck::InitAsDefaultInstance() {
}

MailInfoAck::MailInfoAck(const MailInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.MailInfoAck)
}

void MailInfoAck::SharedCtor() {
  _cached_size_ = 0;
}

MailInfoAck::~MailInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.MailInfoAck)
  SharedDtor();
}

void MailInfoAck::SharedDtor() {
}

void MailInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfoAck_descriptor_;
}

const MailInfoAck& MailInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MailInfoAck> MailInfoAck_default_instance_;

MailInfoAck* MailInfoAck::New(::google::protobuf::Arena* arena) const {
  MailInfoAck* n = new MailInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.MailInfoAck)
  mails_.Clear();
}

bool MailInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.MailInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.MailData mails = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mails;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.MailInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.MailInfoAck)
  return false;
#undef DO_
}

void MailInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.MailInfoAck)
  // repeated .NetMsg.MailData mails = 1;
  for (unsigned int i = 0, n = this->mails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mails(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.MailInfoAck)
}

::google::protobuf::uint8* MailInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.MailInfoAck)
  // repeated .NetMsg.MailData mails = 1;
  for (unsigned int i = 0, n = this->mails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mails(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.MailInfoAck)
  return target;
}

size_t MailInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.MailInfoAck)
  size_t total_size = 0;

  // repeated .NetMsg.MailData mails = 1;
  {
    unsigned int count = this->mails_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mails(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.MailInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MailInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.MailInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.MailInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void MailInfoAck::MergeFrom(const MailInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.MailInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MailInfoAck::UnsafeMergeFrom(const MailInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  mails_.MergeFrom(from.mails_);
}

void MailInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.MailInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfoAck::CopyFrom(const MailInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.MailInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MailInfoAck::IsInitialized() const {

  return true;
}

void MailInfoAck::Swap(MailInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailInfoAck::InternalSwap(MailInfoAck* other) {
  mails_.UnsafeArenaSwap(&other->mails_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfoAck_descriptor_;
  metadata.reflection = MailInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailInfoAck

// repeated .NetMsg.MailData mails = 1;
int MailInfoAck::mails_size() const {
  return mails_.size();
}
void MailInfoAck::clear_mails() {
  mails_.Clear();
}
const ::NetMsg::MailData& MailInfoAck::mails(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.MailInfoAck.mails)
  return mails_.Get(index);
}
::NetMsg::MailData* MailInfoAck::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.MailInfoAck.mails)
  return mails_.Mutable(index);
}
::NetMsg::MailData* MailInfoAck::add_mails() {
  // @@protoc_insertion_point(field_add:NetMsg.MailInfoAck.mails)
  return mails_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::MailData >*
MailInfoAck::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.MailInfoAck.mails)
  return &mails_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::MailData >&
MailInfoAck::mails() const {
  // @@protoc_insertion_point(field_list:NetMsg.MailInfoAck.mails)
  return mails_;
}

inline const MailInfoAck* MailInfoAck::internal_default_instance() {
  return &MailInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMailDetail::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMailDetail::ReqMailDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqMailDetail)
}

void ReqMailDetail::InitAsDefaultInstance() {
}

ReqMailDetail::ReqMailDetail(const ReqMailDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqMailDetail)
}

void ReqMailDetail::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

ReqMailDetail::~ReqMailDetail() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqMailDetail)
  SharedDtor();
}

void ReqMailDetail::SharedDtor() {
}

void ReqMailDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMailDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMailDetail_descriptor_;
}

const ReqMailDetail& ReqMailDetail::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqMailDetail> ReqMailDetail_default_instance_;

ReqMailDetail* ReqMailDetail::New(::google::protobuf::Arena* arena) const {
  ReqMailDetail* n = new ReqMailDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqMailDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqMailDetail)
  id_ = 0u;
}

bool ReqMailDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqMailDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqMailDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqMailDetail)
  return false;
#undef DO_
}

void ReqMailDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqMailDetail)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqMailDetail)
}

::google::protobuf::uint8* ReqMailDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqMailDetail)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqMailDetail)
  return target;
}

size_t ReqMailDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqMailDetail)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMailDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqMailDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqMailDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMailDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqMailDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqMailDetail)
    UnsafeMergeFrom(*source);
  }
}

void ReqMailDetail::MergeFrom(const ReqMailDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqMailDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqMailDetail::UnsafeMergeFrom(const ReqMailDetail& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqMailDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqMailDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMailDetail::CopyFrom(const ReqMailDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqMailDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqMailDetail::IsInitialized() const {

  return true;
}

void ReqMailDetail::Swap(ReqMailDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMailDetail::InternalSwap(ReqMailDetail* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqMailDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMailDetail_descriptor_;
  metadata.reflection = ReqMailDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqMailDetail

// optional uint32 id = 1;
void ReqMailDetail::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqMailDetail::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqMailDetail.id)
  return id_;
}
void ReqMailDetail::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqMailDetail.id)
}

inline const ReqMailDetail* ReqMailDetail::internal_default_instance() {
  return &ReqMailDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailDetailAck::kIdFieldNumber;
const int MailDetailAck::kContentFieldNumber;
const int MailDetailAck::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailDetailAck::MailDetailAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.MailDetailAck)
}

void MailDetailAck::InitAsDefaultInstance() {
  award_ = const_cast< ::NetMsg::Award*>(
      ::NetMsg::Award::internal_default_instance());
}

MailDetailAck::MailDetailAck(const MailDetailAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.MailDetailAck)
}

void MailDetailAck::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  award_ = NULL;
  id_ = 0u;
  _cached_size_ = 0;
}

MailDetailAck::~MailDetailAck() {
  // @@protoc_insertion_point(destructor:NetMsg.MailDetailAck)
  SharedDtor();
}

void MailDetailAck::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MailDetailAck_default_instance_.get()) {
    delete award_;
  }
}

void MailDetailAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailDetailAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailDetailAck_descriptor_;
}

const MailDetailAck& MailDetailAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MailDetailAck> MailDetailAck_default_instance_;

MailDetailAck* MailDetailAck::New(::google::protobuf::Arena* arena) const {
  MailDetailAck* n = new MailDetailAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailDetailAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.MailDetailAck)
  id_ = 0u;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}

bool MailDetailAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.MailDetailAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.MailDetailAck.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_award;
        break;
      }

      // optional .NetMsg.Award award = 3;
      case 3: {
        if (tag == 26) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.MailDetailAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.MailDetailAck)
  return false;
#undef DO_
}

void MailDetailAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.MailDetailAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.MailDetailAck.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional .NetMsg.Award award = 3;
  if (this->has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->award_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.MailDetailAck)
}

::google::protobuf::uint8* MailDetailAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.MailDetailAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.MailDetailAck.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .NetMsg.Award award = 3;
  if (this->has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.MailDetailAck)
  return target;
}

size_t MailDetailAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.MailDetailAck)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // optional .NetMsg.Award award = 3;
  if (this->has_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->award_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailDetailAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.MailDetailAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MailDetailAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailDetailAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.MailDetailAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.MailDetailAck)
    UnsafeMergeFrom(*source);
  }
}

void MailDetailAck::MergeFrom(const MailDetailAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.MailDetailAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MailDetailAck::UnsafeMergeFrom(const MailDetailAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_award()) {
    mutable_award()->::NetMsg::Award::MergeFrom(from.award());
  }
}

void MailDetailAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.MailDetailAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailDetailAck::CopyFrom(const MailDetailAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.MailDetailAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MailDetailAck::IsInitialized() const {

  return true;
}

void MailDetailAck::Swap(MailDetailAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailDetailAck::InternalSwap(MailDetailAck* other) {
  std::swap(id_, other->id_);
  content_.Swap(&other->content_);
  std::swap(award_, other->award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailDetailAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailDetailAck_descriptor_;
  metadata.reflection = MailDetailAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailDetailAck

// optional uint32 id = 1;
void MailDetailAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 MailDetailAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailDetailAck.id)
  return id_;
}
void MailDetailAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.MailDetailAck.id)
}

// optional string content = 2;
void MailDetailAck::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MailDetailAck::content() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailDetailAck.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailDetailAck::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.MailDetailAck.content)
}
void MailDetailAck::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.MailDetailAck.content)
}
void MailDetailAck::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.MailDetailAck.content)
}
::std::string* MailDetailAck::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.MailDetailAck.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MailDetailAck::release_content() {
  // @@protoc_insertion_point(field_release:NetMsg.MailDetailAck.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailDetailAck::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.MailDetailAck.content)
}

// optional .NetMsg.Award award = 3;
bool MailDetailAck::has_award() const {
  return this != internal_default_instance() && award_ != NULL;
}
void MailDetailAck::clear_award() {
  if (GetArenaNoVirtual() == NULL && award_ != NULL) delete award_;
  award_ = NULL;
}
const ::NetMsg::Award& MailDetailAck::award() const {
  // @@protoc_insertion_point(field_get:NetMsg.MailDetailAck.award)
  return award_ != NULL ? *award_
                         : *::NetMsg::Award::internal_default_instance();
}
::NetMsg::Award* MailDetailAck::mutable_award() {
  
  if (award_ == NULL) {
    award_ = new ::NetMsg::Award;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.MailDetailAck.award)
  return award_;
}
::NetMsg::Award* MailDetailAck::release_award() {
  // @@protoc_insertion_point(field_release:NetMsg.MailDetailAck.award)
  
  ::NetMsg::Award* temp = award_;
  award_ = NULL;
  return temp;
}
void MailDetailAck::set_allocated_award(::NetMsg::Award* award) {
  delete award_;
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.MailDetailAck.award)
}

inline const MailDetailAck* MailDetailAck::internal_default_instance() {
  return &MailDetailAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetMailAward::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetMailAward::ReqGetMailAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqGetMailAward)
}

void ReqGetMailAward::InitAsDefaultInstance() {
}

ReqGetMailAward::ReqGetMailAward(const ReqGetMailAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqGetMailAward)
}

void ReqGetMailAward::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

ReqGetMailAward::~ReqGetMailAward() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqGetMailAward)
  SharedDtor();
}

void ReqGetMailAward::SharedDtor() {
}

void ReqGetMailAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetMailAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetMailAward_descriptor_;
}

const ReqGetMailAward& ReqGetMailAward::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqGetMailAward> ReqGetMailAward_default_instance_;

ReqGetMailAward* ReqGetMailAward::New(::google::protobuf::Arena* arena) const {
  ReqGetMailAward* n = new ReqGetMailAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqGetMailAward::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqGetMailAward)
  id_ = 0u;
}

bool ReqGetMailAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqGetMailAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqGetMailAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqGetMailAward)
  return false;
#undef DO_
}

void ReqGetMailAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqGetMailAward)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqGetMailAward)
}

::google::protobuf::uint8* ReqGetMailAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqGetMailAward)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqGetMailAward)
  return target;
}

size_t ReqGetMailAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqGetMailAward)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetMailAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqGetMailAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqGetMailAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGetMailAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqGetMailAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqGetMailAward)
    UnsafeMergeFrom(*source);
  }
}

void ReqGetMailAward::MergeFrom(const ReqGetMailAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqGetMailAward)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqGetMailAward::UnsafeMergeFrom(const ReqGetMailAward& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqGetMailAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqGetMailAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMailAward::CopyFrom(const ReqGetMailAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqGetMailAward)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqGetMailAward::IsInitialized() const {

  return true;
}

void ReqGetMailAward::Swap(ReqGetMailAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetMailAward::InternalSwap(ReqGetMailAward* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGetMailAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetMailAward_descriptor_;
  metadata.reflection = ReqGetMailAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqGetMailAward

// optional uint32 id = 1;
void ReqGetMailAward::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqGetMailAward::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqGetMailAward.id)
  return id_;
}
void ReqGetMailAward::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqGetMailAward.id)
}

inline const ReqGetMailAward* ReqGetMailAward::internal_default_instance() {
  return &ReqGetMailAward_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMailAwardAck::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMailAwardAck::GetMailAwardAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.GetMailAwardAck)
}

void GetMailAwardAck::InitAsDefaultInstance() {
}

GetMailAwardAck::GetMailAwardAck(const GetMailAwardAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.GetMailAwardAck)
}

void GetMailAwardAck::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

GetMailAwardAck::~GetMailAwardAck() {
  // @@protoc_insertion_point(destructor:NetMsg.GetMailAwardAck)
  SharedDtor();
}

void GetMailAwardAck::SharedDtor() {
}

void GetMailAwardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMailAwardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMailAwardAck_descriptor_;
}

const GetMailAwardAck& GetMailAwardAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetMailAwardAck> GetMailAwardAck_default_instance_;

GetMailAwardAck* GetMailAwardAck::New(::google::protobuf::Arena* arena) const {
  GetMailAwardAck* n = new GetMailAwardAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMailAwardAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.GetMailAwardAck)
  id_ = 0u;
}

bool GetMailAwardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.GetMailAwardAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.GetMailAwardAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.GetMailAwardAck)
  return false;
#undef DO_
}

void GetMailAwardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.GetMailAwardAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.GetMailAwardAck)
}

::google::protobuf::uint8* GetMailAwardAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.GetMailAwardAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.GetMailAwardAck)
  return target;
}

size_t GetMailAwardAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.GetMailAwardAck)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMailAwardAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.GetMailAwardAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetMailAwardAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMailAwardAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.GetMailAwardAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.GetMailAwardAck)
    UnsafeMergeFrom(*source);
  }
}

void GetMailAwardAck::MergeFrom(const GetMailAwardAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.GetMailAwardAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetMailAwardAck::UnsafeMergeFrom(const GetMailAwardAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetMailAwardAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.GetMailAwardAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailAwardAck::CopyFrom(const GetMailAwardAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.GetMailAwardAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetMailAwardAck::IsInitialized() const {

  return true;
}

void GetMailAwardAck::Swap(GetMailAwardAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMailAwardAck::InternalSwap(GetMailAwardAck* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMailAwardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMailAwardAck_descriptor_;
  metadata.reflection = GetMailAwardAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMailAwardAck

// optional uint32 id = 1;
void GetMailAwardAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 GetMailAwardAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.GetMailAwardAck.id)
  return id_;
}
void GetMailAwardAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.GetMailAwardAck.id)
}

inline const GetMailAwardAck* GetMailAwardAck::internal_default_instance() {
  return &GetMailAwardAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqDeleteMail::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqDeleteMail::ReqDeleteMail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqDeleteMail)
}

void ReqDeleteMail::InitAsDefaultInstance() {
}

ReqDeleteMail::ReqDeleteMail(const ReqDeleteMail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqDeleteMail)
}

void ReqDeleteMail::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

ReqDeleteMail::~ReqDeleteMail() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqDeleteMail)
  SharedDtor();
}

void ReqDeleteMail::SharedDtor() {
}

void ReqDeleteMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeleteMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDeleteMail_descriptor_;
}

const ReqDeleteMail& ReqDeleteMail::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqDeleteMail> ReqDeleteMail_default_instance_;

ReqDeleteMail* ReqDeleteMail::New(::google::protobuf::Arena* arena) const {
  ReqDeleteMail* n = new ReqDeleteMail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqDeleteMail::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqDeleteMail)
  id_ = 0u;
}

bool ReqDeleteMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqDeleteMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqDeleteMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqDeleteMail)
  return false;
#undef DO_
}

void ReqDeleteMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqDeleteMail)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqDeleteMail)
}

::google::protobuf::uint8* ReqDeleteMail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqDeleteMail)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqDeleteMail)
  return target;
}

size_t ReqDeleteMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqDeleteMail)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeleteMail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqDeleteMail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqDeleteMail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqDeleteMail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqDeleteMail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqDeleteMail)
    UnsafeMergeFrom(*source);
  }
}

void ReqDeleteMail::MergeFrom(const ReqDeleteMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqDeleteMail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqDeleteMail::UnsafeMergeFrom(const ReqDeleteMail& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqDeleteMail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqDeleteMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteMail::CopyFrom(const ReqDeleteMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqDeleteMail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqDeleteMail::IsInitialized() const {

  return true;
}

void ReqDeleteMail::Swap(ReqDeleteMail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqDeleteMail::InternalSwap(ReqDeleteMail* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqDeleteMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDeleteMail_descriptor_;
  metadata.reflection = ReqDeleteMail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqDeleteMail

// optional uint32 id = 1;
void ReqDeleteMail::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqDeleteMail::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqDeleteMail.id)
  return id_;
}
void ReqDeleteMail::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqDeleteMail.id)
}

inline const ReqDeleteMail* ReqDeleteMail::internal_default_instance() {
  return &ReqDeleteMail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteMailAck::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteMailAck::DeleteMailAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.DeleteMailAck)
}

void DeleteMailAck::InitAsDefaultInstance() {
}

DeleteMailAck::DeleteMailAck(const DeleteMailAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.DeleteMailAck)
}

void DeleteMailAck::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

DeleteMailAck::~DeleteMailAck() {
  // @@protoc_insertion_point(destructor:NetMsg.DeleteMailAck)
  SharedDtor();
}

void DeleteMailAck::SharedDtor() {
}

void DeleteMailAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteMailAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteMailAck_descriptor_;
}

const DeleteMailAck& DeleteMailAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteMailAck> DeleteMailAck_default_instance_;

DeleteMailAck* DeleteMailAck::New(::google::protobuf::Arena* arena) const {
  DeleteMailAck* n = new DeleteMailAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteMailAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.DeleteMailAck)
  id_ = 0u;
}

bool DeleteMailAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.DeleteMailAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.DeleteMailAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.DeleteMailAck)
  return false;
#undef DO_
}

void DeleteMailAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.DeleteMailAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.DeleteMailAck)
}

::google::protobuf::uint8* DeleteMailAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.DeleteMailAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.DeleteMailAck)
  return target;
}

size_t DeleteMailAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.DeleteMailAck)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMailAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.DeleteMailAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteMailAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteMailAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.DeleteMailAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.DeleteMailAck)
    UnsafeMergeFrom(*source);
  }
}

void DeleteMailAck::MergeFrom(const DeleteMailAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.DeleteMailAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteMailAck::UnsafeMergeFrom(const DeleteMailAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void DeleteMailAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.DeleteMailAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMailAck::CopyFrom(const DeleteMailAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.DeleteMailAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteMailAck::IsInitialized() const {

  return true;
}

void DeleteMailAck::Swap(DeleteMailAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteMailAck::InternalSwap(DeleteMailAck* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteMailAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteMailAck_descriptor_;
  metadata.reflection = DeleteMailAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteMailAck

// optional uint32 id = 1;
void DeleteMailAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 DeleteMailAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.DeleteMailAck.id)
  return id_;
}
void DeleteMailAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.DeleteMailAck.id)
}

inline const DeleteMailAck* DeleteMailAck::internal_default_instance() {
  return &DeleteMailAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BanquetHeros::kUidFieldNumber;
const int BanquetHeros::kBanquetIdFieldNumber;
const int BanquetHeros::kHerosFieldNumber;
const int BanquetHeros::kBanquetFieldNumber;
const int BanquetHeros::kLeftFreeTimesFieldNumber;
const int BanquetHeros::kLeftTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BanquetHeros::BanquetHeros()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BanquetHeros)
}

void BanquetHeros::InitAsDefaultInstance() {
}

BanquetHeros::BanquetHeros(const BanquetHeros& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BanquetHeros)
}

void BanquetHeros::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&uid_) + sizeof(lefttime_));
  _cached_size_ = 0;
}

BanquetHeros::~BanquetHeros() {
  // @@protoc_insertion_point(destructor:NetMsg.BanquetHeros)
  SharedDtor();
}

void BanquetHeros::SharedDtor() {
}

void BanquetHeros::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanquetHeros::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanquetHeros_descriptor_;
}

const BanquetHeros& BanquetHeros::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BanquetHeros> BanquetHeros_default_instance_;

BanquetHeros* BanquetHeros::New(::google::protobuf::Arena* arena) const {
  BanquetHeros* n = new BanquetHeros;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BanquetHeros::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BanquetHeros)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BanquetHeros, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BanquetHeros*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, lefttime_);

#undef ZR_HELPER_
#undef ZR_

  heros_.Clear();
  banquet_.Clear();
}

bool BanquetHeros::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BanquetHeros)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_banquetId;
        break;
      }

      // optional uint32 banquetId = 2;
      case 2: {
        if (tag == 16) {
         parse_banquetId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banquetid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 3;
      case 3: {
        if (tag == 26) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_heros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_banquet;
        break;
      }

      // repeated bool banquet = 4;
      case 4: {
        if (tag == 34) {
         parse_banquet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_banquet())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 34, input, this->mutable_banquet())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leftFreeTimes;
        break;
      }

      // optional uint32 leftFreeTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_leftFreeTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftfreetimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 6;
      case 6: {
        if (tag == 48) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BanquetHeros)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BanquetHeros)
  return false;
#undef DO_
}

void BanquetHeros::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BanquetHeros)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 banquetId = 2;
  if (this->banquetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banquetid(), output);
  }

  // repeated uint32 heros = 3;
  if (this->heros_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heros_cached_byte_size_);
  }
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->heros(i), output);
  }

  // repeated bool banquet = 4;
  if (this->banquet_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_banquet_cached_byte_size_);
  }
  for (int i = 0; i < this->banquet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->banquet(i), output);
  }

  // optional uint32 leftFreeTimes = 5;
  if (this->leftfreetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leftfreetimes(), output);
  }

  // optional uint32 leftTime = 6;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lefttime(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BanquetHeros)
}

::google::protobuf::uint8* BanquetHeros::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BanquetHeros)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 banquetId = 2;
  if (this->banquetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banquetid(), target);
  }

  // repeated uint32 heros = 3;
  if (this->heros_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heros_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->heros(i), target);
  }

  // repeated bool banquet = 4;
  if (this->banquet_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _banquet_cached_byte_size_, target);
  }
  for (int i = 0; i < this->banquet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->banquet(i), target);
  }

  // optional uint32 leftFreeTimes = 5;
  if (this->leftfreetimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leftfreetimes(), target);
  }

  // optional uint32 leftTime = 6;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lefttime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BanquetHeros)
  return target;
}

size_t BanquetHeros::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BanquetHeros)
  size_t total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 banquetId = 2;
  if (this->banquetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banquetid());
  }

  // optional uint32 leftFreeTimes = 5;
  if (this->leftfreetimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftfreetimes());
  }

  // optional uint32 leftTime = 6;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  // repeated uint32 heros = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->heros_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heros_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool banquet = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->banquet_size();
    data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _banquet_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanquetHeros::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BanquetHeros)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BanquetHeros* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BanquetHeros>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BanquetHeros)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BanquetHeros)
    UnsafeMergeFrom(*source);
  }
}

void BanquetHeros::MergeFrom(const BanquetHeros& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BanquetHeros)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BanquetHeros::UnsafeMergeFrom(const BanquetHeros& from) {
  GOOGLE_DCHECK(&from != this);
  heros_.UnsafeMergeFrom(from.heros_);
  banquet_.UnsafeMergeFrom(from.banquet_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.banquetid() != 0) {
    set_banquetid(from.banquetid());
  }
  if (from.leftfreetimes() != 0) {
    set_leftfreetimes(from.leftfreetimes());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
}

void BanquetHeros::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BanquetHeros)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanquetHeros::CopyFrom(const BanquetHeros& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BanquetHeros)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BanquetHeros::IsInitialized() const {

  return true;
}

void BanquetHeros::Swap(BanquetHeros* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BanquetHeros::InternalSwap(BanquetHeros* other) {
  std::swap(uid_, other->uid_);
  std::swap(banquetid_, other->banquetid_);
  heros_.UnsafeArenaSwap(&other->heros_);
  banquet_.UnsafeArenaSwap(&other->banquet_);
  std::swap(leftfreetimes_, other->leftfreetimes_);
  std::swap(lefttime_, other->lefttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BanquetHeros::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanquetHeros_descriptor_;
  metadata.reflection = BanquetHeros_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BanquetHeros

// optional uint32 uid = 1;
void BanquetHeros::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BanquetHeros::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeros.uid)
  return uid_;
}
void BanquetHeros::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeros.uid)
}

// optional uint32 banquetId = 2;
void BanquetHeros::clear_banquetid() {
  banquetid_ = 0u;
}
::google::protobuf::uint32 BanquetHeros::banquetid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeros.banquetId)
  return banquetid_;
}
void BanquetHeros::set_banquetid(::google::protobuf::uint32 value) {
  
  banquetid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeros.banquetId)
}

// repeated uint32 heros = 3;
int BanquetHeros::heros_size() const {
  return heros_.size();
}
void BanquetHeros::clear_heros() {
  heros_.Clear();
}
::google::protobuf::uint32 BanquetHeros::heros(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeros.heros)
  return heros_.Get(index);
}
void BanquetHeros::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeros.heros)
}
void BanquetHeros::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.BanquetHeros.heros)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BanquetHeros::heros() const {
  // @@protoc_insertion_point(field_list:NetMsg.BanquetHeros.heros)
  return heros_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BanquetHeros::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BanquetHeros.heros)
  return &heros_;
}

// repeated bool banquet = 4;
int BanquetHeros::banquet_size() const {
  return banquet_.size();
}
void BanquetHeros::clear_banquet() {
  banquet_.Clear();
}
bool BanquetHeros::banquet(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeros.banquet)
  return banquet_.Get(index);
}
void BanquetHeros::set_banquet(int index, bool value) {
  banquet_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeros.banquet)
}
void BanquetHeros::add_banquet(bool value) {
  banquet_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.BanquetHeros.banquet)
}
const ::google::protobuf::RepeatedField< bool >&
BanquetHeros::banquet() const {
  // @@protoc_insertion_point(field_list:NetMsg.BanquetHeros.banquet)
  return banquet_;
}
::google::protobuf::RepeatedField< bool >*
BanquetHeros::mutable_banquet() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BanquetHeros.banquet)
  return &banquet_;
}

// optional uint32 leftFreeTimes = 5;
void BanquetHeros::clear_leftfreetimes() {
  leftfreetimes_ = 0u;
}
::google::protobuf::uint32 BanquetHeros::leftfreetimes() const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeros.leftFreeTimes)
  return leftfreetimes_;
}
void BanquetHeros::set_leftfreetimes(::google::protobuf::uint32 value) {
  
  leftfreetimes_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeros.leftFreeTimes)
}

// optional uint32 leftTime = 6;
void BanquetHeros::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 BanquetHeros::lefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeros.leftTime)
  return lefttime_;
}
void BanquetHeros::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeros.leftTime)
}

inline const BanquetHeros* BanquetHeros::internal_default_instance() {
  return &BanquetHeros_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BanquetInfoAck::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BanquetInfoAck::BanquetInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BanquetInfoAck)
}

void BanquetInfoAck::InitAsDefaultInstance() {
}

BanquetInfoAck::BanquetInfoAck(const BanquetInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BanquetInfoAck)
}

void BanquetInfoAck::SharedCtor() {
  _cached_size_ = 0;
}

BanquetInfoAck::~BanquetInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.BanquetInfoAck)
  SharedDtor();
}

void BanquetInfoAck::SharedDtor() {
}

void BanquetInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanquetInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanquetInfoAck_descriptor_;
}

const BanquetInfoAck& BanquetInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BanquetInfoAck> BanquetInfoAck_default_instance_;

BanquetInfoAck* BanquetInfoAck::New(::google::protobuf::Arena* arena) const {
  BanquetInfoAck* n = new BanquetInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BanquetInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BanquetInfoAck)
  info_.Clear();
}

bool BanquetInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BanquetInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.BanquetHeros info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BanquetInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BanquetInfoAck)
  return false;
#undef DO_
}

void BanquetInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BanquetInfoAck)
  // repeated .NetMsg.BanquetHeros info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BanquetInfoAck)
}

::google::protobuf::uint8* BanquetInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BanquetInfoAck)
  // repeated .NetMsg.BanquetHeros info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BanquetInfoAck)
  return target;
}

size_t BanquetInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BanquetInfoAck)
  size_t total_size = 0;

  // repeated .NetMsg.BanquetHeros info = 1;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanquetInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BanquetInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BanquetInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BanquetInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BanquetInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BanquetInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void BanquetInfoAck::MergeFrom(const BanquetInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BanquetInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BanquetInfoAck::UnsafeMergeFrom(const BanquetInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  info_.MergeFrom(from.info_);
}

void BanquetInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BanquetInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanquetInfoAck::CopyFrom(const BanquetInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BanquetInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BanquetInfoAck::IsInitialized() const {

  return true;
}

void BanquetInfoAck::Swap(BanquetInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BanquetInfoAck::InternalSwap(BanquetInfoAck* other) {
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BanquetInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanquetInfoAck_descriptor_;
  metadata.reflection = BanquetInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BanquetInfoAck

// repeated .NetMsg.BanquetHeros info = 1;
int BanquetInfoAck::info_size() const {
  return info_.size();
}
void BanquetInfoAck::clear_info() {
  info_.Clear();
}
const ::NetMsg::BanquetHeros& BanquetInfoAck::info(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetInfoAck.info)
  return info_.Get(index);
}
::NetMsg::BanquetHeros* BanquetInfoAck::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.BanquetInfoAck.info)
  return info_.Mutable(index);
}
::NetMsg::BanquetHeros* BanquetInfoAck::add_info() {
  // @@protoc_insertion_point(field_add:NetMsg.BanquetInfoAck.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::BanquetHeros >*
BanquetInfoAck::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BanquetInfoAck.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::BanquetHeros >&
BanquetInfoAck::info() const {
  // @@protoc_insertion_point(field_list:NetMsg.BanquetInfoAck.info)
  return info_;
}

inline const BanquetInfoAck* BanquetInfoAck::internal_default_instance() {
  return &BanquetInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBanquetHero::kTypeFieldNumber;
const int ReqBanquetHero::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBanquetHero::ReqBanquetHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqBanquetHero)
}

void ReqBanquetHero::InitAsDefaultInstance() {
}

ReqBanquetHero::ReqBanquetHero(const ReqBanquetHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqBanquetHero)
}

void ReqBanquetHero::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&type_) + sizeof(uid_));
  _cached_size_ = 0;
}

ReqBanquetHero::~ReqBanquetHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqBanquetHero)
  SharedDtor();
}

void ReqBanquetHero::SharedDtor() {
}

void ReqBanquetHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBanquetHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBanquetHero_descriptor_;
}

const ReqBanquetHero& ReqBanquetHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqBanquetHero> ReqBanquetHero_default_instance_;

ReqBanquetHero* ReqBanquetHero::New(::google::protobuf::Arena* arena) const {
  ReqBanquetHero* n = new ReqBanquetHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBanquetHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqBanquetHero)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqBanquetHero, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqBanquetHero*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, uid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqBanquetHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqBanquetHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqBanquetHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqBanquetHero)
  return false;
#undef DO_
}

void ReqBanquetHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqBanquetHero)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqBanquetHero)
}

::google::protobuf::uint8* ReqBanquetHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqBanquetHero)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqBanquetHero)
  return target;
}

size_t ReqBanquetHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqBanquetHero)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBanquetHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqBanquetHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqBanquetHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBanquetHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqBanquetHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqBanquetHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqBanquetHero::MergeFrom(const ReqBanquetHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqBanquetHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqBanquetHero::UnsafeMergeFrom(const ReqBanquetHero& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqBanquetHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqBanquetHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBanquetHero::CopyFrom(const ReqBanquetHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqBanquetHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqBanquetHero::IsInitialized() const {

  return true;
}

void ReqBanquetHero::Swap(ReqBanquetHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBanquetHero::InternalSwap(ReqBanquetHero* other) {
  std::swap(type_, other->type_);
  std::swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBanquetHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBanquetHero_descriptor_;
  metadata.reflection = ReqBanquetHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBanquetHero

// optional uint32 type = 1;
void ReqBanquetHero::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 ReqBanquetHero::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBanquetHero.type)
  return type_;
}
void ReqBanquetHero::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBanquetHero.type)
}

// optional uint32 uid = 2;
void ReqBanquetHero::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ReqBanquetHero::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqBanquetHero.uid)
  return uid_;
}
void ReqBanquetHero::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqBanquetHero.uid)
}

inline const ReqBanquetHero* ReqBanquetHero::internal_default_instance() {
  return &ReqBanquetHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BanquetHeroAck::kUidFieldNumber;
const int BanquetHeroAck::kHerosFieldNumber;
const int BanquetHeroAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BanquetHeroAck::BanquetHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.BanquetHeroAck)
}

void BanquetHeroAck::InitAsDefaultInstance() {
}

BanquetHeroAck::BanquetHeroAck(const BanquetHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.BanquetHeroAck)
}

void BanquetHeroAck::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&uid_) + sizeof(error_));
  _cached_size_ = 0;
}

BanquetHeroAck::~BanquetHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.BanquetHeroAck)
  SharedDtor();
}

void BanquetHeroAck::SharedDtor() {
}

void BanquetHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanquetHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanquetHeroAck_descriptor_;
}

const BanquetHeroAck& BanquetHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BanquetHeroAck> BanquetHeroAck_default_instance_;

BanquetHeroAck* BanquetHeroAck::New(::google::protobuf::Arena* arena) const {
  BanquetHeroAck* n = new BanquetHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BanquetHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.BanquetHeroAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BanquetHeroAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BanquetHeroAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, error_);

#undef ZR_HELPER_
#undef ZR_

  heros_.Clear();
}

bool BanquetHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.BanquetHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heros;
        break;
      }

      // repeated uint64 heros = 2;
      case 2: {
        if (tag == 18) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heros())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_heros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.BanquetHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.BanquetHeroAck)
  return false;
#undef DO_
}

void BanquetHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.BanquetHeroAck)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated uint64 heros = 2;
  if (this->heros_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heros_cached_byte_size_);
  }
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->heros(i), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.BanquetHeroAck)
}

::google::protobuf::uint8* BanquetHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.BanquetHeroAck)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // repeated uint64 heros = 2;
  if (this->heros_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heros_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->heros(i), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.BanquetHeroAck)
  return target;
}

size_t BanquetHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.BanquetHeroAck)
  size_t total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated uint64 heros = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->heros_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heros(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heros_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanquetHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.BanquetHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BanquetHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BanquetHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.BanquetHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.BanquetHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void BanquetHeroAck::MergeFrom(const BanquetHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.BanquetHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BanquetHeroAck::UnsafeMergeFrom(const BanquetHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  heros_.UnsafeMergeFrom(from.heros_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void BanquetHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.BanquetHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanquetHeroAck::CopyFrom(const BanquetHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.BanquetHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BanquetHeroAck::IsInitialized() const {

  return true;
}

void BanquetHeroAck::Swap(BanquetHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BanquetHeroAck::InternalSwap(BanquetHeroAck* other) {
  std::swap(uid_, other->uid_);
  heros_.UnsafeArenaSwap(&other->heros_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BanquetHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanquetHeroAck_descriptor_;
  metadata.reflection = BanquetHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BanquetHeroAck

// optional uint32 uid = 1;
void BanquetHeroAck::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BanquetHeroAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeroAck.uid)
  return uid_;
}
void BanquetHeroAck::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeroAck.uid)
}

// repeated uint64 heros = 2;
int BanquetHeroAck::heros_size() const {
  return heros_.size();
}
void BanquetHeroAck::clear_heros() {
  heros_.Clear();
}
::google::protobuf::uint64 BanquetHeroAck::heros(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeroAck.heros)
  return heros_.Get(index);
}
void BanquetHeroAck::set_heros(int index, ::google::protobuf::uint64 value) {
  heros_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeroAck.heros)
}
void BanquetHeroAck::add_heros(::google::protobuf::uint64 value) {
  heros_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.BanquetHeroAck.heros)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BanquetHeroAck::heros() const {
  // @@protoc_insertion_point(field_list:NetMsg.BanquetHeroAck.heros)
  return heros_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BanquetHeroAck::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.BanquetHeroAck.heros)
  return &heros_;
}

// optional uint32 error = 3;
void BanquetHeroAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 BanquetHeroAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.BanquetHeroAck.error)
  return error_;
}
void BanquetHeroAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.BanquetHeroAck.error)
}

inline const BanquetHeroAck* BanquetHeroAck::internal_default_instance() {
  return &BanquetHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarInfo::kIdFieldNumber;
const int WorldWarInfo::kForce1FieldNumber;
const int WorldWarInfo::kForce2FieldNumber;
const int WorldWarInfo::kTypeFieldNumber;
const int WorldWarInfo::kPathFieldNumber;
const int WorldWarInfo::kPercentFieldNumber;
const int WorldWarInfo::kLeftTimeFieldNumber;
const int WorldWarInfo::kWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarInfo::WorldWarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarInfo)
}

void WorldWarInfo::InitAsDefaultInstance() {
}

WorldWarInfo::WorldWarInfo(const WorldWarInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarInfo)
}

void WorldWarInfo::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&warid_) -
    reinterpret_cast<char*>(&id_) + sizeof(warid_));
  _cached_size_ = 0;
}

WorldWarInfo::~WorldWarInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarInfo)
  SharedDtor();
}

void WorldWarInfo::SharedDtor() {
}

void WorldWarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarInfo_descriptor_;
}

const WorldWarInfo& WorldWarInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarInfo> WorldWarInfo_default_instance_;

WorldWarInfo* WorldWarInfo::New(::google::protobuf::Arena* arena) const {
  WorldWarInfo* n = new WorldWarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, warid_);

#undef ZR_HELPER_
#undef ZR_

}

bool WorldWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_force1;
        break;
      }

      // optional uint32 force1 = 2;
      case 2: {
        if (tag == 16) {
         parse_force1:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_force2;
        break;
      }

      // optional uint32 force2 = 3;
      case 3: {
        if (tag == 24) {
         parse_force2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_path;
        break;
      }

      // optional uint32 path = 5;
      case 5: {
        if (tag == 40) {
         parse_path:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_percent;
        break;
      }

      // optional float percent = 6;
      case 6: {
        if (tag == 53) {
         parse_percent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 7;
      case 7: {
        if (tag == 56) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_warId;
        break;
      }

      // optional uint32 warId = 8;
      case 8: {
        if (tag == 64) {
         parse_warId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarInfo)
  return false;
#undef DO_
}

void WorldWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 force1 = 2;
  if (this->force1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->force1(), output);
  }

  // optional uint32 force2 = 3;
  if (this->force2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->force2(), output);
  }

  // optional uint32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 path = 5;
  if (this->path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->path(), output);
  }

  // optional float percent = 6;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->percent(), output);
  }

  // optional uint32 leftTime = 7;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lefttime(), output);
  }

  // optional uint32 warId = 8;
  if (this->warid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->warid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarInfo)
}

::google::protobuf::uint8* WorldWarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 force1 = 2;
  if (this->force1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->force1(), target);
  }

  // optional uint32 force2 = 3;
  if (this->force2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->force2(), target);
  }

  // optional uint32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 path = 5;
  if (this->path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->path(), target);
  }

  // optional float percent = 6;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->percent(), target);
  }

  // optional uint32 leftTime = 7;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lefttime(), target);
  }

  // optional uint32 warId = 8;
  if (this->warid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->warid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarInfo)
  return target;
}

size_t WorldWarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarInfo)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 force1 = 2;
  if (this->force1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force1());
  }

  // optional uint32 force2 = 3;
  if (this->force2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force2());
  }

  // optional uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 path = 5;
  if (this->path() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->path());
  }

  // optional float percent = 6;
  if (this->percent() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 leftTime = 7;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  // optional uint32 warId = 8;
  if (this->warid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->warid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarInfo)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarInfo::MergeFrom(const WorldWarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarInfo::UnsafeMergeFrom(const WorldWarInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.force1() != 0) {
    set_force1(from.force1());
  }
  if (from.force2() != 0) {
    set_force2(from.force2());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.path() != 0) {
    set_path(from.path());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
  if (from.warid() != 0) {
    set_warid(from.warid());
  }
}

void WorldWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarInfo::CopyFrom(const WorldWarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarInfo::IsInitialized() const {

  return true;
}

void WorldWarInfo::Swap(WorldWarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarInfo::InternalSwap(WorldWarInfo* other) {
  std::swap(id_, other->id_);
  std::swap(force1_, other->force1_);
  std::swap(force2_, other->force2_);
  std::swap(type_, other->type_);
  std::swap(path_, other->path_);
  std::swap(percent_, other->percent_);
  std::swap(lefttime_, other->lefttime_);
  std::swap(warid_, other->warid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarInfo_descriptor_;
  metadata.reflection = WorldWarInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarInfo

// optional uint32 id = 1;
void WorldWarInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 WorldWarInfo::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.id)
  return id_;
}
void WorldWarInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.id)
}

// optional uint32 force1 = 2;
void WorldWarInfo::clear_force1() {
  force1_ = 0u;
}
::google::protobuf::uint32 WorldWarInfo::force1() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.force1)
  return force1_;
}
void WorldWarInfo::set_force1(::google::protobuf::uint32 value) {
  
  force1_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.force1)
}

// optional uint32 force2 = 3;
void WorldWarInfo::clear_force2() {
  force2_ = 0u;
}
::google::protobuf::uint32 WorldWarInfo::force2() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.force2)
  return force2_;
}
void WorldWarInfo::set_force2(::google::protobuf::uint32 value) {
  
  force2_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.force2)
}

// optional uint32 type = 4;
void WorldWarInfo::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 WorldWarInfo::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.type)
  return type_;
}
void WorldWarInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.type)
}

// optional uint32 path = 5;
void WorldWarInfo::clear_path() {
  path_ = 0u;
}
::google::protobuf::uint32 WorldWarInfo::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.path)
  return path_;
}
void WorldWarInfo::set_path(::google::protobuf::uint32 value) {
  
  path_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.path)
}

// optional float percent = 6;
void WorldWarInfo::clear_percent() {
  percent_ = 0;
}
float WorldWarInfo::percent() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.percent)
  return percent_;
}
void WorldWarInfo::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.percent)
}

// optional uint32 leftTime = 7;
void WorldWarInfo::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 WorldWarInfo::lefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.leftTime)
  return lefttime_;
}
void WorldWarInfo::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.leftTime)
}

// optional uint32 warId = 8;
void WorldWarInfo::clear_warid() {
  warid_ = 0u;
}
::google::protobuf::uint32 WorldWarInfo::warid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarInfo.warId)
  return warid_;
}
void WorldWarInfo::set_warid(::google::protobuf::uint32 value) {
  
  warid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarInfo.warId)
}

inline const WorldWarInfo* WorldWarInfo::internal_default_instance() {
  return &WorldWarInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarAck::kWarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarAck::WorldWarAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarAck)
}

void WorldWarAck::InitAsDefaultInstance() {
}

WorldWarAck::WorldWarAck(const WorldWarAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarAck)
}

void WorldWarAck::SharedCtor() {
  _cached_size_ = 0;
}

WorldWarAck::~WorldWarAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarAck)
  SharedDtor();
}

void WorldWarAck::SharedDtor() {
}

void WorldWarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarAck_descriptor_;
}

const WorldWarAck& WorldWarAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarAck> WorldWarAck_default_instance_;

WorldWarAck* WorldWarAck::New(::google::protobuf::Arena* arena) const {
  WorldWarAck* n = new WorldWarAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarAck)
  wars_.Clear();
}

bool WorldWarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.WorldWarInfo wars = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_wars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_wars;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarAck)
  return false;
#undef DO_
}

void WorldWarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarAck)
  // repeated .NetMsg.WorldWarInfo wars = 1;
  for (unsigned int i = 0, n = this->wars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wars(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarAck)
}

::google::protobuf::uint8* WorldWarAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarAck)
  // repeated .NetMsg.WorldWarInfo wars = 1;
  for (unsigned int i = 0, n = this->wars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->wars(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarAck)
  return target;
}

size_t WorldWarAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarAck)
  size_t total_size = 0;

  // repeated .NetMsg.WorldWarInfo wars = 1;
  {
    unsigned int count = this->wars_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wars(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarAck)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarAck::MergeFrom(const WorldWarAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarAck::UnsafeMergeFrom(const WorldWarAck& from) {
  GOOGLE_DCHECK(&from != this);
  wars_.MergeFrom(from.wars_);
}

void WorldWarAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarAck::CopyFrom(const WorldWarAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarAck::IsInitialized() const {

  return true;
}

void WorldWarAck::Swap(WorldWarAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarAck::InternalSwap(WorldWarAck* other) {
  wars_.UnsafeArenaSwap(&other->wars_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarAck_descriptor_;
  metadata.reflection = WorldWarAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarAck

// repeated .NetMsg.WorldWarInfo wars = 1;
int WorldWarAck::wars_size() const {
  return wars_.size();
}
void WorldWarAck::clear_wars() {
  wars_.Clear();
}
const ::NetMsg::WorldWarInfo& WorldWarAck::wars(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarAck.wars)
  return wars_.Get(index);
}
::NetMsg::WorldWarInfo* WorldWarAck::mutable_wars(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarAck.wars)
  return wars_.Mutable(index);
}
::NetMsg::WorldWarInfo* WorldWarAck::add_wars() {
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarAck.wars)
  return wars_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarInfo >*
WorldWarAck::mutable_wars() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarAck.wars)
  return &wars_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarInfo >&
WorldWarAck::wars() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarAck.wars)
  return wars_;
}

inline const WorldWarAck* WorldWarAck::internal_default_instance() {
  return &WorldWarAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWorldBattle::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWorldBattle::ReqWorldBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqWorldBattle)
}

void ReqWorldBattle::InitAsDefaultInstance() {
}

ReqWorldBattle::ReqWorldBattle(const ReqWorldBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqWorldBattle)
}

void ReqWorldBattle::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

ReqWorldBattle::~ReqWorldBattle() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqWorldBattle)
  SharedDtor();
}

void ReqWorldBattle::SharedDtor() {
}

void ReqWorldBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldBattle_descriptor_;
}

const ReqWorldBattle& ReqWorldBattle::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqWorldBattle> ReqWorldBattle_default_instance_;

ReqWorldBattle* ReqWorldBattle::New(::google::protobuf::Arena* arena) const {
  ReqWorldBattle* n = new ReqWorldBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWorldBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqWorldBattle)
  id_ = 0u;
}

bool ReqWorldBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqWorldBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqWorldBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqWorldBattle)
  return false;
#undef DO_
}

void ReqWorldBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqWorldBattle)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqWorldBattle)
}

::google::protobuf::uint8* ReqWorldBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqWorldBattle)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqWorldBattle)
  return target;
}

size_t ReqWorldBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqWorldBattle)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqWorldBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqWorldBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWorldBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqWorldBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqWorldBattle)
    UnsafeMergeFrom(*source);
  }
}

void ReqWorldBattle::MergeFrom(const ReqWorldBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqWorldBattle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqWorldBattle::UnsafeMergeFrom(const ReqWorldBattle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqWorldBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqWorldBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldBattle::CopyFrom(const ReqWorldBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqWorldBattle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqWorldBattle::IsInitialized() const {

  return true;
}

void ReqWorldBattle::Swap(ReqWorldBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWorldBattle::InternalSwap(ReqWorldBattle* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWorldBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldBattle_descriptor_;
  metadata.reflection = ReqWorldBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWorldBattle

// optional uint32 id = 1;
void ReqWorldBattle::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqWorldBattle::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldBattle.id)
  return id_;
}
void ReqWorldBattle::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldBattle.id)
}

inline const ReqWorldBattle* ReqWorldBattle::internal_default_instance() {
  return &ReqWorldBattle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldBattleAck::kIdFieldNumber;
const int WorldBattleAck::kBattleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldBattleAck::WorldBattleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldBattleAck)
}

void WorldBattleAck::InitAsDefaultInstance() {
  battle_ = const_cast< ::NetMsg::BattleAck*>(
      ::NetMsg::BattleAck::internal_default_instance());
}

WorldBattleAck::WorldBattleAck(const WorldBattleAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldBattleAck)
}

void WorldBattleAck::SharedCtor() {
  battle_ = NULL;
  id_ = 0u;
  _cached_size_ = 0;
}

WorldBattleAck::~WorldBattleAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldBattleAck)
  SharedDtor();
}

void WorldBattleAck::SharedDtor() {
  if (this != &WorldBattleAck_default_instance_.get()) {
    delete battle_;
  }
}

void WorldBattleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBattleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBattleAck_descriptor_;
}

const WorldBattleAck& WorldBattleAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldBattleAck> WorldBattleAck_default_instance_;

WorldBattleAck* WorldBattleAck::New(::google::protobuf::Arena* arena) const {
  WorldBattleAck* n = new WorldBattleAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldBattleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldBattleAck)
  id_ = 0u;
  if (GetArenaNoVirtual() == NULL && battle_ != NULL) delete battle_;
  battle_ = NULL;
}

bool WorldBattleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldBattleAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_battle;
        break;
      }

      // optional .NetMsg.BattleAck battle = 2;
      case 2: {
        if (tag == 18) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldBattleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldBattleAck)
  return false;
#undef DO_
}

void WorldBattleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldBattleAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .NetMsg.BattleAck battle = 2;
  if (this->has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->battle_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldBattleAck)
}

::google::protobuf::uint8* WorldBattleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldBattleAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .NetMsg.BattleAck battle = 2;
  if (this->has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->battle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldBattleAck)
  return target;
}

size_t WorldBattleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldBattleAck)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .NetMsg.BattleAck battle = 2;
  if (this->has_battle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->battle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBattleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldBattleAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldBattleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldBattleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldBattleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldBattleAck)
    UnsafeMergeFrom(*source);
  }
}

void WorldBattleAck::MergeFrom(const WorldBattleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldBattleAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldBattleAck::UnsafeMergeFrom(const WorldBattleAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_battle()) {
    mutable_battle()->::NetMsg::BattleAck::MergeFrom(from.battle());
  }
}

void WorldBattleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldBattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBattleAck::CopyFrom(const WorldBattleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldBattleAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldBattleAck::IsInitialized() const {

  return true;
}

void WorldBattleAck::Swap(WorldBattleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldBattleAck::InternalSwap(WorldBattleAck* other) {
  std::swap(id_, other->id_);
  std::swap(battle_, other->battle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldBattleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBattleAck_descriptor_;
  metadata.reflection = WorldBattleAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldBattleAck

// optional uint32 id = 1;
void WorldBattleAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 WorldBattleAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldBattleAck.id)
  return id_;
}
void WorldBattleAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldBattleAck.id)
}

// optional .NetMsg.BattleAck battle = 2;
bool WorldBattleAck::has_battle() const {
  return this != internal_default_instance() && battle_ != NULL;
}
void WorldBattleAck::clear_battle() {
  if (GetArenaNoVirtual() == NULL && battle_ != NULL) delete battle_;
  battle_ = NULL;
}
const ::NetMsg::BattleAck& WorldBattleAck::battle() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldBattleAck.battle)
  return battle_ != NULL ? *battle_
                         : *::NetMsg::BattleAck::internal_default_instance();
}
::NetMsg::BattleAck* WorldBattleAck::mutable_battle() {
  
  if (battle_ == NULL) {
    battle_ = new ::NetMsg::BattleAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldBattleAck.battle)
  return battle_;
}
::NetMsg::BattleAck* WorldBattleAck::release_battle() {
  // @@protoc_insertion_point(field_release:NetMsg.WorldBattleAck.battle)
  
  ::NetMsg::BattleAck* temp = battle_;
  battle_ = NULL;
  return temp;
}
void WorldBattleAck::set_allocated_battle(::NetMsg::BattleAck* battle) {
  delete battle_;
  battle_ = battle;
  if (battle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.WorldBattleAck.battle)
}

inline const WorldBattleAck* WorldBattleAck::internal_default_instance() {
  return &WorldBattleAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWorldWarTopList::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWorldWarTopList::ReqWorldWarTopList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqWorldWarTopList)
}

void ReqWorldWarTopList::InitAsDefaultInstance() {
}

ReqWorldWarTopList::ReqWorldWarTopList(const ReqWorldWarTopList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqWorldWarTopList)
}

void ReqWorldWarTopList::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

ReqWorldWarTopList::~ReqWorldWarTopList() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqWorldWarTopList)
  SharedDtor();
}

void ReqWorldWarTopList::SharedDtor() {
}

void ReqWorldWarTopList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldWarTopList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldWarTopList_descriptor_;
}

const ReqWorldWarTopList& ReqWorldWarTopList::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqWorldWarTopList> ReqWorldWarTopList_default_instance_;

ReqWorldWarTopList* ReqWorldWarTopList::New(::google::protobuf::Arena* arena) const {
  ReqWorldWarTopList* n = new ReqWorldWarTopList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWorldWarTopList::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqWorldWarTopList)
  id_ = 0u;
}

bool ReqWorldWarTopList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqWorldWarTopList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqWorldWarTopList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqWorldWarTopList)
  return false;
#undef DO_
}

void ReqWorldWarTopList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqWorldWarTopList)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqWorldWarTopList)
}

::google::protobuf::uint8* ReqWorldWarTopList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqWorldWarTopList)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqWorldWarTopList)
  return target;
}

size_t ReqWorldWarTopList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqWorldWarTopList)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldWarTopList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqWorldWarTopList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqWorldWarTopList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWorldWarTopList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqWorldWarTopList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqWorldWarTopList)
    UnsafeMergeFrom(*source);
  }
}

void ReqWorldWarTopList::MergeFrom(const ReqWorldWarTopList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqWorldWarTopList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqWorldWarTopList::UnsafeMergeFrom(const ReqWorldWarTopList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqWorldWarTopList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqWorldWarTopList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldWarTopList::CopyFrom(const ReqWorldWarTopList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqWorldWarTopList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqWorldWarTopList::IsInitialized() const {

  return true;
}

void ReqWorldWarTopList::Swap(ReqWorldWarTopList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWorldWarTopList::InternalSwap(ReqWorldWarTopList* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWorldWarTopList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldWarTopList_descriptor_;
  metadata.reflection = ReqWorldWarTopList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWorldWarTopList

// optional uint32 id = 1;
void ReqWorldWarTopList::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarTopList::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarTopList.id)
  return id_;
}
void ReqWorldWarTopList::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarTopList.id)
}

inline const ReqWorldWarTopList* ReqWorldWarTopList::internal_default_instance() {
  return &ReqWorldWarTopList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarUserInfo::kUserIdFieldNumber;
const int WorldWarUserInfo::kExploitFieldNumber;
const int WorldWarUserInfo::kNameFieldNumber;
const int WorldWarUserInfo::kTitleFieldNumber;
const int WorldWarUserInfo::kForceFieldNumber;
const int WorldWarUserInfo::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarUserInfo::WorldWarUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarUserInfo)
}

void WorldWarUserInfo::InitAsDefaultInstance() {
}

WorldWarUserInfo::WorldWarUserInfo(const WorldWarUserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarUserInfo)
}

void WorldWarUserInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&userid_) + sizeof(level_));
  _cached_size_ = 0;
}

WorldWarUserInfo::~WorldWarUserInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarUserInfo)
  SharedDtor();
}

void WorldWarUserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorldWarUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarUserInfo_descriptor_;
}

const WorldWarUserInfo& WorldWarUserInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarUserInfo> WorldWarUserInfo_default_instance_;

WorldWarUserInfo* WorldWarUserInfo::New(::google::protobuf::Arena* arena) const {
  WorldWarUserInfo* n = new WorldWarUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarUserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarUserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarUserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, level_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool WorldWarUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exploit;
        break;
      }

      // optional uint32 exploit = 2;
      case 2: {
        if (tag == 16) {
         parse_exploit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.WorldWarUserInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_title;
        break;
      }

      // optional uint32 title = 4;
      case 4: {
        if (tag == 32) {
         parse_title:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_force;
        break;
      }

      // optional uint32 force = 5;
      case 5: {
        if (tag == 40) {
         parse_force:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarUserInfo)
  return false;
#undef DO_
}

void WorldWarUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarUserInfo)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 exploit = 2;
  if (this->exploit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exploit(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.WorldWarUserInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 title = 4;
  if (this->title() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->title(), output);
  }

  // optional uint32 force = 5;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->force(), output);
  }

  // optional uint32 level = 6;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarUserInfo)
}

::google::protobuf::uint8* WorldWarUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarUserInfo)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 exploit = 2;
  if (this->exploit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exploit(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.WorldWarUserInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 title = 4;
  if (this->title() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->title(), target);
  }

  // optional uint32 force = 5;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->force(), target);
  }

  // optional uint32 level = 6;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarUserInfo)
  return target;
}

size_t WorldWarUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarUserInfo)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional uint32 exploit = 2;
  if (this->exploit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exploit());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 title = 4;
  if (this->title() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title());
  }

  // optional uint32 force = 5;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  // optional uint32 level = 6;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarUserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarUserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarUserInfo)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarUserInfo::MergeFrom(const WorldWarUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarUserInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarUserInfo::UnsafeMergeFrom(const WorldWarUserInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.exploit() != 0) {
    set_exploit(from.exploit());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title() != 0) {
    set_title(from.title());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void WorldWarUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarUserInfo::CopyFrom(const WorldWarUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarUserInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarUserInfo::IsInitialized() const {

  return true;
}

void WorldWarUserInfo::Swap(WorldWarUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarUserInfo::InternalSwap(WorldWarUserInfo* other) {
  std::swap(userid_, other->userid_);
  std::swap(exploit_, other->exploit_);
  name_.Swap(&other->name_);
  std::swap(title_, other->title_);
  std::swap(force_, other->force_);
  std::swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarUserInfo_descriptor_;
  metadata.reflection = WorldWarUserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarUserInfo

// optional uint32 userId = 1;
void WorldWarUserInfo::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 WorldWarUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarUserInfo.userId)
  return userid_;
}
void WorldWarUserInfo::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarUserInfo.userId)
}

// optional uint32 exploit = 2;
void WorldWarUserInfo::clear_exploit() {
  exploit_ = 0u;
}
::google::protobuf::uint32 WorldWarUserInfo::exploit() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarUserInfo.exploit)
  return exploit_;
}
void WorldWarUserInfo::set_exploit(::google::protobuf::uint32 value) {
  
  exploit_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarUserInfo.exploit)
}

// optional string name = 3;
void WorldWarUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WorldWarUserInfo::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarUserInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WorldWarUserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarUserInfo.name)
}
void WorldWarUserInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.WorldWarUserInfo.name)
}
void WorldWarUserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.WorldWarUserInfo.name)
}
::std::string* WorldWarUserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarUserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WorldWarUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.WorldWarUserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WorldWarUserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.WorldWarUserInfo.name)
}

// optional uint32 title = 4;
void WorldWarUserInfo::clear_title() {
  title_ = 0u;
}
::google::protobuf::uint32 WorldWarUserInfo::title() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarUserInfo.title)
  return title_;
}
void WorldWarUserInfo::set_title(::google::protobuf::uint32 value) {
  
  title_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarUserInfo.title)
}

// optional uint32 force = 5;
void WorldWarUserInfo::clear_force() {
  force_ = 0u;
}
::google::protobuf::uint32 WorldWarUserInfo::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarUserInfo.force)
  return force_;
}
void WorldWarUserInfo::set_force(::google::protobuf::uint32 value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarUserInfo.force)
}

// optional uint32 level = 6;
void WorldWarUserInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 WorldWarUserInfo::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarUserInfo.level)
  return level_;
}
void WorldWarUserInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarUserInfo.level)
}

inline const WorldWarUserInfo* WorldWarUserInfo::internal_default_instance() {
  return &WorldWarUserInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarTopListAck::kIdFieldNumber;
const int WorldWarTopListAck::kTolListFieldNumber;
const int WorldWarTopListAck::kLastListFieldNumber;
const int WorldWarTopListAck::kTolRankFieldNumber;
const int WorldWarTopListAck::kLastRankFieldNumber;
const int WorldWarTopListAck::kTolExploitFieldNumber;
const int WorldWarTopListAck::kLastExploitFieldNumber;
const int WorldWarTopListAck::kTolLeftTimeFieldNumber;
const int WorldWarTopListAck::kPeriodLeftTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarTopListAck::WorldWarTopListAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarTopListAck)
}

void WorldWarTopListAck::InitAsDefaultInstance() {
}

WorldWarTopListAck::WorldWarTopListAck(const WorldWarTopListAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarTopListAck)
}

void WorldWarTopListAck::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&periodlefttime_) -
    reinterpret_cast<char*>(&id_) + sizeof(periodlefttime_));
  _cached_size_ = 0;
}

WorldWarTopListAck::~WorldWarTopListAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarTopListAck)
  SharedDtor();
}

void WorldWarTopListAck::SharedDtor() {
}

void WorldWarTopListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarTopListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarTopListAck_descriptor_;
}

const WorldWarTopListAck& WorldWarTopListAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarTopListAck> WorldWarTopListAck_default_instance_;

WorldWarTopListAck* WorldWarTopListAck::New(::google::protobuf::Arena* arena) const {
  WorldWarTopListAck* n = new WorldWarTopListAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarTopListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarTopListAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarTopListAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarTopListAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, tollefttime_);
  periodlefttime_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  tollist_.Clear();
  lastlist_.Clear();
}

bool WorldWarTopListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarTopListAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tolList;
        break;
      }

      // repeated .NetMsg.WorldWarUserInfo tolList = 2;
      case 2: {
        if (tag == 18) {
         parse_tolList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tolList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tollist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tolList;
        if (input->ExpectTag(26)) goto parse_loop_lastList;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .NetMsg.WorldWarUserInfo lastList = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lastList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lastlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_lastList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_tolRank;
        break;
      }

      // optional uint32 tolRank = 4;
      case 4: {
        if (tag == 32) {
         parse_tolRank:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tolrank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastRank;
        break;
      }

      // optional uint32 lastRank = 5;
      case 5: {
        if (tag == 40) {
         parse_lastRank:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tolExploit;
        break;
      }

      // optional uint32 tolExploit = 6;
      case 6: {
        if (tag == 48) {
         parse_tolExploit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tolexploit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lastExploit;
        break;
      }

      // optional uint32 lastExploit = 7;
      case 7: {
        if (tag == 56) {
         parse_lastExploit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastexploit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tolLeftTime;
        break;
      }

      // optional uint32 tolLeftTime = 8;
      case 8: {
        if (tag == 64) {
         parse_tolLeftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tollefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_periodLeftTime;
        break;
      }

      // optional uint32 periodLeftTime = 9;
      case 9: {
        if (tag == 72) {
         parse_periodLeftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &periodlefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarTopListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarTopListAck)
  return false;
#undef DO_
}

void WorldWarTopListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarTopListAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .NetMsg.WorldWarUserInfo tolList = 2;
  for (unsigned int i = 0, n = this->tollist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tollist(i), output);
  }

  // repeated .NetMsg.WorldWarUserInfo lastList = 3;
  for (unsigned int i = 0, n = this->lastlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lastlist(i), output);
  }

  // optional uint32 tolRank = 4;
  if (this->tolrank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tolrank(), output);
  }

  // optional uint32 lastRank = 5;
  if (this->lastrank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastrank(), output);
  }

  // optional uint32 tolExploit = 6;
  if (this->tolexploit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tolexploit(), output);
  }

  // optional uint32 lastExploit = 7;
  if (this->lastexploit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lastexploit(), output);
  }

  // optional uint32 tolLeftTime = 8;
  if (this->tollefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tollefttime(), output);
  }

  // optional uint32 periodLeftTime = 9;
  if (this->periodlefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->periodlefttime(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarTopListAck)
}

::google::protobuf::uint8* WorldWarTopListAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarTopListAck)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .NetMsg.WorldWarUserInfo tolList = 2;
  for (unsigned int i = 0, n = this->tollist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tollist(i), false, target);
  }

  // repeated .NetMsg.WorldWarUserInfo lastList = 3;
  for (unsigned int i = 0, n = this->lastlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->lastlist(i), false, target);
  }

  // optional uint32 tolRank = 4;
  if (this->tolrank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tolrank(), target);
  }

  // optional uint32 lastRank = 5;
  if (this->lastrank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastrank(), target);
  }

  // optional uint32 tolExploit = 6;
  if (this->tolexploit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tolexploit(), target);
  }

  // optional uint32 lastExploit = 7;
  if (this->lastexploit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lastexploit(), target);
  }

  // optional uint32 tolLeftTime = 8;
  if (this->tollefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tollefttime(), target);
  }

  // optional uint32 periodLeftTime = 9;
  if (this->periodlefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->periodlefttime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarTopListAck)
  return target;
}

size_t WorldWarTopListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarTopListAck)
  size_t total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 tolRank = 4;
  if (this->tolrank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tolrank());
  }

  // optional uint32 lastRank = 5;
  if (this->lastrank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lastrank());
  }

  // optional uint32 tolExploit = 6;
  if (this->tolexploit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tolexploit());
  }

  // optional uint32 lastExploit = 7;
  if (this->lastexploit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lastexploit());
  }

  // optional uint32 tolLeftTime = 8;
  if (this->tollefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tollefttime());
  }

  // optional uint32 periodLeftTime = 9;
  if (this->periodlefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->periodlefttime());
  }

  // repeated .NetMsg.WorldWarUserInfo tolList = 2;
  {
    unsigned int count = this->tollist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tollist(i));
    }
  }

  // repeated .NetMsg.WorldWarUserInfo lastList = 3;
  {
    unsigned int count = this->lastlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarTopListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarTopListAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarTopListAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarTopListAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarTopListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarTopListAck)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarTopListAck::MergeFrom(const WorldWarTopListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarTopListAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarTopListAck::UnsafeMergeFrom(const WorldWarTopListAck& from) {
  GOOGLE_DCHECK(&from != this);
  tollist_.MergeFrom(from.tollist_);
  lastlist_.MergeFrom(from.lastlist_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.tolrank() != 0) {
    set_tolrank(from.tolrank());
  }
  if (from.lastrank() != 0) {
    set_lastrank(from.lastrank());
  }
  if (from.tolexploit() != 0) {
    set_tolexploit(from.tolexploit());
  }
  if (from.lastexploit() != 0) {
    set_lastexploit(from.lastexploit());
  }
  if (from.tollefttime() != 0) {
    set_tollefttime(from.tollefttime());
  }
  if (from.periodlefttime() != 0) {
    set_periodlefttime(from.periodlefttime());
  }
}

void WorldWarTopListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarTopListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarTopListAck::CopyFrom(const WorldWarTopListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarTopListAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarTopListAck::IsInitialized() const {

  return true;
}

void WorldWarTopListAck::Swap(WorldWarTopListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarTopListAck::InternalSwap(WorldWarTopListAck* other) {
  std::swap(id_, other->id_);
  tollist_.UnsafeArenaSwap(&other->tollist_);
  lastlist_.UnsafeArenaSwap(&other->lastlist_);
  std::swap(tolrank_, other->tolrank_);
  std::swap(lastrank_, other->lastrank_);
  std::swap(tolexploit_, other->tolexploit_);
  std::swap(lastexploit_, other->lastexploit_);
  std::swap(tollefttime_, other->tollefttime_);
  std::swap(periodlefttime_, other->periodlefttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarTopListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarTopListAck_descriptor_;
  metadata.reflection = WorldWarTopListAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarTopListAck

// optional uint32 id = 1;
void WorldWarTopListAck::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 WorldWarTopListAck::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.id)
  return id_;
}
void WorldWarTopListAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarTopListAck.id)
}

// repeated .NetMsg.WorldWarUserInfo tolList = 2;
int WorldWarTopListAck::tollist_size() const {
  return tollist_.size();
}
void WorldWarTopListAck::clear_tollist() {
  tollist_.Clear();
}
const ::NetMsg::WorldWarUserInfo& WorldWarTopListAck::tollist(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.tolList)
  return tollist_.Get(index);
}
::NetMsg::WorldWarUserInfo* WorldWarTopListAck::mutable_tollist(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarTopListAck.tolList)
  return tollist_.Mutable(index);
}
::NetMsg::WorldWarUserInfo* WorldWarTopListAck::add_tollist() {
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarTopListAck.tolList)
  return tollist_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarUserInfo >*
WorldWarTopListAck::mutable_tollist() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarTopListAck.tolList)
  return &tollist_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarUserInfo >&
WorldWarTopListAck::tollist() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarTopListAck.tolList)
  return tollist_;
}

// repeated .NetMsg.WorldWarUserInfo lastList = 3;
int WorldWarTopListAck::lastlist_size() const {
  return lastlist_.size();
}
void WorldWarTopListAck::clear_lastlist() {
  lastlist_.Clear();
}
const ::NetMsg::WorldWarUserInfo& WorldWarTopListAck::lastlist(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.lastList)
  return lastlist_.Get(index);
}
::NetMsg::WorldWarUserInfo* WorldWarTopListAck::mutable_lastlist(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarTopListAck.lastList)
  return lastlist_.Mutable(index);
}
::NetMsg::WorldWarUserInfo* WorldWarTopListAck::add_lastlist() {
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarTopListAck.lastList)
  return lastlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarUserInfo >*
WorldWarTopListAck::mutable_lastlist() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarTopListAck.lastList)
  return &lastlist_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarUserInfo >&
WorldWarTopListAck::lastlist() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarTopListAck.lastList)
  return lastlist_;
}

// optional uint32 tolRank = 4;
void WorldWarTopListAck::clear_tolrank() {
  tolrank_ = 0u;
}
::google::protobuf::uint32 WorldWarTopListAck::tolrank() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.tolRank)
  return tolrank_;
}
void WorldWarTopListAck::set_tolrank(::google::protobuf::uint32 value) {
  
  tolrank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarTopListAck.tolRank)
}

// optional uint32 lastRank = 5;
void WorldWarTopListAck::clear_lastrank() {
  lastrank_ = 0u;
}
::google::protobuf::uint32 WorldWarTopListAck::lastrank() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.lastRank)
  return lastrank_;
}
void WorldWarTopListAck::set_lastrank(::google::protobuf::uint32 value) {
  
  lastrank_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarTopListAck.lastRank)
}

// optional uint32 tolExploit = 6;
void WorldWarTopListAck::clear_tolexploit() {
  tolexploit_ = 0u;
}
::google::protobuf::uint32 WorldWarTopListAck::tolexploit() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.tolExploit)
  return tolexploit_;
}
void WorldWarTopListAck::set_tolexploit(::google::protobuf::uint32 value) {
  
  tolexploit_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarTopListAck.tolExploit)
}

// optional uint32 lastExploit = 7;
void WorldWarTopListAck::clear_lastexploit() {
  lastexploit_ = 0u;
}
::google::protobuf::uint32 WorldWarTopListAck::lastexploit() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.lastExploit)
  return lastexploit_;
}
void WorldWarTopListAck::set_lastexploit(::google::protobuf::uint32 value) {
  
  lastexploit_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarTopListAck.lastExploit)
}

// optional uint32 tolLeftTime = 8;
void WorldWarTopListAck::clear_tollefttime() {
  tollefttime_ = 0u;
}
::google::protobuf::uint32 WorldWarTopListAck::tollefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.tolLeftTime)
  return tollefttime_;
}
void WorldWarTopListAck::set_tollefttime(::google::protobuf::uint32 value) {
  
  tollefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarTopListAck.tolLeftTime)
}

// optional uint32 periodLeftTime = 9;
void WorldWarTopListAck::clear_periodlefttime() {
  periodlefttime_ = 0u;
}
::google::protobuf::uint32 WorldWarTopListAck::periodlefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarTopListAck.periodLeftTime)
  return periodlefttime_;
}
void WorldWarTopListAck::set_periodlefttime(::google::protobuf::uint32 value) {
  
  periodlefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarTopListAck.periodLeftTime)
}

inline const WorldWarTopListAck* WorldWarTopListAck::internal_default_instance() {
  return &WorldWarTopListAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kHeroIdFieldNumber;
const int TeamInfo::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TeamInfo)
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TeamInfo)
}

void TeamInfo::SharedCtor() {
  clusterid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TeamInfo> TeamInfo_default_instance_;

TeamInfo* TeamInfo::New(::google::protobuf::Arena* arena) const {
  TeamInfo* n = new TeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TeamInfo)
  clusterid_ = GOOGLE_ULONGLONG(0);
  heroid_.Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 heroId = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heroid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_heroid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clusterId;
        break;
      }

      // optional uint64 clusterId = 2;
      case 2: {
        if (tag == 16) {
         parse_clusterId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clusterid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TeamInfo)
  // repeated uint64 heroId = 1;
  if (this->heroid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heroid_cached_byte_size_);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->heroid(i), output);
  }

  // optional uint64 clusterId = 2;
  if (this->clusterid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clusterid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TeamInfo)
}

::google::protobuf::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TeamInfo)
  // repeated uint64 heroId = 1;
  if (this->heroid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heroid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->heroid(i), target);
  }

  // optional uint64 clusterId = 2;
  if (this->clusterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clusterid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TeamInfo)
  return target;
}

size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TeamInfo)
  size_t total_size = 0;

  // optional uint64 clusterId = 2;
  if (this->clusterid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clusterid());
  }

  // repeated uint64 heroId = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->heroid_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heroid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heroid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TeamInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TeamInfo)
    UnsafeMergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TeamInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TeamInfo::UnsafeMergeFrom(const TeamInfo& from) {
  GOOGLE_DCHECK(&from != this);
  heroid_.UnsafeMergeFrom(from.heroid_);
  if (from.clusterid() != 0) {
    set_clusterid(from.clusterid());
  }
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TeamInfo::IsInitialized() const {

  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  heroid_.UnsafeArenaSwap(&other->heroid_);
  std::swap(clusterid_, other->clusterid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamInfo

// repeated uint64 heroId = 1;
int TeamInfo::heroid_size() const {
  return heroid_.size();
}
void TeamInfo::clear_heroid() {
  heroid_.Clear();
}
::google::protobuf::uint64 TeamInfo::heroid(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamInfo.heroId)
  return heroid_.Get(index);
}
void TeamInfo::set_heroid(int index, ::google::protobuf::uint64 value) {
  heroid_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.TeamInfo.heroId)
}
void TeamInfo::add_heroid(::google::protobuf::uint64 value) {
  heroid_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.TeamInfo.heroId)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TeamInfo::heroid() const {
  // @@protoc_insertion_point(field_list:NetMsg.TeamInfo.heroId)
  return heroid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TeamInfo::mutable_heroid() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.TeamInfo.heroId)
  return &heroid_;
}

// optional uint64 clusterId = 2;
void TeamInfo::clear_clusterid() {
  clusterid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TeamInfo::clusterid() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamInfo.clusterId)
  return clusterid_;
}
void TeamInfo::set_clusterid(::google::protobuf::uint64 value) {
  
  clusterid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TeamInfo.clusterId)
}

inline const TeamInfo* TeamInfo::internal_default_instance() {
  return &TeamInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfoAck::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfoAck::TeamInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TeamInfoAck)
}

void TeamInfoAck::InitAsDefaultInstance() {
}

TeamInfoAck::TeamInfoAck(const TeamInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TeamInfoAck)
}

void TeamInfoAck::SharedCtor() {
  _cached_size_ = 0;
}

TeamInfoAck::~TeamInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.TeamInfoAck)
  SharedDtor();
}

void TeamInfoAck::SharedDtor() {
}

void TeamInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfoAck_descriptor_;
}

const TeamInfoAck& TeamInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TeamInfoAck> TeamInfoAck_default_instance_;

TeamInfoAck* TeamInfoAck::New(::google::protobuf::Arena* arena) const {
  TeamInfoAck* n = new TeamInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TeamInfoAck)
  infos_.Clear();
}

bool TeamInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TeamInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.TeamInfo infos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TeamInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TeamInfoAck)
  return false;
#undef DO_
}

void TeamInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TeamInfoAck)
  // repeated .NetMsg.TeamInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TeamInfoAck)
}

::google::protobuf::uint8* TeamInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TeamInfoAck)
  // repeated .NetMsg.TeamInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TeamInfoAck)
  return target;
}

size_t TeamInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TeamInfoAck)
  size_t total_size = 0;

  // repeated .NetMsg.TeamInfo infos = 1;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TeamInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TeamInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TeamInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void TeamInfoAck::MergeFrom(const TeamInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TeamInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TeamInfoAck::UnsafeMergeFrom(const TeamInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  infos_.MergeFrom(from.infos_);
}

void TeamInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TeamInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfoAck::CopyFrom(const TeamInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TeamInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TeamInfoAck::IsInitialized() const {

  return true;
}

void TeamInfoAck::Swap(TeamInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfoAck::InternalSwap(TeamInfoAck* other) {
  infos_.UnsafeArenaSwap(&other->infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfoAck_descriptor_;
  metadata.reflection = TeamInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamInfoAck

// repeated .NetMsg.TeamInfo infos = 1;
int TeamInfoAck::infos_size() const {
  return infos_.size();
}
void TeamInfoAck::clear_infos() {
  infos_.Clear();
}
const ::NetMsg::TeamInfo& TeamInfoAck::infos(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamInfoAck.infos)
  return infos_.Get(index);
}
::NetMsg::TeamInfo* TeamInfoAck::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.TeamInfoAck.infos)
  return infos_.Mutable(index);
}
::NetMsg::TeamInfo* TeamInfoAck::add_infos() {
  // @@protoc_insertion_point(field_add:NetMsg.TeamInfoAck.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::TeamInfo >*
TeamInfoAck::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.TeamInfoAck.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::TeamInfo >&
TeamInfoAck::infos() const {
  // @@protoc_insertion_point(field_list:NetMsg.TeamInfoAck.infos)
  return infos_;
}

inline const TeamInfoAck* TeamInfoAck::internal_default_instance() {
  return &TeamInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetTeam::kPosFieldNumber;
const int ReqSetTeam::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetTeam::ReqSetTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqSetTeam)
}

void ReqSetTeam::InitAsDefaultInstance() {
}

ReqSetTeam::ReqSetTeam(const ReqSetTeam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqSetTeam)
}

void ReqSetTeam::SharedCtor() {
  pos_ = 0u;
  _cached_size_ = 0;
}

ReqSetTeam::~ReqSetTeam() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqSetTeam)
  SharedDtor();
}

void ReqSetTeam::SharedDtor() {
}

void ReqSetTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSetTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSetTeam_descriptor_;
}

const ReqSetTeam& ReqSetTeam::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqSetTeam> ReqSetTeam_default_instance_;

ReqSetTeam* ReqSetTeam::New(::google::protobuf::Arena* arena) const {
  ReqSetTeam* n = new ReqSetTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSetTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqSetTeam)
  pos_ = 0u;
  heroid_.Clear();
}

bool ReqSetTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqSetTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroId;
        break;
      }

      // repeated uint64 heroId = 2;
      case 2: {
        if (tag == 18) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heroid())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_heroid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqSetTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqSetTeam)
  return false;
#undef DO_
}

void ReqSetTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqSetTeam)
  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // repeated uint64 heroId = 2;
  if (this->heroid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heroid_cached_byte_size_);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->heroid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqSetTeam)
}

::google::protobuf::uint8* ReqSetTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqSetTeam)
  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // repeated uint64 heroId = 2;
  if (this->heroid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heroid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->heroid(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqSetTeam)
  return target;
}

size_t ReqSetTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqSetTeam)
  size_t total_size = 0;

  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // repeated uint64 heroId = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->heroid_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heroid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heroid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSetTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqSetTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqSetTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSetTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqSetTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqSetTeam)
    UnsafeMergeFrom(*source);
  }
}

void ReqSetTeam::MergeFrom(const ReqSetTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqSetTeam)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqSetTeam::UnsafeMergeFrom(const ReqSetTeam& from) {
  GOOGLE_DCHECK(&from != this);
  heroid_.UnsafeMergeFrom(from.heroid_);
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void ReqSetTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqSetTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetTeam::CopyFrom(const ReqSetTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqSetTeam)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqSetTeam::IsInitialized() const {

  return true;
}

void ReqSetTeam::Swap(ReqSetTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetTeam::InternalSwap(ReqSetTeam* other) {
  std::swap(pos_, other->pos_);
  heroid_.UnsafeArenaSwap(&other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSetTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSetTeam_descriptor_;
  metadata.reflection = ReqSetTeam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSetTeam

// optional uint32 pos = 1;
void ReqSetTeam::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 ReqSetTeam::pos() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqSetTeam.pos)
  return pos_;
}
void ReqSetTeam::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqSetTeam.pos)
}

// repeated uint64 heroId = 2;
int ReqSetTeam::heroid_size() const {
  return heroid_.size();
}
void ReqSetTeam::clear_heroid() {
  heroid_.Clear();
}
::google::protobuf::uint64 ReqSetTeam::heroid(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqSetTeam.heroId)
  return heroid_.Get(index);
}
void ReqSetTeam::set_heroid(int index, ::google::protobuf::uint64 value) {
  heroid_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqSetTeam.heroId)
}
void ReqSetTeam::add_heroid(::google::protobuf::uint64 value) {
  heroid_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.ReqSetTeam.heroId)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ReqSetTeam::heroid() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqSetTeam.heroId)
  return heroid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ReqSetTeam::mutable_heroid() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqSetTeam.heroId)
  return &heroid_;
}

inline const ReqSetTeam* ReqSetTeam::internal_default_instance() {
  return &ReqSetTeam_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTeamAck::kPosFieldNumber;
const int SetTeamAck::kHeroIdFieldNumber;
const int SetTeamAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTeamAck::SetTeamAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SetTeamAck)
}

void SetTeamAck::InitAsDefaultInstance() {
}

SetTeamAck::SetTeamAck(const SetTeamAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SetTeamAck)
}

void SetTeamAck::SharedCtor() {
  ::memset(&pos_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&pos_) + sizeof(error_));
  _cached_size_ = 0;
}

SetTeamAck::~SetTeamAck() {
  // @@protoc_insertion_point(destructor:NetMsg.SetTeamAck)
  SharedDtor();
}

void SetTeamAck::SharedDtor() {
}

void SetTeamAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamAck_descriptor_;
}

const SetTeamAck& SetTeamAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetTeamAck> SetTeamAck_default_instance_;

SetTeamAck* SetTeamAck::New(::google::protobuf::Arena* arena) const {
  SetTeamAck* n = new SetTeamAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetTeamAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SetTeamAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetTeamAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetTeamAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pos_, error_);

#undef ZR_HELPER_
#undef ZR_

  heroid_.Clear();
}

bool SetTeamAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SetTeamAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroId;
        break;
      }

      // repeated uint64 heroId = 2;
      case 2: {
        if (tag == 18) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heroid())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_heroid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SetTeamAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SetTeamAck)
  return false;
#undef DO_
}

void SetTeamAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SetTeamAck)
  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // repeated uint64 heroId = 2;
  if (this->heroid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heroid_cached_byte_size_);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->heroid(i), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SetTeamAck)
}

::google::protobuf::uint8* SetTeamAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SetTeamAck)
  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // repeated uint64 heroId = 2;
  if (this->heroid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heroid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->heroid(i), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SetTeamAck)
  return target;
}

size_t SetTeamAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SetTeamAck)
  size_t total_size = 0;

  // optional uint32 pos = 1;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated uint64 heroId = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->heroid_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heroid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heroid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SetTeamAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetTeamAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTeamAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SetTeamAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SetTeamAck)
    UnsafeMergeFrom(*source);
  }
}

void SetTeamAck::MergeFrom(const SetTeamAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SetTeamAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetTeamAck::UnsafeMergeFrom(const SetTeamAck& from) {
  GOOGLE_DCHECK(&from != this);
  heroid_.UnsafeMergeFrom(from.heroid_);
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void SetTeamAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SetTeamAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTeamAck::CopyFrom(const SetTeamAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SetTeamAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetTeamAck::IsInitialized() const {

  return true;
}

void SetTeamAck::Swap(SetTeamAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTeamAck::InternalSwap(SetTeamAck* other) {
  std::swap(pos_, other->pos_);
  heroid_.UnsafeArenaSwap(&other->heroid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetTeamAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamAck_descriptor_;
  metadata.reflection = SetTeamAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetTeamAck

// optional uint32 pos = 1;
void SetTeamAck::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 SetTeamAck::pos() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetTeamAck.pos)
  return pos_;
}
void SetTeamAck::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetTeamAck.pos)
}

// repeated uint64 heroId = 2;
int SetTeamAck::heroid_size() const {
  return heroid_.size();
}
void SetTeamAck::clear_heroid() {
  heroid_.Clear();
}
::google::protobuf::uint64 SetTeamAck::heroid(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.SetTeamAck.heroId)
  return heroid_.Get(index);
}
void SetTeamAck::set_heroid(int index, ::google::protobuf::uint64 value) {
  heroid_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.SetTeamAck.heroId)
}
void SetTeamAck::add_heroid(::google::protobuf::uint64 value) {
  heroid_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.SetTeamAck.heroId)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SetTeamAck::heroid() const {
  // @@protoc_insertion_point(field_list:NetMsg.SetTeamAck.heroId)
  return heroid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SetTeamAck::mutable_heroid() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.SetTeamAck.heroId)
  return &heroid_;
}

// optional uint32 error = 3;
void SetTeamAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 SetTeamAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetTeamAck.error)
  return error_;
}
void SetTeamAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetTeamAck.error)
}

inline const SetTeamAck* SetTeamAck::internal_default_instance() {
  return &SetTeamAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWriteSkillBook::kHeroIdFieldNumber;
const int ReqWriteSkillBook::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWriteSkillBook::ReqWriteSkillBook()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqWriteSkillBook)
}

void ReqWriteSkillBook::InitAsDefaultInstance() {
}

ReqWriteSkillBook::ReqWriteSkillBook(const ReqWriteSkillBook& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqWriteSkillBook)
}

void ReqWriteSkillBook::SharedCtor() {
  heroid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqWriteSkillBook::~ReqWriteSkillBook() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqWriteSkillBook)
  SharedDtor();
}

void ReqWriteSkillBook::SharedDtor() {
}

void ReqWriteSkillBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWriteSkillBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWriteSkillBook_descriptor_;
}

const ReqWriteSkillBook& ReqWriteSkillBook::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqWriteSkillBook> ReqWriteSkillBook_default_instance_;

ReqWriteSkillBook* ReqWriteSkillBook::New(::google::protobuf::Arena* arena) const {
  ReqWriteSkillBook* n = new ReqWriteSkillBook;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWriteSkillBook::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqWriteSkillBook)
  heroid_ = GOOGLE_ULONGLONG(0);
  items_.Clear();
}

bool ReqWriteSkillBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqWriteSkillBook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .NetMsg.ItemInfo items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqWriteSkillBook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqWriteSkillBook)
  return false;
#undef DO_
}

void ReqWriteSkillBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqWriteSkillBook)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->heroid(), output);
  }

  // repeated .NetMsg.ItemInfo items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqWriteSkillBook)
}

::google::protobuf::uint8* ReqWriteSkillBook::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqWriteSkillBook)
  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->heroid(), target);
  }

  // repeated .NetMsg.ItemInfo items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqWriteSkillBook)
  return target;
}

size_t ReqWriteSkillBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqWriteSkillBook)
  size_t total_size = 0;

  // optional uint64 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->heroid());
  }

  // repeated .NetMsg.ItemInfo items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWriteSkillBook::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqWriteSkillBook)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqWriteSkillBook* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWriteSkillBook>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqWriteSkillBook)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqWriteSkillBook)
    UnsafeMergeFrom(*source);
  }
}

void ReqWriteSkillBook::MergeFrom(const ReqWriteSkillBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqWriteSkillBook)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqWriteSkillBook::UnsafeMergeFrom(const ReqWriteSkillBook& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void ReqWriteSkillBook::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqWriteSkillBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWriteSkillBook::CopyFrom(const ReqWriteSkillBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqWriteSkillBook)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqWriteSkillBook::IsInitialized() const {

  return true;
}

void ReqWriteSkillBook::Swap(ReqWriteSkillBook* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWriteSkillBook::InternalSwap(ReqWriteSkillBook* other) {
  std::swap(heroid_, other->heroid_);
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWriteSkillBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWriteSkillBook_descriptor_;
  metadata.reflection = ReqWriteSkillBook_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWriteSkillBook

// optional uint64 heroId = 1;
void ReqWriteSkillBook::clear_heroid() {
  heroid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqWriteSkillBook::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWriteSkillBook.heroId)
  return heroid_;
}
void ReqWriteSkillBook::set_heroid(::google::protobuf::uint64 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWriteSkillBook.heroId)
}

// repeated .NetMsg.ItemInfo items = 2;
int ReqWriteSkillBook::items_size() const {
  return items_.size();
}
void ReqWriteSkillBook::clear_items() {
  items_.Clear();
}
const ::NetMsg::ItemInfo& ReqWriteSkillBook::items(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWriteSkillBook.items)
  return items_.Get(index);
}
::NetMsg::ItemInfo* ReqWriteSkillBook::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqWriteSkillBook.items)
  return items_.Mutable(index);
}
::NetMsg::ItemInfo* ReqWriteSkillBook::add_items() {
  // @@protoc_insertion_point(field_add:NetMsg.ReqWriteSkillBook.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ItemInfo >*
ReqWriteSkillBook::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqWriteSkillBook.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ItemInfo >&
ReqWriteSkillBook::items() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqWriteSkillBook.items)
  return items_;
}

inline const ReqWriteSkillBook* ReqWriteSkillBook::internal_default_instance() {
  return &ReqWriteSkillBook_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteSkillBookAck::kItemsFieldNumber;
const int WriteSkillBookAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteSkillBookAck::WriteSkillBookAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WriteSkillBookAck)
}

void WriteSkillBookAck::InitAsDefaultInstance() {
}

WriteSkillBookAck::WriteSkillBookAck(const WriteSkillBookAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WriteSkillBookAck)
}

void WriteSkillBookAck::SharedCtor() {
  error_ = 0u;
  _cached_size_ = 0;
}

WriteSkillBookAck::~WriteSkillBookAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WriteSkillBookAck)
  SharedDtor();
}

void WriteSkillBookAck::SharedDtor() {
}

void WriteSkillBookAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteSkillBookAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteSkillBookAck_descriptor_;
}

const WriteSkillBookAck& WriteSkillBookAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WriteSkillBookAck> WriteSkillBookAck_default_instance_;

WriteSkillBookAck* WriteSkillBookAck::New(::google::protobuf::Arena* arena) const {
  WriteSkillBookAck* n = new WriteSkillBookAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteSkillBookAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WriteSkillBookAck)
  error_ = 0u;
  items_.Clear();
}

bool WriteSkillBookAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WriteSkillBookAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.ItemInfo items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WriteSkillBookAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WriteSkillBookAck)
  return false;
#undef DO_
}

void WriteSkillBookAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WriteSkillBookAck)
  // repeated .NetMsg.ItemInfo items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WriteSkillBookAck)
}

::google::protobuf::uint8* WriteSkillBookAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WriteSkillBookAck)
  // repeated .NetMsg.ItemInfo items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WriteSkillBookAck)
  return target;
}

size_t WriteSkillBookAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WriteSkillBookAck)
  size_t total_size = 0;

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.ItemInfo items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteSkillBookAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WriteSkillBookAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WriteSkillBookAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteSkillBookAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WriteSkillBookAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WriteSkillBookAck)
    UnsafeMergeFrom(*source);
  }
}

void WriteSkillBookAck::MergeFrom(const WriteSkillBookAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WriteSkillBookAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WriteSkillBookAck::UnsafeMergeFrom(const WriteSkillBookAck& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void WriteSkillBookAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WriteSkillBookAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSkillBookAck::CopyFrom(const WriteSkillBookAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WriteSkillBookAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WriteSkillBookAck::IsInitialized() const {

  return true;
}

void WriteSkillBookAck::Swap(WriteSkillBookAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteSkillBookAck::InternalSwap(WriteSkillBookAck* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteSkillBookAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteSkillBookAck_descriptor_;
  metadata.reflection = WriteSkillBookAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteSkillBookAck

// repeated .NetMsg.ItemInfo items = 1;
int WriteSkillBookAck::items_size() const {
  return items_.size();
}
void WriteSkillBookAck::clear_items() {
  items_.Clear();
}
const ::NetMsg::ItemInfo& WriteSkillBookAck::items(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WriteSkillBookAck.items)
  return items_.Get(index);
}
::NetMsg::ItemInfo* WriteSkillBookAck::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WriteSkillBookAck.items)
  return items_.Mutable(index);
}
::NetMsg::ItemInfo* WriteSkillBookAck::add_items() {
  // @@protoc_insertion_point(field_add:NetMsg.WriteSkillBookAck.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ItemInfo >*
WriteSkillBookAck::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WriteSkillBookAck.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ItemInfo >&
WriteSkillBookAck::items() const {
  // @@protoc_insertion_point(field_list:NetMsg.WriteSkillBookAck.items)
  return items_;
}

// optional uint32 error = 2;
void WriteSkillBookAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 WriteSkillBookAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.WriteSkillBookAck.error)
  return error_;
}
void WriteSkillBookAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WriteSkillBookAck.error)
}

inline const WriteSkillBookAck* WriteSkillBookAck::internal_default_instance() {
  return &WriteSkillBookAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTeamRunPath::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTeamRunPath::ReqTeamRunPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqTeamRunPath)
}

void ReqTeamRunPath::InitAsDefaultInstance() {
}

ReqTeamRunPath::ReqTeamRunPath(const ReqTeamRunPath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqTeamRunPath)
}

void ReqTeamRunPath::SharedCtor() {
  position_ = 0u;
  _cached_size_ = 0;
}

ReqTeamRunPath::~ReqTeamRunPath() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqTeamRunPath)
  SharedDtor();
}

void ReqTeamRunPath::SharedDtor() {
}

void ReqTeamRunPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTeamRunPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTeamRunPath_descriptor_;
}

const ReqTeamRunPath& ReqTeamRunPath::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqTeamRunPath> ReqTeamRunPath_default_instance_;

ReqTeamRunPath* ReqTeamRunPath::New(::google::protobuf::Arena* arena) const {
  ReqTeamRunPath* n = new ReqTeamRunPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqTeamRunPath::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqTeamRunPath)
  position_ = 0u;
}

bool ReqTeamRunPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqTeamRunPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqTeamRunPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqTeamRunPath)
  return false;
#undef DO_
}

void ReqTeamRunPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqTeamRunPath)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqTeamRunPath)
}

::google::protobuf::uint8* ReqTeamRunPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqTeamRunPath)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqTeamRunPath)
  return target;
}

size_t ReqTeamRunPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqTeamRunPath)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTeamRunPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqTeamRunPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqTeamRunPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTeamRunPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqTeamRunPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqTeamRunPath)
    UnsafeMergeFrom(*source);
  }
}

void ReqTeamRunPath::MergeFrom(const ReqTeamRunPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqTeamRunPath)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqTeamRunPath::UnsafeMergeFrom(const ReqTeamRunPath& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void ReqTeamRunPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqTeamRunPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamRunPath::CopyFrom(const ReqTeamRunPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqTeamRunPath)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqTeamRunPath::IsInitialized() const {

  return true;
}

void ReqTeamRunPath::Swap(ReqTeamRunPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTeamRunPath::InternalSwap(ReqTeamRunPath* other) {
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTeamRunPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTeamRunPath_descriptor_;
  metadata.reflection = ReqTeamRunPath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqTeamRunPath

// optional uint32 position = 1;
void ReqTeamRunPath::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 ReqTeamRunPath::position() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTeamRunPath.position)
  return position_;
}
void ReqTeamRunPath::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTeamRunPath.position)
}

inline const ReqTeamRunPath* ReqTeamRunPath::internal_default_instance() {
  return &ReqTeamRunPath_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRunPathAck::kPositionFieldNumber;
const int TeamRunPathAck::kPathFieldNumber;
const int TeamRunPathAck::kCurCityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRunPathAck::TeamRunPathAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TeamRunPathAck)
}

void TeamRunPathAck::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

TeamRunPathAck::TeamRunPathAck(const TeamRunPathAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TeamRunPathAck)
}

void TeamRunPathAck::SharedCtor() {
  path_ = NULL;
  ::memset(&position_, 0, reinterpret_cast<char*>(&curcity_) -
    reinterpret_cast<char*>(&position_) + sizeof(curcity_));
  _cached_size_ = 0;
}

TeamRunPathAck::~TeamRunPathAck() {
  // @@protoc_insertion_point(destructor:NetMsg.TeamRunPathAck)
  SharedDtor();
}

void TeamRunPathAck::SharedDtor() {
  if (this != &TeamRunPathAck_default_instance_.get()) {
    delete path_;
  }
}

void TeamRunPathAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRunPathAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRunPathAck_descriptor_;
}

const TeamRunPathAck& TeamRunPathAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TeamRunPathAck> TeamRunPathAck_default_instance_;

TeamRunPathAck* TeamRunPathAck::New(::google::protobuf::Arena* arena) const {
  TeamRunPathAck* n = new TeamRunPathAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRunPathAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TeamRunPathAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TeamRunPathAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TeamRunPathAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(position_, curcity_);
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TeamRunPathAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TeamRunPathAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .NetMsg.RunPathAck path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curCity;
        break;
      }

      // optional int32 curCity = 3;
      case 3: {
        if (tag == 24) {
         parse_curCity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TeamRunPathAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TeamRunPathAck)
  return false;
#undef DO_
}

void TeamRunPathAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TeamRunPathAck)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // optional int32 curCity = 3;
  if (this->curcity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curcity(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TeamRunPathAck)
}

::google::protobuf::uint8* TeamRunPathAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TeamRunPathAck)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // optional int32 curCity = 3;
  if (this->curcity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curcity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TeamRunPathAck)
  return target;
}

size_t TeamRunPathAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TeamRunPathAck)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional int32 curCity = 3;
  if (this->curcity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curcity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRunPathAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TeamRunPathAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamRunPathAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRunPathAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TeamRunPathAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TeamRunPathAck)
    UnsafeMergeFrom(*source);
  }
}

void TeamRunPathAck::MergeFrom(const TeamRunPathAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TeamRunPathAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TeamRunPathAck::UnsafeMergeFrom(const TeamRunPathAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
  if (from.curcity() != 0) {
    set_curcity(from.curcity());
  }
}

void TeamRunPathAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TeamRunPathAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRunPathAck::CopyFrom(const TeamRunPathAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TeamRunPathAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TeamRunPathAck::IsInitialized() const {

  return true;
}

void TeamRunPathAck::Swap(TeamRunPathAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRunPathAck::InternalSwap(TeamRunPathAck* other) {
  std::swap(position_, other->position_);
  std::swap(path_, other->path_);
  std::swap(curcity_, other->curcity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRunPathAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRunPathAck_descriptor_;
  metadata.reflection = TeamRunPathAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRunPathAck

// optional uint32 position = 1;
void TeamRunPathAck::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 TeamRunPathAck::position() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamRunPathAck.position)
  return position_;
}
void TeamRunPathAck::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TeamRunPathAck.position)
}

// optional .NetMsg.RunPathAck path = 2;
bool TeamRunPathAck::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void TeamRunPathAck::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& TeamRunPathAck::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamRunPathAck.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* TeamRunPathAck::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.TeamRunPathAck.path)
  return path_;
}
::NetMsg::RunPathAck* TeamRunPathAck::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.TeamRunPathAck.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void TeamRunPathAck::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TeamRunPathAck.path)
}

// optional int32 curCity = 3;
void TeamRunPathAck::clear_curcity() {
  curcity_ = 0;
}
::google::protobuf::int32 TeamRunPathAck::curcity() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamRunPathAck.curCity)
  return curcity_;
}
void TeamRunPathAck::set_curcity(::google::protobuf::int32 value) {
  
  curcity_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TeamRunPathAck.curCity)
}

inline const TeamRunPathAck* TeamRunPathAck::internal_default_instance() {
  return &TeamRunPathAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTeamRunPath::kPositionFieldNumber;
const int SetTeamRunPath::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTeamRunPath::SetTeamRunPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SetTeamRunPath)
}

void SetTeamRunPath::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

SetTeamRunPath::SetTeamRunPath(const SetTeamRunPath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SetTeamRunPath)
}

void SetTeamRunPath::SharedCtor() {
  path_ = NULL;
  position_ = 0u;
  _cached_size_ = 0;
}

SetTeamRunPath::~SetTeamRunPath() {
  // @@protoc_insertion_point(destructor:NetMsg.SetTeamRunPath)
  SharedDtor();
}

void SetTeamRunPath::SharedDtor() {
  if (this != &SetTeamRunPath_default_instance_.get()) {
    delete path_;
  }
}

void SetTeamRunPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamRunPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamRunPath_descriptor_;
}

const SetTeamRunPath& SetTeamRunPath::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetTeamRunPath> SetTeamRunPath_default_instance_;

SetTeamRunPath* SetTeamRunPath::New(::google::protobuf::Arena* arena) const {
  SetTeamRunPath* n = new SetTeamRunPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetTeamRunPath::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SetTeamRunPath)
  position_ = 0u;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}

bool SetTeamRunPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SetTeamRunPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .NetMsg.RunPathAck path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SetTeamRunPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SetTeamRunPath)
  return false;
#undef DO_
}

void SetTeamRunPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SetTeamRunPath)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SetTeamRunPath)
}

::google::protobuf::uint8* SetTeamRunPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SetTeamRunPath)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SetTeamRunPath)
  return target;
}

size_t SetTeamRunPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SetTeamRunPath)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamRunPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SetTeamRunPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetTeamRunPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTeamRunPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SetTeamRunPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SetTeamRunPath)
    UnsafeMergeFrom(*source);
  }
}

void SetTeamRunPath::MergeFrom(const SetTeamRunPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SetTeamRunPath)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetTeamRunPath::UnsafeMergeFrom(const SetTeamRunPath& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
}

void SetTeamRunPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SetTeamRunPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTeamRunPath::CopyFrom(const SetTeamRunPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SetTeamRunPath)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetTeamRunPath::IsInitialized() const {

  return true;
}

void SetTeamRunPath::Swap(SetTeamRunPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTeamRunPath::InternalSwap(SetTeamRunPath* other) {
  std::swap(position_, other->position_);
  std::swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetTeamRunPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamRunPath_descriptor_;
  metadata.reflection = SetTeamRunPath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetTeamRunPath

// optional uint32 position = 1;
void SetTeamRunPath::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 SetTeamRunPath::position() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetTeamRunPath.position)
  return position_;
}
void SetTeamRunPath::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetTeamRunPath.position)
}

// optional .NetMsg.RunPathAck path = 2;
bool SetTeamRunPath::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void SetTeamRunPath::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& SetTeamRunPath::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetTeamRunPath.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* SetTeamRunPath::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.SetTeamRunPath.path)
  return path_;
}
::NetMsg::RunPathAck* SetTeamRunPath::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.SetTeamRunPath.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void SetTeamRunPath::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.SetTeamRunPath.path)
}

inline const SetTeamRunPath* SetTeamRunPath::internal_default_instance() {
  return &SetTeamRunPath_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTeamArrivedTar::kPositionFieldNumber;
const int ReqTeamArrivedTar::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTeamArrivedTar::ReqTeamArrivedTar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqTeamArrivedTar)
}

void ReqTeamArrivedTar::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

ReqTeamArrivedTar::ReqTeamArrivedTar(const ReqTeamArrivedTar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqTeamArrivedTar)
}

void ReqTeamArrivedTar::SharedCtor() {
  path_ = NULL;
  position_ = 0u;
  _cached_size_ = 0;
}

ReqTeamArrivedTar::~ReqTeamArrivedTar() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqTeamArrivedTar)
  SharedDtor();
}

void ReqTeamArrivedTar::SharedDtor() {
  if (this != &ReqTeamArrivedTar_default_instance_.get()) {
    delete path_;
  }
}

void ReqTeamArrivedTar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTeamArrivedTar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTeamArrivedTar_descriptor_;
}

const ReqTeamArrivedTar& ReqTeamArrivedTar::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqTeamArrivedTar> ReqTeamArrivedTar_default_instance_;

ReqTeamArrivedTar* ReqTeamArrivedTar::New(::google::protobuf::Arena* arena) const {
  ReqTeamArrivedTar* n = new ReqTeamArrivedTar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqTeamArrivedTar::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqTeamArrivedTar)
  position_ = 0u;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}

bool ReqTeamArrivedTar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqTeamArrivedTar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .NetMsg.RunPathAck path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqTeamArrivedTar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqTeamArrivedTar)
  return false;
#undef DO_
}

void ReqTeamArrivedTar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqTeamArrivedTar)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqTeamArrivedTar)
}

::google::protobuf::uint8* ReqTeamArrivedTar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqTeamArrivedTar)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqTeamArrivedTar)
  return target;
}

size_t ReqTeamArrivedTar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqTeamArrivedTar)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTeamArrivedTar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqTeamArrivedTar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqTeamArrivedTar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTeamArrivedTar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqTeamArrivedTar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqTeamArrivedTar)
    UnsafeMergeFrom(*source);
  }
}

void ReqTeamArrivedTar::MergeFrom(const ReqTeamArrivedTar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqTeamArrivedTar)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqTeamArrivedTar::UnsafeMergeFrom(const ReqTeamArrivedTar& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
}

void ReqTeamArrivedTar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqTeamArrivedTar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamArrivedTar::CopyFrom(const ReqTeamArrivedTar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqTeamArrivedTar)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqTeamArrivedTar::IsInitialized() const {

  return true;
}

void ReqTeamArrivedTar::Swap(ReqTeamArrivedTar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTeamArrivedTar::InternalSwap(ReqTeamArrivedTar* other) {
  std::swap(position_, other->position_);
  std::swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTeamArrivedTar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTeamArrivedTar_descriptor_;
  metadata.reflection = ReqTeamArrivedTar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqTeamArrivedTar

// optional uint32 position = 1;
void ReqTeamArrivedTar::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 ReqTeamArrivedTar::position() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTeamArrivedTar.position)
  return position_;
}
void ReqTeamArrivedTar::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTeamArrivedTar.position)
}

// optional .NetMsg.RunPathAck path = 2;
bool ReqTeamArrivedTar::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void ReqTeamArrivedTar::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& ReqTeamArrivedTar::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTeamArrivedTar.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* ReqTeamArrivedTar::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqTeamArrivedTar.path)
  return path_;
}
::NetMsg::RunPathAck* ReqTeamArrivedTar::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqTeamArrivedTar.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void ReqTeamArrivedTar::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqTeamArrivedTar.path)
}

inline const ReqTeamArrivedTar* ReqTeamArrivedTar::internal_default_instance() {
  return &ReqTeamArrivedTar_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamArrivedTarAck::kPositionFieldNumber;
const int TeamArrivedTarAck::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamArrivedTarAck::TeamArrivedTarAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TeamArrivedTarAck)
}

void TeamArrivedTarAck::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

TeamArrivedTarAck::TeamArrivedTarAck(const TeamArrivedTarAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TeamArrivedTarAck)
}

void TeamArrivedTarAck::SharedCtor() {
  path_ = NULL;
  position_ = 0u;
  _cached_size_ = 0;
}

TeamArrivedTarAck::~TeamArrivedTarAck() {
  // @@protoc_insertion_point(destructor:NetMsg.TeamArrivedTarAck)
  SharedDtor();
}

void TeamArrivedTarAck::SharedDtor() {
  if (this != &TeamArrivedTarAck_default_instance_.get()) {
    delete path_;
  }
}

void TeamArrivedTarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamArrivedTarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamArrivedTarAck_descriptor_;
}

const TeamArrivedTarAck& TeamArrivedTarAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TeamArrivedTarAck> TeamArrivedTarAck_default_instance_;

TeamArrivedTarAck* TeamArrivedTarAck::New(::google::protobuf::Arena* arena) const {
  TeamArrivedTarAck* n = new TeamArrivedTarAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamArrivedTarAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TeamArrivedTarAck)
  position_ = 0u;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}

bool TeamArrivedTarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TeamArrivedTarAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .NetMsg.RunPathAck path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TeamArrivedTarAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TeamArrivedTarAck)
  return false;
#undef DO_
}

void TeamArrivedTarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TeamArrivedTarAck)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TeamArrivedTarAck)
}

::google::protobuf::uint8* TeamArrivedTarAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TeamArrivedTarAck)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TeamArrivedTarAck)
  return target;
}

size_t TeamArrivedTarAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TeamArrivedTarAck)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional .NetMsg.RunPathAck path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamArrivedTarAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TeamArrivedTarAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamArrivedTarAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamArrivedTarAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TeamArrivedTarAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TeamArrivedTarAck)
    UnsafeMergeFrom(*source);
  }
}

void TeamArrivedTarAck::MergeFrom(const TeamArrivedTarAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TeamArrivedTarAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TeamArrivedTarAck::UnsafeMergeFrom(const TeamArrivedTarAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
}

void TeamArrivedTarAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TeamArrivedTarAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamArrivedTarAck::CopyFrom(const TeamArrivedTarAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TeamArrivedTarAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TeamArrivedTarAck::IsInitialized() const {

  return true;
}

void TeamArrivedTarAck::Swap(TeamArrivedTarAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamArrivedTarAck::InternalSwap(TeamArrivedTarAck* other) {
  std::swap(position_, other->position_);
  std::swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamArrivedTarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamArrivedTarAck_descriptor_;
  metadata.reflection = TeamArrivedTarAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamArrivedTarAck

// optional uint32 position = 1;
void TeamArrivedTarAck::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 TeamArrivedTarAck::position() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamArrivedTarAck.position)
  return position_;
}
void TeamArrivedTarAck::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TeamArrivedTarAck.position)
}

// optional .NetMsg.RunPathAck path = 2;
bool TeamArrivedTarAck::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void TeamArrivedTarAck::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& TeamArrivedTarAck::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamArrivedTarAck.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* TeamArrivedTarAck::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.TeamArrivedTarAck.path)
  return path_;
}
::NetMsg::RunPathAck* TeamArrivedTarAck::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.TeamArrivedTarAck.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void TeamArrivedTarAck::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TeamArrivedTarAck.path)
}

inline const TeamArrivedTarAck* TeamArrivedTarAck::internal_default_instance() {
  return &TeamArrivedTarAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterMemberInfo::kUserIdFieldNumber;
const int ClusterMemberInfo::kTeamPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterMemberInfo::ClusterMemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterMemberInfo)
}

void ClusterMemberInfo::InitAsDefaultInstance() {
}

ClusterMemberInfo::ClusterMemberInfo(const ClusterMemberInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterMemberInfo)
}

void ClusterMemberInfo::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&teampos_) -
    reinterpret_cast<char*>(&userid_) + sizeof(teampos_));
  _cached_size_ = 0;
}

ClusterMemberInfo::~ClusterMemberInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterMemberInfo)
  SharedDtor();
}

void ClusterMemberInfo::SharedDtor() {
}

void ClusterMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterMemberInfo_descriptor_;
}

const ClusterMemberInfo& ClusterMemberInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterMemberInfo> ClusterMemberInfo_default_instance_;

ClusterMemberInfo* ClusterMemberInfo::New(::google::protobuf::Arena* arena) const {
  ClusterMemberInfo* n = new ClusterMemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterMemberInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClusterMemberInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClusterMemberInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, teampos_);

#undef ZR_HELPER_
#undef ZR_

}

bool ClusterMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamPos;
        break;
      }

      // optional uint32 teamPos = 2;
      case 2: {
        if (tag == 16) {
         parse_teamPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teampos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterMemberInfo)
  return false;
#undef DO_
}

void ClusterMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterMemberInfo)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teampos(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterMemberInfo)
}

::google::protobuf::uint8* ClusterMemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterMemberInfo)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teampos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterMemberInfo)
  return target;
}

size_t ClusterMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterMemberInfo)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->teampos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterMemberInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterMemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterMemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterMemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterMemberInfo)
    UnsafeMergeFrom(*source);
  }
}

void ClusterMemberInfo::MergeFrom(const ClusterMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterMemberInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterMemberInfo::UnsafeMergeFrom(const ClusterMemberInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.teampos() != 0) {
    set_teampos(from.teampos());
  }
}

void ClusterMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterMemberInfo::CopyFrom(const ClusterMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterMemberInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterMemberInfo::IsInitialized() const {

  return true;
}

void ClusterMemberInfo::Swap(ClusterMemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterMemberInfo::InternalSwap(ClusterMemberInfo* other) {
  std::swap(userid_, other->userid_);
  std::swap(teampos_, other->teampos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterMemberInfo_descriptor_;
  metadata.reflection = ClusterMemberInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterMemberInfo

// optional uint32 userId = 1;
void ClusterMemberInfo::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 ClusterMemberInfo::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterMemberInfo.userId)
  return userid_;
}
void ClusterMemberInfo::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterMemberInfo.userId)
}

// optional uint32 teamPos = 2;
void ClusterMemberInfo::clear_teampos() {
  teampos_ = 0u;
}
::google::protobuf::uint32 ClusterMemberInfo::teampos() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterMemberInfo.teamPos)
  return teampos_;
}
void ClusterMemberInfo::set_teampos(::google::protobuf::uint32 value) {
  
  teampos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterMemberInfo.teamPos)
}

inline const ClusterMemberInfo* ClusterMemberInfo::internal_default_instance() {
  return &ClusterMemberInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterCreater::kCreaterIdFieldNumber;
const int ClusterCreater::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterCreater::ClusterCreater()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterCreater)
}

void ClusterCreater::InitAsDefaultInstance() {
}

ClusterCreater::ClusterCreater(const ClusterCreater& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterCreater)
}

void ClusterCreater::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createrid_ = 0u;
  _cached_size_ = 0;
}

ClusterCreater::~ClusterCreater() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterCreater)
  SharedDtor();
}

void ClusterCreater::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClusterCreater::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterCreater::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterCreater_descriptor_;
}

const ClusterCreater& ClusterCreater::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterCreater> ClusterCreater_default_instance_;

ClusterCreater* ClusterCreater::New(::google::protobuf::Arena* arena) const {
  ClusterCreater* n = new ClusterCreater;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterCreater::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterCreater)
  createrid_ = 0u;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClusterCreater::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterCreater)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 createrId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createrid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ClusterCreater.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterCreater)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterCreater)
  return false;
#undef DO_
}

void ClusterCreater::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterCreater)
  // optional uint32 createrId = 1;
  if (this->createrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->createrid(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ClusterCreater.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterCreater)
}

::google::protobuf::uint8* ClusterCreater::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterCreater)
  // optional uint32 createrId = 1;
  if (this->createrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->createrid(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ClusterCreater.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterCreater)
  return target;
}

size_t ClusterCreater::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterCreater)
  size_t total_size = 0;

  // optional uint32 createrId = 1;
  if (this->createrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createrid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterCreater::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterCreater)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterCreater* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterCreater>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterCreater)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterCreater)
    UnsafeMergeFrom(*source);
  }
}

void ClusterCreater::MergeFrom(const ClusterCreater& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterCreater)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterCreater::UnsafeMergeFrom(const ClusterCreater& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.createrid() != 0) {
    set_createrid(from.createrid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ClusterCreater::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterCreater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterCreater::CopyFrom(const ClusterCreater& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterCreater)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterCreater::IsInitialized() const {

  return true;
}

void ClusterCreater::Swap(ClusterCreater* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterCreater::InternalSwap(ClusterCreater* other) {
  std::swap(createrid_, other->createrid_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterCreater::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterCreater_descriptor_;
  metadata.reflection = ClusterCreater_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterCreater

// optional uint32 createrId = 1;
void ClusterCreater::clear_createrid() {
  createrid_ = 0u;
}
::google::protobuf::uint32 ClusterCreater::createrid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterCreater.createrId)
  return createrid_;
}
void ClusterCreater::set_createrid(::google::protobuf::uint32 value) {
  
  createrid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterCreater.createrId)
}

// optional string name = 2;
void ClusterCreater::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterCreater::name() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterCreater.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterCreater::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ClusterCreater.name)
}
void ClusterCreater::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ClusterCreater.name)
}
void ClusterCreater::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ClusterCreater.name)
}
::std::string* ClusterCreater::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterCreater.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterCreater::release_name() {
  // @@protoc_insertion_point(field_release:NetMsg.ClusterCreater.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterCreater::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ClusterCreater.name)
}

inline const ClusterCreater* ClusterCreater::internal_default_instance() {
  return &ClusterCreater_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfo::kUidFieldNumber;
const int ClusterInfo::kCreaterFieldNumber;
const int ClusterInfo::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfo::ClusterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterInfo)
}

void ClusterInfo::InitAsDefaultInstance() {
  creater_ = const_cast< ::NetMsg::ClusterCreater*>(
      ::NetMsg::ClusterCreater::internal_default_instance());
}

ClusterInfo::ClusterInfo(const ClusterInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterInfo)
}

void ClusterInfo::SharedCtor() {
  creater_ = NULL;
  uid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ClusterInfo::~ClusterInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterInfo)
  SharedDtor();
}

void ClusterInfo::SharedDtor() {
  if (this != &ClusterInfo_default_instance_.get()) {
    delete creater_;
  }
}

void ClusterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterInfo_descriptor_;
}

const ClusterInfo& ClusterInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterInfo> ClusterInfo_default_instance_;

ClusterInfo* ClusterInfo::New(::google::protobuf::Arena* arena) const {
  ClusterInfo* n = new ClusterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterInfo)
  uid_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && creater_ != NULL) delete creater_;
  creater_ = NULL;
  members_.Clear();
}

bool ClusterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creater;
        break;
      }

      // optional .NetMsg.ClusterCreater creater = 2;
      case 2: {
        if (tag == 18) {
         parse_creater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .NetMsg.ClusterMemberInfo members = 3;
      case 3: {
        if (tag == 26) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterInfo)
  return false;
#undef DO_
}

void ClusterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .NetMsg.ClusterCreater creater = 2;
  if (this->has_creater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->creater_, output);
  }

  // repeated .NetMsg.ClusterMemberInfo members = 3;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterInfo)
}

::google::protobuf::uint8* ClusterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .NetMsg.ClusterCreater creater = 2;
  if (this->has_creater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->creater_, false, target);
  }

  // repeated .NetMsg.ClusterMemberInfo members = 3;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->members(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterInfo)
  return target;
}

size_t ClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterInfo)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional .NetMsg.ClusterCreater creater = 2;
  if (this->has_creater()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creater_);
  }

  // repeated .NetMsg.ClusterMemberInfo members = 3;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterInfo)
    UnsafeMergeFrom(*source);
  }
}

void ClusterInfo::MergeFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterInfo::UnsafeMergeFrom(const ClusterInfo& from) {
  GOOGLE_DCHECK(&from != this);
  members_.MergeFrom(from.members_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.has_creater()) {
    mutable_creater()->::NetMsg::ClusterCreater::MergeFrom(from.creater());
  }
}

void ClusterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfo::CopyFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterInfo::IsInitialized() const {

  return true;
}

void ClusterInfo::Swap(ClusterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfo::InternalSwap(ClusterInfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(creater_, other->creater_);
  members_.UnsafeArenaSwap(&other->members_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterInfo_descriptor_;
  metadata.reflection = ClusterInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterInfo

// optional uint64 uid = 1;
void ClusterInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterInfo.uid)
  return uid_;
}
void ClusterInfo::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterInfo.uid)
}

// optional .NetMsg.ClusterCreater creater = 2;
bool ClusterInfo::has_creater() const {
  return this != internal_default_instance() && creater_ != NULL;
}
void ClusterInfo::clear_creater() {
  if (GetArenaNoVirtual() == NULL && creater_ != NULL) delete creater_;
  creater_ = NULL;
}
const ::NetMsg::ClusterCreater& ClusterInfo::creater() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterInfo.creater)
  return creater_ != NULL ? *creater_
                         : *::NetMsg::ClusterCreater::internal_default_instance();
}
::NetMsg::ClusterCreater* ClusterInfo::mutable_creater() {
  
  if (creater_ == NULL) {
    creater_ = new ::NetMsg::ClusterCreater;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterInfo.creater)
  return creater_;
}
::NetMsg::ClusterCreater* ClusterInfo::release_creater() {
  // @@protoc_insertion_point(field_release:NetMsg.ClusterInfo.creater)
  
  ::NetMsg::ClusterCreater* temp = creater_;
  creater_ = NULL;
  return temp;
}
void ClusterInfo::set_allocated_creater(::NetMsg::ClusterCreater* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ClusterInfo.creater)
}

// repeated .NetMsg.ClusterMemberInfo members = 3;
int ClusterInfo::members_size() const {
  return members_.size();
}
void ClusterInfo::clear_members() {
  members_.Clear();
}
const ::NetMsg::ClusterMemberInfo& ClusterInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterInfo.members)
  return members_.Get(index);
}
::NetMsg::ClusterMemberInfo* ClusterInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterInfo.members)
  return members_.Mutable(index);
}
::NetMsg::ClusterMemberInfo* ClusterInfo::add_members() {
  // @@protoc_insertion_point(field_add:NetMsg.ClusterInfo.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberInfo >*
ClusterInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ClusterInfo.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberInfo >&
ClusterInfo::members() const {
  // @@protoc_insertion_point(field_list:NetMsg.ClusterInfo.members)
  return members_;
}

inline const ClusterInfo* ClusterInfo::internal_default_instance() {
  return &ClusterInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqClusterDetailInfo::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqClusterDetailInfo::ReqClusterDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqClusterDetailInfo)
}

void ReqClusterDetailInfo::InitAsDefaultInstance() {
}

ReqClusterDetailInfo::ReqClusterDetailInfo(const ReqClusterDetailInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqClusterDetailInfo)
}

void ReqClusterDetailInfo::SharedCtor() {
  uid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReqClusterDetailInfo::~ReqClusterDetailInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqClusterDetailInfo)
  SharedDtor();
}

void ReqClusterDetailInfo::SharedDtor() {
}

void ReqClusterDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClusterDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClusterDetailInfo_descriptor_;
}

const ReqClusterDetailInfo& ReqClusterDetailInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqClusterDetailInfo> ReqClusterDetailInfo_default_instance_;

ReqClusterDetailInfo* ReqClusterDetailInfo::New(::google::protobuf::Arena* arena) const {
  ReqClusterDetailInfo* n = new ReqClusterDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqClusterDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqClusterDetailInfo)
  uid_ = GOOGLE_ULONGLONG(0);
}

bool ReqClusterDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqClusterDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqClusterDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqClusterDetailInfo)
  return false;
#undef DO_
}

void ReqClusterDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqClusterDetailInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqClusterDetailInfo)
}

::google::protobuf::uint8* ReqClusterDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqClusterDetailInfo)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqClusterDetailInfo)
  return target;
}

size_t ReqClusterDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqClusterDetailInfo)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClusterDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqClusterDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqClusterDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqClusterDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqClusterDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqClusterDetailInfo)
    UnsafeMergeFrom(*source);
  }
}

void ReqClusterDetailInfo::MergeFrom(const ReqClusterDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqClusterDetailInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqClusterDetailInfo::UnsafeMergeFrom(const ReqClusterDetailInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqClusterDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqClusterDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClusterDetailInfo::CopyFrom(const ReqClusterDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqClusterDetailInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqClusterDetailInfo::IsInitialized() const {

  return true;
}

void ReqClusterDetailInfo::Swap(ReqClusterDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqClusterDetailInfo::InternalSwap(ReqClusterDetailInfo* other) {
  std::swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqClusterDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClusterDetailInfo_descriptor_;
  metadata.reflection = ReqClusterDetailInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqClusterDetailInfo

// optional uint64 uid = 1;
void ReqClusterDetailInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqClusterDetailInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqClusterDetailInfo.uid)
  return uid_;
}
void ReqClusterDetailInfo::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqClusterDetailInfo.uid)
}

inline const ReqClusterDetailInfo* ReqClusterDetailInfo::internal_default_instance() {
  return &ReqClusterDetailInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamMemberDetail::kHeroIdFieldNumber;
const int TeamMemberDetail::kLevelFieldNumber;
const int TeamMemberDetail::kHpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamMemberDetail::TeamMemberDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TeamMemberDetail)
}

void TeamMemberDetail::InitAsDefaultInstance() {
}

TeamMemberDetail::TeamMemberDetail(const TeamMemberDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TeamMemberDetail)
}

void TeamMemberDetail::SharedCtor() {
  ::memset(&heroid_, 0, reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&heroid_) + sizeof(hp_));
  _cached_size_ = 0;
}

TeamMemberDetail::~TeamMemberDetail() {
  // @@protoc_insertion_point(destructor:NetMsg.TeamMemberDetail)
  SharedDtor();
}

void TeamMemberDetail::SharedDtor() {
}

void TeamMemberDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberDetail_descriptor_;
}

const TeamMemberDetail& TeamMemberDetail::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TeamMemberDetail> TeamMemberDetail_default_instance_;

TeamMemberDetail* TeamMemberDetail::New(::google::protobuf::Arena* arena) const {
  TeamMemberDetail* n = new TeamMemberDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamMemberDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TeamMemberDetail)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TeamMemberDetail, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TeamMemberDetail*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(heroid_, hp_);

#undef ZR_HELPER_
#undef ZR_

}

bool TeamMemberDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TeamMemberDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional int32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TeamMemberDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TeamMemberDetail)
  return false;
#undef DO_
}

void TeamMemberDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TeamMemberDetail)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional int32 hp = 3;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TeamMemberDetail)
}

::google::protobuf::uint8* TeamMemberDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TeamMemberDetail)
  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional int32 hp = 3;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TeamMemberDetail)
  return target;
}

size_t TeamMemberDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TeamMemberDetail)
  size_t total_size = 0;

  // optional uint32 heroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heroid());
  }

  // optional uint32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional int32 hp = 3;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TeamMemberDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamMemberDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamMemberDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TeamMemberDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TeamMemberDetail)
    UnsafeMergeFrom(*source);
  }
}

void TeamMemberDetail::MergeFrom(const TeamMemberDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TeamMemberDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TeamMemberDetail::UnsafeMergeFrom(const TeamMemberDetail& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
}

void TeamMemberDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TeamMemberDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberDetail::CopyFrom(const TeamMemberDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TeamMemberDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TeamMemberDetail::IsInitialized() const {

  return true;
}

void TeamMemberDetail::Swap(TeamMemberDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamMemberDetail::InternalSwap(TeamMemberDetail* other) {
  std::swap(heroid_, other->heroid_);
  std::swap(level_, other->level_);
  std::swap(hp_, other->hp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamMemberDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberDetail_descriptor_;
  metadata.reflection = TeamMemberDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamMemberDetail

// optional uint32 heroId = 1;
void TeamMemberDetail::clear_heroid() {
  heroid_ = 0u;
}
::google::protobuf::uint32 TeamMemberDetail::heroid() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamMemberDetail.heroId)
  return heroid_;
}
void TeamMemberDetail::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TeamMemberDetail.heroId)
}

// optional uint32 level = 2;
void TeamMemberDetail::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 TeamMemberDetail::level() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamMemberDetail.level)
  return level_;
}
void TeamMemberDetail::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TeamMemberDetail.level)
}

// optional int32 hp = 3;
void TeamMemberDetail::clear_hp() {
  hp_ = 0;
}
::google::protobuf::int32 TeamMemberDetail::hp() const {
  // @@protoc_insertion_point(field_get:NetMsg.TeamMemberDetail.hp)
  return hp_;
}
void TeamMemberDetail::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TeamMemberDetail.hp)
}

inline const TeamMemberDetail* TeamMemberDetail::internal_default_instance() {
  return &TeamMemberDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterMemberDetail::kUserIdFieldNumber;
const int ClusterMemberDetail::kUserNameFieldNumber;
const int ClusterMemberDetail::kHerosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterMemberDetail::ClusterMemberDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterMemberDetail)
}

void ClusterMemberDetail::InitAsDefaultInstance() {
}

ClusterMemberDetail::ClusterMemberDetail(const ClusterMemberDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterMemberDetail)
}

void ClusterMemberDetail::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0u;
  _cached_size_ = 0;
}

ClusterMemberDetail::~ClusterMemberDetail() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterMemberDetail)
  SharedDtor();
}

void ClusterMemberDetail::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClusterMemberDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterMemberDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterMemberDetail_descriptor_;
}

const ClusterMemberDetail& ClusterMemberDetail::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterMemberDetail> ClusterMemberDetail_default_instance_;

ClusterMemberDetail* ClusterMemberDetail::New(::google::protobuf::Arena* arena) const {
  ClusterMemberDetail* n = new ClusterMemberDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterMemberDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterMemberDetail)
  userid_ = 0u;
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heros_.Clear();
}

bool ClusterMemberDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterMemberDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // optional string userName = 2;
      case 2: {
        if (tag == 18) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ClusterMemberDetail.userName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heros;
        break;
      }

      // repeated .NetMsg.TeamMemberDetail heros = 3;
      case 3: {
        if (tag == 26) {
         parse_heros:
          DO_(input->IncrementRecursionDepth());
         parse_loop_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_heros;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterMemberDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterMemberDetail)
  return false;
#undef DO_
}

void ClusterMemberDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterMemberDetail)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional string userName = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ClusterMemberDetail.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // repeated .NetMsg.TeamMemberDetail heros = 3;
  for (unsigned int i = 0, n = this->heros_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->heros(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterMemberDetail)
}

::google::protobuf::uint8* ClusterMemberDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterMemberDetail)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional string userName = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ClusterMemberDetail.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // repeated .NetMsg.TeamMemberDetail heros = 3;
  for (unsigned int i = 0, n = this->heros_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->heros(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterMemberDetail)
  return target;
}

size_t ClusterMemberDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterMemberDetail)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional string userName = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // repeated .NetMsg.TeamMemberDetail heros = 3;
  {
    unsigned int count = this->heros_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heros(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterMemberDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterMemberDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterMemberDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterMemberDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterMemberDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterMemberDetail)
    UnsafeMergeFrom(*source);
  }
}

void ClusterMemberDetail::MergeFrom(const ClusterMemberDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterMemberDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterMemberDetail::UnsafeMergeFrom(const ClusterMemberDetail& from) {
  GOOGLE_DCHECK(&from != this);
  heros_.MergeFrom(from.heros_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void ClusterMemberDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterMemberDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterMemberDetail::CopyFrom(const ClusterMemberDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterMemberDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterMemberDetail::IsInitialized() const {

  return true;
}

void ClusterMemberDetail::Swap(ClusterMemberDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterMemberDetail::InternalSwap(ClusterMemberDetail* other) {
  std::swap(userid_, other->userid_);
  username_.Swap(&other->username_);
  heros_.UnsafeArenaSwap(&other->heros_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterMemberDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterMemberDetail_descriptor_;
  metadata.reflection = ClusterMemberDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterMemberDetail

// optional uint32 userId = 1;
void ClusterMemberDetail::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 ClusterMemberDetail::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterMemberDetail.userId)
  return userid_;
}
void ClusterMemberDetail::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterMemberDetail.userId)
}

// optional string userName = 2;
void ClusterMemberDetail::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterMemberDetail::username() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterMemberDetail.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterMemberDetail::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ClusterMemberDetail.userName)
}
void ClusterMemberDetail::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ClusterMemberDetail.userName)
}
void ClusterMemberDetail::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ClusterMemberDetail.userName)
}
::std::string* ClusterMemberDetail::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterMemberDetail.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterMemberDetail::release_username() {
  // @@protoc_insertion_point(field_release:NetMsg.ClusterMemberDetail.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterMemberDetail::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ClusterMemberDetail.userName)
}

// repeated .NetMsg.TeamMemberDetail heros = 3;
int ClusterMemberDetail::heros_size() const {
  return heros_.size();
}
void ClusterMemberDetail::clear_heros() {
  heros_.Clear();
}
const ::NetMsg::TeamMemberDetail& ClusterMemberDetail::heros(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterMemberDetail.heros)
  return heros_.Get(index);
}
::NetMsg::TeamMemberDetail* ClusterMemberDetail::mutable_heros(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterMemberDetail.heros)
  return heros_.Mutable(index);
}
::NetMsg::TeamMemberDetail* ClusterMemberDetail::add_heros() {
  // @@protoc_insertion_point(field_add:NetMsg.ClusterMemberDetail.heros)
  return heros_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::TeamMemberDetail >*
ClusterMemberDetail::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ClusterMemberDetail.heros)
  return &heros_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::TeamMemberDetail >&
ClusterMemberDetail::heros() const {
  // @@protoc_insertion_point(field_list:NetMsg.ClusterMemberDetail.heros)
  return heros_;
}

inline const ClusterMemberDetail* ClusterMemberDetail::internal_default_instance() {
  return &ClusterMemberDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetClusterAttr::kUidFieldNumber;
const int ReqSetClusterAttr::kPubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetClusterAttr::ReqSetClusterAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqSetClusterAttr)
}

void ReqSetClusterAttr::InitAsDefaultInstance() {
}

ReqSetClusterAttr::ReqSetClusterAttr(const ReqSetClusterAttr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqSetClusterAttr)
}

void ReqSetClusterAttr::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&pub_) -
    reinterpret_cast<char*>(&uid_) + sizeof(pub_));
  _cached_size_ = 0;
}

ReqSetClusterAttr::~ReqSetClusterAttr() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqSetClusterAttr)
  SharedDtor();
}

void ReqSetClusterAttr::SharedDtor() {
}

void ReqSetClusterAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSetClusterAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSetClusterAttr_descriptor_;
}

const ReqSetClusterAttr& ReqSetClusterAttr::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqSetClusterAttr> ReqSetClusterAttr_default_instance_;

ReqSetClusterAttr* ReqSetClusterAttr::New(::google::protobuf::Arena* arena) const {
  ReqSetClusterAttr* n = new ReqSetClusterAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSetClusterAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqSetClusterAttr)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqSetClusterAttr, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqSetClusterAttr*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, pub_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqSetClusterAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqSetClusterAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pub;
        break;
      }

      // optional bool pub = 2;
      case 2: {
        if (tag == 16) {
         parse_pub:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pub_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqSetClusterAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqSetClusterAttr)
  return false;
#undef DO_
}

void ReqSetClusterAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqSetClusterAttr)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional bool pub = 2;
  if (this->pub() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pub(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqSetClusterAttr)
}

::google::protobuf::uint8* ReqSetClusterAttr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqSetClusterAttr)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional bool pub = 2;
  if (this->pub() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pub(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqSetClusterAttr)
  return target;
}

size_t ReqSetClusterAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqSetClusterAttr)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional bool pub = 2;
  if (this->pub() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSetClusterAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqSetClusterAttr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqSetClusterAttr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSetClusterAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqSetClusterAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqSetClusterAttr)
    UnsafeMergeFrom(*source);
  }
}

void ReqSetClusterAttr::MergeFrom(const ReqSetClusterAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqSetClusterAttr)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqSetClusterAttr::UnsafeMergeFrom(const ReqSetClusterAttr& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pub() != 0) {
    set_pub(from.pub());
  }
}

void ReqSetClusterAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqSetClusterAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetClusterAttr::CopyFrom(const ReqSetClusterAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqSetClusterAttr)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqSetClusterAttr::IsInitialized() const {

  return true;
}

void ReqSetClusterAttr::Swap(ReqSetClusterAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetClusterAttr::InternalSwap(ReqSetClusterAttr* other) {
  std::swap(uid_, other->uid_);
  std::swap(pub_, other->pub_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSetClusterAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSetClusterAttr_descriptor_;
  metadata.reflection = ReqSetClusterAttr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSetClusterAttr

// optional uint64 uid = 1;
void ReqSetClusterAttr::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqSetClusterAttr::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqSetClusterAttr.uid)
  return uid_;
}
void ReqSetClusterAttr::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqSetClusterAttr.uid)
}

// optional bool pub = 2;
void ReqSetClusterAttr::clear_pub() {
  pub_ = false;
}
bool ReqSetClusterAttr::pub() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqSetClusterAttr.pub)
  return pub_;
}
void ReqSetClusterAttr::set_pub(bool value) {
  
  pub_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqSetClusterAttr.pub)
}

inline const ReqSetClusterAttr* ReqSetClusterAttr::internal_default_instance() {
  return &ReqSetClusterAttr_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterAttrAck::kUidFieldNumber;
const int SetClusterAttrAck::kPubFieldNumber;
const int SetClusterAttrAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterAttrAck::SetClusterAttrAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SetClusterAttrAck)
}

void SetClusterAttrAck::InitAsDefaultInstance() {
}

SetClusterAttrAck::SetClusterAttrAck(const SetClusterAttrAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SetClusterAttrAck)
}

void SetClusterAttrAck::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&uid_) + sizeof(error_));
  _cached_size_ = 0;
}

SetClusterAttrAck::~SetClusterAttrAck() {
  // @@protoc_insertion_point(destructor:NetMsg.SetClusterAttrAck)
  SharedDtor();
}

void SetClusterAttrAck::SharedDtor() {
}

void SetClusterAttrAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterAttrAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetClusterAttrAck_descriptor_;
}

const SetClusterAttrAck& SetClusterAttrAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetClusterAttrAck> SetClusterAttrAck_default_instance_;

SetClusterAttrAck* SetClusterAttrAck::New(::google::protobuf::Arena* arena) const {
  SetClusterAttrAck* n = new SetClusterAttrAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterAttrAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SetClusterAttrAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetClusterAttrAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetClusterAttrAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool SetClusterAttrAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SetClusterAttrAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pub;
        break;
      }

      // optional bool pub = 2;
      case 2: {
        if (tag == 16) {
         parse_pub:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pub_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SetClusterAttrAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SetClusterAttrAck)
  return false;
#undef DO_
}

void SetClusterAttrAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SetClusterAttrAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional bool pub = 2;
  if (this->pub() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pub(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SetClusterAttrAck)
}

::google::protobuf::uint8* SetClusterAttrAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SetClusterAttrAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional bool pub = 2;
  if (this->pub() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pub(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SetClusterAttrAck)
  return target;
}

size_t SetClusterAttrAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SetClusterAttrAck)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional bool pub = 2;
  if (this->pub() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterAttrAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SetClusterAttrAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetClusterAttrAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterAttrAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SetClusterAttrAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SetClusterAttrAck)
    UnsafeMergeFrom(*source);
  }
}

void SetClusterAttrAck::MergeFrom(const SetClusterAttrAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SetClusterAttrAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetClusterAttrAck::UnsafeMergeFrom(const SetClusterAttrAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pub() != 0) {
    set_pub(from.pub());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void SetClusterAttrAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SetClusterAttrAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterAttrAck::CopyFrom(const SetClusterAttrAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SetClusterAttrAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetClusterAttrAck::IsInitialized() const {

  return true;
}

void SetClusterAttrAck::Swap(SetClusterAttrAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterAttrAck::InternalSwap(SetClusterAttrAck* other) {
  std::swap(uid_, other->uid_);
  std::swap(pub_, other->pub_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterAttrAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetClusterAttrAck_descriptor_;
  metadata.reflection = SetClusterAttrAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterAttrAck

// optional uint64 uid = 1;
void SetClusterAttrAck::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SetClusterAttrAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetClusterAttrAck.uid)
  return uid_;
}
void SetClusterAttrAck::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetClusterAttrAck.uid)
}

// optional bool pub = 2;
void SetClusterAttrAck::clear_pub() {
  pub_ = false;
}
bool SetClusterAttrAck::pub() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetClusterAttrAck.pub)
  return pub_;
}
void SetClusterAttrAck::set_pub(bool value) {
  
  pub_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetClusterAttrAck.pub)
}

// optional uint32 error = 3;
void SetClusterAttrAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 SetClusterAttrAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetClusterAttrAck.error)
  return error_;
}
void SetClusterAttrAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.SetClusterAttrAck.error)
}

inline const SetClusterAttrAck* SetClusterAttrAck::internal_default_instance() {
  return &SetClusterAttrAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterDetailInfoAck::kUidFieldNumber;
const int ClusterDetailInfoAck::kMembersFieldNumber;
const int ClusterDetailInfoAck::kPubFieldNumber;
const int ClusterDetailInfoAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterDetailInfoAck::ClusterDetailInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterDetailInfoAck)
}

void ClusterDetailInfoAck::InitAsDefaultInstance() {
}

ClusterDetailInfoAck::ClusterDetailInfoAck(const ClusterDetailInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterDetailInfoAck)
}

void ClusterDetailInfoAck::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&uid_) + sizeof(error_));
  _cached_size_ = 0;
}

ClusterDetailInfoAck::~ClusterDetailInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterDetailInfoAck)
  SharedDtor();
}

void ClusterDetailInfoAck::SharedDtor() {
}

void ClusterDetailInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterDetailInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterDetailInfoAck_descriptor_;
}

const ClusterDetailInfoAck& ClusterDetailInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterDetailInfoAck> ClusterDetailInfoAck_default_instance_;

ClusterDetailInfoAck* ClusterDetailInfoAck::New(::google::protobuf::Arena* arena) const {
  ClusterDetailInfoAck* n = new ClusterDetailInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterDetailInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterDetailInfoAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClusterDetailInfoAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClusterDetailInfoAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, error_);

#undef ZR_HELPER_
#undef ZR_

  members_.Clear();
}

bool ClusterDetailInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterDetailInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .NetMsg.ClusterMemberDetail members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_pub;
        break;
      }

      // optional bool pub = 3;
      case 3: {
        if (tag == 24) {
         parse_pub:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pub_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional uint32 error = 4;
      case 4: {
        if (tag == 32) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterDetailInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterDetailInfoAck)
  return false;
#undef DO_
}

void ClusterDetailInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterDetailInfoAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated .NetMsg.ClusterMemberDetail members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional bool pub = 3;
  if (this->pub() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pub(), output);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterDetailInfoAck)
}

::google::protobuf::uint8* ClusterDetailInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterDetailInfoAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated .NetMsg.ClusterMemberDetail members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), false, target);
  }

  // optional bool pub = 3;
  if (this->pub() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pub(), target);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterDetailInfoAck)
  return target;
}

size_t ClusterDetailInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterDetailInfoAck)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional bool pub = 3;
  if (this->pub() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.ClusterMemberDetail members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterDetailInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterDetailInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterDetailInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterDetailInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterDetailInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterDetailInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void ClusterDetailInfoAck::MergeFrom(const ClusterDetailInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterDetailInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterDetailInfoAck::UnsafeMergeFrom(const ClusterDetailInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  members_.MergeFrom(from.members_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pub() != 0) {
    set_pub(from.pub());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void ClusterDetailInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterDetailInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterDetailInfoAck::CopyFrom(const ClusterDetailInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterDetailInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterDetailInfoAck::IsInitialized() const {

  return true;
}

void ClusterDetailInfoAck::Swap(ClusterDetailInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterDetailInfoAck::InternalSwap(ClusterDetailInfoAck* other) {
  std::swap(uid_, other->uid_);
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(pub_, other->pub_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterDetailInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterDetailInfoAck_descriptor_;
  metadata.reflection = ClusterDetailInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterDetailInfoAck

// optional uint64 uid = 1;
void ClusterDetailInfoAck::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterDetailInfoAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterDetailInfoAck.uid)
  return uid_;
}
void ClusterDetailInfoAck::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterDetailInfoAck.uid)
}

// repeated .NetMsg.ClusterMemberDetail members = 2;
int ClusterDetailInfoAck::members_size() const {
  return members_.size();
}
void ClusterDetailInfoAck::clear_members() {
  members_.Clear();
}
const ::NetMsg::ClusterMemberDetail& ClusterDetailInfoAck::members(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterDetailInfoAck.members)
  return members_.Get(index);
}
::NetMsg::ClusterMemberDetail* ClusterDetailInfoAck::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterDetailInfoAck.members)
  return members_.Mutable(index);
}
::NetMsg::ClusterMemberDetail* ClusterDetailInfoAck::add_members() {
  // @@protoc_insertion_point(field_add:NetMsg.ClusterDetailInfoAck.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberDetail >*
ClusterDetailInfoAck::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ClusterDetailInfoAck.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterMemberDetail >&
ClusterDetailInfoAck::members() const {
  // @@protoc_insertion_point(field_list:NetMsg.ClusterDetailInfoAck.members)
  return members_;
}

// optional bool pub = 3;
void ClusterDetailInfoAck::clear_pub() {
  pub_ = false;
}
bool ClusterDetailInfoAck::pub() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterDetailInfoAck.pub)
  return pub_;
}
void ClusterDetailInfoAck::set_pub(bool value) {
  
  pub_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterDetailInfoAck.pub)
}

// optional uint32 error = 4;
void ClusterDetailInfoAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 ClusterDetailInfoAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterDetailInfoAck.error)
  return error_;
}
void ClusterDetailInfoAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterDetailInfoAck.error)
}

inline const ClusterDetailInfoAck* ClusterDetailInfoAck::internal_default_instance() {
  return &ClusterDetailInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfoAck::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfoAck::ClusterInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterInfoAck)
}

void ClusterInfoAck::InitAsDefaultInstance() {
}

ClusterInfoAck::ClusterInfoAck(const ClusterInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterInfoAck)
}

void ClusterInfoAck::SharedCtor() {
  _cached_size_ = 0;
}

ClusterInfoAck::~ClusterInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterInfoAck)
  SharedDtor();
}

void ClusterInfoAck::SharedDtor() {
}

void ClusterInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterInfoAck_descriptor_;
}

const ClusterInfoAck& ClusterInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterInfoAck> ClusterInfoAck_default_instance_;

ClusterInfoAck* ClusterInfoAck::New(::google::protobuf::Arena* arena) const {
  ClusterInfoAck* n = new ClusterInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterInfoAck)
  infos_.Clear();
}

bool ClusterInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.ClusterInfo infos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterInfoAck)
  return false;
#undef DO_
}

void ClusterInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterInfoAck)
  // repeated .NetMsg.ClusterInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterInfoAck)
}

::google::protobuf::uint8* ClusterInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterInfoAck)
  // repeated .NetMsg.ClusterInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterInfoAck)
  return target;
}

size_t ClusterInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterInfoAck)
  size_t total_size = 0;

  // repeated .NetMsg.ClusterInfo infos = 1;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void ClusterInfoAck::MergeFrom(const ClusterInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterInfoAck::UnsafeMergeFrom(const ClusterInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  infos_.MergeFrom(from.infos_);
}

void ClusterInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfoAck::CopyFrom(const ClusterInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterInfoAck::IsInitialized() const {

  return true;
}

void ClusterInfoAck::Swap(ClusterInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfoAck::InternalSwap(ClusterInfoAck* other) {
  infos_.UnsafeArenaSwap(&other->infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterInfoAck_descriptor_;
  metadata.reflection = ClusterInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterInfoAck

// repeated .NetMsg.ClusterInfo infos = 1;
int ClusterInfoAck::infos_size() const {
  return infos_.size();
}
void ClusterInfoAck::clear_infos() {
  infos_.Clear();
}
const ::NetMsg::ClusterInfo& ClusterInfoAck::infos(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterInfoAck.infos)
  return infos_.Get(index);
}
::NetMsg::ClusterInfo* ClusterInfoAck::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterInfoAck.infos)
  return infos_.Mutable(index);
}
::NetMsg::ClusterInfo* ClusterInfoAck::add_infos() {
  // @@protoc_insertion_point(field_add:NetMsg.ClusterInfoAck.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterInfo >*
ClusterInfoAck::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ClusterInfoAck.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterInfo >&
ClusterInfoAck::infos() const {
  // @@protoc_insertion_point(field_list:NetMsg.ClusterInfoAck.infos)
  return infos_;
}

inline const ClusterInfoAck* ClusterInfoAck::internal_default_instance() {
  return &ClusterInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllClusterAck::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllClusterAck::AllClusterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.AllClusterAck)
}

void AllClusterAck::InitAsDefaultInstance() {
}

AllClusterAck::AllClusterAck(const AllClusterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.AllClusterAck)
}

void AllClusterAck::SharedCtor() {
  _cached_size_ = 0;
}

AllClusterAck::~AllClusterAck() {
  // @@protoc_insertion_point(destructor:NetMsg.AllClusterAck)
  SharedDtor();
}

void AllClusterAck::SharedDtor() {
}

void AllClusterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllClusterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllClusterAck_descriptor_;
}

const AllClusterAck& AllClusterAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AllClusterAck> AllClusterAck_default_instance_;

AllClusterAck* AllClusterAck::New(::google::protobuf::Arena* arena) const {
  AllClusterAck* n = new AllClusterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllClusterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.AllClusterAck)
  infos_.Clear();
}

bool AllClusterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.AllClusterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.ClusterInfo infos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.AllClusterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.AllClusterAck)
  return false;
#undef DO_
}

void AllClusterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.AllClusterAck)
  // repeated .NetMsg.ClusterInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.AllClusterAck)
}

::google::protobuf::uint8* AllClusterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.AllClusterAck)
  // repeated .NetMsg.ClusterInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.AllClusterAck)
  return target;
}

size_t AllClusterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.AllClusterAck)
  size_t total_size = 0;

  // repeated .NetMsg.ClusterInfo infos = 1;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllClusterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.AllClusterAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllClusterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllClusterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.AllClusterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.AllClusterAck)
    UnsafeMergeFrom(*source);
  }
}

void AllClusterAck::MergeFrom(const AllClusterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.AllClusterAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AllClusterAck::UnsafeMergeFrom(const AllClusterAck& from) {
  GOOGLE_DCHECK(&from != this);
  infos_.MergeFrom(from.infos_);
}

void AllClusterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.AllClusterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllClusterAck::CopyFrom(const AllClusterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.AllClusterAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AllClusterAck::IsInitialized() const {

  return true;
}

void AllClusterAck::Swap(AllClusterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllClusterAck::InternalSwap(AllClusterAck* other) {
  infos_.UnsafeArenaSwap(&other->infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllClusterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllClusterAck_descriptor_;
  metadata.reflection = AllClusterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllClusterAck

// repeated .NetMsg.ClusterInfo infos = 1;
int AllClusterAck::infos_size() const {
  return infos_.size();
}
void AllClusterAck::clear_infos() {
  infos_.Clear();
}
const ::NetMsg::ClusterInfo& AllClusterAck::infos(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.AllClusterAck.infos)
  return infos_.Get(index);
}
::NetMsg::ClusterInfo* AllClusterAck::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.AllClusterAck.infos)
  return infos_.Mutable(index);
}
::NetMsg::ClusterInfo* AllClusterAck::add_infos() {
  // @@protoc_insertion_point(field_add:NetMsg.AllClusterAck.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterInfo >*
AllClusterAck::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.AllClusterAck.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ClusterInfo >&
AllClusterAck::infos() const {
  // @@protoc_insertion_point(field_list:NetMsg.AllClusterAck.infos)
  return infos_;
}

inline const AllClusterAck* AllClusterAck::internal_default_instance() {
  return &AllClusterAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateClusterAck::kUidFieldNumber;
const int CreateClusterAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateClusterAck::CreateClusterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CreateClusterAck)
}

void CreateClusterAck::InitAsDefaultInstance() {
}

CreateClusterAck::CreateClusterAck(const CreateClusterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CreateClusterAck)
}

void CreateClusterAck::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&uid_) + sizeof(error_));
  _cached_size_ = 0;
}

CreateClusterAck::~CreateClusterAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CreateClusterAck)
  SharedDtor();
}

void CreateClusterAck::SharedDtor() {
}

void CreateClusterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateClusterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateClusterAck_descriptor_;
}

const CreateClusterAck& CreateClusterAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateClusterAck> CreateClusterAck_default_instance_;

CreateClusterAck* CreateClusterAck::New(::google::protobuf::Arena* arena) const {
  CreateClusterAck* n = new CreateClusterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateClusterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CreateClusterAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateClusterAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateClusterAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool CreateClusterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CreateClusterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CreateClusterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CreateClusterAck)
  return false;
#undef DO_
}

void CreateClusterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CreateClusterAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CreateClusterAck)
}

::google::protobuf::uint8* CreateClusterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CreateClusterAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CreateClusterAck)
  return target;
}

size_t CreateClusterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CreateClusterAck)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateClusterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CreateClusterAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateClusterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateClusterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CreateClusterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CreateClusterAck)
    UnsafeMergeFrom(*source);
  }
}

void CreateClusterAck::MergeFrom(const CreateClusterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CreateClusterAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateClusterAck::UnsafeMergeFrom(const CreateClusterAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void CreateClusterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CreateClusterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateClusterAck::CopyFrom(const CreateClusterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CreateClusterAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateClusterAck::IsInitialized() const {

  return true;
}

void CreateClusterAck::Swap(CreateClusterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateClusterAck::InternalSwap(CreateClusterAck* other) {
  std::swap(uid_, other->uid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateClusterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateClusterAck_descriptor_;
  metadata.reflection = CreateClusterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateClusterAck

// optional uint64 uid = 1;
void CreateClusterAck::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CreateClusterAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.CreateClusterAck.uid)
  return uid_;
}
void CreateClusterAck::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CreateClusterAck.uid)
}

// optional uint32 error = 2;
void CreateClusterAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 CreateClusterAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.CreateClusterAck.error)
  return error_;
}
void CreateClusterAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CreateClusterAck.error)
}

inline const CreateClusterAck* CreateClusterAck::internal_default_instance() {
  return &CreateClusterAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqJoinCluster::kUidFieldNumber;
const int ReqJoinCluster::kTeamPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqJoinCluster::ReqJoinCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqJoinCluster)
}

void ReqJoinCluster::InitAsDefaultInstance() {
}

ReqJoinCluster::ReqJoinCluster(const ReqJoinCluster& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqJoinCluster)
}

void ReqJoinCluster::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&teampos_) -
    reinterpret_cast<char*>(&uid_) + sizeof(teampos_));
  _cached_size_ = 0;
}

ReqJoinCluster::~ReqJoinCluster() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqJoinCluster)
  SharedDtor();
}

void ReqJoinCluster::SharedDtor() {
}

void ReqJoinCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqJoinCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqJoinCluster_descriptor_;
}

const ReqJoinCluster& ReqJoinCluster::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqJoinCluster> ReqJoinCluster_default_instance_;

ReqJoinCluster* ReqJoinCluster::New(::google::protobuf::Arena* arena) const {
  ReqJoinCluster* n = new ReqJoinCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqJoinCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqJoinCluster)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqJoinCluster, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqJoinCluster*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, teampos_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqJoinCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqJoinCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamPos;
        break;
      }

      // optional uint32 teamPos = 2;
      case 2: {
        if (tag == 16) {
         parse_teamPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teampos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqJoinCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqJoinCluster)
  return false;
#undef DO_
}

void ReqJoinCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqJoinCluster)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teampos(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqJoinCluster)
}

::google::protobuf::uint8* ReqJoinCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqJoinCluster)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teampos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqJoinCluster)
  return target;
}

size_t ReqJoinCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqJoinCluster)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->teampos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqJoinCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqJoinCluster)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqJoinCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqJoinCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqJoinCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqJoinCluster)
    UnsafeMergeFrom(*source);
  }
}

void ReqJoinCluster::MergeFrom(const ReqJoinCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqJoinCluster)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqJoinCluster::UnsafeMergeFrom(const ReqJoinCluster& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.teampos() != 0) {
    set_teampos(from.teampos());
  }
}

void ReqJoinCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqJoinCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqJoinCluster::CopyFrom(const ReqJoinCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqJoinCluster)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqJoinCluster::IsInitialized() const {

  return true;
}

void ReqJoinCluster::Swap(ReqJoinCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqJoinCluster::InternalSwap(ReqJoinCluster* other) {
  std::swap(uid_, other->uid_);
  std::swap(teampos_, other->teampos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqJoinCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqJoinCluster_descriptor_;
  metadata.reflection = ReqJoinCluster_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqJoinCluster

// optional uint64 uid = 1;
void ReqJoinCluster::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqJoinCluster::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqJoinCluster.uid)
  return uid_;
}
void ReqJoinCluster::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqJoinCluster.uid)
}

// optional uint32 teamPos = 2;
void ReqJoinCluster::clear_teampos() {
  teampos_ = 0u;
}
::google::protobuf::uint32 ReqJoinCluster::teampos() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqJoinCluster.teamPos)
  return teampos_;
}
void ReqJoinCluster::set_teampos(::google::protobuf::uint32 value) {
  
  teampos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqJoinCluster.teamPos)
}

inline const ReqJoinCluster* ReqJoinCluster::internal_default_instance() {
  return &ReqJoinCluster_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinClusterAck::kUidFieldNumber;
const int JoinClusterAck::kTeamPosFieldNumber;
const int JoinClusterAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinClusterAck::JoinClusterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.JoinClusterAck)
}

void JoinClusterAck::InitAsDefaultInstance() {
}

JoinClusterAck::JoinClusterAck(const JoinClusterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.JoinClusterAck)
}

void JoinClusterAck::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&uid_) + sizeof(error_));
  _cached_size_ = 0;
}

JoinClusterAck::~JoinClusterAck() {
  // @@protoc_insertion_point(destructor:NetMsg.JoinClusterAck)
  SharedDtor();
}

void JoinClusterAck::SharedDtor() {
}

void JoinClusterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinClusterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinClusterAck_descriptor_;
}

const JoinClusterAck& JoinClusterAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JoinClusterAck> JoinClusterAck_default_instance_;

JoinClusterAck* JoinClusterAck::New(::google::protobuf::Arena* arena) const {
  JoinClusterAck* n = new JoinClusterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinClusterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.JoinClusterAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JoinClusterAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinClusterAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool JoinClusterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.JoinClusterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamPos;
        break;
      }

      // optional uint32 teamPos = 2;
      case 2: {
        if (tag == 16) {
         parse_teamPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teampos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.JoinClusterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.JoinClusterAck)
  return false;
#undef DO_
}

void JoinClusterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.JoinClusterAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teampos(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.JoinClusterAck)
}

::google::protobuf::uint8* JoinClusterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.JoinClusterAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teampos(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.JoinClusterAck)
  return target;
}

size_t JoinClusterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.JoinClusterAck)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->teampos());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinClusterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.JoinClusterAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JoinClusterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinClusterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.JoinClusterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.JoinClusterAck)
    UnsafeMergeFrom(*source);
  }
}

void JoinClusterAck::MergeFrom(const JoinClusterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.JoinClusterAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JoinClusterAck::UnsafeMergeFrom(const JoinClusterAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.teampos() != 0) {
    set_teampos(from.teampos());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void JoinClusterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.JoinClusterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinClusterAck::CopyFrom(const JoinClusterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.JoinClusterAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JoinClusterAck::IsInitialized() const {

  return true;
}

void JoinClusterAck::Swap(JoinClusterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinClusterAck::InternalSwap(JoinClusterAck* other) {
  std::swap(uid_, other->uid_);
  std::swap(teampos_, other->teampos_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinClusterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinClusterAck_descriptor_;
  metadata.reflection = JoinClusterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinClusterAck

// optional uint64 uid = 1;
void JoinClusterAck::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 JoinClusterAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.JoinClusterAck.uid)
  return uid_;
}
void JoinClusterAck::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.JoinClusterAck.uid)
}

// optional uint32 teamPos = 2;
void JoinClusterAck::clear_teampos() {
  teampos_ = 0u;
}
::google::protobuf::uint32 JoinClusterAck::teampos() const {
  // @@protoc_insertion_point(field_get:NetMsg.JoinClusterAck.teamPos)
  return teampos_;
}
void JoinClusterAck::set_teampos(::google::protobuf::uint32 value) {
  
  teampos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.JoinClusterAck.teamPos)
}

// optional uint32 error = 3;
void JoinClusterAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 JoinClusterAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.JoinClusterAck.error)
  return error_;
}
void JoinClusterAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.JoinClusterAck.error)
}

inline const JoinClusterAck* JoinClusterAck::internal_default_instance() {
  return &JoinClusterAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqExitCluster::kUidFieldNumber;
const int ReqExitCluster::kTeamPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqExitCluster::ReqExitCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqExitCluster)
}

void ReqExitCluster::InitAsDefaultInstance() {
}

ReqExitCluster::ReqExitCluster(const ReqExitCluster& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqExitCluster)
}

void ReqExitCluster::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&teampos_) -
    reinterpret_cast<char*>(&uid_) + sizeof(teampos_));
  _cached_size_ = 0;
}

ReqExitCluster::~ReqExitCluster() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqExitCluster)
  SharedDtor();
}

void ReqExitCluster::SharedDtor() {
}

void ReqExitCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqExitCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqExitCluster_descriptor_;
}

const ReqExitCluster& ReqExitCluster::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqExitCluster> ReqExitCluster_default_instance_;

ReqExitCluster* ReqExitCluster::New(::google::protobuf::Arena* arena) const {
  ReqExitCluster* n = new ReqExitCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqExitCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqExitCluster)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqExitCluster, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqExitCluster*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, teampos_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqExitCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqExitCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamPos;
        break;
      }

      // optional uint32 teamPos = 2;
      case 2: {
        if (tag == 16) {
         parse_teamPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teampos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqExitCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqExitCluster)
  return false;
#undef DO_
}

void ReqExitCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqExitCluster)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teampos(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqExitCluster)
}

::google::protobuf::uint8* ReqExitCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqExitCluster)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teampos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqExitCluster)
  return target;
}

size_t ReqExitCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqExitCluster)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->teampos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqExitCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqExitCluster)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqExitCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqExitCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqExitCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqExitCluster)
    UnsafeMergeFrom(*source);
  }
}

void ReqExitCluster::MergeFrom(const ReqExitCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqExitCluster)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqExitCluster::UnsafeMergeFrom(const ReqExitCluster& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.teampos() != 0) {
    set_teampos(from.teampos());
  }
}

void ReqExitCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqExitCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqExitCluster::CopyFrom(const ReqExitCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqExitCluster)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqExitCluster::IsInitialized() const {

  return true;
}

void ReqExitCluster::Swap(ReqExitCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqExitCluster::InternalSwap(ReqExitCluster* other) {
  std::swap(uid_, other->uid_);
  std::swap(teampos_, other->teampos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqExitCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqExitCluster_descriptor_;
  metadata.reflection = ReqExitCluster_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqExitCluster

// optional uint64 uid = 1;
void ReqExitCluster::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReqExitCluster::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqExitCluster.uid)
  return uid_;
}
void ReqExitCluster::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqExitCluster.uid)
}

// optional uint32 teamPos = 2;
void ReqExitCluster::clear_teampos() {
  teampos_ = 0u;
}
::google::protobuf::uint32 ReqExitCluster::teampos() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqExitCluster.teamPos)
  return teampos_;
}
void ReqExitCluster::set_teampos(::google::protobuf::uint32 value) {
  
  teampos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqExitCluster.teamPos)
}

inline const ReqExitCluster* ReqExitCluster::internal_default_instance() {
  return &ReqExitCluster_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExitClusterAck::kUidFieldNumber;
const int ExitClusterAck::kTeamPosFieldNumber;
const int ExitClusterAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExitClusterAck::ExitClusterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ExitClusterAck)
}

void ExitClusterAck::InitAsDefaultInstance() {
}

ExitClusterAck::ExitClusterAck(const ExitClusterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ExitClusterAck)
}

void ExitClusterAck::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&uid_) + sizeof(error_));
  _cached_size_ = 0;
}

ExitClusterAck::~ExitClusterAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ExitClusterAck)
  SharedDtor();
}

void ExitClusterAck::SharedDtor() {
}

void ExitClusterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitClusterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitClusterAck_descriptor_;
}

const ExitClusterAck& ExitClusterAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExitClusterAck> ExitClusterAck_default_instance_;

ExitClusterAck* ExitClusterAck::New(::google::protobuf::Arena* arena) const {
  ExitClusterAck* n = new ExitClusterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExitClusterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ExitClusterAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ExitClusterAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExitClusterAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool ExitClusterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ExitClusterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamPos;
        break;
      }

      // optional uint32 teamPos = 2;
      case 2: {
        if (tag == 16) {
         parse_teamPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teampos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ExitClusterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ExitClusterAck)
  return false;
#undef DO_
}

void ExitClusterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ExitClusterAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teampos(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ExitClusterAck)
}

::google::protobuf::uint8* ExitClusterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ExitClusterAck)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teampos(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ExitClusterAck)
  return target;
}

size_t ExitClusterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ExitClusterAck)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional uint32 teamPos = 2;
  if (this->teampos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->teampos());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitClusterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ExitClusterAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExitClusterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExitClusterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ExitClusterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ExitClusterAck)
    UnsafeMergeFrom(*source);
  }
}

void ExitClusterAck::MergeFrom(const ExitClusterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ExitClusterAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExitClusterAck::UnsafeMergeFrom(const ExitClusterAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.teampos() != 0) {
    set_teampos(from.teampos());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void ExitClusterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ExitClusterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitClusterAck::CopyFrom(const ExitClusterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ExitClusterAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExitClusterAck::IsInitialized() const {

  return true;
}

void ExitClusterAck::Swap(ExitClusterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExitClusterAck::InternalSwap(ExitClusterAck* other) {
  std::swap(uid_, other->uid_);
  std::swap(teampos_, other->teampos_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExitClusterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitClusterAck_descriptor_;
  metadata.reflection = ExitClusterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExitClusterAck

// optional uint64 uid = 1;
void ExitClusterAck::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ExitClusterAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ExitClusterAck.uid)
  return uid_;
}
void ExitClusterAck::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ExitClusterAck.uid)
}

// optional uint32 teamPos = 2;
void ExitClusterAck::clear_teampos() {
  teampos_ = 0u;
}
::google::protobuf::uint32 ExitClusterAck::teampos() const {
  // @@protoc_insertion_point(field_get:NetMsg.ExitClusterAck.teamPos)
  return teampos_;
}
void ExitClusterAck::set_teampos(::google::protobuf::uint32 value) {
  
  teampos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ExitClusterAck.teamPos)
}

// optional uint32 error = 3;
void ExitClusterAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 ExitClusterAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.ExitClusterAck.error)
  return error_;
}
void ExitClusterAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ExitClusterAck.error)
}

inline const ExitClusterAck* ExitClusterAck::internal_default_instance() {
  return &ExitClusterAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCityItem::kCityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCityItem::ReqCityItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqCityItem)
}

void ReqCityItem::InitAsDefaultInstance() {
}

ReqCityItem::ReqCityItem(const ReqCityItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqCityItem)
}

void ReqCityItem::SharedCtor() {
  cityid_ = 0u;
  _cached_size_ = 0;
}

ReqCityItem::~ReqCityItem() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqCityItem)
  SharedDtor();
}

void ReqCityItem::SharedDtor() {
}

void ReqCityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCityItem_descriptor_;
}

const ReqCityItem& ReqCityItem::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqCityItem> ReqCityItem_default_instance_;

ReqCityItem* ReqCityItem::New(::google::protobuf::Arena* arena) const {
  ReqCityItem* n = new ReqCityItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCityItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqCityItem)
  cityid_ = 0u;
}

bool ReqCityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqCityItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqCityItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqCityItem)
  return false;
#undef DO_
}

void ReqCityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqCityItem)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqCityItem)
}

::google::protobuf::uint8* ReqCityItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqCityItem)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqCityItem)
  return target;
}

size_t ReqCityItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqCityItem)
  size_t total_size = 0;

  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCityItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqCityItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqCityItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCityItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqCityItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqCityItem)
    UnsafeMergeFrom(*source);
  }
}

void ReqCityItem::MergeFrom(const ReqCityItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqCityItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqCityItem::UnsafeMergeFrom(const ReqCityItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
}

void ReqCityItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqCityItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCityItem::CopyFrom(const ReqCityItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqCityItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqCityItem::IsInitialized() const {

  return true;
}

void ReqCityItem::Swap(ReqCityItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCityItem::InternalSwap(ReqCityItem* other) {
  std::swap(cityid_, other->cityid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCityItem_descriptor_;
  metadata.reflection = ReqCityItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCityItem

// optional uint32 cityId = 1;
void ReqCityItem::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 ReqCityItem::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCityItem.cityId)
  return cityid_;
}
void ReqCityItem::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqCityItem.cityId)
}

inline const ReqCityItem* ReqCityItem::internal_default_instance() {
  return &ReqCityItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CityItemAck::kCityItemFieldNumber;
const int CityItemAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CityItemAck::CityItemAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CityItemAck)
}

void CityItemAck::InitAsDefaultInstance() {
}

CityItemAck::CityItemAck(const CityItemAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CityItemAck)
}

void CityItemAck::SharedCtor() {
  error_ = 0u;
  _cached_size_ = 0;
}

CityItemAck::~CityItemAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CityItemAck)
  SharedDtor();
}

void CityItemAck::SharedDtor() {
}

void CityItemAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityItemAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityItemAck_descriptor_;
}

const CityItemAck& CityItemAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CityItemAck> CityItemAck_default_instance_;

CityItemAck* CityItemAck::New(::google::protobuf::Arena* arena) const {
  CityItemAck* n = new CityItemAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CityItemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CityItemAck)
  error_ = 0u;
  cityitem_.Clear();
}

bool CityItemAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CityItemAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.CityItemInfo cityItem = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cityItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cityitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cityItem;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CityItemAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CityItemAck)
  return false;
#undef DO_
}

void CityItemAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CityItemAck)
  // repeated .NetMsg.CityItemInfo cityItem = 1;
  for (unsigned int i = 0, n = this->cityitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cityitem(i), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CityItemAck)
}

::google::protobuf::uint8* CityItemAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CityItemAck)
  // repeated .NetMsg.CityItemInfo cityItem = 1;
  for (unsigned int i = 0, n = this->cityitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cityitem(i), false, target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CityItemAck)
  return target;
}

size_t CityItemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CityItemAck)
  size_t total_size = 0;

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.CityItemInfo cityItem = 1;
  {
    unsigned int count = this->cityitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cityitem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityItemAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CityItemAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CityItemAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CityItemAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CityItemAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CityItemAck)
    UnsafeMergeFrom(*source);
  }
}

void CityItemAck::MergeFrom(const CityItemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CityItemAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CityItemAck::UnsafeMergeFrom(const CityItemAck& from) {
  GOOGLE_DCHECK(&from != this);
  cityitem_.MergeFrom(from.cityitem_);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void CityItemAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CityItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityItemAck::CopyFrom(const CityItemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CityItemAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CityItemAck::IsInitialized() const {

  return true;
}

void CityItemAck::Swap(CityItemAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CityItemAck::InternalSwap(CityItemAck* other) {
  cityitem_.UnsafeArenaSwap(&other->cityitem_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CityItemAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityItemAck_descriptor_;
  metadata.reflection = CityItemAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CityItemAck

// repeated .NetMsg.CityItemInfo cityItem = 1;
int CityItemAck::cityitem_size() const {
  return cityitem_.size();
}
void CityItemAck::clear_cityitem() {
  cityitem_.Clear();
}
const ::NetMsg::CityItemInfo& CityItemAck::cityitem(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.CityItemAck.cityItem)
  return cityitem_.Get(index);
}
::NetMsg::CityItemInfo* CityItemAck::mutable_cityitem(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.CityItemAck.cityItem)
  return cityitem_.Mutable(index);
}
::NetMsg::CityItemInfo* CityItemAck::add_cityitem() {
  // @@protoc_insertion_point(field_add:NetMsg.CityItemAck.cityItem)
  return cityitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::CityItemInfo >*
CityItemAck::mutable_cityitem() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.CityItemAck.cityItem)
  return &cityitem_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::CityItemInfo >&
CityItemAck::cityitem() const {
  // @@protoc_insertion_point(field_list:NetMsg.CityItemAck.cityItem)
  return cityitem_;
}

// optional uint32 error = 2;
void CityItemAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 CityItemAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityItemAck.error)
  return error_;
}
void CityItemAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityItemAck.error)
}

inline const CityItemAck* CityItemAck::internal_default_instance() {
  return &CityItemAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCityHero::kCityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCityHero::ReqCityHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqCityHero)
}

void ReqCityHero::InitAsDefaultInstance() {
}

ReqCityHero::ReqCityHero(const ReqCityHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqCityHero)
}

void ReqCityHero::SharedCtor() {
  cityid_ = 0u;
  _cached_size_ = 0;
}

ReqCityHero::~ReqCityHero() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqCityHero)
  SharedDtor();
}

void ReqCityHero::SharedDtor() {
}

void ReqCityHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCityHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCityHero_descriptor_;
}

const ReqCityHero& ReqCityHero::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqCityHero> ReqCityHero_default_instance_;

ReqCityHero* ReqCityHero::New(::google::protobuf::Arena* arena) const {
  ReqCityHero* n = new ReqCityHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCityHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqCityHero)
  cityid_ = 0u;
}

bool ReqCityHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqCityHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqCityHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqCityHero)
  return false;
#undef DO_
}

void ReqCityHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqCityHero)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqCityHero)
}

::google::protobuf::uint8* ReqCityHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqCityHero)
  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqCityHero)
  return target;
}

size_t ReqCityHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqCityHero)
  size_t total_size = 0;

  // optional uint32 cityId = 1;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cityid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCityHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqCityHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqCityHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCityHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqCityHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqCityHero)
    UnsafeMergeFrom(*source);
  }
}

void ReqCityHero::MergeFrom(const ReqCityHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqCityHero)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqCityHero::UnsafeMergeFrom(const ReqCityHero& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cityid() != 0) {
    set_cityid(from.cityid());
  }
}

void ReqCityHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqCityHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCityHero::CopyFrom(const ReqCityHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqCityHero)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqCityHero::IsInitialized() const {

  return true;
}

void ReqCityHero::Swap(ReqCityHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCityHero::InternalSwap(ReqCityHero* other) {
  std::swap(cityid_, other->cityid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCityHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCityHero_descriptor_;
  metadata.reflection = ReqCityHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCityHero

// optional uint32 cityId = 1;
void ReqCityHero::clear_cityid() {
  cityid_ = 0u;
}
::google::protobuf::uint32 ReqCityHero::cityid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqCityHero.cityId)
  return cityid_;
}
void ReqCityHero::set_cityid(::google::protobuf::uint32 value) {
  
  cityid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqCityHero.cityId)
}

inline const ReqCityHero* ReqCityHero::internal_default_instance() {
  return &ReqCityHero_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CityHeroAck::kCityHeroFieldNumber;
const int CityHeroAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CityHeroAck::CityHeroAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.CityHeroAck)
}

void CityHeroAck::InitAsDefaultInstance() {
}

CityHeroAck::CityHeroAck(const CityHeroAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.CityHeroAck)
}

void CityHeroAck::SharedCtor() {
  error_ = 0u;
  _cached_size_ = 0;
}

CityHeroAck::~CityHeroAck() {
  // @@protoc_insertion_point(destructor:NetMsg.CityHeroAck)
  SharedDtor();
}

void CityHeroAck::SharedDtor() {
}

void CityHeroAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityHeroAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityHeroAck_descriptor_;
}

const CityHeroAck& CityHeroAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CityHeroAck> CityHeroAck_default_instance_;

CityHeroAck* CityHeroAck::New(::google::protobuf::Arena* arena) const {
  CityHeroAck* n = new CityHeroAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CityHeroAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.CityHeroAck)
  error_ = 0u;
  cityhero_.Clear();
}

bool CityHeroAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.CityHeroAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.CityHeroInfo cityHero = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cityHero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cityhero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cityHero;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.CityHeroAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.CityHeroAck)
  return false;
#undef DO_
}

void CityHeroAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.CityHeroAck)
  // repeated .NetMsg.CityHeroInfo cityHero = 1;
  for (unsigned int i = 0, n = this->cityhero_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cityhero(i), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.CityHeroAck)
}

::google::protobuf::uint8* CityHeroAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.CityHeroAck)
  // repeated .NetMsg.CityHeroInfo cityHero = 1;
  for (unsigned int i = 0, n = this->cityhero_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cityhero(i), false, target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.CityHeroAck)
  return target;
}

size_t CityHeroAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.CityHeroAck)
  size_t total_size = 0;

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.CityHeroInfo cityHero = 1;
  {
    unsigned int count = this->cityhero_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cityhero(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityHeroAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.CityHeroAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CityHeroAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CityHeroAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.CityHeroAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.CityHeroAck)
    UnsafeMergeFrom(*source);
  }
}

void CityHeroAck::MergeFrom(const CityHeroAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.CityHeroAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CityHeroAck::UnsafeMergeFrom(const CityHeroAck& from) {
  GOOGLE_DCHECK(&from != this);
  cityhero_.MergeFrom(from.cityhero_);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void CityHeroAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.CityHeroAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityHeroAck::CopyFrom(const CityHeroAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.CityHeroAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CityHeroAck::IsInitialized() const {

  return true;
}

void CityHeroAck::Swap(CityHeroAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CityHeroAck::InternalSwap(CityHeroAck* other) {
  cityhero_.UnsafeArenaSwap(&other->cityhero_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CityHeroAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityHeroAck_descriptor_;
  metadata.reflection = CityHeroAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CityHeroAck

// repeated .NetMsg.CityHeroInfo cityHero = 1;
int CityHeroAck::cityhero_size() const {
  return cityhero_.size();
}
void CityHeroAck::clear_cityhero() {
  cityhero_.Clear();
}
const ::NetMsg::CityHeroInfo& CityHeroAck::cityhero(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.CityHeroAck.cityHero)
  return cityhero_.Get(index);
}
::NetMsg::CityHeroInfo* CityHeroAck::mutable_cityhero(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.CityHeroAck.cityHero)
  return cityhero_.Mutable(index);
}
::NetMsg::CityHeroInfo* CityHeroAck::add_cityhero() {
  // @@protoc_insertion_point(field_add:NetMsg.CityHeroAck.cityHero)
  return cityhero_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::CityHeroInfo >*
CityHeroAck::mutable_cityhero() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.CityHeroAck.cityHero)
  return &cityhero_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::CityHeroInfo >&
CityHeroAck::cityhero() const {
  // @@protoc_insertion_point(field_list:NetMsg.CityHeroAck.cityHero)
  return cityhero_;
}

// optional uint32 error = 2;
void CityHeroAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 CityHeroAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.CityHeroAck.error)
  return error_;
}
void CityHeroAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.CityHeroAck.error)
}

inline const CityHeroAck* CityHeroAck::internal_default_instance() {
  return &CityHeroAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceInfo::kUidFieldNumber;
const int ResourceInfo::kStarFieldNumber;
const int ResourceInfo::kTypeFieldNumber;
const int ResourceInfo::kResourceNumFieldNumber;
const int ResourceInfo::kLeftTimeFieldNumber;
const int ResourceInfo::kPosIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceInfo::ResourceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ResourceInfo)
}

void ResourceInfo::InitAsDefaultInstance() {
}

ResourceInfo::ResourceInfo(const ResourceInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ResourceInfo)
}

void ResourceInfo::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&posid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(posid_));
  _cached_size_ = 0;
}

ResourceInfo::~ResourceInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ResourceInfo)
  SharedDtor();
}

void ResourceInfo::SharedDtor() {
}

void ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfo_descriptor_;
}

const ResourceInfo& ResourceInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResourceInfo> ResourceInfo_default_instance_;

ResourceInfo* ResourceInfo::New(::google::protobuf::Arena* arena) const {
  ResourceInfo* n = new ResourceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ResourceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResourceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResourceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, posid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ResourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .NetMsg.ResourceType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resourceNum;
        break;
      }

      // optional uint32 resourceNum = 4;
      case 4: {
        if (tag == 32) {
         parse_resourceNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcenum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 5;
      case 5: {
        if (tag == 40) {
         parse_leftTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_posId;
        break;
      }

      // optional uint32 posId = 6;
      case 6: {
        if (tag == 48) {
         parse_posId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ResourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ResourceInfo)
  return false;
#undef DO_
}

void ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ResourceInfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // optional .NetMsg.ResourceType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 resourceNum = 4;
  if (this->resourcenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resourcenum(), output);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lefttime(), output);
  }

  // optional uint32 posId = 6;
  if (this->posid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->posid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ResourceInfo)
}

::google::protobuf::uint8* ResourceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ResourceInfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // optional .NetMsg.ResourceType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 resourceNum = 4;
  if (this->resourcenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resourcenum(), target);
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lefttime(), target);
  }

  // optional uint32 posId = 6;
  if (this->posid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->posid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ResourceInfo)
  return target;
}

size_t ResourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ResourceInfo)
  size_t total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 star = 2;
  if (this->star() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->star());
  }

  // optional .NetMsg.ResourceType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 resourceNum = 4;
  if (this->resourcenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resourcenum());
  }

  // optional uint32 leftTime = 5;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefttime());
  }

  // optional uint32 posId = 6;
  if (this->posid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->posid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ResourceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ResourceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ResourceInfo)
    UnsafeMergeFrom(*source);
  }
}

void ResourceInfo::MergeFrom(const ResourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ResourceInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResourceInfo::UnsafeMergeFrom(const ResourceInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.star() != 0) {
    set_star(from.star());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.resourcenum() != 0) {
    set_resourcenum(from.resourcenum());
  }
  if (from.lefttime() != 0) {
    set_lefttime(from.lefttime());
  }
  if (from.posid() != 0) {
    set_posid(from.posid());
  }
}

void ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ResourceInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResourceInfo::IsInitialized() const {

  return true;
}

void ResourceInfo::Swap(ResourceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceInfo::InternalSwap(ResourceInfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(star_, other->star_);
  std::swap(type_, other->type_);
  std::swap(resourcenum_, other->resourcenum_);
  std::swap(lefttime_, other->lefttime_);
  std::swap(posid_, other->posid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfo_descriptor_;
  metadata.reflection = ResourceInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceInfo

// optional uint32 uid = 1;
void ResourceInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ResourceInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceInfo.uid)
  return uid_;
}
void ResourceInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceInfo.uid)
}

// optional uint32 star = 2;
void ResourceInfo::clear_star() {
  star_ = 0u;
}
::google::protobuf::uint32 ResourceInfo::star() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceInfo.star)
  return star_;
}
void ResourceInfo::set_star(::google::protobuf::uint32 value) {
  
  star_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceInfo.star)
}

// optional .NetMsg.ResourceType type = 3;
void ResourceInfo::clear_type() {
  type_ = 0;
}
::NetMsg::ResourceType ResourceInfo::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceInfo.type)
  return static_cast< ::NetMsg::ResourceType >(type_);
}
void ResourceInfo::set_type(::NetMsg::ResourceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceInfo.type)
}

// optional uint32 resourceNum = 4;
void ResourceInfo::clear_resourcenum() {
  resourcenum_ = 0u;
}
::google::protobuf::uint32 ResourceInfo::resourcenum() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceInfo.resourceNum)
  return resourcenum_;
}
void ResourceInfo::set_resourcenum(::google::protobuf::uint32 value) {
  
  resourcenum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceInfo.resourceNum)
}

// optional uint32 leftTime = 5;
void ResourceInfo::clear_lefttime() {
  lefttime_ = 0u;
}
::google::protobuf::uint32 ResourceInfo::lefttime() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceInfo.leftTime)
  return lefttime_;
}
void ResourceInfo::set_lefttime(::google::protobuf::uint32 value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceInfo.leftTime)
}

// optional uint32 posId = 6;
void ResourceInfo::clear_posid() {
  posid_ = 0u;
}
::google::protobuf::uint32 ResourceInfo::posid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceInfo.posId)
  return posid_;
}
void ResourceInfo::set_posid(::google::protobuf::uint32 value) {
  
  posid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceInfo.posId)
}

inline const ResourceInfo* ResourceInfo::internal_default_instance() {
  return &ResourceInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceInfoAck::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceInfoAck::ResourceInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ResourceInfoAck)
}

void ResourceInfoAck::InitAsDefaultInstance() {
}

ResourceInfoAck::ResourceInfoAck(const ResourceInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ResourceInfoAck)
}

void ResourceInfoAck::SharedCtor() {
  _cached_size_ = 0;
}

ResourceInfoAck::~ResourceInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ResourceInfoAck)
  SharedDtor();
}

void ResourceInfoAck::SharedDtor() {
}

void ResourceInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfoAck_descriptor_;
}

const ResourceInfoAck& ResourceInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResourceInfoAck> ResourceInfoAck_default_instance_;

ResourceInfoAck* ResourceInfoAck::New(::google::protobuf::Arena* arena) const {
  ResourceInfoAck* n = new ResourceInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ResourceInfoAck)
  info_.Clear();
}

bool ResourceInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ResourceInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetMsg.ResourceInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ResourceInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ResourceInfoAck)
  return false;
#undef DO_
}

void ResourceInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ResourceInfoAck)
  // repeated .NetMsg.ResourceInfo info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ResourceInfoAck)
}

::google::protobuf::uint8* ResourceInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ResourceInfoAck)
  // repeated .NetMsg.ResourceInfo info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ResourceInfoAck)
  return target;
}

size_t ResourceInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ResourceInfoAck)
  size_t total_size = 0;

  // repeated .NetMsg.ResourceInfo info = 1;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ResourceInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ResourceInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ResourceInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void ResourceInfoAck::MergeFrom(const ResourceInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ResourceInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResourceInfoAck::UnsafeMergeFrom(const ResourceInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  info_.MergeFrom(from.info_);
}

void ResourceInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ResourceInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfoAck::CopyFrom(const ResourceInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ResourceInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResourceInfoAck::IsInitialized() const {

  return true;
}

void ResourceInfoAck::Swap(ResourceInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceInfoAck::InternalSwap(ResourceInfoAck* other) {
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfoAck_descriptor_;
  metadata.reflection = ResourceInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceInfoAck

// repeated .NetMsg.ResourceInfo info = 1;
int ResourceInfoAck::info_size() const {
  return info_.size();
}
void ResourceInfoAck::clear_info() {
  info_.Clear();
}
const ::NetMsg::ResourceInfo& ResourceInfoAck::info(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceInfoAck.info)
  return info_.Get(index);
}
::NetMsg::ResourceInfo* ResourceInfoAck::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ResourceInfoAck.info)
  return info_.Mutable(index);
}
::NetMsg::ResourceInfo* ResourceInfoAck::add_info() {
  // @@protoc_insertion_point(field_add:NetMsg.ResourceInfoAck.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ResourceInfo >*
ResourceInfoAck::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ResourceInfoAck.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ResourceInfo >&
ResourceInfoAck::info() const {
  // @@protoc_insertion_point(field_list:NetMsg.ResourceInfoAck.info)
  return info_;
}

inline const ResourceInfoAck* ResourceInfoAck::internal_default_instance() {
  return &ResourceInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqResourceDetailInfo::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqResourceDetailInfo::ReqResourceDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqResourceDetailInfo)
}

void ReqResourceDetailInfo::InitAsDefaultInstance() {
}

ReqResourceDetailInfo::ReqResourceDetailInfo(const ReqResourceDetailInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqResourceDetailInfo)
}

void ReqResourceDetailInfo::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

ReqResourceDetailInfo::~ReqResourceDetailInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqResourceDetailInfo)
  SharedDtor();
}

void ReqResourceDetailInfo::SharedDtor() {
}

void ReqResourceDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqResourceDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqResourceDetailInfo_descriptor_;
}

const ReqResourceDetailInfo& ReqResourceDetailInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqResourceDetailInfo> ReqResourceDetailInfo_default_instance_;

ReqResourceDetailInfo* ReqResourceDetailInfo::New(::google::protobuf::Arena* arena) const {
  ReqResourceDetailInfo* n = new ReqResourceDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqResourceDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqResourceDetailInfo)
  uid_ = 0u;
}

bool ReqResourceDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqResourceDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqResourceDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqResourceDetailInfo)
  return false;
#undef DO_
}

void ReqResourceDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqResourceDetailInfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqResourceDetailInfo)
}

::google::protobuf::uint8* ReqResourceDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqResourceDetailInfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqResourceDetailInfo)
  return target;
}

size_t ReqResourceDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqResourceDetailInfo)
  size_t total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqResourceDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqResourceDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqResourceDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqResourceDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqResourceDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqResourceDetailInfo)
    UnsafeMergeFrom(*source);
  }
}

void ReqResourceDetailInfo::MergeFrom(const ReqResourceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqResourceDetailInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqResourceDetailInfo::UnsafeMergeFrom(const ReqResourceDetailInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqResourceDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqResourceDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqResourceDetailInfo::CopyFrom(const ReqResourceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqResourceDetailInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqResourceDetailInfo::IsInitialized() const {

  return true;
}

void ReqResourceDetailInfo::Swap(ReqResourceDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqResourceDetailInfo::InternalSwap(ReqResourceDetailInfo* other) {
  std::swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqResourceDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqResourceDetailInfo_descriptor_;
  metadata.reflection = ReqResourceDetailInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqResourceDetailInfo

// optional uint32 uid = 1;
void ReqResourceDetailInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ReqResourceDetailInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqResourceDetailInfo.uid)
  return uid_;
}
void ReqResourceDetailInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqResourceDetailInfo.uid)
}

inline const ReqResourceDetailInfo* ReqResourceDetailInfo::internal_default_instance() {
  return &ReqResourceDetailInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceDetailInfo::kTeamPosFieldNumber;
const int ResourceDetailInfo::kResourceNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceDetailInfo::ResourceDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ResourceDetailInfo)
}

void ResourceDetailInfo::InitAsDefaultInstance() {
}

ResourceDetailInfo::ResourceDetailInfo(const ResourceDetailInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ResourceDetailInfo)
}

void ResourceDetailInfo::SharedCtor() {
  ::memset(&teampos_, 0, reinterpret_cast<char*>(&resourcenum_) -
    reinterpret_cast<char*>(&teampos_) + sizeof(resourcenum_));
  _cached_size_ = 0;
}

ResourceDetailInfo::~ResourceDetailInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.ResourceDetailInfo)
  SharedDtor();
}

void ResourceDetailInfo::SharedDtor() {
}

void ResourceDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDetailInfo_descriptor_;
}

const ResourceDetailInfo& ResourceDetailInfo::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResourceDetailInfo> ResourceDetailInfo_default_instance_;

ResourceDetailInfo* ResourceDetailInfo::New(::google::protobuf::Arena* arena) const {
  ResourceDetailInfo* n = new ResourceDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ResourceDetailInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResourceDetailInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResourceDetailInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(teampos_, resourcenum_);

#undef ZR_HELPER_
#undef ZR_

}

bool ResourceDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ResourceDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamPos = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teampos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resourceNum;
        break;
      }

      // optional uint32 resourceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_resourceNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcenum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ResourceDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ResourceDetailInfo)
  return false;
#undef DO_
}

void ResourceDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ResourceDetailInfo)
  // optional uint32 teamPos = 1;
  if (this->teampos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teampos(), output);
  }

  // optional uint32 resourceNum = 2;
  if (this->resourcenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resourcenum(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ResourceDetailInfo)
}

::google::protobuf::uint8* ResourceDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ResourceDetailInfo)
  // optional uint32 teamPos = 1;
  if (this->teampos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teampos(), target);
  }

  // optional uint32 resourceNum = 2;
  if (this->resourcenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resourcenum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ResourceDetailInfo)
  return target;
}

size_t ResourceDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ResourceDetailInfo)
  size_t total_size = 0;

  // optional uint32 teamPos = 1;
  if (this->teampos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->teampos());
  }

  // optional uint32 resourceNum = 2;
  if (this->resourcenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resourcenum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ResourceDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ResourceDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ResourceDetailInfo)
    UnsafeMergeFrom(*source);
  }
}

void ResourceDetailInfo::MergeFrom(const ResourceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ResourceDetailInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResourceDetailInfo::UnsafeMergeFrom(const ResourceDetailInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.teampos() != 0) {
    set_teampos(from.teampos());
  }
  if (from.resourcenum() != 0) {
    set_resourcenum(from.resourcenum());
  }
}

void ResourceDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ResourceDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDetailInfo::CopyFrom(const ResourceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ResourceDetailInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResourceDetailInfo::IsInitialized() const {

  return true;
}

void ResourceDetailInfo::Swap(ResourceDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceDetailInfo::InternalSwap(ResourceDetailInfo* other) {
  std::swap(teampos_, other->teampos_);
  std::swap(resourcenum_, other->resourcenum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceDetailInfo_descriptor_;
  metadata.reflection = ResourceDetailInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceDetailInfo

// optional uint32 teamPos = 1;
void ResourceDetailInfo::clear_teampos() {
  teampos_ = 0u;
}
::google::protobuf::uint32 ResourceDetailInfo::teampos() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceDetailInfo.teamPos)
  return teampos_;
}
void ResourceDetailInfo::set_teampos(::google::protobuf::uint32 value) {
  
  teampos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceDetailInfo.teamPos)
}

// optional uint32 resourceNum = 2;
void ResourceDetailInfo::clear_resourcenum() {
  resourcenum_ = 0u;
}
::google::protobuf::uint32 ResourceDetailInfo::resourcenum() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceDetailInfo.resourceNum)
  return resourcenum_;
}
void ResourceDetailInfo::set_resourcenum(::google::protobuf::uint32 value) {
  
  resourcenum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceDetailInfo.resourceNum)
}

inline const ResourceDetailInfo* ResourceDetailInfo::internal_default_instance() {
  return &ResourceDetailInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceDetailInfoAck::kUidFieldNumber;
const int ResourceDetailInfoAck::kResourceNumFieldNumber;
const int ResourceDetailInfoAck::kDetailInfoFieldNumber;
const int ResourceDetailInfoAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceDetailInfoAck::ResourceDetailInfoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ResourceDetailInfoAck)
}

void ResourceDetailInfoAck::InitAsDefaultInstance() {
}

ResourceDetailInfoAck::ResourceDetailInfoAck(const ResourceDetailInfoAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ResourceDetailInfoAck)
}

void ResourceDetailInfoAck::SharedCtor() {
  ::memset(&uid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&uid_) + sizeof(error_));
  _cached_size_ = 0;
}

ResourceDetailInfoAck::~ResourceDetailInfoAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ResourceDetailInfoAck)
  SharedDtor();
}

void ResourceDetailInfoAck::SharedDtor() {
}

void ResourceDetailInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceDetailInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDetailInfoAck_descriptor_;
}

const ResourceDetailInfoAck& ResourceDetailInfoAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResourceDetailInfoAck> ResourceDetailInfoAck_default_instance_;

ResourceDetailInfoAck* ResourceDetailInfoAck::New(::google::protobuf::Arena* arena) const {
  ResourceDetailInfoAck* n = new ResourceDetailInfoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceDetailInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ResourceDetailInfoAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResourceDetailInfoAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResourceDetailInfoAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, error_);

#undef ZR_HELPER_
#undef ZR_

  detailinfo_.Clear();
}

bool ResourceDetailInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ResourceDetailInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resourceNum;
        break;
      }

      // optional uint32 resourceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_resourceNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcenum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_detailInfo;
        break;
      }

      // repeated .NetMsg.ResourceDetailInfo detailInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_detailInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_detailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_detailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_detailInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional uint32 error = 4;
      case 4: {
        if (tag == 32) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ResourceDetailInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ResourceDetailInfoAck)
  return false;
#undef DO_
}

void ResourceDetailInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ResourceDetailInfoAck)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 resourceNum = 2;
  if (this->resourcenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resourcenum(), output);
  }

  // repeated .NetMsg.ResourceDetailInfo detailInfo = 3;
  for (unsigned int i = 0, n = this->detailinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detailinfo(i), output);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ResourceDetailInfoAck)
}

::google::protobuf::uint8* ResourceDetailInfoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ResourceDetailInfoAck)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 resourceNum = 2;
  if (this->resourcenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resourcenum(), target);
  }

  // repeated .NetMsg.ResourceDetailInfo detailInfo = 3;
  for (unsigned int i = 0, n = this->detailinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->detailinfo(i), false, target);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ResourceDetailInfoAck)
  return target;
}

size_t ResourceDetailInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ResourceDetailInfoAck)
  size_t total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 resourceNum = 2;
  if (this->resourcenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resourcenum());
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.ResourceDetailInfo detailInfo = 3;
  {
    unsigned int count = this->detailinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detailinfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceDetailInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ResourceDetailInfoAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceDetailInfoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceDetailInfoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ResourceDetailInfoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ResourceDetailInfoAck)
    UnsafeMergeFrom(*source);
  }
}

void ResourceDetailInfoAck::MergeFrom(const ResourceDetailInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ResourceDetailInfoAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResourceDetailInfoAck::UnsafeMergeFrom(const ResourceDetailInfoAck& from) {
  GOOGLE_DCHECK(&from != this);
  detailinfo_.MergeFrom(from.detailinfo_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.resourcenum() != 0) {
    set_resourcenum(from.resourcenum());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void ResourceDetailInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ResourceDetailInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDetailInfoAck::CopyFrom(const ResourceDetailInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ResourceDetailInfoAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResourceDetailInfoAck::IsInitialized() const {

  return true;
}

void ResourceDetailInfoAck::Swap(ResourceDetailInfoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceDetailInfoAck::InternalSwap(ResourceDetailInfoAck* other) {
  std::swap(uid_, other->uid_);
  std::swap(resourcenum_, other->resourcenum_);
  detailinfo_.UnsafeArenaSwap(&other->detailinfo_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceDetailInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceDetailInfoAck_descriptor_;
  metadata.reflection = ResourceDetailInfoAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceDetailInfoAck

// optional uint32 uid = 1;
void ResourceDetailInfoAck::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ResourceDetailInfoAck::uid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceDetailInfoAck.uid)
  return uid_;
}
void ResourceDetailInfoAck::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceDetailInfoAck.uid)
}

// optional uint32 resourceNum = 2;
void ResourceDetailInfoAck::clear_resourcenum() {
  resourcenum_ = 0u;
}
::google::protobuf::uint32 ResourceDetailInfoAck::resourcenum() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceDetailInfoAck.resourceNum)
  return resourcenum_;
}
void ResourceDetailInfoAck::set_resourcenum(::google::protobuf::uint32 value) {
  
  resourcenum_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceDetailInfoAck.resourceNum)
}

// repeated .NetMsg.ResourceDetailInfo detailInfo = 3;
int ResourceDetailInfoAck::detailinfo_size() const {
  return detailinfo_.size();
}
void ResourceDetailInfoAck::clear_detailinfo() {
  detailinfo_.Clear();
}
const ::NetMsg::ResourceDetailInfo& ResourceDetailInfoAck::detailinfo(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceDetailInfoAck.detailInfo)
  return detailinfo_.Get(index);
}
::NetMsg::ResourceDetailInfo* ResourceDetailInfoAck::mutable_detailinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ResourceDetailInfoAck.detailInfo)
  return detailinfo_.Mutable(index);
}
::NetMsg::ResourceDetailInfo* ResourceDetailInfoAck::add_detailinfo() {
  // @@protoc_insertion_point(field_add:NetMsg.ResourceDetailInfoAck.detailInfo)
  return detailinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::ResourceDetailInfo >*
ResourceDetailInfoAck::mutable_detailinfo() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ResourceDetailInfoAck.detailInfo)
  return &detailinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::ResourceDetailInfo >&
ResourceDetailInfoAck::detailinfo() const {
  // @@protoc_insertion_point(field_list:NetMsg.ResourceDetailInfoAck.detailInfo)
  return detailinfo_;
}

// optional uint32 error = 4;
void ResourceDetailInfoAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 ResourceDetailInfoAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.ResourceDetailInfoAck.error)
  return error_;
}
void ResourceDetailInfoAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ResourceDetailInfoAck.error)
}

inline const ResourceDetailInfoAck* ResourceDetailInfoAck::internal_default_instance() {
  return &ResourceDetailInfoAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegInviteJoinCluster::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegInviteJoinCluster::RegInviteJoinCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.RegInviteJoinCluster)
}

void RegInviteJoinCluster::InitAsDefaultInstance() {
}

RegInviteJoinCluster::RegInviteJoinCluster(const RegInviteJoinCluster& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.RegInviteJoinCluster)
}

void RegInviteJoinCluster::SharedCtor() {
  userid_ = 0u;
  _cached_size_ = 0;
}

RegInviteJoinCluster::~RegInviteJoinCluster() {
  // @@protoc_insertion_point(destructor:NetMsg.RegInviteJoinCluster)
  SharedDtor();
}

void RegInviteJoinCluster::SharedDtor() {
}

void RegInviteJoinCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegInviteJoinCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegInviteJoinCluster_descriptor_;
}

const RegInviteJoinCluster& RegInviteJoinCluster::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegInviteJoinCluster> RegInviteJoinCluster_default_instance_;

RegInviteJoinCluster* RegInviteJoinCluster::New(::google::protobuf::Arena* arena) const {
  RegInviteJoinCluster* n = new RegInviteJoinCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegInviteJoinCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.RegInviteJoinCluster)
  userid_ = 0u;
}

bool RegInviteJoinCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.RegInviteJoinCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.RegInviteJoinCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.RegInviteJoinCluster)
  return false;
#undef DO_
}

void RegInviteJoinCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.RegInviteJoinCluster)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.RegInviteJoinCluster)
}

::google::protobuf::uint8* RegInviteJoinCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.RegInviteJoinCluster)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.RegInviteJoinCluster)
  return target;
}

size_t RegInviteJoinCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.RegInviteJoinCluster)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegInviteJoinCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.RegInviteJoinCluster)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegInviteJoinCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegInviteJoinCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.RegInviteJoinCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.RegInviteJoinCluster)
    UnsafeMergeFrom(*source);
  }
}

void RegInviteJoinCluster::MergeFrom(const RegInviteJoinCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.RegInviteJoinCluster)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegInviteJoinCluster::UnsafeMergeFrom(const RegInviteJoinCluster& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void RegInviteJoinCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.RegInviteJoinCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegInviteJoinCluster::CopyFrom(const RegInviteJoinCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.RegInviteJoinCluster)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegInviteJoinCluster::IsInitialized() const {

  return true;
}

void RegInviteJoinCluster::Swap(RegInviteJoinCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegInviteJoinCluster::InternalSwap(RegInviteJoinCluster* other) {
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegInviteJoinCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegInviteJoinCluster_descriptor_;
  metadata.reflection = RegInviteJoinCluster_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegInviteJoinCluster

// optional uint32 userId = 1;
void RegInviteJoinCluster::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 RegInviteJoinCluster::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.RegInviteJoinCluster.userId)
  return userid_;
}
void RegInviteJoinCluster::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.RegInviteJoinCluster.userId)
}

inline const RegInviteJoinCluster* RegInviteJoinCluster::internal_default_instance() {
  return &RegInviteJoinCluster_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteJoinClusterAck::kUserIdFieldNumber;
const int InviteJoinClusterAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteJoinClusterAck::InviteJoinClusterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.InviteJoinClusterAck)
}

void InviteJoinClusterAck::InitAsDefaultInstance() {
}

InviteJoinClusterAck::InviteJoinClusterAck(const InviteJoinClusterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.InviteJoinClusterAck)
}

void InviteJoinClusterAck::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&userid_) + sizeof(error_));
  _cached_size_ = 0;
}

InviteJoinClusterAck::~InviteJoinClusterAck() {
  // @@protoc_insertion_point(destructor:NetMsg.InviteJoinClusterAck)
  SharedDtor();
}

void InviteJoinClusterAck::SharedDtor() {
}

void InviteJoinClusterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinClusterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinClusterAck_descriptor_;
}

const InviteJoinClusterAck& InviteJoinClusterAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InviteJoinClusterAck> InviteJoinClusterAck_default_instance_;

InviteJoinClusterAck* InviteJoinClusterAck::New(::google::protobuf::Arena* arena) const {
  InviteJoinClusterAck* n = new InviteJoinClusterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteJoinClusterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.InviteJoinClusterAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InviteJoinClusterAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InviteJoinClusterAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool InviteJoinClusterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.InviteJoinClusterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional uint32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.InviteJoinClusterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.InviteJoinClusterAck)
  return false;
#undef DO_
}

void InviteJoinClusterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.InviteJoinClusterAck)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.InviteJoinClusterAck)
}

::google::protobuf::uint8* InviteJoinClusterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.InviteJoinClusterAck)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.InviteJoinClusterAck)
  return target;
}

size_t InviteJoinClusterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.InviteJoinClusterAck)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional uint32 error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinClusterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.InviteJoinClusterAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InviteJoinClusterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteJoinClusterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.InviteJoinClusterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.InviteJoinClusterAck)
    UnsafeMergeFrom(*source);
  }
}

void InviteJoinClusterAck::MergeFrom(const InviteJoinClusterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.InviteJoinClusterAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InviteJoinClusterAck::UnsafeMergeFrom(const InviteJoinClusterAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void InviteJoinClusterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.InviteJoinClusterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinClusterAck::CopyFrom(const InviteJoinClusterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.InviteJoinClusterAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InviteJoinClusterAck::IsInitialized() const {

  return true;
}

void InviteJoinClusterAck::Swap(InviteJoinClusterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteJoinClusterAck::InternalSwap(InviteJoinClusterAck* other) {
  std::swap(userid_, other->userid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteJoinClusterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinClusterAck_descriptor_;
  metadata.reflection = InviteJoinClusterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteJoinClusterAck

// optional uint32 userId = 1;
void InviteJoinClusterAck::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 InviteJoinClusterAck::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.InviteJoinClusterAck.userId)
  return userid_;
}
void InviteJoinClusterAck::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.InviteJoinClusterAck.userId)
}

// optional uint32 error = 2;
void InviteJoinClusterAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 InviteJoinClusterAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.InviteJoinClusterAck.error)
  return error_;
}
void InviteJoinClusterAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.InviteJoinClusterAck.error)
}

inline const InviteJoinClusterAck* InviteJoinClusterAck::internal_default_instance() {
  return &InviteJoinClusterAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInviteJoinCluster::kUserIdFieldNumber;
const int UserInviteJoinCluster::kClusterIdFieldNumber;
const int UserInviteJoinCluster::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInviteJoinCluster::UserInviteJoinCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.UserInviteJoinCluster)
}

void UserInviteJoinCluster::InitAsDefaultInstance() {
}

UserInviteJoinCluster::UserInviteJoinCluster(const UserInviteJoinCluster& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.UserInviteJoinCluster)
}

void UserInviteJoinCluster::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clusterid_, 0, reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&clusterid_) + sizeof(userid_));
  _cached_size_ = 0;
}

UserInviteJoinCluster::~UserInviteJoinCluster() {
  // @@protoc_insertion_point(destructor:NetMsg.UserInviteJoinCluster)
  SharedDtor();
}

void UserInviteJoinCluster::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInviteJoinCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInviteJoinCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInviteJoinCluster_descriptor_;
}

const UserInviteJoinCluster& UserInviteJoinCluster::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserInviteJoinCluster> UserInviteJoinCluster_default_instance_;

UserInviteJoinCluster* UserInviteJoinCluster::New(::google::protobuf::Arena* arena) const {
  UserInviteJoinCluster* n = new UserInviteJoinCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInviteJoinCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.UserInviteJoinCluster)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserInviteJoinCluster, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserInviteJoinCluster*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(clusterid_, userid_);
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UserInviteJoinCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.UserInviteJoinCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clusterId;
        break;
      }

      // optional uint64 clusterId = 2;
      case 2: {
        if (tag == 16) {
         parse_clusterId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clusterid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }

      // optional string userName = 3;
      case 3: {
        if (tag == 26) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.UserInviteJoinCluster.userName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.UserInviteJoinCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.UserInviteJoinCluster)
  return false;
#undef DO_
}

void UserInviteJoinCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.UserInviteJoinCluster)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint64 clusterId = 2;
  if (this->clusterid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clusterid(), output);
  }

  // optional string userName = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserInviteJoinCluster.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.UserInviteJoinCluster)
}

::google::protobuf::uint8* UserInviteJoinCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.UserInviteJoinCluster)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint64 clusterId = 2;
  if (this->clusterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clusterid(), target);
  }

  // optional string userName = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.UserInviteJoinCluster.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.UserInviteJoinCluster)
  return target;
}

size_t UserInviteJoinCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.UserInviteJoinCluster)
  size_t total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional uint64 clusterId = 2;
  if (this->clusterid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clusterid());
  }

  // optional string userName = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInviteJoinCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.UserInviteJoinCluster)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInviteJoinCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInviteJoinCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.UserInviteJoinCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.UserInviteJoinCluster)
    UnsafeMergeFrom(*source);
  }
}

void UserInviteJoinCluster::MergeFrom(const UserInviteJoinCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.UserInviteJoinCluster)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserInviteJoinCluster::UnsafeMergeFrom(const UserInviteJoinCluster& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.clusterid() != 0) {
    set_clusterid(from.clusterid());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void UserInviteJoinCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.UserInviteJoinCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInviteJoinCluster::CopyFrom(const UserInviteJoinCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.UserInviteJoinCluster)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserInviteJoinCluster::IsInitialized() const {

  return true;
}

void UserInviteJoinCluster::Swap(UserInviteJoinCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInviteJoinCluster::InternalSwap(UserInviteJoinCluster* other) {
  std::swap(userid_, other->userid_);
  std::swap(clusterid_, other->clusterid_);
  username_.Swap(&other->username_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInviteJoinCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInviteJoinCluster_descriptor_;
  metadata.reflection = UserInviteJoinCluster_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInviteJoinCluster

// optional uint32 userId = 1;
void UserInviteJoinCluster::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 UserInviteJoinCluster::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserInviteJoinCluster.userId)
  return userid_;
}
void UserInviteJoinCluster::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UserInviteJoinCluster.userId)
}

// optional uint64 clusterId = 2;
void UserInviteJoinCluster::clear_clusterid() {
  clusterid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UserInviteJoinCluster::clusterid() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserInviteJoinCluster.clusterId)
  return clusterid_;
}
void UserInviteJoinCluster::set_clusterid(::google::protobuf::uint64 value) {
  
  clusterid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.UserInviteJoinCluster.clusterId)
}

// optional string userName = 3;
void UserInviteJoinCluster::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInviteJoinCluster::username() const {
  // @@protoc_insertion_point(field_get:NetMsg.UserInviteJoinCluster.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInviteJoinCluster::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.UserInviteJoinCluster.userName)
}
void UserInviteJoinCluster::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.UserInviteJoinCluster.userName)
}
void UserInviteJoinCluster::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.UserInviteJoinCluster.userName)
}
::std::string* UserInviteJoinCluster::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.UserInviteJoinCluster.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInviteJoinCluster::release_username() {
  // @@protoc_insertion_point(field_release:NetMsg.UserInviteJoinCluster.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInviteJoinCluster::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.UserInviteJoinCluster.userName)
}

inline const UserInviteJoinCluster* UserInviteJoinCluster::internal_default_instance() {
  return &UserInviteJoinCluster_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterRunPathAck::kPathFieldNumber;
const int ClusterRunPathAck::kCurCityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterRunPathAck::ClusterRunPathAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterRunPathAck)
}

void ClusterRunPathAck::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

ClusterRunPathAck::ClusterRunPathAck(const ClusterRunPathAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterRunPathAck)
}

void ClusterRunPathAck::SharedCtor() {
  path_ = NULL;
  curcity_ = 0;
  _cached_size_ = 0;
}

ClusterRunPathAck::~ClusterRunPathAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterRunPathAck)
  SharedDtor();
}

void ClusterRunPathAck::SharedDtor() {
  if (this != &ClusterRunPathAck_default_instance_.get()) {
    delete path_;
  }
}

void ClusterRunPathAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterRunPathAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterRunPathAck_descriptor_;
}

const ClusterRunPathAck& ClusterRunPathAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterRunPathAck> ClusterRunPathAck_default_instance_;

ClusterRunPathAck* ClusterRunPathAck::New(::google::protobuf::Arena* arena) const {
  ClusterRunPathAck* n = new ClusterRunPathAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterRunPathAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterRunPathAck)
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  curcity_ = 0;
}

bool ClusterRunPathAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterRunPathAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.RunPathAck path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curCity;
        break;
      }

      // optional int32 curCity = 2;
      case 2: {
        if (tag == 16) {
         parse_curCity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterRunPathAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterRunPathAck)
  return false;
#undef DO_
}

void ClusterRunPathAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterRunPathAck)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // optional int32 curCity = 2;
  if (this->curcity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curcity(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterRunPathAck)
}

::google::protobuf::uint8* ClusterRunPathAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterRunPathAck)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // optional int32 curCity = 2;
  if (this->curcity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curcity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterRunPathAck)
  return target;
}

size_t ClusterRunPathAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterRunPathAck)
  size_t total_size = 0;

  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional int32 curCity = 2;
  if (this->curcity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curcity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterRunPathAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterRunPathAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterRunPathAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterRunPathAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterRunPathAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterRunPathAck)
    UnsafeMergeFrom(*source);
  }
}

void ClusterRunPathAck::MergeFrom(const ClusterRunPathAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterRunPathAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterRunPathAck::UnsafeMergeFrom(const ClusterRunPathAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
  if (from.curcity() != 0) {
    set_curcity(from.curcity());
  }
}

void ClusterRunPathAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterRunPathAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterRunPathAck::CopyFrom(const ClusterRunPathAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterRunPathAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterRunPathAck::IsInitialized() const {

  return true;
}

void ClusterRunPathAck::Swap(ClusterRunPathAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterRunPathAck::InternalSwap(ClusterRunPathAck* other) {
  std::swap(path_, other->path_);
  std::swap(curcity_, other->curcity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterRunPathAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterRunPathAck_descriptor_;
  metadata.reflection = ClusterRunPathAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterRunPathAck

// optional .NetMsg.RunPathAck path = 1;
bool ClusterRunPathAck::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void ClusterRunPathAck::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& ClusterRunPathAck::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterRunPathAck.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* ClusterRunPathAck::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterRunPathAck.path)
  return path_;
}
::NetMsg::RunPathAck* ClusterRunPathAck::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.ClusterRunPathAck.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void ClusterRunPathAck::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ClusterRunPathAck.path)
}

// optional int32 curCity = 2;
void ClusterRunPathAck::clear_curcity() {
  curcity_ = 0;
}
::google::protobuf::int32 ClusterRunPathAck::curcity() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterRunPathAck.curCity)
  return curcity_;
}
void ClusterRunPathAck::set_curcity(::google::protobuf::int32 value) {
  
  curcity_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ClusterRunPathAck.curCity)
}

inline const ClusterRunPathAck* ClusterRunPathAck::internal_default_instance() {
  return &ClusterRunPathAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterRunPath::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterRunPath::SetClusterRunPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.SetClusterRunPath)
}

void SetClusterRunPath::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

SetClusterRunPath::SetClusterRunPath(const SetClusterRunPath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.SetClusterRunPath)
}

void SetClusterRunPath::SharedCtor() {
  path_ = NULL;
  _cached_size_ = 0;
}

SetClusterRunPath::~SetClusterRunPath() {
  // @@protoc_insertion_point(destructor:NetMsg.SetClusterRunPath)
  SharedDtor();
}

void SetClusterRunPath::SharedDtor() {
  if (this != &SetClusterRunPath_default_instance_.get()) {
    delete path_;
  }
}

void SetClusterRunPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterRunPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetClusterRunPath_descriptor_;
}

const SetClusterRunPath& SetClusterRunPath::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetClusterRunPath> SetClusterRunPath_default_instance_;

SetClusterRunPath* SetClusterRunPath::New(::google::protobuf::Arena* arena) const {
  SetClusterRunPath* n = new SetClusterRunPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterRunPath::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.SetClusterRunPath)
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}

bool SetClusterRunPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.SetClusterRunPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.RunPathAck path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.SetClusterRunPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.SetClusterRunPath)
  return false;
#undef DO_
}

void SetClusterRunPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.SetClusterRunPath)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.SetClusterRunPath)
}

::google::protobuf::uint8* SetClusterRunPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.SetClusterRunPath)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.SetClusterRunPath)
  return target;
}

size_t SetClusterRunPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.SetClusterRunPath)
  size_t total_size = 0;

  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterRunPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.SetClusterRunPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetClusterRunPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterRunPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.SetClusterRunPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.SetClusterRunPath)
    UnsafeMergeFrom(*source);
  }
}

void SetClusterRunPath::MergeFrom(const SetClusterRunPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.SetClusterRunPath)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetClusterRunPath::UnsafeMergeFrom(const SetClusterRunPath& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
}

void SetClusterRunPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.SetClusterRunPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterRunPath::CopyFrom(const SetClusterRunPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.SetClusterRunPath)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetClusterRunPath::IsInitialized() const {

  return true;
}

void SetClusterRunPath::Swap(SetClusterRunPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterRunPath::InternalSwap(SetClusterRunPath* other) {
  std::swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterRunPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetClusterRunPath_descriptor_;
  metadata.reflection = SetClusterRunPath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterRunPath

// optional .NetMsg.RunPathAck path = 1;
bool SetClusterRunPath::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void SetClusterRunPath::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& SetClusterRunPath::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.SetClusterRunPath.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* SetClusterRunPath::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.SetClusterRunPath.path)
  return path_;
}
::NetMsg::RunPathAck* SetClusterRunPath::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.SetClusterRunPath.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void SetClusterRunPath::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.SetClusterRunPath.path)
}

inline const SetClusterRunPath* SetClusterRunPath::internal_default_instance() {
  return &SetClusterRunPath_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqClusterArrivedTar::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqClusterArrivedTar::ReqClusterArrivedTar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqClusterArrivedTar)
}

void ReqClusterArrivedTar::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

ReqClusterArrivedTar::ReqClusterArrivedTar(const ReqClusterArrivedTar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqClusterArrivedTar)
}

void ReqClusterArrivedTar::SharedCtor() {
  path_ = NULL;
  _cached_size_ = 0;
}

ReqClusterArrivedTar::~ReqClusterArrivedTar() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqClusterArrivedTar)
  SharedDtor();
}

void ReqClusterArrivedTar::SharedDtor() {
  if (this != &ReqClusterArrivedTar_default_instance_.get()) {
    delete path_;
  }
}

void ReqClusterArrivedTar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClusterArrivedTar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClusterArrivedTar_descriptor_;
}

const ReqClusterArrivedTar& ReqClusterArrivedTar::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqClusterArrivedTar> ReqClusterArrivedTar_default_instance_;

ReqClusterArrivedTar* ReqClusterArrivedTar::New(::google::protobuf::Arena* arena) const {
  ReqClusterArrivedTar* n = new ReqClusterArrivedTar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqClusterArrivedTar::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqClusterArrivedTar)
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}

bool ReqClusterArrivedTar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqClusterArrivedTar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.RunPathAck path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqClusterArrivedTar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqClusterArrivedTar)
  return false;
#undef DO_
}

void ReqClusterArrivedTar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqClusterArrivedTar)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqClusterArrivedTar)
}

::google::protobuf::uint8* ReqClusterArrivedTar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqClusterArrivedTar)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqClusterArrivedTar)
  return target;
}

size_t ReqClusterArrivedTar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqClusterArrivedTar)
  size_t total_size = 0;

  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClusterArrivedTar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqClusterArrivedTar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqClusterArrivedTar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqClusterArrivedTar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqClusterArrivedTar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqClusterArrivedTar)
    UnsafeMergeFrom(*source);
  }
}

void ReqClusterArrivedTar::MergeFrom(const ReqClusterArrivedTar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqClusterArrivedTar)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqClusterArrivedTar::UnsafeMergeFrom(const ReqClusterArrivedTar& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
}

void ReqClusterArrivedTar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqClusterArrivedTar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClusterArrivedTar::CopyFrom(const ReqClusterArrivedTar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqClusterArrivedTar)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqClusterArrivedTar::IsInitialized() const {

  return true;
}

void ReqClusterArrivedTar::Swap(ReqClusterArrivedTar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqClusterArrivedTar::InternalSwap(ReqClusterArrivedTar* other) {
  std::swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqClusterArrivedTar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClusterArrivedTar_descriptor_;
  metadata.reflection = ReqClusterArrivedTar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqClusterArrivedTar

// optional .NetMsg.RunPathAck path = 1;
bool ReqClusterArrivedTar::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void ReqClusterArrivedTar::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& ReqClusterArrivedTar::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqClusterArrivedTar.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* ReqClusterArrivedTar::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqClusterArrivedTar.path)
  return path_;
}
::NetMsg::RunPathAck* ReqClusterArrivedTar::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqClusterArrivedTar.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void ReqClusterArrivedTar::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqClusterArrivedTar.path)
}

inline const ReqClusterArrivedTar* ReqClusterArrivedTar::internal_default_instance() {
  return &ReqClusterArrivedTar_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterArrivedTarAck::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterArrivedTarAck::ClusterArrivedTarAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ClusterArrivedTarAck)
}

void ClusterArrivedTarAck::InitAsDefaultInstance() {
  path_ = const_cast< ::NetMsg::RunPathAck*>(
      ::NetMsg::RunPathAck::internal_default_instance());
}

ClusterArrivedTarAck::ClusterArrivedTarAck(const ClusterArrivedTarAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ClusterArrivedTarAck)
}

void ClusterArrivedTarAck::SharedCtor() {
  path_ = NULL;
  _cached_size_ = 0;
}

ClusterArrivedTarAck::~ClusterArrivedTarAck() {
  // @@protoc_insertion_point(destructor:NetMsg.ClusterArrivedTarAck)
  SharedDtor();
}

void ClusterArrivedTarAck::SharedDtor() {
  if (this != &ClusterArrivedTarAck_default_instance_.get()) {
    delete path_;
  }
}

void ClusterArrivedTarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterArrivedTarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterArrivedTarAck_descriptor_;
}

const ClusterArrivedTarAck& ClusterArrivedTarAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClusterArrivedTarAck> ClusterArrivedTarAck_default_instance_;

ClusterArrivedTarAck* ClusterArrivedTarAck::New(::google::protobuf::Arena* arena) const {
  ClusterArrivedTarAck* n = new ClusterArrivedTarAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterArrivedTarAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ClusterArrivedTarAck)
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}

bool ClusterArrivedTarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ClusterArrivedTarAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetMsg.RunPathAck path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ClusterArrivedTarAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ClusterArrivedTarAck)
  return false;
#undef DO_
}

void ClusterArrivedTarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ClusterArrivedTarAck)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ClusterArrivedTarAck)
}

::google::protobuf::uint8* ClusterArrivedTarAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ClusterArrivedTarAck)
  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ClusterArrivedTarAck)
  return target;
}

size_t ClusterArrivedTarAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ClusterArrivedTarAck)
  size_t total_size = 0;

  // optional .NetMsg.RunPathAck path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterArrivedTarAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ClusterArrivedTarAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClusterArrivedTarAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterArrivedTarAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ClusterArrivedTarAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ClusterArrivedTarAck)
    UnsafeMergeFrom(*source);
  }
}

void ClusterArrivedTarAck::MergeFrom(const ClusterArrivedTarAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ClusterArrivedTarAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClusterArrivedTarAck::UnsafeMergeFrom(const ClusterArrivedTarAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_path()) {
    mutable_path()->::NetMsg::RunPathAck::MergeFrom(from.path());
  }
}

void ClusterArrivedTarAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ClusterArrivedTarAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterArrivedTarAck::CopyFrom(const ClusterArrivedTarAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ClusterArrivedTarAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClusterArrivedTarAck::IsInitialized() const {

  return true;
}

void ClusterArrivedTarAck::Swap(ClusterArrivedTarAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterArrivedTarAck::InternalSwap(ClusterArrivedTarAck* other) {
  std::swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterArrivedTarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterArrivedTarAck_descriptor_;
  metadata.reflection = ClusterArrivedTarAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterArrivedTarAck

// optional .NetMsg.RunPathAck path = 1;
bool ClusterArrivedTarAck::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
void ClusterArrivedTarAck::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::NetMsg::RunPathAck& ClusterArrivedTarAck::path() const {
  // @@protoc_insertion_point(field_get:NetMsg.ClusterArrivedTarAck.path)
  return path_ != NULL ? *path_
                         : *::NetMsg::RunPathAck::internal_default_instance();
}
::NetMsg::RunPathAck* ClusterArrivedTarAck::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::NetMsg::RunPathAck;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.ClusterArrivedTarAck.path)
  return path_;
}
::NetMsg::RunPathAck* ClusterArrivedTarAck::release_path() {
  // @@protoc_insertion_point(field_release:NetMsg.ClusterArrivedTarAck.path)
  
  ::NetMsg::RunPathAck* temp = path_;
  path_ = NULL;
  return temp;
}
void ClusterArrivedTarAck::set_allocated_path(::NetMsg::RunPathAck* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ClusterArrivedTarAck.path)
}

inline const ClusterArrivedTarAck* ClusterArrivedTarAck::internal_default_instance() {
  return &ClusterArrivedTarAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterWorldWar::kWorldWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterWorldWar::ReqEnterWorldWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqEnterWorldWar)
}

void ReqEnterWorldWar::InitAsDefaultInstance() {
}

ReqEnterWorldWar::ReqEnterWorldWar(const ReqEnterWorldWar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqEnterWorldWar)
}

void ReqEnterWorldWar::SharedCtor() {
  worldwarid_ = 0u;
  _cached_size_ = 0;
}

ReqEnterWorldWar::~ReqEnterWorldWar() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqEnterWorldWar)
  SharedDtor();
}

void ReqEnterWorldWar::SharedDtor() {
}

void ReqEnterWorldWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterWorldWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterWorldWar_descriptor_;
}

const ReqEnterWorldWar& ReqEnterWorldWar::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqEnterWorldWar> ReqEnterWorldWar_default_instance_;

ReqEnterWorldWar* ReqEnterWorldWar::New(::google::protobuf::Arena* arena) const {
  ReqEnterWorldWar* n = new ReqEnterWorldWar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqEnterWorldWar::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqEnterWorldWar)
  worldwarid_ = 0u;
}

bool ReqEnterWorldWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqEnterWorldWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqEnterWorldWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqEnterWorldWar)
  return false;
#undef DO_
}

void ReqEnterWorldWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqEnterWorldWar)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqEnterWorldWar)
}

::google::protobuf::uint8* ReqEnterWorldWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqEnterWorldWar)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqEnterWorldWar)
  return target;
}

size_t ReqEnterWorldWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqEnterWorldWar)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterWorldWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqEnterWorldWar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqEnterWorldWar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterWorldWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqEnterWorldWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqEnterWorldWar)
    UnsafeMergeFrom(*source);
  }
}

void ReqEnterWorldWar::MergeFrom(const ReqEnterWorldWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqEnterWorldWar)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqEnterWorldWar::UnsafeMergeFrom(const ReqEnterWorldWar& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
}

void ReqEnterWorldWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqEnterWorldWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterWorldWar::CopyFrom(const ReqEnterWorldWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqEnterWorldWar)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqEnterWorldWar::IsInitialized() const {

  return true;
}

void ReqEnterWorldWar::Swap(ReqEnterWorldWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterWorldWar::InternalSwap(ReqEnterWorldWar* other) {
  std::swap(worldwarid_, other->worldwarid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEnterWorldWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterWorldWar_descriptor_;
  metadata.reflection = ReqEnterWorldWar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqEnterWorldWar

// optional uint32 worldWarId = 1;
void ReqEnterWorldWar::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 ReqEnterWorldWar::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqEnterWorldWar.worldWarId)
  return worldwarid_;
}
void ReqEnterWorldWar::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqEnterWorldWar.worldWarId)
}

inline const ReqEnterWorldWar* ReqEnterWorldWar::internal_default_instance() {
  return &ReqEnterWorldWar_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterWorldWarAck::kWorldWarIdFieldNumber;
const int EnterWorldWarAck::kSceneIdFieldNumber;
const int EnterWorldWarAck::kForceFieldNumber;
const int EnterWorldWarAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterWorldWarAck::EnterWorldWarAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.EnterWorldWarAck)
}

void EnterWorldWarAck::InitAsDefaultInstance() {
}

EnterWorldWarAck::EnterWorldWarAck(const EnterWorldWarAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.EnterWorldWarAck)
}

void EnterWorldWarAck::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(error_));
  _cached_size_ = 0;
}

EnterWorldWarAck::~EnterWorldWarAck() {
  // @@protoc_insertion_point(destructor:NetMsg.EnterWorldWarAck)
  SharedDtor();
}

void EnterWorldWarAck::SharedDtor() {
}

void EnterWorldWarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterWorldWarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterWorldWarAck_descriptor_;
}

const EnterWorldWarAck& EnterWorldWarAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EnterWorldWarAck> EnterWorldWarAck_default_instance_;

EnterWorldWarAck* EnterWorldWarAck::New(::google::protobuf::Arena* arena) const {
  EnterWorldWarAck* n = new EnterWorldWarAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterWorldWarAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.EnterWorldWarAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnterWorldWarAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnterWorldWarAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool EnterWorldWarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.EnterWorldWarAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }

      // optional uint32 sceneId = 2;
      case 2: {
        if (tag == 16) {
         parse_sceneId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_force;
        break;
      }

      // optional .NetMsg.WorldWarSceneForceType force = 3;
      case 3: {
        if (tag == 24) {
         parse_force:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_force(static_cast< ::NetMsg::WorldWarSceneForceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional uint32 error = 4;
      case 4: {
        if (tag == 32) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.EnterWorldWarAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.EnterWorldWarAck)
  return false;
#undef DO_
}

void EnterWorldWarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.EnterWorldWarAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // optional uint32 sceneId = 2;
  if (this->sceneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }

  // optional .NetMsg.WorldWarSceneForceType force = 3;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->force(), output);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.EnterWorldWarAck)
}

::google::protobuf::uint8* EnterWorldWarAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.EnterWorldWarAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // optional uint32 sceneId = 2;
  if (this->sceneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }

  // optional .NetMsg.WorldWarSceneForceType force = 3;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->force(), target);
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.EnterWorldWarAck)
  return target;
}

size_t EnterWorldWarAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.EnterWorldWarAck)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 sceneId = 2;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  // optional .NetMsg.WorldWarSceneForceType force = 3;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->force());
  }

  // optional uint32 error = 4;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterWorldWarAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.EnterWorldWarAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnterWorldWarAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterWorldWarAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.EnterWorldWarAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.EnterWorldWarAck)
    UnsafeMergeFrom(*source);
  }
}

void EnterWorldWarAck::MergeFrom(const EnterWorldWarAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.EnterWorldWarAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EnterWorldWarAck::UnsafeMergeFrom(const EnterWorldWarAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.sceneid() != 0) {
    set_sceneid(from.sceneid());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void EnterWorldWarAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.EnterWorldWarAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWorldWarAck::CopyFrom(const EnterWorldWarAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.EnterWorldWarAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EnterWorldWarAck::IsInitialized() const {

  return true;
}

void EnterWorldWarAck::Swap(EnterWorldWarAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterWorldWarAck::InternalSwap(EnterWorldWarAck* other) {
  std::swap(worldwarid_, other->worldwarid_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(force_, other->force_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterWorldWarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterWorldWarAck_descriptor_;
  metadata.reflection = EnterWorldWarAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterWorldWarAck

// optional uint32 worldWarId = 1;
void EnterWorldWarAck::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 EnterWorldWarAck::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.EnterWorldWarAck.worldWarId)
  return worldwarid_;
}
void EnterWorldWarAck::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.EnterWorldWarAck.worldWarId)
}

// optional uint32 sceneId = 2;
void EnterWorldWarAck::clear_sceneid() {
  sceneid_ = 0u;
}
::google::protobuf::uint32 EnterWorldWarAck::sceneid() const {
  // @@protoc_insertion_point(field_get:NetMsg.EnterWorldWarAck.sceneId)
  return sceneid_;
}
void EnterWorldWarAck::set_sceneid(::google::protobuf::uint32 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.EnterWorldWarAck.sceneId)
}

// optional .NetMsg.WorldWarSceneForceType force = 3;
void EnterWorldWarAck::clear_force() {
  force_ = 0;
}
::NetMsg::WorldWarSceneForceType EnterWorldWarAck::force() const {
  // @@protoc_insertion_point(field_get:NetMsg.EnterWorldWarAck.force)
  return static_cast< ::NetMsg::WorldWarSceneForceType >(force_);
}
void EnterWorldWarAck::set_force(::NetMsg::WorldWarSceneForceType value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.EnterWorldWarAck.force)
}

// optional uint32 error = 4;
void EnterWorldWarAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 EnterWorldWarAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.EnterWorldWarAck.error)
  return error_;
}
void EnterWorldWarAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.EnterWorldWarAck.error)
}

inline const EnterWorldWarAck* EnterWorldWarAck::internal_default_instance() {
  return &EnterWorldWarAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWorldWarStatus::kWorldWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWorldWarStatus::ReqWorldWarStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqWorldWarStatus)
}

void ReqWorldWarStatus::InitAsDefaultInstance() {
}

ReqWorldWarStatus::ReqWorldWarStatus(const ReqWorldWarStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqWorldWarStatus)
}

void ReqWorldWarStatus::SharedCtor() {
  worldwarid_ = 0u;
  _cached_size_ = 0;
}

ReqWorldWarStatus::~ReqWorldWarStatus() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqWorldWarStatus)
  SharedDtor();
}

void ReqWorldWarStatus::SharedDtor() {
}

void ReqWorldWarStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldWarStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldWarStatus_descriptor_;
}

const ReqWorldWarStatus& ReqWorldWarStatus::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqWorldWarStatus> ReqWorldWarStatus_default_instance_;

ReqWorldWarStatus* ReqWorldWarStatus::New(::google::protobuf::Arena* arena) const {
  ReqWorldWarStatus* n = new ReqWorldWarStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWorldWarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqWorldWarStatus)
  worldwarid_ = 0u;
}

bool ReqWorldWarStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqWorldWarStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqWorldWarStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqWorldWarStatus)
  return false;
#undef DO_
}

void ReqWorldWarStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqWorldWarStatus)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqWorldWarStatus)
}

::google::protobuf::uint8* ReqWorldWarStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqWorldWarStatus)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqWorldWarStatus)
  return target;
}

size_t ReqWorldWarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqWorldWarStatus)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldWarStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqWorldWarStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqWorldWarStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWorldWarStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqWorldWarStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqWorldWarStatus)
    UnsafeMergeFrom(*source);
  }
}

void ReqWorldWarStatus::MergeFrom(const ReqWorldWarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqWorldWarStatus)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqWorldWarStatus::UnsafeMergeFrom(const ReqWorldWarStatus& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
}

void ReqWorldWarStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqWorldWarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldWarStatus::CopyFrom(const ReqWorldWarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqWorldWarStatus)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqWorldWarStatus::IsInitialized() const {

  return true;
}

void ReqWorldWarStatus::Swap(ReqWorldWarStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWorldWarStatus::InternalSwap(ReqWorldWarStatus* other) {
  std::swap(worldwarid_, other->worldwarid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWorldWarStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldWarStatus_descriptor_;
  metadata.reflection = ReqWorldWarStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWorldWarStatus

// optional uint32 worldWarId = 1;
void ReqWorldWarStatus::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarStatus::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarStatus.worldWarId)
  return worldwarid_;
}
void ReqWorldWarStatus::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarStatus.worldWarId)
}

inline const ReqWorldWarStatus* ReqWorldWarStatus::internal_default_instance() {
  return &ReqWorldWarStatus_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarSceneBlockState::kBlockIdFieldNumber;
const int WorldWarSceneBlockState::kOccupiedFieldNumber;
const int WorldWarSceneBlockState::kNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarSceneBlockState::WorldWarSceneBlockState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarSceneBlockState)
}

void WorldWarSceneBlockState::InitAsDefaultInstance() {
}

WorldWarSceneBlockState::WorldWarSceneBlockState(const WorldWarSceneBlockState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarSceneBlockState)
}

void WorldWarSceneBlockState::SharedCtor() {
  ::memset(&blockid_, 0, reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&blockid_) + sizeof(number_));
  _cached_size_ = 0;
}

WorldWarSceneBlockState::~WorldWarSceneBlockState() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarSceneBlockState)
  SharedDtor();
}

void WorldWarSceneBlockState::SharedDtor() {
}

void WorldWarSceneBlockState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarSceneBlockState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarSceneBlockState_descriptor_;
}

const WorldWarSceneBlockState& WorldWarSceneBlockState::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarSceneBlockState> WorldWarSceneBlockState_default_instance_;

WorldWarSceneBlockState* WorldWarSceneBlockState::New(::google::protobuf::Arena* arena) const {
  WorldWarSceneBlockState* n = new WorldWarSceneBlockState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarSceneBlockState::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarSceneBlockState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarSceneBlockState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarSceneBlockState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(blockid_, number_);

#undef ZR_HELPER_
#undef ZR_

}

bool WorldWarSceneBlockState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarSceneBlockState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 blockId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_occupied;
        break;
      }

      // optional .NetMsg.WorldWarSceneForceType occupied = 2;
      case 2: {
        if (tag == 16) {
         parse_occupied:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_occupied(static_cast< ::NetMsg::WorldWarSceneForceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional uint32 number = 3;
      case 3: {
        if (tag == 24) {
         parse_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarSceneBlockState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarSceneBlockState)
  return false;
#undef DO_
}

void WorldWarSceneBlockState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarSceneBlockState)
  // optional uint32 blockId = 1;
  if (this->blockid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->blockid(), output);
  }

  // optional .NetMsg.WorldWarSceneForceType occupied = 2;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->occupied(), output);
  }

  // optional uint32 number = 3;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarSceneBlockState)
}

::google::protobuf::uint8* WorldWarSceneBlockState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarSceneBlockState)
  // optional uint32 blockId = 1;
  if (this->blockid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->blockid(), target);
  }

  // optional .NetMsg.WorldWarSceneForceType occupied = 2;
  if (this->occupied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->occupied(), target);
  }

  // optional uint32 number = 3;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarSceneBlockState)
  return target;
}

size_t WorldWarSceneBlockState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarSceneBlockState)
  size_t total_size = 0;

  // optional uint32 blockId = 1;
  if (this->blockid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blockid());
  }

  // optional .NetMsg.WorldWarSceneForceType occupied = 2;
  if (this->occupied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->occupied());
  }

  // optional uint32 number = 3;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarSceneBlockState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarSceneBlockState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarSceneBlockState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarSceneBlockState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarSceneBlockState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarSceneBlockState)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarSceneBlockState::MergeFrom(const WorldWarSceneBlockState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarSceneBlockState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarSceneBlockState::UnsafeMergeFrom(const WorldWarSceneBlockState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.blockid() != 0) {
    set_blockid(from.blockid());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void WorldWarSceneBlockState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarSceneBlockState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarSceneBlockState::CopyFrom(const WorldWarSceneBlockState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarSceneBlockState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarSceneBlockState::IsInitialized() const {

  return true;
}

void WorldWarSceneBlockState::Swap(WorldWarSceneBlockState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarSceneBlockState::InternalSwap(WorldWarSceneBlockState* other) {
  std::swap(blockid_, other->blockid_);
  std::swap(occupied_, other->occupied_);
  std::swap(number_, other->number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarSceneBlockState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarSceneBlockState_descriptor_;
  metadata.reflection = WorldWarSceneBlockState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarSceneBlockState

// optional uint32 blockId = 1;
void WorldWarSceneBlockState::clear_blockid() {
  blockid_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneBlockState::blockid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBlockState.blockId)
  return blockid_;
}
void WorldWarSceneBlockState::set_blockid(::google::protobuf::uint32 value) {
  
  blockid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBlockState.blockId)
}

// optional .NetMsg.WorldWarSceneForceType occupied = 2;
void WorldWarSceneBlockState::clear_occupied() {
  occupied_ = 0;
}
::NetMsg::WorldWarSceneForceType WorldWarSceneBlockState::occupied() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBlockState.occupied)
  return static_cast< ::NetMsg::WorldWarSceneForceType >(occupied_);
}
void WorldWarSceneBlockState::set_occupied(::NetMsg::WorldWarSceneForceType value) {
  
  occupied_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBlockState.occupied)
}

// optional uint32 number = 3;
void WorldWarSceneBlockState::clear_number() {
  number_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneBlockState::number() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBlockState.number)
  return number_;
}
void WorldWarSceneBlockState::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBlockState.number)
}

inline const WorldWarSceneBlockState* WorldWarSceneBlockState::internal_default_instance() {
  return &WorldWarSceneBlockState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarSceneBuildingState::kBlockIdFieldNumber;
const int WorldWarSceneBuildingState::kTypeFieldNumber;
const int WorldWarSceneBuildingState::kOccupiedFieldNumber;
const int WorldWarSceneBuildingState::kCurrentHealthFieldNumber;
const int WorldWarSceneBuildingState::kTotalHealthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarSceneBuildingState::WorldWarSceneBuildingState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarSceneBuildingState)
}

void WorldWarSceneBuildingState::InitAsDefaultInstance() {
}

WorldWarSceneBuildingState::WorldWarSceneBuildingState(const WorldWarSceneBuildingState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarSceneBuildingState)
}

void WorldWarSceneBuildingState::SharedCtor() {
  ::memset(&blockid_, 0, reinterpret_cast<char*>(&totalhealth_) -
    reinterpret_cast<char*>(&blockid_) + sizeof(totalhealth_));
  _cached_size_ = 0;
}

WorldWarSceneBuildingState::~WorldWarSceneBuildingState() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarSceneBuildingState)
  SharedDtor();
}

void WorldWarSceneBuildingState::SharedDtor() {
}

void WorldWarSceneBuildingState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarSceneBuildingState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarSceneBuildingState_descriptor_;
}

const WorldWarSceneBuildingState& WorldWarSceneBuildingState::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarSceneBuildingState> WorldWarSceneBuildingState_default_instance_;

WorldWarSceneBuildingState* WorldWarSceneBuildingState::New(::google::protobuf::Arena* arena) const {
  WorldWarSceneBuildingState* n = new WorldWarSceneBuildingState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarSceneBuildingState::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarSceneBuildingState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarSceneBuildingState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarSceneBuildingState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(blockid_, totalhealth_);

#undef ZR_HELPER_
#undef ZR_

}

bool WorldWarSceneBuildingState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarSceneBuildingState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 blockId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .NetMsg.WorldWarSceneBuildingType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetMsg::WorldWarSceneBuildingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_occupied;
        break;
      }

      // optional .NetMsg.WorldWarSceneForceType occupied = 3;
      case 3: {
        if (tag == 24) {
         parse_occupied:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_occupied(static_cast< ::NetMsg::WorldWarSceneForceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_currentHealth;
        break;
      }

      // optional uint32 currentHealth = 4;
      case 4: {
        if (tag == 32) {
         parse_currentHealth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currenthealth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalHealth;
        break;
      }

      // optional uint32 totalHealth = 5;
      case 5: {
        if (tag == 40) {
         parse_totalHealth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalhealth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarSceneBuildingState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarSceneBuildingState)
  return false;
#undef DO_
}

void WorldWarSceneBuildingState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarSceneBuildingState)
  // optional uint32 blockId = 1;
  if (this->blockid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->blockid(), output);
  }

  // optional .NetMsg.WorldWarSceneBuildingType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .NetMsg.WorldWarSceneForceType occupied = 3;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->occupied(), output);
  }

  // optional uint32 currentHealth = 4;
  if (this->currenthealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->currenthealth(), output);
  }

  // optional uint32 totalHealth = 5;
  if (this->totalhealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalhealth(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarSceneBuildingState)
}

::google::protobuf::uint8* WorldWarSceneBuildingState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarSceneBuildingState)
  // optional uint32 blockId = 1;
  if (this->blockid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->blockid(), target);
  }

  // optional .NetMsg.WorldWarSceneBuildingType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .NetMsg.WorldWarSceneForceType occupied = 3;
  if (this->occupied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->occupied(), target);
  }

  // optional uint32 currentHealth = 4;
  if (this->currenthealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->currenthealth(), target);
  }

  // optional uint32 totalHealth = 5;
  if (this->totalhealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totalhealth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarSceneBuildingState)
  return target;
}

size_t WorldWarSceneBuildingState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarSceneBuildingState)
  size_t total_size = 0;

  // optional uint32 blockId = 1;
  if (this->blockid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blockid());
  }

  // optional .NetMsg.WorldWarSceneBuildingType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .NetMsg.WorldWarSceneForceType occupied = 3;
  if (this->occupied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->occupied());
  }

  // optional uint32 currentHealth = 4;
  if (this->currenthealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currenthealth());
  }

  // optional uint32 totalHealth = 5;
  if (this->totalhealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalhealth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarSceneBuildingState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarSceneBuildingState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarSceneBuildingState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarSceneBuildingState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarSceneBuildingState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarSceneBuildingState)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarSceneBuildingState::MergeFrom(const WorldWarSceneBuildingState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarSceneBuildingState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarSceneBuildingState::UnsafeMergeFrom(const WorldWarSceneBuildingState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.blockid() != 0) {
    set_blockid(from.blockid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
  if (from.currenthealth() != 0) {
    set_currenthealth(from.currenthealth());
  }
  if (from.totalhealth() != 0) {
    set_totalhealth(from.totalhealth());
  }
}

void WorldWarSceneBuildingState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarSceneBuildingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarSceneBuildingState::CopyFrom(const WorldWarSceneBuildingState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarSceneBuildingState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarSceneBuildingState::IsInitialized() const {

  return true;
}

void WorldWarSceneBuildingState::Swap(WorldWarSceneBuildingState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarSceneBuildingState::InternalSwap(WorldWarSceneBuildingState* other) {
  std::swap(blockid_, other->blockid_);
  std::swap(type_, other->type_);
  std::swap(occupied_, other->occupied_);
  std::swap(currenthealth_, other->currenthealth_);
  std::swap(totalhealth_, other->totalhealth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarSceneBuildingState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarSceneBuildingState_descriptor_;
  metadata.reflection = WorldWarSceneBuildingState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarSceneBuildingState

// optional uint32 blockId = 1;
void WorldWarSceneBuildingState::clear_blockid() {
  blockid_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneBuildingState::blockid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBuildingState.blockId)
  return blockid_;
}
void WorldWarSceneBuildingState::set_blockid(::google::protobuf::uint32 value) {
  
  blockid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBuildingState.blockId)
}

// optional .NetMsg.WorldWarSceneBuildingType type = 2;
void WorldWarSceneBuildingState::clear_type() {
  type_ = 0;
}
::NetMsg::WorldWarSceneBuildingType WorldWarSceneBuildingState::type() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBuildingState.type)
  return static_cast< ::NetMsg::WorldWarSceneBuildingType >(type_);
}
void WorldWarSceneBuildingState::set_type(::NetMsg::WorldWarSceneBuildingType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBuildingState.type)
}

// optional .NetMsg.WorldWarSceneForceType occupied = 3;
void WorldWarSceneBuildingState::clear_occupied() {
  occupied_ = 0;
}
::NetMsg::WorldWarSceneForceType WorldWarSceneBuildingState::occupied() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBuildingState.occupied)
  return static_cast< ::NetMsg::WorldWarSceneForceType >(occupied_);
}
void WorldWarSceneBuildingState::set_occupied(::NetMsg::WorldWarSceneForceType value) {
  
  occupied_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBuildingState.occupied)
}

// optional uint32 currentHealth = 4;
void WorldWarSceneBuildingState::clear_currenthealth() {
  currenthealth_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneBuildingState::currenthealth() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBuildingState.currentHealth)
  return currenthealth_;
}
void WorldWarSceneBuildingState::set_currenthealth(::google::protobuf::uint32 value) {
  
  currenthealth_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBuildingState.currentHealth)
}

// optional uint32 totalHealth = 5;
void WorldWarSceneBuildingState::clear_totalhealth() {
  totalhealth_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneBuildingState::totalhealth() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneBuildingState.totalHealth)
  return totalhealth_;
}
void WorldWarSceneBuildingState::set_totalhealth(::google::protobuf::uint32 value) {
  
  totalhealth_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneBuildingState.totalHealth)
}

inline const WorldWarSceneBuildingState* WorldWarSceneBuildingState::internal_default_instance() {
  return &WorldWarSceneBuildingState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarSceneAgent::kAgentIdFieldNumber;
const int WorldWarSceneAgent::kUserIdFieldNumber;
const int WorldWarSceneAgent::kIsClusterFieldNumber;
const int WorldWarSceneAgent::kClusterIdOrTeamPosFieldNumber;
const int WorldWarSceneAgent::kStateFieldNumber;
const int WorldWarSceneAgent::kCurrentHealthFieldNumber;
const int WorldWarSceneAgent::kTotalHealthFieldNumber;
const int WorldWarSceneAgent::kAttackCDFieldNumber;
const int WorldWarSceneAgent::kMoveCDFieldNumber;
const int WorldWarSceneAgent::kCurrentBlockIdFieldNumber;
const int WorldWarSceneAgent::kDefenceTargetFieldNumber;
const int WorldWarSceneAgent::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarSceneAgent::WorldWarSceneAgent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarSceneAgent)
}

void WorldWarSceneAgent::InitAsDefaultInstance() {
}

WorldWarSceneAgent::WorldWarSceneAgent(const WorldWarSceneAgent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarSceneAgent)
}

void WorldWarSceneAgent::SharedCtor() {
  ::memset(&agentid_, 0, reinterpret_cast<char*>(&defencetarget_) -
    reinterpret_cast<char*>(&agentid_) + sizeof(defencetarget_));
  _cached_size_ = 0;
}

WorldWarSceneAgent::~WorldWarSceneAgent() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarSceneAgent)
  SharedDtor();
}

void WorldWarSceneAgent::SharedDtor() {
}

void WorldWarSceneAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarSceneAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarSceneAgent_descriptor_;
}

const WorldWarSceneAgent& WorldWarSceneAgent::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarSceneAgent> WorldWarSceneAgent_default_instance_;

WorldWarSceneAgent* WorldWarSceneAgent::New(::google::protobuf::Arena* arena) const {
  WorldWarSceneAgent* n = new WorldWarSceneAgent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarSceneAgent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarSceneAgent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarSceneAgent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarSceneAgent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(agentid_, attackcd_);
  ZR_(movecd_, defencetarget_);

#undef ZR_HELPER_
#undef ZR_

  path_.Clear();
}

bool WorldWarSceneAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarSceneAgent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 agentId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // optional uint32 userId = 2;
      case 2: {
        if (tag == 16) {
         parse_userId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isCluster;
        break;
      }

      // optional bool isCluster = 3;
      case 3: {
        if (tag == 24) {
         parse_isCluster:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscluster_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_clusterIdOrTeamPos;
        break;
      }

      // optional uint64 clusterIdOrTeamPos = 4;
      case 4: {
        if (tag == 32) {
         parse_clusterIdOrTeamPos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clusteridorteampos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .NetMsg.WorldWarSceneForceState state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::NetMsg::WorldWarSceneForceState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currentHealth;
        break;
      }

      // optional uint32 currentHealth = 6;
      case 6: {
        if (tag == 48) {
         parse_currentHealth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currenthealth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalHealth;
        break;
      }

      // optional uint32 totalHealth = 7;
      case 7: {
        if (tag == 56) {
         parse_totalHealth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalhealth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_attackCD;
        break;
      }

      // optional uint32 attackCD = 8;
      case 8: {
        if (tag == 64) {
         parse_attackCD:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackcd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_moveCD;
        break;
      }

      // optional uint32 moveCD = 9;
      case 9: {
        if (tag == 72) {
         parse_moveCD:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movecd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_currentBlockId;
        break;
      }

      // optional uint32 currentBlockId = 10;
      case 10: {
        if (tag == 80) {
         parse_currentBlockId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentblockid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_DefenceTarget;
        break;
      }

      // optional uint32 DefenceTarget = 11;
      case 11: {
        if (tag == 88) {
         parse_DefenceTarget:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defencetarget_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_path;
        break;
      }

      // repeated uint32 path = 12;
      case 12: {
        if (tag == 98) {
         parse_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_path())));
        } else if (tag == 96) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98, input, this->mutable_path())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarSceneAgent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarSceneAgent)
  return false;
#undef DO_
}

void WorldWarSceneAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarSceneAgent)
  // optional uint32 agentId = 1;
  if (this->agentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->agentid(), output);
  }

  // optional uint32 userId = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  // optional bool isCluster = 3;
  if (this->iscluster() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscluster(), output);
  }

  // optional uint64 clusterIdOrTeamPos = 4;
  if (this->clusteridorteampos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->clusteridorteampos(), output);
  }

  // optional .NetMsg.WorldWarSceneForceState state = 5;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional uint32 currentHealth = 6;
  if (this->currenthealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->currenthealth(), output);
  }

  // optional uint32 totalHealth = 7;
  if (this->totalhealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totalhealth(), output);
  }

  // optional uint32 attackCD = 8;
  if (this->attackcd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->attackcd(), output);
  }

  // optional uint32 moveCD = 9;
  if (this->movecd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->movecd(), output);
  }

  // optional uint32 currentBlockId = 10;
  if (this->currentblockid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->currentblockid(), output);
  }

  // optional uint32 DefenceTarget = 11;
  if (this->defencetarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->defencetarget(), output);
  }

  // repeated uint32 path = 12;
  if (this->path_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_path_cached_byte_size_);
  }
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->path(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarSceneAgent)
}

::google::protobuf::uint8* WorldWarSceneAgent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarSceneAgent)
  // optional uint32 agentId = 1;
  if (this->agentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->agentid(), target);
  }

  // optional uint32 userId = 2;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  // optional bool isCluster = 3;
  if (this->iscluster() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscluster(), target);
  }

  // optional uint64 clusterIdOrTeamPos = 4;
  if (this->clusteridorteampos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->clusteridorteampos(), target);
  }

  // optional .NetMsg.WorldWarSceneForceState state = 5;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional uint32 currentHealth = 6;
  if (this->currenthealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->currenthealth(), target);
  }

  // optional uint32 totalHealth = 7;
  if (this->totalhealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->totalhealth(), target);
  }

  // optional uint32 attackCD = 8;
  if (this->attackcd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->attackcd(), target);
  }

  // optional uint32 moveCD = 9;
  if (this->movecd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->movecd(), target);
  }

  // optional uint32 currentBlockId = 10;
  if (this->currentblockid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->currentblockid(), target);
  }

  // optional uint32 DefenceTarget = 11;
  if (this->defencetarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->defencetarget(), target);
  }

  // repeated uint32 path = 12;
  if (this->path_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _path_cached_byte_size_, target);
  }
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->path(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarSceneAgent)
  return target;
}

size_t WorldWarSceneAgent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarSceneAgent)
  size_t total_size = 0;

  // optional uint32 agentId = 1;
  if (this->agentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agentid());
  }

  // optional uint32 userId = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // optional bool isCluster = 3;
  if (this->iscluster() != 0) {
    total_size += 1 + 1;
  }

  // optional uint64 clusterIdOrTeamPos = 4;
  if (this->clusteridorteampos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clusteridorteampos());
  }

  // optional .NetMsg.WorldWarSceneForceState state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional uint32 currentHealth = 6;
  if (this->currenthealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currenthealth());
  }

  // optional uint32 totalHealth = 7;
  if (this->totalhealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalhealth());
  }

  // optional uint32 attackCD = 8;
  if (this->attackcd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attackcd());
  }

  // optional uint32 moveCD = 9;
  if (this->movecd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->movecd());
  }

  // optional uint32 currentBlockId = 10;
  if (this->currentblockid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentblockid());
  }

  // optional uint32 DefenceTarget = 11;
  if (this->defencetarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->defencetarget());
  }

  // repeated uint32 path = 12;
  {
    size_t data_size = 0;
    unsigned int count = this->path_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->path(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _path_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarSceneAgent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarSceneAgent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarSceneAgent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarSceneAgent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarSceneAgent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarSceneAgent)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarSceneAgent::MergeFrom(const WorldWarSceneAgent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarSceneAgent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarSceneAgent::UnsafeMergeFrom(const WorldWarSceneAgent& from) {
  GOOGLE_DCHECK(&from != this);
  path_.UnsafeMergeFrom(from.path_);
  if (from.agentid() != 0) {
    set_agentid(from.agentid());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.iscluster() != 0) {
    set_iscluster(from.iscluster());
  }
  if (from.clusteridorteampos() != 0) {
    set_clusteridorteampos(from.clusteridorteampos());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.currenthealth() != 0) {
    set_currenthealth(from.currenthealth());
  }
  if (from.totalhealth() != 0) {
    set_totalhealth(from.totalhealth());
  }
  if (from.attackcd() != 0) {
    set_attackcd(from.attackcd());
  }
  if (from.movecd() != 0) {
    set_movecd(from.movecd());
  }
  if (from.currentblockid() != 0) {
    set_currentblockid(from.currentblockid());
  }
  if (from.defencetarget() != 0) {
    set_defencetarget(from.defencetarget());
  }
}

void WorldWarSceneAgent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarSceneAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarSceneAgent::CopyFrom(const WorldWarSceneAgent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarSceneAgent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarSceneAgent::IsInitialized() const {

  return true;
}

void WorldWarSceneAgent::Swap(WorldWarSceneAgent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarSceneAgent::InternalSwap(WorldWarSceneAgent* other) {
  std::swap(agentid_, other->agentid_);
  std::swap(userid_, other->userid_);
  std::swap(iscluster_, other->iscluster_);
  std::swap(clusteridorteampos_, other->clusteridorteampos_);
  std::swap(state_, other->state_);
  std::swap(currenthealth_, other->currenthealth_);
  std::swap(totalhealth_, other->totalhealth_);
  std::swap(attackcd_, other->attackcd_);
  std::swap(movecd_, other->movecd_);
  std::swap(currentblockid_, other->currentblockid_);
  std::swap(defencetarget_, other->defencetarget_);
  path_.UnsafeArenaSwap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarSceneAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarSceneAgent_descriptor_;
  metadata.reflection = WorldWarSceneAgent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarSceneAgent

// optional uint32 agentId = 1;
void WorldWarSceneAgent::clear_agentid() {
  agentid_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::agentid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.agentId)
  return agentid_;
}
void WorldWarSceneAgent::set_agentid(::google::protobuf::uint32 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.agentId)
}

// optional uint32 userId = 2;
void WorldWarSceneAgent::clear_userid() {
  userid_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::userid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.userId)
  return userid_;
}
void WorldWarSceneAgent::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.userId)
}

// optional bool isCluster = 3;
void WorldWarSceneAgent::clear_iscluster() {
  iscluster_ = false;
}
bool WorldWarSceneAgent::iscluster() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.isCluster)
  return iscluster_;
}
void WorldWarSceneAgent::set_iscluster(bool value) {
  
  iscluster_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.isCluster)
}

// optional uint64 clusterIdOrTeamPos = 4;
void WorldWarSceneAgent::clear_clusteridorteampos() {
  clusteridorteampos_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WorldWarSceneAgent::clusteridorteampos() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.clusterIdOrTeamPos)
  return clusteridorteampos_;
}
void WorldWarSceneAgent::set_clusteridorteampos(::google::protobuf::uint64 value) {
  
  clusteridorteampos_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.clusterIdOrTeamPos)
}

// optional .NetMsg.WorldWarSceneForceState state = 5;
void WorldWarSceneAgent::clear_state() {
  state_ = 0;
}
::NetMsg::WorldWarSceneForceState WorldWarSceneAgent::state() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.state)
  return static_cast< ::NetMsg::WorldWarSceneForceState >(state_);
}
void WorldWarSceneAgent::set_state(::NetMsg::WorldWarSceneForceState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.state)
}

// optional uint32 currentHealth = 6;
void WorldWarSceneAgent::clear_currenthealth() {
  currenthealth_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::currenthealth() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.currentHealth)
  return currenthealth_;
}
void WorldWarSceneAgent::set_currenthealth(::google::protobuf::uint32 value) {
  
  currenthealth_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.currentHealth)
}

// optional uint32 totalHealth = 7;
void WorldWarSceneAgent::clear_totalhealth() {
  totalhealth_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::totalhealth() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.totalHealth)
  return totalhealth_;
}
void WorldWarSceneAgent::set_totalhealth(::google::protobuf::uint32 value) {
  
  totalhealth_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.totalHealth)
}

// optional uint32 attackCD = 8;
void WorldWarSceneAgent::clear_attackcd() {
  attackcd_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::attackcd() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.attackCD)
  return attackcd_;
}
void WorldWarSceneAgent::set_attackcd(::google::protobuf::uint32 value) {
  
  attackcd_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.attackCD)
}

// optional uint32 moveCD = 9;
void WorldWarSceneAgent::clear_movecd() {
  movecd_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::movecd() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.moveCD)
  return movecd_;
}
void WorldWarSceneAgent::set_movecd(::google::protobuf::uint32 value) {
  
  movecd_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.moveCD)
}

// optional uint32 currentBlockId = 10;
void WorldWarSceneAgent::clear_currentblockid() {
  currentblockid_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::currentblockid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.currentBlockId)
  return currentblockid_;
}
void WorldWarSceneAgent::set_currentblockid(::google::protobuf::uint32 value) {
  
  currentblockid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.currentBlockId)
}

// optional uint32 DefenceTarget = 11;
void WorldWarSceneAgent::clear_defencetarget() {
  defencetarget_ = 0u;
}
::google::protobuf::uint32 WorldWarSceneAgent::defencetarget() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.DefenceTarget)
  return defencetarget_;
}
void WorldWarSceneAgent::set_defencetarget(::google::protobuf::uint32 value) {
  
  defencetarget_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.DefenceTarget)
}

// repeated uint32 path = 12;
int WorldWarSceneAgent::path_size() const {
  return path_.size();
}
void WorldWarSceneAgent::clear_path() {
  path_.Clear();
}
::google::protobuf::uint32 WorldWarSceneAgent::path(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarSceneAgent.path)
  return path_.Get(index);
}
void WorldWarSceneAgent::set_path(int index, ::google::protobuf::uint32 value) {
  path_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarSceneAgent.path)
}
void WorldWarSceneAgent::add_path(::google::protobuf::uint32 value) {
  path_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarSceneAgent.path)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WorldWarSceneAgent::path() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarSceneAgent.path)
  return path_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WorldWarSceneAgent::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarSceneAgent.path)
  return &path_;
}

inline const WorldWarSceneAgent* WorldWarSceneAgent::internal_default_instance() {
  return &WorldWarSceneAgent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarStatusAck::kWorldWarIdFieldNumber;
const int WorldWarStatusAck::kBlocksFieldNumber;
const int WorldWarStatusAck::kBuildingsFieldNumber;
const int WorldWarStatusAck::kAgentsFieldNumber;
const int WorldWarStatusAck::kImportantAgentsFieldNumber;
const int WorldWarStatusAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarStatusAck::WorldWarStatusAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarStatusAck)
}

void WorldWarStatusAck::InitAsDefaultInstance() {
}

WorldWarStatusAck::WorldWarStatusAck(const WorldWarStatusAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarStatusAck)
}

void WorldWarStatusAck::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(error_));
  _cached_size_ = 0;
}

WorldWarStatusAck::~WorldWarStatusAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarStatusAck)
  SharedDtor();
}

void WorldWarStatusAck::SharedDtor() {
}

void WorldWarStatusAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarStatusAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarStatusAck_descriptor_;
}

const WorldWarStatusAck& WorldWarStatusAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarStatusAck> WorldWarStatusAck_default_instance_;

WorldWarStatusAck* WorldWarStatusAck::New(::google::protobuf::Arena* arena) const {
  WorldWarStatusAck* n = new WorldWarStatusAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarStatusAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarStatusAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarStatusAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarStatusAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, error_);

#undef ZR_HELPER_
#undef ZR_

  blocks_.Clear();
  buildings_.Clear();
  agents_.Clear();
  importantagents_.Clear();
}

bool WorldWarStatusAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarStatusAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        break;
      }

      // repeated .NetMsg.WorldWarSceneBlockState blocks = 2;
      case 2: {
        if (tag == 18) {
         parse_blocks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_blocks;
        if (input->ExpectTag(26)) goto parse_loop_buildings;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .NetMsg.WorldWarSceneBuildingState buildings = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_buildings;
        if (input->ExpectTag(34)) goto parse_loop_agents;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .NetMsg.WorldWarSceneAgent agents = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_agents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_agents;
        if (input->ExpectTag(42)) goto parse_loop_importantAgents;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .NetMsg.WorldWarSceneAgent importantAgents = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_importantAgents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_importantagents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_importantAgents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_error;
        break;
      }

      // optional uint32 error = 6;
      case 6: {
        if (tag == 48) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarStatusAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarStatusAck)
  return false;
#undef DO_
}

void WorldWarStatusAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarStatusAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // repeated .NetMsg.WorldWarSceneBlockState blocks = 2;
  for (unsigned int i = 0, n = this->blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blocks(i), output);
  }

  // repeated .NetMsg.WorldWarSceneBuildingState buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  // repeated .NetMsg.WorldWarSceneAgent agents = 4;
  for (unsigned int i = 0, n = this->agents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->agents(i), output);
  }

  // repeated .NetMsg.WorldWarSceneAgent importantAgents = 5;
  for (unsigned int i = 0, n = this->importantagents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->importantagents(i), output);
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarStatusAck)
}

::google::protobuf::uint8* WorldWarStatusAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarStatusAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // repeated .NetMsg.WorldWarSceneBlockState blocks = 2;
  for (unsigned int i = 0, n = this->blocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->blocks(i), false, target);
  }

  // repeated .NetMsg.WorldWarSceneBuildingState buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->buildings(i), false, target);
  }

  // repeated .NetMsg.WorldWarSceneAgent agents = 4;
  for (unsigned int i = 0, n = this->agents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->agents(i), false, target);
  }

  // repeated .NetMsg.WorldWarSceneAgent importantAgents = 5;
  for (unsigned int i = 0, n = this->importantagents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->importantagents(i), false, target);
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarStatusAck)
  return target;
}

size_t WorldWarStatusAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarStatusAck)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 error = 6;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  // repeated .NetMsg.WorldWarSceneBlockState blocks = 2;
  {
    unsigned int count = this->blocks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks(i));
    }
  }

  // repeated .NetMsg.WorldWarSceneBuildingState buildings = 3;
  {
    unsigned int count = this->buildings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildings(i));
    }
  }

  // repeated .NetMsg.WorldWarSceneAgent agents = 4;
  {
    unsigned int count = this->agents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agents(i));
    }
  }

  // repeated .NetMsg.WorldWarSceneAgent importantAgents = 5;
  {
    unsigned int count = this->importantagents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->importantagents(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarStatusAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarStatusAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarStatusAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarStatusAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarStatusAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarStatusAck)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarStatusAck::MergeFrom(const WorldWarStatusAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarStatusAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarStatusAck::UnsafeMergeFrom(const WorldWarStatusAck& from) {
  GOOGLE_DCHECK(&from != this);
  blocks_.MergeFrom(from.blocks_);
  buildings_.MergeFrom(from.buildings_);
  agents_.MergeFrom(from.agents_);
  importantagents_.MergeFrom(from.importantagents_);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void WorldWarStatusAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarStatusAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarStatusAck::CopyFrom(const WorldWarStatusAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarStatusAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarStatusAck::IsInitialized() const {

  return true;
}

void WorldWarStatusAck::Swap(WorldWarStatusAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarStatusAck::InternalSwap(WorldWarStatusAck* other) {
  std::swap(worldwarid_, other->worldwarid_);
  blocks_.UnsafeArenaSwap(&other->blocks_);
  buildings_.UnsafeArenaSwap(&other->buildings_);
  agents_.UnsafeArenaSwap(&other->agents_);
  importantagents_.UnsafeArenaSwap(&other->importantagents_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarStatusAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarStatusAck_descriptor_;
  metadata.reflection = WorldWarStatusAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarStatusAck

// optional uint32 worldWarId = 1;
void WorldWarStatusAck::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 WorldWarStatusAck::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarStatusAck.worldWarId)
  return worldwarid_;
}
void WorldWarStatusAck::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarStatusAck.worldWarId)
}

// repeated .NetMsg.WorldWarSceneBlockState blocks = 2;
int WorldWarStatusAck::blocks_size() const {
  return blocks_.size();
}
void WorldWarStatusAck::clear_blocks() {
  blocks_.Clear();
}
const ::NetMsg::WorldWarSceneBlockState& WorldWarStatusAck::blocks(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarStatusAck.blocks)
  return blocks_.Get(index);
}
::NetMsg::WorldWarSceneBlockState* WorldWarStatusAck::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarStatusAck.blocks)
  return blocks_.Mutable(index);
}
::NetMsg::WorldWarSceneBlockState* WorldWarStatusAck::add_blocks() {
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarStatusAck.blocks)
  return blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneBlockState >*
WorldWarStatusAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarStatusAck.blocks)
  return &blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneBlockState >&
WorldWarStatusAck::blocks() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarStatusAck.blocks)
  return blocks_;
}

// repeated .NetMsg.WorldWarSceneBuildingState buildings = 3;
int WorldWarStatusAck::buildings_size() const {
  return buildings_.size();
}
void WorldWarStatusAck::clear_buildings() {
  buildings_.Clear();
}
const ::NetMsg::WorldWarSceneBuildingState& WorldWarStatusAck::buildings(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarStatusAck.buildings)
  return buildings_.Get(index);
}
::NetMsg::WorldWarSceneBuildingState* WorldWarStatusAck::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarStatusAck.buildings)
  return buildings_.Mutable(index);
}
::NetMsg::WorldWarSceneBuildingState* WorldWarStatusAck::add_buildings() {
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarStatusAck.buildings)
  return buildings_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneBuildingState >*
WorldWarStatusAck::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarStatusAck.buildings)
  return &buildings_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneBuildingState >&
WorldWarStatusAck::buildings() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarStatusAck.buildings)
  return buildings_;
}

// repeated .NetMsg.WorldWarSceneAgent agents = 4;
int WorldWarStatusAck::agents_size() const {
  return agents_.size();
}
void WorldWarStatusAck::clear_agents() {
  agents_.Clear();
}
const ::NetMsg::WorldWarSceneAgent& WorldWarStatusAck::agents(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarStatusAck.agents)
  return agents_.Get(index);
}
::NetMsg::WorldWarSceneAgent* WorldWarStatusAck::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarStatusAck.agents)
  return agents_.Mutable(index);
}
::NetMsg::WorldWarSceneAgent* WorldWarStatusAck::add_agents() {
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarStatusAck.agents)
  return agents_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneAgent >*
WorldWarStatusAck::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarStatusAck.agents)
  return &agents_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneAgent >&
WorldWarStatusAck::agents() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarStatusAck.agents)
  return agents_;
}

// repeated .NetMsg.WorldWarSceneAgent importantAgents = 5;
int WorldWarStatusAck::importantagents_size() const {
  return importantagents_.size();
}
void WorldWarStatusAck::clear_importantagents() {
  importantagents_.Clear();
}
const ::NetMsg::WorldWarSceneAgent& WorldWarStatusAck::importantagents(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarStatusAck.importantAgents)
  return importantagents_.Get(index);
}
::NetMsg::WorldWarSceneAgent* WorldWarStatusAck::mutable_importantagents(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.WorldWarStatusAck.importantAgents)
  return importantagents_.Mutable(index);
}
::NetMsg::WorldWarSceneAgent* WorldWarStatusAck::add_importantagents() {
  // @@protoc_insertion_point(field_add:NetMsg.WorldWarStatusAck.importantAgents)
  return importantagents_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneAgent >*
WorldWarStatusAck::mutable_importantagents() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.WorldWarStatusAck.importantAgents)
  return &importantagents_;
}
const ::google::protobuf::RepeatedPtrField< ::NetMsg::WorldWarSceneAgent >&
WorldWarStatusAck::importantagents() const {
  // @@protoc_insertion_point(field_list:NetMsg.WorldWarStatusAck.importantAgents)
  return importantagents_;
}

// optional uint32 error = 6;
void WorldWarStatusAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 WorldWarStatusAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarStatusAck.error)
  return error_;
}
void WorldWarStatusAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarStatusAck.error)
}

inline const WorldWarStatusAck* WorldWarStatusAck::internal_default_instance() {
  return &WorldWarStatusAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWorldWarMove::kWorldWarIdFieldNumber;
const int ReqWorldWarMove::kAgentIdFieldNumber;
const int ReqWorldWarMove::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWorldWarMove::ReqWorldWarMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqWorldWarMove)
}

void ReqWorldWarMove::InitAsDefaultInstance() {
}

ReqWorldWarMove::ReqWorldWarMove(const ReqWorldWarMove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqWorldWarMove)
}

void ReqWorldWarMove::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&agentid_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(agentid_));
  _cached_size_ = 0;
}

ReqWorldWarMove::~ReqWorldWarMove() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqWorldWarMove)
  SharedDtor();
}

void ReqWorldWarMove::SharedDtor() {
}

void ReqWorldWarMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldWarMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldWarMove_descriptor_;
}

const ReqWorldWarMove& ReqWorldWarMove::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqWorldWarMove> ReqWorldWarMove_default_instance_;

ReqWorldWarMove* ReqWorldWarMove::New(::google::protobuf::Arena* arena) const {
  ReqWorldWarMove* n = new ReqWorldWarMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWorldWarMove::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqWorldWarMove)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqWorldWarMove, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqWorldWarMove*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, agentid_);

#undef ZR_HELPER_
#undef ZR_

  path_.Clear();
}

bool ReqWorldWarMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqWorldWarMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agentId;
        break;
      }

      // optional uint32 agentId = 2;
      case 2: {
        if (tag == 16) {
         parse_agentId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // repeated uint32 path = 3;
      case 3: {
        if (tag == 26) {
         parse_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_path())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_path())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqWorldWarMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqWorldWarMove)
  return false;
#undef DO_
}

void ReqWorldWarMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqWorldWarMove)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agentid(), output);
  }

  // repeated uint32 path = 3;
  if (this->path_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_path_cached_byte_size_);
  }
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->path(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqWorldWarMove)
}

::google::protobuf::uint8* ReqWorldWarMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqWorldWarMove)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agentid(), target);
  }

  // repeated uint32 path = 3;
  if (this->path_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _path_cached_byte_size_, target);
  }
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->path(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqWorldWarMove)
  return target;
}

size_t ReqWorldWarMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqWorldWarMove)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agentid());
  }

  // repeated uint32 path = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->path_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->path(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _path_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldWarMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqWorldWarMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqWorldWarMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWorldWarMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqWorldWarMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqWorldWarMove)
    UnsafeMergeFrom(*source);
  }
}

void ReqWorldWarMove::MergeFrom(const ReqWorldWarMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqWorldWarMove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqWorldWarMove::UnsafeMergeFrom(const ReqWorldWarMove& from) {
  GOOGLE_DCHECK(&from != this);
  path_.UnsafeMergeFrom(from.path_);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.agentid() != 0) {
    set_agentid(from.agentid());
  }
}

void ReqWorldWarMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqWorldWarMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldWarMove::CopyFrom(const ReqWorldWarMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqWorldWarMove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqWorldWarMove::IsInitialized() const {

  return true;
}

void ReqWorldWarMove::Swap(ReqWorldWarMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWorldWarMove::InternalSwap(ReqWorldWarMove* other) {
  std::swap(worldwarid_, other->worldwarid_);
  std::swap(agentid_, other->agentid_);
  path_.UnsafeArenaSwap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWorldWarMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldWarMove_descriptor_;
  metadata.reflection = ReqWorldWarMove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWorldWarMove

// optional uint32 worldWarId = 1;
void ReqWorldWarMove::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarMove::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarMove.worldWarId)
  return worldwarid_;
}
void ReqWorldWarMove::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarMove.worldWarId)
}

// optional uint32 agentId = 2;
void ReqWorldWarMove::clear_agentid() {
  agentid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarMove::agentid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarMove.agentId)
  return agentid_;
}
void ReqWorldWarMove::set_agentid(::google::protobuf::uint32 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarMove.agentId)
}

// repeated uint32 path = 3;
int ReqWorldWarMove::path_size() const {
  return path_.size();
}
void ReqWorldWarMove::clear_path() {
  path_.Clear();
}
::google::protobuf::uint32 ReqWorldWarMove::path(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarMove.path)
  return path_.Get(index);
}
void ReqWorldWarMove::set_path(int index, ::google::protobuf::uint32 value) {
  path_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarMove.path)
}
void ReqWorldWarMove::add_path(::google::protobuf::uint32 value) {
  path_.Add(value);
  // @@protoc_insertion_point(field_add:NetMsg.ReqWorldWarMove.path)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReqWorldWarMove::path() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqWorldWarMove.path)
  return path_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReqWorldWarMove::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqWorldWarMove.path)
  return &path_;
}

inline const ReqWorldWarMove* ReqWorldWarMove::internal_default_instance() {
  return &ReqWorldWarMove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarMoveAck::kWorldWarIdFieldNumber;
const int WorldWarMoveAck::kAgentIdFieldNumber;
const int WorldWarMoveAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarMoveAck::WorldWarMoveAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarMoveAck)
}

void WorldWarMoveAck::InitAsDefaultInstance() {
}

WorldWarMoveAck::WorldWarMoveAck(const WorldWarMoveAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarMoveAck)
}

void WorldWarMoveAck::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(error_));
  _cached_size_ = 0;
}

WorldWarMoveAck::~WorldWarMoveAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarMoveAck)
  SharedDtor();
}

void WorldWarMoveAck::SharedDtor() {
}

void WorldWarMoveAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarMoveAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarMoveAck_descriptor_;
}

const WorldWarMoveAck& WorldWarMoveAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarMoveAck> WorldWarMoveAck_default_instance_;

WorldWarMoveAck* WorldWarMoveAck::New(::google::protobuf::Arena* arena) const {
  WorldWarMoveAck* n = new WorldWarMoveAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarMoveAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarMoveAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarMoveAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarMoveAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool WorldWarMoveAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarMoveAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agentId;
        break;
      }

      // optional uint32 agentId = 2;
      case 2: {
        if (tag == 16) {
         parse_agentId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarMoveAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarMoveAck)
  return false;
#undef DO_
}

void WorldWarMoveAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarMoveAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agentid(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarMoveAck)
}

::google::protobuf::uint8* WorldWarMoveAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarMoveAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agentid(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarMoveAck)
  return target;
}

size_t WorldWarMoveAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarMoveAck)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agentid());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarMoveAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarMoveAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarMoveAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarMoveAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarMoveAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarMoveAck)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarMoveAck::MergeFrom(const WorldWarMoveAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarMoveAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarMoveAck::UnsafeMergeFrom(const WorldWarMoveAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.agentid() != 0) {
    set_agentid(from.agentid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void WorldWarMoveAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarMoveAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarMoveAck::CopyFrom(const WorldWarMoveAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarMoveAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarMoveAck::IsInitialized() const {

  return true;
}

void WorldWarMoveAck::Swap(WorldWarMoveAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarMoveAck::InternalSwap(WorldWarMoveAck* other) {
  std::swap(worldwarid_, other->worldwarid_);
  std::swap(agentid_, other->agentid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarMoveAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarMoveAck_descriptor_;
  metadata.reflection = WorldWarMoveAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarMoveAck

// optional uint32 worldWarId = 1;
void WorldWarMoveAck::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 WorldWarMoveAck::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarMoveAck.worldWarId)
  return worldwarid_;
}
void WorldWarMoveAck::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarMoveAck.worldWarId)
}

// optional uint32 agentId = 2;
void WorldWarMoveAck::clear_agentid() {
  agentid_ = 0u;
}
::google::protobuf::uint32 WorldWarMoveAck::agentid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarMoveAck.agentId)
  return agentid_;
}
void WorldWarMoveAck::set_agentid(::google::protobuf::uint32 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarMoveAck.agentId)
}

// optional uint32 error = 3;
void WorldWarMoveAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 WorldWarMoveAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarMoveAck.error)
  return error_;
}
void WorldWarMoveAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarMoveAck.error)
}

inline const WorldWarMoveAck* WorldWarMoveAck::internal_default_instance() {
  return &WorldWarMoveAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWorldWarDefence::kWorldWarIdFieldNumber;
const int ReqWorldWarDefence::kAgentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWorldWarDefence::ReqWorldWarDefence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqWorldWarDefence)
}

void ReqWorldWarDefence::InitAsDefaultInstance() {
}

ReqWorldWarDefence::ReqWorldWarDefence(const ReqWorldWarDefence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqWorldWarDefence)
}

void ReqWorldWarDefence::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&agentid_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(agentid_));
  _cached_size_ = 0;
}

ReqWorldWarDefence::~ReqWorldWarDefence() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqWorldWarDefence)
  SharedDtor();
}

void ReqWorldWarDefence::SharedDtor() {
}

void ReqWorldWarDefence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldWarDefence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldWarDefence_descriptor_;
}

const ReqWorldWarDefence& ReqWorldWarDefence::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqWorldWarDefence> ReqWorldWarDefence_default_instance_;

ReqWorldWarDefence* ReqWorldWarDefence::New(::google::protobuf::Arena* arena) const {
  ReqWorldWarDefence* n = new ReqWorldWarDefence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWorldWarDefence::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqWorldWarDefence)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqWorldWarDefence, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqWorldWarDefence*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, agentid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqWorldWarDefence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqWorldWarDefence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agentId;
        break;
      }

      // optional uint32 agentId = 2;
      case 2: {
        if (tag == 16) {
         parse_agentId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqWorldWarDefence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqWorldWarDefence)
  return false;
#undef DO_
}

void ReqWorldWarDefence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqWorldWarDefence)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agentid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqWorldWarDefence)
}

::google::protobuf::uint8* ReqWorldWarDefence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqWorldWarDefence)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agentid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqWorldWarDefence)
  return target;
}

size_t ReqWorldWarDefence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqWorldWarDefence)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agentid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldWarDefence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqWorldWarDefence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqWorldWarDefence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWorldWarDefence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqWorldWarDefence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqWorldWarDefence)
    UnsafeMergeFrom(*source);
  }
}

void ReqWorldWarDefence::MergeFrom(const ReqWorldWarDefence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqWorldWarDefence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqWorldWarDefence::UnsafeMergeFrom(const ReqWorldWarDefence& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.agentid() != 0) {
    set_agentid(from.agentid());
  }
}

void ReqWorldWarDefence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqWorldWarDefence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldWarDefence::CopyFrom(const ReqWorldWarDefence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqWorldWarDefence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqWorldWarDefence::IsInitialized() const {

  return true;
}

void ReqWorldWarDefence::Swap(ReqWorldWarDefence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWorldWarDefence::InternalSwap(ReqWorldWarDefence* other) {
  std::swap(worldwarid_, other->worldwarid_);
  std::swap(agentid_, other->agentid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWorldWarDefence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldWarDefence_descriptor_;
  metadata.reflection = ReqWorldWarDefence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWorldWarDefence

// optional uint32 worldWarId = 1;
void ReqWorldWarDefence::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarDefence::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarDefence.worldWarId)
  return worldwarid_;
}
void ReqWorldWarDefence::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarDefence.worldWarId)
}

// optional uint32 agentId = 2;
void ReqWorldWarDefence::clear_agentid() {
  agentid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarDefence::agentid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarDefence.agentId)
  return agentid_;
}
void ReqWorldWarDefence::set_agentid(::google::protobuf::uint32 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarDefence.agentId)
}

inline const ReqWorldWarDefence* ReqWorldWarDefence::internal_default_instance() {
  return &ReqWorldWarDefence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarDefenceAck::kWorldWarIdFieldNumber;
const int WorldWarDefenceAck::kAgentIdFieldNumber;
const int WorldWarDefenceAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarDefenceAck::WorldWarDefenceAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarDefenceAck)
}

void WorldWarDefenceAck::InitAsDefaultInstance() {
}

WorldWarDefenceAck::WorldWarDefenceAck(const WorldWarDefenceAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarDefenceAck)
}

void WorldWarDefenceAck::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(error_));
  _cached_size_ = 0;
}

WorldWarDefenceAck::~WorldWarDefenceAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarDefenceAck)
  SharedDtor();
}

void WorldWarDefenceAck::SharedDtor() {
}

void WorldWarDefenceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarDefenceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarDefenceAck_descriptor_;
}

const WorldWarDefenceAck& WorldWarDefenceAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarDefenceAck> WorldWarDefenceAck_default_instance_;

WorldWarDefenceAck* WorldWarDefenceAck::New(::google::protobuf::Arena* arena) const {
  WorldWarDefenceAck* n = new WorldWarDefenceAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarDefenceAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarDefenceAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarDefenceAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarDefenceAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool WorldWarDefenceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarDefenceAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agentId;
        break;
      }

      // optional uint32 agentId = 2;
      case 2: {
        if (tag == 16) {
         parse_agentId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarDefenceAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarDefenceAck)
  return false;
#undef DO_
}

void WorldWarDefenceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarDefenceAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agentid(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarDefenceAck)
}

::google::protobuf::uint8* WorldWarDefenceAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarDefenceAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agentid(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarDefenceAck)
  return target;
}

size_t WorldWarDefenceAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarDefenceAck)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agentid());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarDefenceAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarDefenceAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarDefenceAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarDefenceAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarDefenceAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarDefenceAck)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarDefenceAck::MergeFrom(const WorldWarDefenceAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarDefenceAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarDefenceAck::UnsafeMergeFrom(const WorldWarDefenceAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.agentid() != 0) {
    set_agentid(from.agentid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void WorldWarDefenceAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarDefenceAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarDefenceAck::CopyFrom(const WorldWarDefenceAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarDefenceAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarDefenceAck::IsInitialized() const {

  return true;
}

void WorldWarDefenceAck::Swap(WorldWarDefenceAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarDefenceAck::InternalSwap(WorldWarDefenceAck* other) {
  std::swap(worldwarid_, other->worldwarid_);
  std::swap(agentid_, other->agentid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarDefenceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarDefenceAck_descriptor_;
  metadata.reflection = WorldWarDefenceAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarDefenceAck

// optional uint32 worldWarId = 1;
void WorldWarDefenceAck::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 WorldWarDefenceAck::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarDefenceAck.worldWarId)
  return worldwarid_;
}
void WorldWarDefenceAck::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarDefenceAck.worldWarId)
}

// optional uint32 agentId = 2;
void WorldWarDefenceAck::clear_agentid() {
  agentid_ = 0u;
}
::google::protobuf::uint32 WorldWarDefenceAck::agentid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarDefenceAck.agentId)
  return agentid_;
}
void WorldWarDefenceAck::set_agentid(::google::protobuf::uint32 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarDefenceAck.agentId)
}

// optional uint32 error = 3;
void WorldWarDefenceAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 WorldWarDefenceAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarDefenceAck.error)
  return error_;
}
void WorldWarDefenceAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarDefenceAck.error)
}

inline const WorldWarDefenceAck* WorldWarDefenceAck::internal_default_instance() {
  return &WorldWarDefenceAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWorldWarDefenceTarget::kWorldWarIdFieldNumber;
const int ReqWorldWarDefenceTarget::kAgentIdFieldNumber;
const int ReqWorldWarDefenceTarget::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWorldWarDefenceTarget::ReqWorldWarDefenceTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqWorldWarDefenceTarget)
}

void ReqWorldWarDefenceTarget::InitAsDefaultInstance() {
}

ReqWorldWarDefenceTarget::ReqWorldWarDefenceTarget(const ReqWorldWarDefenceTarget& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqWorldWarDefenceTarget)
}

void ReqWorldWarDefenceTarget::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&blockid_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(blockid_));
  _cached_size_ = 0;
}

ReqWorldWarDefenceTarget::~ReqWorldWarDefenceTarget() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqWorldWarDefenceTarget)
  SharedDtor();
}

void ReqWorldWarDefenceTarget::SharedDtor() {
}

void ReqWorldWarDefenceTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldWarDefenceTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldWarDefenceTarget_descriptor_;
}

const ReqWorldWarDefenceTarget& ReqWorldWarDefenceTarget::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqWorldWarDefenceTarget> ReqWorldWarDefenceTarget_default_instance_;

ReqWorldWarDefenceTarget* ReqWorldWarDefenceTarget::New(::google::protobuf::Arena* arena) const {
  ReqWorldWarDefenceTarget* n = new ReqWorldWarDefenceTarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWorldWarDefenceTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqWorldWarDefenceTarget)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqWorldWarDefenceTarget, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqWorldWarDefenceTarget*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, blockid_);

#undef ZR_HELPER_
#undef ZR_

}

bool ReqWorldWarDefenceTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqWorldWarDefenceTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agentId;
        break;
      }

      // optional uint32 agentId = 2;
      case 2: {
        if (tag == 16) {
         parse_agentId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blockId;
        break;
      }

      // optional uint32 blockId = 3;
      case 3: {
        if (tag == 24) {
         parse_blockId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqWorldWarDefenceTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqWorldWarDefenceTarget)
  return false;
#undef DO_
}

void ReqWorldWarDefenceTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqWorldWarDefenceTarget)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agentid(), output);
  }

  // optional uint32 blockId = 3;
  if (this->blockid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blockid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqWorldWarDefenceTarget)
}

::google::protobuf::uint8* ReqWorldWarDefenceTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqWorldWarDefenceTarget)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agentid(), target);
  }

  // optional uint32 blockId = 3;
  if (this->blockid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blockid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqWorldWarDefenceTarget)
  return target;
}

size_t ReqWorldWarDefenceTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqWorldWarDefenceTarget)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agentid());
  }

  // optional uint32 blockId = 3;
  if (this->blockid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blockid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldWarDefenceTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqWorldWarDefenceTarget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqWorldWarDefenceTarget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWorldWarDefenceTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqWorldWarDefenceTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqWorldWarDefenceTarget)
    UnsafeMergeFrom(*source);
  }
}

void ReqWorldWarDefenceTarget::MergeFrom(const ReqWorldWarDefenceTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqWorldWarDefenceTarget)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqWorldWarDefenceTarget::UnsafeMergeFrom(const ReqWorldWarDefenceTarget& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.agentid() != 0) {
    set_agentid(from.agentid());
  }
  if (from.blockid() != 0) {
    set_blockid(from.blockid());
  }
}

void ReqWorldWarDefenceTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqWorldWarDefenceTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldWarDefenceTarget::CopyFrom(const ReqWorldWarDefenceTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqWorldWarDefenceTarget)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqWorldWarDefenceTarget::IsInitialized() const {

  return true;
}

void ReqWorldWarDefenceTarget::Swap(ReqWorldWarDefenceTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWorldWarDefenceTarget::InternalSwap(ReqWorldWarDefenceTarget* other) {
  std::swap(worldwarid_, other->worldwarid_);
  std::swap(agentid_, other->agentid_);
  std::swap(blockid_, other->blockid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWorldWarDefenceTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldWarDefenceTarget_descriptor_;
  metadata.reflection = ReqWorldWarDefenceTarget_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWorldWarDefenceTarget

// optional uint32 worldWarId = 1;
void ReqWorldWarDefenceTarget::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarDefenceTarget::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarDefenceTarget.worldWarId)
  return worldwarid_;
}
void ReqWorldWarDefenceTarget::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarDefenceTarget.worldWarId)
}

// optional uint32 agentId = 2;
void ReqWorldWarDefenceTarget::clear_agentid() {
  agentid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarDefenceTarget::agentid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarDefenceTarget.agentId)
  return agentid_;
}
void ReqWorldWarDefenceTarget::set_agentid(::google::protobuf::uint32 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarDefenceTarget.agentId)
}

// optional uint32 blockId = 3;
void ReqWorldWarDefenceTarget::clear_blockid() {
  blockid_ = 0u;
}
::google::protobuf::uint32 ReqWorldWarDefenceTarget::blockid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqWorldWarDefenceTarget.blockId)
  return blockid_;
}
void ReqWorldWarDefenceTarget::set_blockid(::google::protobuf::uint32 value) {
  
  blockid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqWorldWarDefenceTarget.blockId)
}

inline const ReqWorldWarDefenceTarget* ReqWorldWarDefenceTarget::internal_default_instance() {
  return &ReqWorldWarDefenceTarget_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldWarDefenceTargetAck::kWorldWarIdFieldNumber;
const int WorldWarDefenceTargetAck::kAgentIdFieldNumber;
const int WorldWarDefenceTargetAck::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldWarDefenceTargetAck::WorldWarDefenceTargetAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.WorldWarDefenceTargetAck)
}

void WorldWarDefenceTargetAck::InitAsDefaultInstance() {
}

WorldWarDefenceTargetAck::WorldWarDefenceTargetAck(const WorldWarDefenceTargetAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.WorldWarDefenceTargetAck)
}

void WorldWarDefenceTargetAck::SharedCtor() {
  ::memset(&worldwarid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&worldwarid_) + sizeof(error_));
  _cached_size_ = 0;
}

WorldWarDefenceTargetAck::~WorldWarDefenceTargetAck() {
  // @@protoc_insertion_point(destructor:NetMsg.WorldWarDefenceTargetAck)
  SharedDtor();
}

void WorldWarDefenceTargetAck::SharedDtor() {
}

void WorldWarDefenceTargetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldWarDefenceTargetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldWarDefenceTargetAck_descriptor_;
}

const WorldWarDefenceTargetAck& WorldWarDefenceTargetAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WorldWarDefenceTargetAck> WorldWarDefenceTargetAck_default_instance_;

WorldWarDefenceTargetAck* WorldWarDefenceTargetAck::New(::google::protobuf::Arena* arena) const {
  WorldWarDefenceTargetAck* n = new WorldWarDefenceTargetAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldWarDefenceTargetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.WorldWarDefenceTargetAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldWarDefenceTargetAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldWarDefenceTargetAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(worldwarid_, error_);

#undef ZR_HELPER_
#undef ZR_

}

bool WorldWarDefenceTargetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.WorldWarDefenceTargetAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agentId;
        break;
      }

      // optional uint32 agentId = 2;
      case 2: {
        if (tag == 16) {
         parse_agentId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional uint32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.WorldWarDefenceTargetAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.WorldWarDefenceTargetAck)
  return false;
#undef DO_
}

void WorldWarDefenceTargetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.WorldWarDefenceTargetAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agentid(), output);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.WorldWarDefenceTargetAck)
}

::google::protobuf::uint8* WorldWarDefenceTargetAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.WorldWarDefenceTargetAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agentid(), target);
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.WorldWarDefenceTargetAck)
  return target;
}

size_t WorldWarDefenceTargetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.WorldWarDefenceTargetAck)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  // optional uint32 agentId = 2;
  if (this->agentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->agentid());
  }

  // optional uint32 error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldWarDefenceTargetAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.WorldWarDefenceTargetAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorldWarDefenceTargetAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldWarDefenceTargetAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.WorldWarDefenceTargetAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.WorldWarDefenceTargetAck)
    UnsafeMergeFrom(*source);
  }
}

void WorldWarDefenceTargetAck::MergeFrom(const WorldWarDefenceTargetAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.WorldWarDefenceTargetAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WorldWarDefenceTargetAck::UnsafeMergeFrom(const WorldWarDefenceTargetAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
  if (from.agentid() != 0) {
    set_agentid(from.agentid());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void WorldWarDefenceTargetAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.WorldWarDefenceTargetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldWarDefenceTargetAck::CopyFrom(const WorldWarDefenceTargetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.WorldWarDefenceTargetAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WorldWarDefenceTargetAck::IsInitialized() const {

  return true;
}

void WorldWarDefenceTargetAck::Swap(WorldWarDefenceTargetAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldWarDefenceTargetAck::InternalSwap(WorldWarDefenceTargetAck* other) {
  std::swap(worldwarid_, other->worldwarid_);
  std::swap(agentid_, other->agentid_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldWarDefenceTargetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldWarDefenceTargetAck_descriptor_;
  metadata.reflection = WorldWarDefenceTargetAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldWarDefenceTargetAck

// optional uint32 worldWarId = 1;
void WorldWarDefenceTargetAck::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 WorldWarDefenceTargetAck::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarDefenceTargetAck.worldWarId)
  return worldwarid_;
}
void WorldWarDefenceTargetAck::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarDefenceTargetAck.worldWarId)
}

// optional uint32 agentId = 2;
void WorldWarDefenceTargetAck::clear_agentid() {
  agentid_ = 0u;
}
::google::protobuf::uint32 WorldWarDefenceTargetAck::agentid() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarDefenceTargetAck.agentId)
  return agentid_;
}
void WorldWarDefenceTargetAck::set_agentid(::google::protobuf::uint32 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarDefenceTargetAck.agentId)
}

// optional uint32 error = 3;
void WorldWarDefenceTargetAck::clear_error() {
  error_ = 0u;
}
::google::protobuf::uint32 WorldWarDefenceTargetAck::error() const {
  // @@protoc_insertion_point(field_get:NetMsg.WorldWarDefenceTargetAck.error)
  return error_;
}
void WorldWarDefenceTargetAck::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.WorldWarDefenceTargetAck.error)
}

inline const WorldWarDefenceTargetAck* WorldWarDefenceTargetAck::internal_default_instance() {
  return &WorldWarDefenceTargetAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLeaveWorldWar::kWorldWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveWorldWar::ReqLeaveWorldWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqLeaveWorldWar)
}

void ReqLeaveWorldWar::InitAsDefaultInstance() {
}

ReqLeaveWorldWar::ReqLeaveWorldWar(const ReqLeaveWorldWar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqLeaveWorldWar)
}

void ReqLeaveWorldWar::SharedCtor() {
  worldwarid_ = 0u;
  _cached_size_ = 0;
}

ReqLeaveWorldWar::~ReqLeaveWorldWar() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqLeaveWorldWar)
  SharedDtor();
}

void ReqLeaveWorldWar::SharedDtor() {
}

void ReqLeaveWorldWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveWorldWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveWorldWar_descriptor_;
}

const ReqLeaveWorldWar& ReqLeaveWorldWar::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqLeaveWorldWar> ReqLeaveWorldWar_default_instance_;

ReqLeaveWorldWar* ReqLeaveWorldWar::New(::google::protobuf::Arena* arena) const {
  ReqLeaveWorldWar* n = new ReqLeaveWorldWar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLeaveWorldWar::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqLeaveWorldWar)
  worldwarid_ = 0u;
}

bool ReqLeaveWorldWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqLeaveWorldWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqLeaveWorldWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqLeaveWorldWar)
  return false;
#undef DO_
}

void ReqLeaveWorldWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqLeaveWorldWar)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqLeaveWorldWar)
}

::google::protobuf::uint8* ReqLeaveWorldWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqLeaveWorldWar)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqLeaveWorldWar)
  return target;
}

size_t ReqLeaveWorldWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqLeaveWorldWar)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveWorldWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqLeaveWorldWar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqLeaveWorldWar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveWorldWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqLeaveWorldWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqLeaveWorldWar)
    UnsafeMergeFrom(*source);
  }
}

void ReqLeaveWorldWar::MergeFrom(const ReqLeaveWorldWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqLeaveWorldWar)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqLeaveWorldWar::UnsafeMergeFrom(const ReqLeaveWorldWar& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
}

void ReqLeaveWorldWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqLeaveWorldWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveWorldWar::CopyFrom(const ReqLeaveWorldWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqLeaveWorldWar)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqLeaveWorldWar::IsInitialized() const {

  return true;
}

void ReqLeaveWorldWar::Swap(ReqLeaveWorldWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveWorldWar::InternalSwap(ReqLeaveWorldWar* other) {
  std::swap(worldwarid_, other->worldwarid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLeaveWorldWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveWorldWar_descriptor_;
  metadata.reflection = ReqLeaveWorldWar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLeaveWorldWar

// optional uint32 worldWarId = 1;
void ReqLeaveWorldWar::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 ReqLeaveWorldWar::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqLeaveWorldWar.worldWarId)
  return worldwarid_;
}
void ReqLeaveWorldWar::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqLeaveWorldWar.worldWarId)
}

inline const ReqLeaveWorldWar* ReqLeaveWorldWar::internal_default_instance() {
  return &ReqLeaveWorldWar_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveWorldWarAck::kWorldWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveWorldWarAck::LeaveWorldWarAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.LeaveWorldWarAck)
}

void LeaveWorldWarAck::InitAsDefaultInstance() {
}

LeaveWorldWarAck::LeaveWorldWarAck(const LeaveWorldWarAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.LeaveWorldWarAck)
}

void LeaveWorldWarAck::SharedCtor() {
  worldwarid_ = 0u;
  _cached_size_ = 0;
}

LeaveWorldWarAck::~LeaveWorldWarAck() {
  // @@protoc_insertion_point(destructor:NetMsg.LeaveWorldWarAck)
  SharedDtor();
}

void LeaveWorldWarAck::SharedDtor() {
}

void LeaveWorldWarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveWorldWarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveWorldWarAck_descriptor_;
}

const LeaveWorldWarAck& LeaveWorldWarAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LeaveWorldWarAck> LeaveWorldWarAck_default_instance_;

LeaveWorldWarAck* LeaveWorldWarAck::New(::google::protobuf::Arena* arena) const {
  LeaveWorldWarAck* n = new LeaveWorldWarAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveWorldWarAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.LeaveWorldWarAck)
  worldwarid_ = 0u;
}

bool LeaveWorldWarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.LeaveWorldWarAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldWarId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldwarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.LeaveWorldWarAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.LeaveWorldWarAck)
  return false;
#undef DO_
}

void LeaveWorldWarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.LeaveWorldWarAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldwarid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.LeaveWorldWarAck)
}

::google::protobuf::uint8* LeaveWorldWarAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.LeaveWorldWarAck)
  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldwarid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.LeaveWorldWarAck)
  return target;
}

size_t LeaveWorldWarAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.LeaveWorldWarAck)
  size_t total_size = 0;

  // optional uint32 worldWarId = 1;
  if (this->worldwarid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldwarid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveWorldWarAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.LeaveWorldWarAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LeaveWorldWarAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveWorldWarAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.LeaveWorldWarAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.LeaveWorldWarAck)
    UnsafeMergeFrom(*source);
  }
}

void LeaveWorldWarAck::MergeFrom(const LeaveWorldWarAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.LeaveWorldWarAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LeaveWorldWarAck::UnsafeMergeFrom(const LeaveWorldWarAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.worldwarid() != 0) {
    set_worldwarid(from.worldwarid());
  }
}

void LeaveWorldWarAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.LeaveWorldWarAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveWorldWarAck::CopyFrom(const LeaveWorldWarAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.LeaveWorldWarAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LeaveWorldWarAck::IsInitialized() const {

  return true;
}

void LeaveWorldWarAck::Swap(LeaveWorldWarAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveWorldWarAck::InternalSwap(LeaveWorldWarAck* other) {
  std::swap(worldwarid_, other->worldwarid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveWorldWarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveWorldWarAck_descriptor_;
  metadata.reflection = LeaveWorldWarAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveWorldWarAck

// optional uint32 worldWarId = 1;
void LeaveWorldWarAck::clear_worldwarid() {
  worldwarid_ = 0u;
}
::google::protobuf::uint32 LeaveWorldWarAck::worldwarid() const {
  // @@protoc_insertion_point(field_get:NetMsg.LeaveWorldWarAck.worldWarId)
  return worldwarid_;
}
void LeaveWorldWarAck::set_worldwarid(::google::protobuf::uint32 value) {
  
  worldwarid_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.LeaveWorldWarAck.worldWarId)
}

inline const LeaveWorldWarAck* LeaveWorldWarAck::internal_default_instance() {
  return &LeaveWorldWarAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTest::kAFieldNumber;
const int ReqTest::kBFieldNumber;
const int ReqTest::kCFieldNumber;
const int ReqTest::kDFieldNumber;
const int ReqTest::kEFieldNumber;
const int ReqTest::kFFieldNumber;
const int ReqTest::kGFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTest::ReqTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.ReqTest)
}

void ReqTest::InitAsDefaultInstance() {
  g_ = const_cast< ::NetMsg::PlayerData*>(
      ::NetMsg::PlayerData::internal_default_instance());
}

ReqTest::ReqTest(const ReqTest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.ReqTest)
}

void ReqTest::SharedCtor() {
  a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_ = NULL;
  ::memset(&b_, 0, reinterpret_cast<char*>(&e_) -
    reinterpret_cast<char*>(&b_) + sizeof(e_));
  _cached_size_ = 0;
}

ReqTest::~ReqTest() {
  // @@protoc_insertion_point(destructor:NetMsg.ReqTest)
  SharedDtor();
}

void ReqTest::SharedDtor() {
  a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ReqTest_default_instance_.get()) {
    delete g_;
  }
}

void ReqTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTest_descriptor_;
}

const ReqTest& ReqTest::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReqTest> ReqTest_default_instance_;

ReqTest* ReqTest::New(::google::protobuf::Arena* arena) const {
  ReqTest* n = new ReqTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqTest::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.ReqTest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqTest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqTest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(b_, e_);
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && g_ != NULL) delete g_;
  g_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  f_.Clear();
}

bool ReqTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.ReqTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->a().data(), this->a().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqTest.a"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_b;
        break;
      }

      // optional float b = 2;
      case 2: {
        if (tag == 21) {
         parse_b:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // optional int32 c = 3;
      case 3: {
        if (tag == 24) {
         parse_c:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_d;
        break;
      }

      // optional uint32 d = 4;
      case 4: {
        if (tag == 32) {
         parse_d:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_e;
        break;
      }

      // optional bool e = 5;
      case 5: {
        if (tag == 40) {
         parse_e:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &e_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f;
        break;
      }

      // repeated string f = 6;
      case 6: {
        if (tag == 50) {
         parse_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->f(this->f_size() - 1).data(),
            this->f(this->f_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.ReqTest.f"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f;
        if (input->ExpectTag(58)) goto parse_g;
        break;
      }

      // optional .NetMsg.PlayerData g = 7;
      case 7: {
        if (tag == 58) {
         parse_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.ReqTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.ReqTest)
  return false;
#undef DO_
}

void ReqTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.ReqTest)
  // optional string a = 1;
  if (this->a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->a().data(), this->a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqTest.a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->a(), output);
  }

  // optional float b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->b(), output);
  }

  // optional int32 c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->c(), output);
  }

  // optional uint32 d = 4;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->d(), output);
  }

  // optional bool e = 5;
  if (this->e() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->e(), output);
  }

  // repeated string f = 6;
  for (int i = 0; i < this->f_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f(i).data(), this->f(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqTest.f");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->f(i), output);
  }

  // optional .NetMsg.PlayerData g = 7;
  if (this->has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->g_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.ReqTest)
}

::google::protobuf::uint8* ReqTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.ReqTest)
  // optional string a = 1;
  if (this->a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->a().data(), this->a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqTest.a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->a(), target);
  }

  // optional float b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->b(), target);
  }

  // optional int32 c = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->c(), target);
  }

  // optional uint32 d = 4;
  if (this->d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->d(), target);
  }

  // optional bool e = 5;
  if (this->e() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->e(), target);
  }

  // repeated string f = 6;
  for (int i = 0; i < this->f_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f(i).data(), this->f(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.ReqTest.f");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->f(i), target);
  }

  // optional .NetMsg.PlayerData g = 7;
  if (this->has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->g_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.ReqTest)
  return target;
}

size_t ReqTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.ReqTest)
  size_t total_size = 0;

  // optional string a = 1;
  if (this->a().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->a());
  }

  // optional float b = 2;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->c());
  }

  // optional uint32 d = 4;
  if (this->d() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->d());
  }

  // optional bool e = 5;
  if (this->e() != 0) {
    total_size += 1 + 1;
  }

  // optional .NetMsg.PlayerData g = 7;
  if (this->has_g()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->g_);
  }

  // repeated string f = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->f_size());
  for (int i = 0; i < this->f_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.ReqTest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.ReqTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.ReqTest)
    UnsafeMergeFrom(*source);
  }
}

void ReqTest::MergeFrom(const ReqTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.ReqTest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReqTest::UnsafeMergeFrom(const ReqTest& from) {
  GOOGLE_DCHECK(&from != this);
  f_.UnsafeMergeFrom(from.f_);
  if (from.a().size() > 0) {

    a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_);
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
  if (from.e() != 0) {
    set_e(from.e());
  }
  if (from.has_g()) {
    mutable_g()->::NetMsg::PlayerData::MergeFrom(from.g());
  }
}

void ReqTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.ReqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTest::CopyFrom(const ReqTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.ReqTest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReqTest::IsInitialized() const {

  return true;
}

void ReqTest::Swap(ReqTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTest::InternalSwap(ReqTest* other) {
  a_.Swap(&other->a_);
  std::swap(b_, other->b_);
  std::swap(c_, other->c_);
  std::swap(d_, other->d_);
  std::swap(e_, other->e_);
  f_.UnsafeArenaSwap(&other->f_);
  std::swap(g_, other->g_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTest_descriptor_;
  metadata.reflection = ReqTest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqTest

// optional string a = 1;
void ReqTest::clear_a() {
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqTest::a() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTest.a)
  return a_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqTest::set_a(const ::std::string& value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.ReqTest.a)
}
void ReqTest::set_a(const char* value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqTest.a)
}
void ReqTest::set_a(const char* value, size_t size) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqTest.a)
}
::std::string* ReqTest::mutable_a() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqTest.a)
  return a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqTest::release_a() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqTest.a)
  
  return a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqTest::set_allocated_a(::std::string* a) {
  if (a != NULL) {
    
  } else {
    
  }
  a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqTest.a)
}

// optional float b = 2;
void ReqTest::clear_b() {
  b_ = 0;
}
float ReqTest::b() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTest.b)
  return b_;
}
void ReqTest::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTest.b)
}

// optional int32 c = 3;
void ReqTest::clear_c() {
  c_ = 0;
}
::google::protobuf::int32 ReqTest::c() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTest.c)
  return c_;
}
void ReqTest::set_c(::google::protobuf::int32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTest.c)
}

// optional uint32 d = 4;
void ReqTest::clear_d() {
  d_ = 0u;
}
::google::protobuf::uint32 ReqTest::d() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTest.d)
  return d_;
}
void ReqTest::set_d(::google::protobuf::uint32 value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTest.d)
}

// optional bool e = 5;
void ReqTest::clear_e() {
  e_ = false;
}
bool ReqTest::e() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTest.e)
  return e_;
}
void ReqTest::set_e(bool value) {
  
  e_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.ReqTest.e)
}

// repeated string f = 6;
int ReqTest::f_size() const {
  return f_.size();
}
void ReqTest::clear_f() {
  f_.Clear();
}
const ::std::string& ReqTest::f(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTest.f)
  return f_.Get(index);
}
::std::string* ReqTest::mutable_f(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqTest.f)
  return f_.Mutable(index);
}
void ReqTest::set_f(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetMsg.ReqTest.f)
  f_.Mutable(index)->assign(value);
}
void ReqTest::set_f(int index, const char* value) {
  f_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetMsg.ReqTest.f)
}
void ReqTest::set_f(int index, const char* value, size_t size) {
  f_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetMsg.ReqTest.f)
}
::std::string* ReqTest::add_f() {
  // @@protoc_insertion_point(field_add_mutable:NetMsg.ReqTest.f)
  return f_.Add();
}
void ReqTest::add_f(const ::std::string& value) {
  f_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetMsg.ReqTest.f)
}
void ReqTest::add_f(const char* value) {
  f_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetMsg.ReqTest.f)
}
void ReqTest::add_f(const char* value, size_t size) {
  f_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetMsg.ReqTest.f)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqTest::f() const {
  // @@protoc_insertion_point(field_list:NetMsg.ReqTest.f)
  return f_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReqTest::mutable_f() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.ReqTest.f)
  return &f_;
}

// optional .NetMsg.PlayerData g = 7;
bool ReqTest::has_g() const {
  return this != internal_default_instance() && g_ != NULL;
}
void ReqTest::clear_g() {
  if (GetArenaNoVirtual() == NULL && g_ != NULL) delete g_;
  g_ = NULL;
}
const ::NetMsg::PlayerData& ReqTest::g() const {
  // @@protoc_insertion_point(field_get:NetMsg.ReqTest.g)
  return g_ != NULL ? *g_
                         : *::NetMsg::PlayerData::internal_default_instance();
}
::NetMsg::PlayerData* ReqTest::mutable_g() {
  
  if (g_ == NULL) {
    g_ = new ::NetMsg::PlayerData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.ReqTest.g)
  return g_;
}
::NetMsg::PlayerData* ReqTest::release_g() {
  // @@protoc_insertion_point(field_release:NetMsg.ReqTest.g)
  
  ::NetMsg::PlayerData* temp = g_;
  g_ = NULL;
  return temp;
}
void ReqTest::set_allocated_g(::NetMsg::PlayerData* g) {
  delete g_;
  g_ = g;
  if (g) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.ReqTest.g)
}

inline const ReqTest* ReqTest::internal_default_instance() {
  return &ReqTest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAck::kAFieldNumber;
const int TestAck::kBFieldNumber;
const int TestAck::kCFieldNumber;
const int TestAck::kDFieldNumber;
const int TestAck::kEFieldNumber;
const int TestAck::kFFieldNumber;
const int TestAck::kGFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestAck::TestAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_NetMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.TestAck)
}

void TestAck::InitAsDefaultInstance() {
  g_ = const_cast< ::NetMsg::PlayerData*>(
      ::NetMsg::PlayerData::internal_default_instance());
}

TestAck::TestAck(const TestAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMsg.TestAck)
}

void TestAck::SharedCtor() {
  a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_ = NULL;
  ::memset(&b_, 0, reinterpret_cast<char*>(&e_) -
    reinterpret_cast<char*>(&b_) + sizeof(e_));
  _cached_size_ = 0;
}

TestAck::~TestAck() {
  // @@protoc_insertion_point(destructor:NetMsg.TestAck)
  SharedDtor();
}

void TestAck::SharedDtor() {
  a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TestAck_default_instance_.get()) {
    delete g_;
  }
}

void TestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestAck_descriptor_;
}

const TestAck& TestAck::default_instance() {
  protobuf_InitDefaults_NetMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TestAck> TestAck_default_instance_;

TestAck* TestAck::New(::google::protobuf::Arena* arena) const {
  TestAck* n = new TestAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.TestAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(b_, e_);
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && g_ != NULL) delete g_;
  g_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  f_.Clear();
}

bool TestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.TestAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->a().data(), this->a().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.TestAck.a"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_b;
        break;
      }

      // optional float b = 2;
      case 2: {
        if (tag == 21) {
         parse_b:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // optional int32 c = 3;
      case 3: {
        if (tag == 24) {
         parse_c:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_d;
        break;
      }

      // optional uint32 d = 4;
      case 4: {
        if (tag == 32) {
         parse_d:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_e;
        break;
      }

      // optional bool e = 5;
      case 5: {
        if (tag == 40) {
         parse_e:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &e_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f;
        break;
      }

      // repeated string f = 6;
      case 6: {
        if (tag == 50) {
         parse_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->f(this->f_size() - 1).data(),
            this->f(this->f_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetMsg.TestAck.f"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f;
        if (input->ExpectTag(58)) goto parse_g;
        break;
      }

      // optional .NetMsg.PlayerData g = 7;
      case 7: {
        if (tag == 58) {
         parse_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.TestAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.TestAck)
  return false;
#undef DO_
}

void TestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.TestAck)
  // optional string a = 1;
  if (this->a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->a().data(), this->a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.TestAck.a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->a(), output);
  }

  // optional float b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->b(), output);
  }

  // optional int32 c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->c(), output);
  }

  // optional uint32 d = 4;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->d(), output);
  }

  // optional bool e = 5;
  if (this->e() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->e(), output);
  }

  // repeated string f = 6;
  for (int i = 0; i < this->f_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f(i).data(), this->f(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.TestAck.f");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->f(i), output);
  }

  // optional .NetMsg.PlayerData g = 7;
  if (this->has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->g_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetMsg.TestAck)
}

::google::protobuf::uint8* TestAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.TestAck)
  // optional string a = 1;
  if (this->a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->a().data(), this->a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.TestAck.a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->a(), target);
  }

  // optional float b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->b(), target);
  }

  // optional int32 c = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->c(), target);
  }

  // optional uint32 d = 4;
  if (this->d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->d(), target);
  }

  // optional bool e = 5;
  if (this->e() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->e(), target);
  }

  // repeated string f = 6;
  for (int i = 0; i < this->f_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f(i).data(), this->f(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetMsg.TestAck.f");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->f(i), target);
  }

  // optional .NetMsg.PlayerData g = 7;
  if (this->has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->g_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.TestAck)
  return target;
}

size_t TestAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.TestAck)
  size_t total_size = 0;

  // optional string a = 1;
  if (this->a().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->a());
  }

  // optional float b = 2;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->c());
  }

  // optional uint32 d = 4;
  if (this->d() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->d());
  }

  // optional bool e = 5;
  if (this->e() != 0) {
    total_size += 1 + 1;
  }

  // optional .NetMsg.PlayerData g = 7;
  if (this->has_g()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->g_);
  }

  // repeated string f = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->f_size());
  for (int i = 0; i < this->f_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.TestAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.TestAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.TestAck)
    UnsafeMergeFrom(*source);
  }
}

void TestAck::MergeFrom(const TestAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.TestAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TestAck::UnsafeMergeFrom(const TestAck& from) {
  GOOGLE_DCHECK(&from != this);
  f_.UnsafeMergeFrom(from.f_);
  if (from.a().size() > 0) {

    a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_);
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
  if (from.e() != 0) {
    set_e(from.e());
  }
  if (from.has_g()) {
    mutable_g()->::NetMsg::PlayerData::MergeFrom(from.g());
  }
}

void TestAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.TestAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAck::CopyFrom(const TestAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.TestAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TestAck::IsInitialized() const {

  return true;
}

void TestAck::Swap(TestAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestAck::InternalSwap(TestAck* other) {
  a_.Swap(&other->a_);
  std::swap(b_, other->b_);
  std::swap(c_, other->c_);
  std::swap(d_, other->d_);
  std::swap(e_, other->e_);
  f_.UnsafeArenaSwap(&other->f_);
  std::swap(g_, other->g_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestAck_descriptor_;
  metadata.reflection = TestAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestAck

// optional string a = 1;
void TestAck::clear_a() {
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestAck::a() const {
  // @@protoc_insertion_point(field_get:NetMsg.TestAck.a)
  return a_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestAck::set_a(const ::std::string& value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.TestAck.a)
}
void TestAck::set_a(const char* value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.TestAck.a)
}
void TestAck::set_a(const char* value, size_t size) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.TestAck.a)
}
::std::string* TestAck::mutable_a() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.TestAck.a)
  return a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestAck::release_a() {
  // @@protoc_insertion_point(field_release:NetMsg.TestAck.a)
  
  return a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestAck::set_allocated_a(::std::string* a) {
  if (a != NULL) {
    
  } else {
    
  }
  a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TestAck.a)
}

// optional float b = 2;
void TestAck::clear_b() {
  b_ = 0;
}
float TestAck::b() const {
  // @@protoc_insertion_point(field_get:NetMsg.TestAck.b)
  return b_;
}
void TestAck::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TestAck.b)
}

// optional int32 c = 3;
void TestAck::clear_c() {
  c_ = 0;
}
::google::protobuf::int32 TestAck::c() const {
  // @@protoc_insertion_point(field_get:NetMsg.TestAck.c)
  return c_;
}
void TestAck::set_c(::google::protobuf::int32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TestAck.c)
}

// optional uint32 d = 4;
void TestAck::clear_d() {
  d_ = 0u;
}
::google::protobuf::uint32 TestAck::d() const {
  // @@protoc_insertion_point(field_get:NetMsg.TestAck.d)
  return d_;
}
void TestAck::set_d(::google::protobuf::uint32 value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TestAck.d)
}

// optional bool e = 5;
void TestAck::clear_e() {
  e_ = false;
}
bool TestAck::e() const {
  // @@protoc_insertion_point(field_get:NetMsg.TestAck.e)
  return e_;
}
void TestAck::set_e(bool value) {
  
  e_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.TestAck.e)
}

// repeated string f = 6;
int TestAck::f_size() const {
  return f_.size();
}
void TestAck::clear_f() {
  f_.Clear();
}
const ::std::string& TestAck::f(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.TestAck.f)
  return f_.Get(index);
}
::std::string* TestAck::mutable_f(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.TestAck.f)
  return f_.Mutable(index);
}
void TestAck::set_f(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetMsg.TestAck.f)
  f_.Mutable(index)->assign(value);
}
void TestAck::set_f(int index, const char* value) {
  f_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetMsg.TestAck.f)
}
void TestAck::set_f(int index, const char* value, size_t size) {
  f_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetMsg.TestAck.f)
}
::std::string* TestAck::add_f() {
  // @@protoc_insertion_point(field_add_mutable:NetMsg.TestAck.f)
  return f_.Add();
}
void TestAck::add_f(const ::std::string& value) {
  f_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetMsg.TestAck.f)
}
void TestAck::add_f(const char* value) {
  f_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetMsg.TestAck.f)
}
void TestAck::add_f(const char* value, size_t size) {
  f_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetMsg.TestAck.f)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestAck::f() const {
  // @@protoc_insertion_point(field_list:NetMsg.TestAck.f)
  return f_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TestAck::mutable_f() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.TestAck.f)
  return &f_;
}

// optional .NetMsg.PlayerData g = 7;
bool TestAck::has_g() const {
  return this != internal_default_instance() && g_ != NULL;
}
void TestAck::clear_g() {
  if (GetArenaNoVirtual() == NULL && g_ != NULL) delete g_;
  g_ = NULL;
}
const ::NetMsg::PlayerData& TestAck::g() const {
  // @@protoc_insertion_point(field_get:NetMsg.TestAck.g)
  return g_ != NULL ? *g_
                         : *::NetMsg::PlayerData::internal_default_instance();
}
::NetMsg::PlayerData* TestAck::mutable_g() {
  
  if (g_ == NULL) {
    g_ = new ::NetMsg::PlayerData;
  }
  // @@protoc_insertion_point(field_mutable:NetMsg.TestAck.g)
  return g_;
}
::NetMsg::PlayerData* TestAck::release_g() {
  // @@protoc_insertion_point(field_release:NetMsg.TestAck.g)
  
  ::NetMsg::PlayerData* temp = g_;
  g_ = NULL;
  return temp;
}
void TestAck::set_allocated_g(::NetMsg::PlayerData* g) {
  delete g_;
  g_ = g;
  if (g) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetMsg.TestAck.g)
}

inline const TestAck* TestAck::internal_default_instance() {
  return &TestAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetMsg

// @@protoc_insertion_point(global_scope)
