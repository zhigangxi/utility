#pragma once

#ifndef EXPRESSIONS_H
#define EXPRESSIONS_H

#include "DataStructs.h"

namespace DesignData {
    typedef float (*AdvantureConfigBaseAwardGoldExpression)(const AdvantureData*);
    typedef float (*AdvantureConfigBaseAwardExpExpression)(const AdvantureData*);
    typedef float (*AdvantureEventDelayExpression)(const AdvantureEventData*);
    typedef float (*AwardAwardExpExpression)(const AwardData*);
    typedef float (*AwardAwardExpHeroExpression)(const AwardData*);
    typedef float (*AwardAwardCoinExpression)(const AwardData*);
    typedef float (*AwardAwardGoldExpression)(const AwardData*);
    typedef float (*AwardAwardContributionExpression)(const AwardData*);
    typedef float (*AwardAwardReputationExpression)(const AwardData*);
    typedef bool (*EnemyTeamMember1Condition)(const EnemyFilterData*);
    typedef bool (*EnemyTeamMember2Condition)(const EnemyFilterData*);
    typedef bool (*EnemyTeamMember3Condition)(const EnemyFilterData*);
    typedef bool (*EnemyTeamMember4Condition)(const EnemyFilterData*);
    typedef bool (*EnemyTeamMember5Condition)(const EnemyFilterData*);
    typedef float (*HeroLearnPropertyLearnPropertyExpExpression)(const LearnPropertyData*);
    typedef float (*HeroLearnPropertyLearnPropertyCritAddExpression)(const LearnPropertyData*);
    typedef float (*HeroLearnSkillLearnSkillExpExpression)(const LearnSkillData*);
    typedef float (*HeroLearnSkillLearnSkillCritAddExpression)(const LearnSkillData*);
    typedef float (*QuestQuestEffectExpression)(const QuestData*);
    typedef float (*ResourcePlayerNumberExpression)(const ResourceNumberData*);
    typedef float (*ResourcePlayerGenerateProductExpression)(const ResourceNumberData*);
    typedef float (*ResourcePlayerGenerateMaxExpression)(const ResourceNumberData*);
    typedef float (*WorldCityPopulationSpeedPopulationSpeedExpression)(const PopulationData*);

    #define NUM_ROWS_ADVANTURE_CONFIG_BASEAWARDGOLD 1
    #define NUM_ROWS_ADVANTURE_CONFIG_BASEAWARDEXP 1
    #define NUM_ROWS_ADVANTURE_EVENT_DELAY 9
    #define NUM_ROWS_AWARD_AWARD_EXP 166
    #define NUM_ROWS_AWARD_AWARD_EXPHERO 166
    #define NUM_ROWS_AWARD_AWARD_COIN 166
    #define NUM_ROWS_AWARD_AWARD_GOLD 166
    #define NUM_ROWS_AWARD_AWARD_CONTRIBUTION 166
    #define NUM_ROWS_AWARD_AWARD_REPUTATION 166
    #define NUM_ROWS_ENEMY_TEAM_MEMBER1 21
    #define NUM_ROWS_ENEMY_TEAM_MEMBER2 21
    #define NUM_ROWS_ENEMY_TEAM_MEMBER3 21
    #define NUM_ROWS_ENEMY_TEAM_MEMBER4 21
    #define NUM_ROWS_ENEMY_TEAM_MEMBER5 21
    #define NUM_ROWS_HERO_LEARNPROPERTY_LEARNPROPERTYEXP 6
    #define NUM_ROWS_HERO_LEARNPROPERTY_LEARNPROPERTYCRITADD 6
    #define NUM_ROWS_HERO_LEARNSKILL_LEARNSKILLEXP 1
    #define NUM_ROWS_HERO_LEARNSKILL_LEARNSKILLCRITADD 1
    #define NUM_ROWS_QUEST_QUEST_EFFECT 7
    #define NUM_ROWS_RESOURCE_PLAYER_NUMBER 12
    #define NUM_ROWS_RESOURCE_PLAYERGENERATE_PRODUCT 1
    #define NUM_ROWS_RESOURCE_PLAYERGENERATE_MAX 1
    #define NUM_ROWS_WORLDCITY_POPULATIONSPEED_POPULATIONSPEED 4

	class Expressions {
	public:
		static Expressions& sGetInstance();

        static float sAdvantureConfigBaseAwardGold(int, const AdvantureData*);
        static float sAdvantureConfigBaseAwardExp(int, const AdvantureData*);
        static float sAdvantureEventDelay(int, const AdvantureEventData*);
        static float sAwardAwardExp(int, const AwardData*);
        static float sAwardAwardExpHero(int, const AwardData*);
        static float sAwardAwardCoin(int, const AwardData*);
        static float sAwardAwardGold(int, const AwardData*);
        static float sAwardAwardContribution(int, const AwardData*);
        static float sAwardAwardReputation(int, const AwardData*);
        static bool sEnemyTeamMember1(int, const EnemyFilterData*);
        static bool sEnemyTeamMember2(int, const EnemyFilterData*);
        static bool sEnemyTeamMember3(int, const EnemyFilterData*);
        static bool sEnemyTeamMember4(int, const EnemyFilterData*);
        static bool sEnemyTeamMember5(int, const EnemyFilterData*);
        static float sHeroLearnPropertyLearnPropertyExp(int, const LearnPropertyData*);
        static float sHeroLearnPropertyLearnPropertyCritAdd(int, const LearnPropertyData*);
        static float sHeroLearnSkillLearnSkillExp(int, const LearnSkillData*);
        static float sHeroLearnSkillLearnSkillCritAdd(int, const LearnSkillData*);
        static float sQuestQuestEffect(int, const QuestData*);
        static float sResourcePlayerNumber(int, const ResourceNumberData*);
        static float sResourcePlayerGenerateProduct(int, const ResourceNumberData*);
        static float sResourcePlayerGenerateMax(int, const ResourceNumberData*);
        static float sWorldCityPopulationSpeedPopulationSpeed(int, const PopulationData*);

		void initialize();

		AdvantureConfigBaseAwardGoldExpression expAdvantureConfigBaseAwardGold(int);
		AdvantureConfigBaseAwardExpExpression expAdvantureConfigBaseAwardExp(int);
		AdvantureEventDelayExpression expAdvantureEventDelay(int);
		AwardAwardExpExpression expAwardAwardExp(int);
		AwardAwardExpHeroExpression expAwardAwardExpHero(int);
		AwardAwardCoinExpression expAwardAwardCoin(int);
		AwardAwardGoldExpression expAwardAwardGold(int);
		AwardAwardContributionExpression expAwardAwardContribution(int);
		AwardAwardReputationExpression expAwardAwardReputation(int);
		EnemyTeamMember1Condition condEnemyTeamMember1(int);
		EnemyTeamMember2Condition condEnemyTeamMember2(int);
		EnemyTeamMember3Condition condEnemyTeamMember3(int);
		EnemyTeamMember4Condition condEnemyTeamMember4(int);
		EnemyTeamMember5Condition condEnemyTeamMember5(int);
		HeroLearnPropertyLearnPropertyExpExpression expHeroLearnPropertyLearnPropertyExp(int);
		HeroLearnPropertyLearnPropertyCritAddExpression expHeroLearnPropertyLearnPropertyCritAdd(int);
		HeroLearnSkillLearnSkillExpExpression expHeroLearnSkillLearnSkillExp(int);
		HeroLearnSkillLearnSkillCritAddExpression expHeroLearnSkillLearnSkillCritAdd(int);
		QuestQuestEffectExpression expQuestQuestEffect(int);
		ResourcePlayerNumberExpression expResourcePlayerNumber(int);
		ResourcePlayerGenerateProductExpression expResourcePlayerGenerateProduct(int);
		ResourcePlayerGenerateMaxExpression expResourcePlayerGenerateMax(int);
		WorldCityPopulationSpeedPopulationSpeedExpression expWorldCityPopulationSpeedPopulationSpeed(int);

	private:
		static Expressions* sInstance;

        static float sExpDefaultAdvantureConfigBaseAwardGold(const AdvantureData*);
        static float sExpDefaultAdvantureConfigBaseAwardExp(const AdvantureData*);
        static float sExpDefaultAdvantureEventDelay(const AdvantureEventData*);
        static float sExpDefaultAwardAwardExp(const AwardData*);
        static float sExpDefaultAwardAwardExpHero(const AwardData*);
        static float sExpDefaultAwardAwardCoin(const AwardData*);
        static float sExpDefaultAwardAwardGold(const AwardData*);
        static float sExpDefaultAwardAwardContribution(const AwardData*);
        static float sExpDefaultAwardAwardReputation(const AwardData*);
        static bool sCondDefaultEnemyTeamMember1(const EnemyFilterData*);
        static bool sCondDefaultEnemyTeamMember2(const EnemyFilterData*);
        static bool sCondDefaultEnemyTeamMember3(const EnemyFilterData*);
        static bool sCondDefaultEnemyTeamMember4(const EnemyFilterData*);
        static bool sCondDefaultEnemyTeamMember5(const EnemyFilterData*);
        static float sExpDefaultHeroLearnPropertyLearnPropertyExp(const LearnPropertyData*);
        static float sExpDefaultHeroLearnPropertyLearnPropertyCritAdd(const LearnPropertyData*);
        static float sExpDefaultHeroLearnSkillLearnSkillExp(const LearnSkillData*);
        static float sExpDefaultHeroLearnSkillLearnSkillCritAdd(const LearnSkillData*);
        static float sExpDefaultQuestQuestEffect(const QuestData*);
        static float sExpDefaultResourcePlayerNumber(const ResourceNumberData*);
        static float sExpDefaultResourcePlayerGenerateProduct(const ResourceNumberData*);
        static float sExpDefaultResourcePlayerGenerateMax(const ResourceNumberData*);
        static float sExpDefaultWorldCityPopulationSpeedPopulationSpeed(const PopulationData*);

		Expressions();

        AdvantureConfigBaseAwardGoldExpression* mAdvantureConfigBaseAwardGoldExpressions;
        AdvantureConfigBaseAwardExpExpression* mAdvantureConfigBaseAwardExpExpressions;
        AdvantureEventDelayExpression* mAdvantureEventDelayExpressions;
        AwardAwardExpExpression* mAwardAwardExpExpressions;
        AwardAwardExpHeroExpression* mAwardAwardExpHeroExpressions;
        AwardAwardCoinExpression* mAwardAwardCoinExpressions;
        AwardAwardGoldExpression* mAwardAwardGoldExpressions;
        AwardAwardContributionExpression* mAwardAwardContributionExpressions;
        AwardAwardReputationExpression* mAwardAwardReputationExpressions;
        EnemyTeamMember1Condition* mEnemyTeamMember1Conditions;
        EnemyTeamMember2Condition* mEnemyTeamMember2Conditions;
        EnemyTeamMember3Condition* mEnemyTeamMember3Conditions;
        EnemyTeamMember4Condition* mEnemyTeamMember4Conditions;
        EnemyTeamMember5Condition* mEnemyTeamMember5Conditions;
        HeroLearnPropertyLearnPropertyExpExpression* mHeroLearnPropertyLearnPropertyExpExpressions;
        HeroLearnPropertyLearnPropertyCritAddExpression* mHeroLearnPropertyLearnPropertyCritAddExpressions;
        HeroLearnSkillLearnSkillExpExpression* mHeroLearnSkillLearnSkillExpExpressions;
        HeroLearnSkillLearnSkillCritAddExpression* mHeroLearnSkillLearnSkillCritAddExpressions;
        QuestQuestEffectExpression* mQuestQuestEffectExpressions;
        ResourcePlayerNumberExpression* mResourcePlayerNumberExpressions;
        ResourcePlayerGenerateProductExpression* mResourcePlayerGenerateProductExpressions;
        ResourcePlayerGenerateMaxExpression* mResourcePlayerGenerateMaxExpressions;
        WorldCityPopulationSpeedPopulationSpeedExpression* mWorldCityPopulationSpeedPopulationSpeedExpressions;
	};

	inline void Expressions::initialize() {
        mAdvantureConfigBaseAwardGoldExpressions = new AdvantureConfigBaseAwardGoldExpression[NUM_ROWS_ADVANTURE_CONFIG_BASEAWARDGOLD] {
            [](const AdvantureData* advanture) -> float { return (float)(100 * advanture->Level); }
        };

        mAdvantureConfigBaseAwardExpExpressions = new AdvantureConfigBaseAwardExpExpression[NUM_ROWS_ADVANTURE_CONFIG_BASEAWARDEXP] {
            [](const AdvantureData* advanture) -> float { return (float)(48+36*advanture->Level); }
        };

        mAdvantureEventDelayExpressions = new AdvantureEventDelayExpression[NUM_ROWS_ADVANTURE_EVENT_DELAY] {
            sExpDefaultAdvantureEventDelay,
            sExpDefaultAdvantureEventDelay,
            [](const AdvantureEventData* advantureevent) -> float { return (float)(advantureevent->Random(600, 3000)); },
            [](const AdvantureEventData* advantureevent) -> float { return (float)(advantureevent->Random(14400, 28800)); },
            [](const AdvantureEventData* advantureevent) -> float { return (float)(advantureevent->Random(7200, 14400)); },
            [](const AdvantureEventData* advantureevent) -> float { return (float)(40 * 60); },
            [](const AdvantureEventData* advantureevent) -> float { return (float)(7200); },
            sExpDefaultAdvantureEventDelay,
            [](const AdvantureEventData* advantureevent) -> float { return (float)(40 * 60); }
        };

        mAwardAwardExpExpressions = new AwardAwardExpExpression[NUM_ROWS_AWARD_AWARD_EXP] {
            [](const AwardData* award) -> float { return (float)(40 + award->Level * 24); },
            [](const AwardData* award) -> float { return (float)(60 + award->Level * 48); },
            [](const AwardData* award) -> float { return (float)(80 + award->Level * 60); },
            [](const AwardData* award) -> float { return (float)(100 + award->Level * 72); },
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            [](const AwardData* award) -> float { return (float)(100 + award->Level * 50); },
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(10000); },
            [](const AwardData* award) -> float { return (float)(50000); },
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            [](const AwardData* award) -> float { return (float)(20 + award->Level * 6); },
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            [](const AwardData* award) -> float { return (float)(42 + award->Level * 26); },
            [](const AwardData* award) -> float { return (float)(10 + award->Level * 12); },
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            [](const AwardData* award) -> float { return (float)(160 + award->Level * 60); },
            [](const AwardData* award) -> float { return (float)(80+award->Round*80); },
            [](const AwardData* award) -> float { return (float)(180+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(280+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(380+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(480+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(580+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(680+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(880+award->Round*100); },
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            [](const AwardData* award) -> float { return (float)(40 + award->Level * 16); },
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp,
            sExpDefaultAwardAwardExp
        };

        mAwardAwardExpHeroExpressions = new AwardAwardExpHeroExpression[NUM_ROWS_AWARD_AWARD_EXPHERO] {
            [](const AwardData* award) -> float { return (float)(20 + award->Level * 16); },
            [](const AwardData* award) -> float { return (float)(36 + award->Level * 24); },
            [](const AwardData* award) -> float { return (float)(48 + award->Level * 32); },
            [](const AwardData* award) -> float { return (float)(56 + award->Level * 40); },
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            [](const AwardData* award) -> float { return (float)(10 + award->Level * 5); },
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            [](const AwardData* award) -> float { return (float)(24+ award->Level * 18); },
            [](const AwardData* award) -> float { return (float)(6 + award->Level * 8); },
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            [](const AwardData* award) -> float { return (float)(80+award->Round*40); },
            [](const AwardData* award) -> float { return (float)(180+award->Round*60); },
            [](const AwardData* award) -> float { return (float)(240+award->Round*60); },
            [](const AwardData* award) -> float { return (float)(320+award->Round*60); },
            [](const AwardData* award) -> float { return (float)(400+award->Round*60); },
            [](const AwardData* award) -> float { return (float)(480+award->Round*60); },
            [](const AwardData* award) -> float { return (float)(560+award->Round*60); },
            [](const AwardData* award) -> float { return (float)(640+award->Round*60); },
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            [](const AwardData* award) -> float { return (float)(36 + award->Level * 12); },
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero,
            sExpDefaultAwardAwardExpHero
        };

        mAwardAwardCoinExpressions = new AwardAwardCoinExpression[NUM_ROWS_AWARD_AWARD_COIN] {
            [](const AwardData* award) -> float { return (float)(400+award->Level * 68); },
            [](const AwardData* award) -> float { return (float)(600+award->Level * 80); },
            [](const AwardData* award) -> float { return (float)(800+award->Level * 96); },
            [](const AwardData* award) -> float { return (float)(1000+award->Level * 108); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(2000); },
            [](const AwardData* award) -> float { return (float)(10000); },
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            [](const AwardData* award) -> float { return (float)(award->Random(100, 500)); },
            [](const AwardData* award) -> float { return (float)(award->Random(10000, 50000)); },
            [](const AwardData* award) -> float { return (float)(award->Random(1000000, 5000000)); },
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            [](const AwardData* award) -> float { return (float)((100 + award->Level * 10) * (1 + award->Rate)); },
            [](const AwardData* award) -> float { return (float)(100 * award->Round); },
            [](const AwardData* award) -> float { return (float)(200 * award->Round); },
            [](const AwardData* award) -> float { return (float)(400+award->Level *80); },
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            [](const AwardData* award) -> float { return (float)(2000+award->Level * 400); },
            [](const AwardData* award) -> float { return (float)(160+award->Round*80); },
            [](const AwardData* award) -> float { return (float)(360+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(540+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(760+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(960+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(1160+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(1360+award->Round*100); },
            [](const AwardData* award) -> float { return (float)(1760+award->Round*100); },
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            [](const AwardData* award) -> float { return (float)(10000); },
            [](const AwardData* award) -> float { return (float)(10000); },
            [](const AwardData* award) -> float { return (float)(10000); },
            [](const AwardData* award) -> float { return (float)(10000); },
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            sExpDefaultAwardAwardCoin,
            [](const AwardData* award) -> float { return (float)(10000); },
            [](const AwardData* award) -> float { return (float)(20000); },
            [](const AwardData* award) -> float { return (float)(50000); },
            [](const AwardData* award) -> float { return (float)(80000); },
            [](const AwardData* award) -> float { return (float)(100000); },
            [](const AwardData* award) -> float { return (float)(200000); },
            [](const AwardData* award) -> float { return (float)(300000); },
            [](const AwardData* award) -> float { return (float)(400000); },
            [](const AwardData* award) -> float { return (float)(500000); }
        };

        mAwardAwardGoldExpressions = new AwardAwardGoldExpression[NUM_ROWS_AWARD_AWARD_GOLD] {
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(1000); },
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            [](const AwardData* award) -> float { return (float)(1 * award->Round); },
            [](const AwardData* award) -> float { return (float)(2 * award->Round); },
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            [](const AwardData* award) -> float { return (float)(50); },
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            [](const AwardData* award) -> float { return (float)(1200); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(1200); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(100); },
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            sExpDefaultAwardAwardGold,
            [](const AwardData* award) -> float { return (float)(2000); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(2000); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(5000); },
            [](const AwardData* award) -> float { return (float)(4000); },
            [](const AwardData* award) -> float { return (float)(3000); },
            [](const AwardData* award) -> float { return (float)(2000); },
            [](const AwardData* award) -> float { return (float)(1500); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(900); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(700); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(5000); },
            [](const AwardData* award) -> float { return (float)(4000); },
            [](const AwardData* award) -> float { return (float)(3000); },
            [](const AwardData* award) -> float { return (float)(2000); },
            [](const AwardData* award) -> float { return (float)(1500); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(900); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(700); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(5000); },
            [](const AwardData* award) -> float { return (float)(4000); },
            [](const AwardData* award) -> float { return (float)(3000); },
            [](const AwardData* award) -> float { return (float)(2000); },
            [](const AwardData* award) -> float { return (float)(1500); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(900); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(700); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(400); },
            [](const AwardData* award) -> float { return (float)(300); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(50); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(400); },
            [](const AwardData* award) -> float { return (float)(300); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(50); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(400); },
            [](const AwardData* award) -> float { return (float)(300); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(50); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(500); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(2000); },
            [](const AwardData* award) -> float { return (float)(3000); },
            [](const AwardData* award) -> float { return (float)(4000); },
            [](const AwardData* award) -> float { return (float)(5000); }
        };

        mAwardAwardContributionExpressions = new AwardAwardContributionExpression[NUM_ROWS_AWARD_AWARD_CONTRIBUTION] {
            [](const AwardData* award) -> float { return (float)(4 + award->Times * 2); },
            [](const AwardData* award) -> float { return (float)(4 + award->Times * 2); },
            [](const AwardData* award) -> float { return (float)(4 + award->Times * 2); },
            [](const AwardData* award) -> float { return (float)(4 + award->Times * 2); },
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            [](const AwardData* award) -> float { return (float)(4 + award->Times * 2); },
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            [](const AwardData* award) -> float { return (float)(4 + award->Times * 2); },
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution,
            sExpDefaultAwardAwardContribution
        };

        mAwardAwardReputationExpressions = new AwardAwardReputationExpression[NUM_ROWS_AWARD_AWARD_REPUTATION] {
            [](const AwardData* award) -> float { return (float)(2 + award->Times * 2); },
            [](const AwardData* award) -> float { return (float)(2 + award->Times * 2); },
            [](const AwardData* award) -> float { return (float)(2 + award->Times * 2); },
            [](const AwardData* award) -> float { return (float)(2 + award->Times * 2); },
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            [](const AwardData* award) -> float { return (float)(2 + award->Times * 2); },
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            [](const AwardData* award) -> float { return (float)(2 + award->Times * 2); },
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(8); },
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(12); },
            [](const AwardData* award) -> float { return (float)(14); },
            [](const AwardData* award) -> float { return (float)(16); },
            [](const AwardData* award) -> float { return (float)(18); },
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(22); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(1000); },
            [](const AwardData* award) -> float { return (float)(800); },
            [](const AwardData* award) -> float { return (float)(600); },
            [](const AwardData* award) -> float { return (float)(200); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(3); },
            [](const AwardData* award) -> float { return (float)(2); },
            [](const AwardData* award) -> float { return (float)(1); },
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(80); },
            [](const AwardData* award) -> float { return (float)(60); },
            [](const AwardData* award) -> float { return (float)(40); },
            [](const AwardData* award) -> float { return (float)(30); },
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(18); },
            [](const AwardData* award) -> float { return (float)(16); },
            [](const AwardData* award) -> float { return (float)(14); },
            [](const AwardData* award) -> float { return (float)(12); },
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(5); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(80); },
            [](const AwardData* award) -> float { return (float)(60); },
            [](const AwardData* award) -> float { return (float)(40); },
            [](const AwardData* award) -> float { return (float)(30); },
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(18); },
            [](const AwardData* award) -> float { return (float)(16); },
            [](const AwardData* award) -> float { return (float)(14); },
            [](const AwardData* award) -> float { return (float)(12); },
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(5); },
            [](const AwardData* award) -> float { return (float)(100); },
            [](const AwardData* award) -> float { return (float)(80); },
            [](const AwardData* award) -> float { return (float)(60); },
            [](const AwardData* award) -> float { return (float)(40); },
            [](const AwardData* award) -> float { return (float)(30); },
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(18); },
            [](const AwardData* award) -> float { return (float)(16); },
            [](const AwardData* award) -> float { return (float)(14); },
            [](const AwardData* award) -> float { return (float)(12); },
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(5); },
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(16); },
            [](const AwardData* award) -> float { return (float)(12); },
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(8); },
            [](const AwardData* award) -> float { return (float)(6); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(2); },
            [](const AwardData* award) -> float { return (float)(2); },
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(16); },
            [](const AwardData* award) -> float { return (float)(12); },
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(8); },
            [](const AwardData* award) -> float { return (float)(6); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(2); },
            [](const AwardData* award) -> float { return (float)(2); },
            [](const AwardData* award) -> float { return (float)(20); },
            [](const AwardData* award) -> float { return (float)(16); },
            [](const AwardData* award) -> float { return (float)(12); },
            [](const AwardData* award) -> float { return (float)(10); },
            [](const AwardData* award) -> float { return (float)(8); },
            [](const AwardData* award) -> float { return (float)(6); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(4); },
            [](const AwardData* award) -> float { return (float)(2); },
            [](const AwardData* award) -> float { return (float)(2); },
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation,
            sExpDefaultAwardAwardReputation
        };

        mEnemyTeamMember1Conditions = new EnemyTeamMember1Condition[NUM_ROWS_ENEMY_TEAM_MEMBER1] {
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); }
        };

        mEnemyTeamMember2Conditions = new EnemyTeamMember2Condition[NUM_ROWS_ENEMY_TEAM_MEMBER2] {
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember2,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            sCondDefaultEnemyTeamMember2,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); }
        };

        mEnemyTeamMember3Conditions = new EnemyTeamMember3Condition[NUM_ROWS_ENEMY_TEAM_MEMBER3] {
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember3,
            sCondDefaultEnemyTeamMember3,
            sCondDefaultEnemyTeamMember3,
            sCondDefaultEnemyTeamMember3,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(2)); },
            sCondDefaultEnemyTeamMember3,
            sCondDefaultEnemyTeamMember3,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember3,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); }
        };

        mEnemyTeamMember4Conditions = new EnemyTeamMember4Condition[NUM_ROWS_ENEMY_TEAM_MEMBER4] {
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember4,
            sCondDefaultEnemyTeamMember4,
            sCondDefaultEnemyTeamMember4,
            sCondDefaultEnemyTeamMember4,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(5)); },
            sCondDefaultEnemyTeamMember4,
            sCondDefaultEnemyTeamMember4,
            sCondDefaultEnemyTeamMember4,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember4,
            sCondDefaultEnemyTeamMember4,
            sCondDefaultEnemyTeamMember4,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); }
        };

        mEnemyTeamMember5Conditions = new EnemyTeamMember5Condition[NUM_ROWS_ENEMY_TEAM_MEMBER5] {
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->soldier(4)); },
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember5,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            sCondDefaultEnemyTeamMember5,
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); },
            [](const EnemyFilterData* enemyfilter) -> bool { return (bool)(enemyfilter->force(3)); }
        };

        mHeroLearnPropertyLearnPropertyExpExpressions = new HeroLearnPropertyLearnPropertyExpExpression[NUM_ROWS_HERO_LEARNPROPERTY_LEARNPROPERTYEXP] {
            [](const LearnPropertyData* learnproperty) -> float { return (float)((5+learnproperty->Property/2)*0.5f); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)((5+learnproperty->Property/2)); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)((5+learnproperty->Property/2)*1.2f); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)((5+learnproperty->Property/2)*1.4f); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)((5+learnproperty->Property/2)*1.6f); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)((5+learnproperty->Property/2)*1.8f); }
        };

        mHeroLearnPropertyLearnPropertyCritAddExpressions = new HeroLearnPropertyLearnPropertyCritAddExpression[NUM_ROWS_HERO_LEARNPROPERTY_LEARNPROPERTYCRITADD] {
            [](const LearnPropertyData* learnproperty) -> float { return (float)(learnproperty->Luck-85); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)(learnproperty->Luck-80); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)(learnproperty->Luck-75); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)(learnproperty->Luck-70); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)(learnproperty->Luck-65); },
            [](const LearnPropertyData* learnproperty) -> float { return (float)(learnproperty->Luck-60); }
        };

        mHeroLearnSkillLearnSkillExpExpressions = new HeroLearnSkillLearnSkillExpExpression[NUM_ROWS_HERO_LEARNSKILL_LEARNSKILLEXP] {
            [](const LearnSkillData* learnskill) -> float { return (float)(learnskill->Wisdom / 4); }
        };

        mHeroLearnSkillLearnSkillCritAddExpressions = new HeroLearnSkillLearnSkillCritAddExpression[NUM_ROWS_HERO_LEARNSKILL_LEARNSKILLCRITADD] {
            [](const LearnSkillData* learnskill) -> float { return (float)(learnskill->Luck-80); }
        };

        mQuestQuestEffectExpressions = new QuestQuestEffectExpression[NUM_ROWS_QUEST_QUEST_EFFECT] {
            [](const QuestData* quest) -> float { return (float)(quest->Wisdom / 4 * 0.6f + quest->Leadership / 4 * 0.4f); },
            [](const QuestData* quest) -> float { return (float)(quest->Wisdom / 4 * 0.8f + quest->Leadership / 4 * 0.2f); },
            [](const QuestData* quest) -> float { return (float)(quest->Strength / 4 * 0.5f + quest->Leadership / 4 * 0.5f); },
            sExpDefaultQuestQuestEffect,
            [](const QuestData* quest) -> float { return (float)(5); },
            [](const QuestData* quest) -> float { return (float)(200 * (100 + (quest->Leadership - 80) / 2.0f + (quest->Strength - 80) / 4.0f) / 100.0f * (100 + (quest->Charm - 80)) / 100.0f); },
            sExpDefaultQuestQuestEffect
        };

        mResourcePlayerNumberExpressions = new ResourcePlayerNumberExpression[NUM_ROWS_RESOURCE_PLAYER_NUMBER] {
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 200 * 3 * 3); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 40 * 3 * 3); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 25 * 3 * 3); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 20 * 3 * 3); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 200 * 4 * 4); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 40 * 4 * 4); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 25 * 4 * 4); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 20 * 4 * 4); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 200 * 5 * 5); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 40 * 5 * 5); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 25 * 5 * 5); },
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Level * 20 * 5 * 5); }
        };

        mResourcePlayerGenerateProductExpressions = new ResourcePlayerGenerateProductExpression[NUM_ROWS_RESOURCE_PLAYERGENERATE_PRODUCT] {
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Soldier / 50); }
        };

        mResourcePlayerGenerateMaxExpressions = new ResourcePlayerGenerateMaxExpression[NUM_ROWS_RESOURCE_PLAYERGENERATE_MAX] {
            [](const ResourceNumberData* resourcenumber) -> float { return (float)(resourcenumber->Soldier * 1.2f); }
        };

        mWorldCityPopulationSpeedPopulationSpeedExpressions = new WorldCityPopulationSpeedPopulationSpeedExpression[NUM_ROWS_WORLDCITY_POPULATIONSPEED_POPULATIONSPEED] {
            [](const PopulationData* population) -> float { return (float)(100); },
            [](const PopulationData* population) -> float { return (float)(200); },
            [](const PopulationData* population) -> float { return (float)(300); },
            [](const PopulationData* population) -> float { return (float)(400); }
        };
	}
};

#endif // !EXPRESSIONS_H
